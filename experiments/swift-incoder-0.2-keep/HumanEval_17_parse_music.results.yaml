language: swift
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last_note = \"\"\n    var last_beat\
    \ = 0\n    var last_note_index = 0\n    var last_beat_index = 0\n    var last_note_index2\
    \ = 0\n    var last_beat_index2 = 0\n    var last_note_index3 = 0\n    var last_beat_index3\
    \ = 0\n    var last_note_index4 = 0\n    var last_beat_index4 = 0\n    var last_note_index5\
    \ = 0\n    var last_beat_index5 = 0\n    var last_note_index6 = 0\n    var last_beat_index6\
    \ = 0\n    var last_note_index7 = 0\n    var last_beat_index7 = 0\n    var last_note_index8\
    \ = 0\n    var last_beat_index8 = 0\n    var last_note_index9 = 0\n    var last_beat_index9\
    \ = 0\n    var last_note_index10 = 0\n    var last_beat_index10 = 0\n    var last_note_index11\
    \ = 0\n    var last_beat_index11 = 0\n    var last_note_index12 = 0\n    var last_beat_index12\
    \ = 0\n    var last_note_index13 = 0\n    var last_beat_index13 = 0\n    var last_note_index14\
    \ = 0\n    var last_beat_index14 = 0\n    var last_note_index15 = 0\n    var last_beat_index15\
    \ = 0\n    var last_note_index16 = 0\n    var last_beat_index16 = 0\n    var last_note_index17\
    \ = 0\n    var last_beat_index17 = 0\n    var last_note_index18 = 0\n    var last_beat_index18\
    \ = 0\n    var last_note_index19 = 0\n    var last_beat_index19 = 0\n    var last_note_index20\
    \ = 0\n    var last_beat_index20 = 0\n    var last_note_index21 = 0\n    var last_beat_index21\
    \ = 0\n    var last_note_index22 = 0\n    var last_beat_index22 = 0\n    var last_note_index23\
    \ = 0\n    var last_beat_index23 = 0\n    var last_note_index24 = 0\n    var last_beat_index24\
    \ = 0\n    var last_note_index25 = 0\n    var last_beat_index25 = 0\n    var last_note_index26\
    \ = 0\n    var last_beat_index26 = 0\n    var last_note_index27 = 0\n    var last_beat_index27\
    \ = 0\n    var last_note_index28 = 0\n    var last_beat_index28 = 0\n    var last_note_index29\
    \ = 0\n    var last_beat_index29 = 0\n    var last_note_index30 = 0\n    var last_beat_index30\
    \ = 0\n    var last_note_index31 = 0\n    var last_beat_index31 = 0\n    var last_note_index32\
    \ = 0\n    var last_beat_index32 = 0\n    var last_note_index33 = 0\n    var last_beat_index33\
    \ = 0\n    var last_note_index34 = 0\n    var last_beat_index34 = 0\n    var last_note_index35\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6fmgbceb.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp6fmgbceb.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp6fmgbceb.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp6fmgbceb.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmp6fmgbceb.swift:16:9: warning: initialization\
    \ of variable 'last_note' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var last_note = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp6fmgbceb.swift:17:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp6fmgbceb.swift:18:9: warning: initialization of variable 'last_note_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_index = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp6fmgbceb.swift:19:9:\
    \ warning: initialization of variable 'last_beat_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp6fmgbceb.swift:20:9: warning: initialization\
    \ of variable 'last_note_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp6fmgbceb.swift:21:9: warning: initialization of variable 'last_beat_index2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp6fmgbceb.swift:22:9:\
    \ warning: initializ"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_index = 0\n    var last_note_index\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beat_index =\
    \ 0\n    var last_note_beat = 0\n    var last_note_beat_index = 0\n    var last_note_beat_index2\
    \ = 0\n    var last_note_beat_index3 = 0\n    var last_note_beat_index4 = 0\n\
    \    var last_note_beat_index5 = 0\n    var last_note_beat_index6 = 0\n    var\
    \ last_note_beat_index7 = 0\n    var last_note_beat_index8 = 0\n    var last_note_beat_index9\
    \ = 0\n    var last_note_beat_index10 = 0\n    var last_note_beat_index11 = 0\n\
    \    var last_note_beat_index12 = 0\n    var last_note_beat_index13 = 0\n    var\
    \ last_note_beat_index14 = 0\n    var last_note_beat_index15 = 0\n    var last_note_beat_index16\
    \ = 0\n    var last_note_beat_index17 = 0\n    var last_note_beat_index18 = 0\n\
    \    var last_note_beat_index19 = 0\n    var last_note_beat_index20 = 0\n    var\
    \ last_note_beat_index21 = 0\n    var last_note_beat_index22 = 0\n    var last_note_beat_index23\
    \ = 0\n    var last_note_beat_index24 = 0\n    var last_note_beat_index25 = 0\n\
    \    var last_note_beat_index26 = 0\n    var last_note_beat_index27 = 0\n    var\
    \ last_note_beat_index28 = 0\n    var last_note_beat_index29 = 0\n    var last_note_beat_index30\
    \ = 0\n    var last_note_beat_index31 = 0\n    var last_note_beat_index32 = 0\n\
    \    var last_note_beat_index33 = 0\n    var last_note_beat_index34 = 0\n    var\
    \ last_note_beat_index35 = 0\n    var last_note_beat_index36 = 0\n    var last_note_beat_index37\
    \ = 0\n    var last_note_beat_index38 = 0\n    var last_note_beat_index39 = 0\n\
    \    var last_note_beat_index40 = 0\n    var last_note_beat_index41 = 0\n    var\
    \ last_note_beat_index42 = 0\n    var last_note_beat_index43 = 0\n    var last_note_beat_index44\
    \ = 0\n    var last_note_beat_index45 = 0\n    var last_note_beat_index46 = 0\n\
    \    var last_note_beat_index47 = 0\n    var last_note_beat_index48 = 0\n    var\
    \ last_note_beat_index49 = 0\n    var last_note_beat_index50 = 0\n    var last_note_beat_index51\
    \ = 0\n    var last_note_beat_index52 = 0\n    var last_note_beat_index53 = 0\n\
    \    var last_note_beat_index54 = 0\n    var last_note_beat_index55 = 0\n    var\
    \ last_note_beat_index56 = 0\n    var last_note_beat_index57 = 0\n    var last_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjyw6_i7z.swift:79:9: error: type annotation missing in pattern\n\
    \    var last_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n \
    \   var last_note = 0\n    var last_last_beat = 0\n    var last_last_note = 0\n\
    \    var last_last_last_beat = 0\n    var last_last_last_note = 0\n    var last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_last_note = 0\n\
    \    var last_last_last_last_last_last_last_last_last_last_last_beat = 0\n   \
    \ var last_last_last_last_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptf165z4d.swift:27:9: error: invalid redeclaration of 'last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_beat = 0\n        ^\n/tmp/tmptf165z4d.swift:25:9:\
    \ note: 'last_last_last_last_last_beat' previously declared here\n    var last_last_last_last_last_beat\
    \ = 0\n        ^\n/tmp/tmptf165z4d.swift:28:9: error: invalid redeclaration of\
    \ 'last_last_last_last_last_note'\n    var last_last_last_last_last_note = 0\n\
    \        ^\n/tmp/tmptf165z4d.swift:26:9: note: 'last_last_last_last_last_note'\
    \ previously declared here\n    var last_last_last_last_last_note = 0\n      \
    \  ^\n/tmp/tmptf165z4d.swift:31:9: error: invalid redeclaration of 'last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmptf165z4d.swift:29:9:\
    \ note: 'last_last_last_last_last_last_beat' previously declared here\n    var\
    \ last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmptf165z4d.swift:32:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_note'\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmptf165z4d.swift:30:9:\
    \ note: 'last_last_last_last_last_last_note' previously declared here\n    var\
    \ last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmptf165z4d.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmptf165z4d.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmptf165z4d.swift:36:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmptf165z4d.swift:34:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmptf165z4d.swift:39:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmptf165z4d.sw"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_length = 4\n    for _ in\
    \ 0..<music_string.count {\n        let char = music_string[current_beat]\n  \
    \      if char == \"o\" {\n            beats.append(current_beat)\n          \
    \  current_beat += current_note_length\n            current_note = music_string[current_beat]\n\
    \            current_note_length = 1\n        } else if char == \"|\" {\n    \
    \        beats.append(current_beat)\n            current_beat += current_note_length\n\
    \            current_note = music_string[current_beat]\n            current_note_length\
    \ = 2\n        } else if char == \".\" {\n            beats.append(current_beat)\n\
    \            current_beat += current_note_length\n            current_note = music_string[current_beat]\n\
    \            current_note_length = 1\n        } else {\n            current_note_length\
    \ = 1\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmperabzjfu.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmperabzjfu.swift:17:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let char = music_string[current_beat]\n\
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmperabzjfu.swift:21:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[current_beat]\n                     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmperabzjfu.swift:26:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[current_beat]\n                     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmperabzjfu.swift:31:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[current_beat]\n                     \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmperabzjfu.swift:14:9: warning: variable 'current_note'\
    \ was written to, but never read\n    var current_note = music_string[0]\n   \
    \     ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beats_count\
    \ = 0\n    var current_note_length = 0\n    for c in music_string {\n        if\
    \ c == 'o' {\n            if current_note != \"\" {\n                notes.append(current_note)\n\
    \                current_note = \"\"\n                current_beats_count = 0\n\
    \                current_note_length = 0\n            }\n            current_beat\
    \ = 0\n            current_beats_count = 0\n            current_note_length =\
    \ 0\n        } else if c == '|' {\n            if current_note != \"\" {\n   \
    \             notes.append(current_note)\n                current_note = \"\"\n\
    \                current_beats_count = 0\n                current_note_length\
    \ = 0\n            }\n            current_beat = 0\n            current_beats_count\
    \ = 0\n            current_note_length = 1\n        } else if c == ' ' {\n   \
    \         if current_note != \"\" {\n                notes.append(current_note)\n\
    \                current_note = \"\"\n                current_beats_count = 0\n\
    \                current_note_length = 0\n            }\n            current_beat\
    \ = 0\n            current_beats_count = 0\n            current_note_length =\
    \ 0\n        } else {\n            if current_note != \"\" {\n               \
    \ notes.append(current_note)\n                current_note = \"\"\n          \
    \      current_beats_count = 0\n                current_note_length = 0\n    \
    \        }\n            current_beat = 0\n            current_beats_count = 0\n\
    \            current_note_length = 1\n            current_note = String(c.unicodeScalars.first!)\n\
    \        }\n        current_beats_count += 1\n        if current_beats_count ==\
    \ 4 {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_beats_count = 1\n            current_note_length = 0\n  \
    \      }\n    }\n    if current_note != \"\" {\n        notes.append(current_note)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk47lkj66.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpk47lkj66.swift:29:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpk47lkj66.swift:39:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == ' ' {\n                       ^~~\n\
    \                       \" \"\n/tmp/tmpk47lkj66.swift:17:9: warning: variable\
    \ 'current_note_length' was written to, but never read\n    var current_note_length\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ last_note = String()\n    var last_beat = 0\n    for c in music_string {\n \
    \       if c == 'o' {\n            beats_count += 1\n            last_note = c\n\
    \            last_beat = 0\n        } else if c == '|' {\n            beats_count\
    \ += 1\n            last_note = c\n            last_beat = 1\n        } else if\
    \ c == '.' {\n            beats_count += 1\n            last_note = c\n      \
    \      last_beat = 2\n        } else {\n            beats.append(beats_count)\n\
    \            last_note = c\n            last_beat = 0\n            beats_count\
    \ = 0\n        }\n    }\n    beats.append(beats_count)\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpz12q0xzr.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpz12q0xzr.swift:21:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpz12q0xzr.swift:25:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpz12q0xzr.swift:19:25: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            last_note = c\n    \
    \                    ^\n/tmp/tmpz12q0xzr.swift:23:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            last_note = c\n          \
    \              ^\n/tmp/tmpz12q0xzr.swift:27:25: error: cannot assign value of\
    \ type 'Character' to type 'String'\n            last_note = c\n             \
    \           ^\n/tmp/tmpz12q0xzr.swift:31:25: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            last_note = c\n                  \
    \      ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_octave = 0\n    var current_note_is_octave\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpznkpu746.swift:18:9: error: invalid redeclaration of 'current_note_is_rest'\n\
    \    var current_note_is_rest = false\n        ^\n/tmp/tmpznkpu746.swift:17:9:\
    \ note: 'current_note_is_rest' previously declared here\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpznkpu746.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_is_rest'\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpznkpu746.swift:17:9: note: 'current_note_is_rest' previously declared\
    \ here\n    var current_note_is_rest = false\n        ^\n/tmp/tmpznkpu746.swift:20:9:\
    \ error: invalid redeclaration of 'current_note_is_rest'\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpznkpu746.swift:17:9: note: 'current_note_is_rest'\
    \ previously declared here\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpznkpu746.swift:21:9: error: invalid redeclaration of 'current_note_is_rest'\n\
    \    var current_note_is_rest = false\n        ^\n/tmp/tmpznkpu746.swift:17:9:\
    \ note: 'current_note_is_rest' previously declared here\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpznkpu746.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_is_rest'\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpznkpu746.swift:17:9: note: 'current_note_is_rest' previously declared\
    \ here\n    var current_note_is_rest = false\n        ^\n/tmp/tmpznkpu746.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_is_rest'\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpznkpu746.swift:17:9: note: 'current_note_is_rest'\
    \ previously declared here\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpznkpu746.swift:24:9: error: invalid redeclaration of 'current_note_is_rest'\n\
    \    var current_note_is_rest = false\n        ^\n/tmp/tmpznkpu746.swift:17:9:\
    \ note: 'current_note_is_rest' previously declared here\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpznkpu746.swift:25:9: error: invalid redeclaration\
    \ of 'current_note_is_rest'\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpznkpu746.swift:17:9: note: 'current_note_is_rest' previously declared\
    \ here\n    var"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last = 0\n    var last_beat = 0\n    var last_note = 0\n    var\
    \ last_last_beat = 0\n    var last_last_note = 0\n    var last_last_last_beat\
    \ = 0\n    var last_last_last_note = 0\n    var last_last_last_last_beat = 0\n\
    \    var last_last_last_last_note = 0\n    var last_last_last_last_last_beat =\
    \ 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv_kyc78f.swift:30:9: error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:28:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:31:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:29:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:34:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:32:9:\
    \ note: 'last_last_last_last_last_last_last_last_beat' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_last_note' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:38:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:36:9:\
    \ note: 'last_last_last_last_last_last_last_last_last_beat' previously declared\
    \ here\n    var last_last_last_last_last_last_last_last_last_beat = 0\n      \
    \  ^\n/tmp/tmpv_kyc78f.swift:39:9: error: invalid redeclaration of 'last_last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:37:9:\
    \ note: 'last_last_last_last_last_last_last_last_last_note' previously declared\
    \ here\n    var last_last_last_las"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7avngu7i.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var notes = [String]()\n    var notes_length = 0\n    var notes_length_index\
    \ = 0\n    var notes_length_index2 = 0\n    var notes_length_index3 = 0\n    var\
    \ notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var notes_length_index7 = 0\n    var notes_length_index8 = 0\n    var\
    \ notes_length_index9 = 0\n    var notes_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var notes_length_index12 = 0\n    var notes_length_index13 = 0\n  \
    \  var notes_length_index14 = 0\n    var notes_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var notes_length_index17 = 0\n    var notes_length_index18 = 0\n  \
    \  var notes_length_index19 = 0\n    var notes_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var notes_length_index22 = 0\n    var notes_length_index23 = 0\n  \
    \  var notes_length_index24 = 0\n    var notes_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var notes_length_index27 = 0\n    var notes_length_index28 = 0\n  \
    \  var notes_length_index29 = 0\n    var notes_length_index30 = 0\n    var notes_length_index31\
    \ = 0\n    var notes_length_index32 = 0\n    var notes_length_index33 = 0\n  \
    \  var notes_length_index34 = 0\n    var notes_length_index35 = 0\n    var notes_length_index36\
    \ = 0\n    var notes_length_index37 = 0\n    var notes_length_index38 = 0\n  \
    \  var notes_length_index39 = 0\n    var notes_length_index40 = 0\n    var notes_length_index41\
    \ = 0\n    var notes_length_index42 = 0\n    var notes_length_index43 = 0\n  \
    \  var notes_length_index44 = 0\n    var notes_length_index45 = 0\n    var notes_length_index46\
    \ = 0\n    var notes_length_index47 = 0\n    var notes_length_index48 = 0\n  \
    \  var notes_length_index49 = 0\n    var notes_length_index50 = 0\n    var notes_length_index51\
    \ = 0\n    var notes_length_index52 = 0\n    var notes_length_index53 = 0\n  \
    \  var notes_length_index54 = 0\n    var notes_length_index55 = 0\n    var notes_length_index56\
    \ = 0\n    var notes_length_index57 = 0\n    var notes_length_index58 = 0\n  \
    \  var notes_length_index59 = 0\n    var notes_length_index60 = 0\n    var notes_length_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgkbb2020.swift:77:9: error: type annotation missing in pattern\n\
    \    var notes_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beat_index\
    \ = 0\n    var current_note_length = 0\n    for c in music_string {\n        if\
    \ c == 'o' {\n            if current_note_length != 0 {\n                notes.append(current_note)\n\
    \                current_note = \"\"\n                current_note_length = 0\n\
    \            }\n            current_beat = 0\n            current_beat_index =\
    \ 0\n            current_note = \"o\"\n        } else if c == '|' {\n        \
    \    if current_note_length != 0 {\n                notes.append(current_note)\n\
    \                current_note = \"\"\n                current_note_length = 0\n\
    \            }\n            current_beat = 0\n            current_beat_index =\
    \ 0\n            current_note = \"o|\"\n        } else if c == '.' {\n       \
    \     if current_note_length != 0 {\n                notes.append(current_note)\n\
    \                current_note = \"\"\n                current_note_length = 0\n\
    \            }\n            current_beat = 0\n            current_beat_index =\
    \ 0\n            current_note = \".|\"\n        } else {\n            current_note\
    \ += String(c)\n            current_note_length += 1\n        }\n        if current_note\
    \ == \"o|\" {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_beat_index += 1\n        } else if current_note ==\
    \ \".|\" {\n            beats.append(current_beat)\n            current_beat =\
    \ 0\n            current_beat_index += 1\n        } else if current_note == \"\
    o\" {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_beat_index += 1\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps9bw71eu.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmps9bw71eu.swift:28:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmps9bw71eu.swift:37:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_string\
    \ = \"\"\n    var current_note_string_index = 0\n    var current_note_string_index_index\
    \ = 0\n    var current_note_string_index2 = 0\n    var current_note_string_index3\
    \ = 0\n    var current_note_string_index4 = 0\n    var current_note_string_index5\
    \ = 0\n    var current_note_string_index6 = 0\n    var current_note_string_index7\
    \ = 0\n    var current_note_string_index8 = 0\n    var current_note_string_index9\
    \ = 0\n    var current_note_string_index10 = 0\n    var current_note_string_index11\
    \ = 0\n    var current_note_string_index12 = 0\n    var current_note_string_index13\
    \ = 0\n    var current_note_string_index14 = 0\n    var current_note_string_index15\
    \ = 0\n    var current_note_string_index16 = 0\n    var current_note_string_index17\
    \ = 0\n    var current_note_string_index18 = 0\n    var current_note_string_index19\
    \ = 0\n    var current_note_string_index20 = 0\n    var current_note_string_index21\
    \ = 0\n    var current_note_string_index22 = 0\n    var current_note_string_index23\
    \ = 0\n    var current_note_string_index24 = 0\n    var current_note_string_index25\
    \ = 0\n    var current_note_string_index26 = 0\n    var current_note_string_index27\
    \ = 0\n    var current_note_string_index28 = 0\n    var current_note_string_index29\
    \ = 0\n    var current_note_string_index30 = 0\n    var current_note_string_index31\
    \ = 0\n    var current_note_string_index32 = 0\n    var current_note_string_index33\
    \ = 0\n    var current_note_string_index34 = 0\n    var current_note_string_index35\
    \ = 0\n    var current_note_string_index36 = 0\n    var current_note_string_index37\
    \ = 0\n    var current_note_string_index38 = 0\n    var current_note_string_index39\
    \ = 0\n    var current_note_string_index40 = 0\n    var current_note_string_index41\
    \ = 0\n    var current_note_string_index42 = 0\n    var current_note_string_index43\
    \ = 0\n    var current_note_string_index44 = 0\n    var current_note_string_index45\
    \ = 0\n    var current_note_string_index46 = 0\n    var current_note_string_index47\
    \ = 0\n    var current_note_string_index48 = 0\n    var current_note_string_index49\
    \ = 0\n    var current_note_string_index50 = 0\n    var current_note_string_index51\
    \ = 0\n    var current_note_string_index52 = 0\n    var current_note_string_index53\
    \ = 0\n    var current_note_string_index54 = 0\n    var current_note_string_index55\
    \ = 0\n    var current_note_string_index56 = 0\n    var current_note_string_index57\
    \ = 0\n    var current_note_string_index58\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcwb6cnkm.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_string_index58\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpo8cghf1x.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpo8cghf1x.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmpo8cghf1x.swift:31:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpo8cghf1x.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_s"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_string = \"\"\n    var current_note_string_index =\
    \ 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n    var current_note_string_index\
    \ = 0\n    var current_note_string_index = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_zoa6hxk.swift:21:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:20:9:\
    \ note: 'current_note_string_index' previously declared here\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmp_zoa6hxk.swift:20:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:20:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmp_zoa6hxk.swift:24:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:20:9:\
    \ note: 'current_note_string_index' previously declared here\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmp_zoa6hxk.swift:20:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:20:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmp_zoa6hxk.swift:27:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:20:9:\
    \ note: 'current_note_string_index' previously declared here\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmp_zoa6hxk.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = String()\n    var current_note_index = -1\n    var current_note_length\
    \ = -1\n    var current_note_length_index = 0\n    var current_note_length = -1\n\
    \    var current_note_length_index = 0\n    var current_note_length = -1\n   \
    \ var current_note_length_index = 0\n    var current_note_length = -1\n    var\
    \ current_note_length_index = 0\n    var current_note_length = -1\n    var current_note_length_index\
    \ = 0\n    var current_note_length = -1\n    var current_note_length_index = 0\n\
    \    var current_note_length = -1\n    var current_note_length_index = 0\n   \
    \ var current_note_length = -1\n    var current_note_length_index = 0\n    var\
    \ current_note_length = -1\n    var current_note_length_index = 0\n    var current_note_length\
    \ = -1\n    var current_note_length_index = 0\n    var current_note_length = -1\n\
    \    var current_note_length_index = 0\n    var current_note_length = -1\n   \
    \ var current_note_length_index = 0\n    var current_note_length = -1\n    var\
    \ current_note_length_index = 0\n    var current_note_length = -1\n    var current_note_length_index\
    \ = 0\n    var current_note_length = -1\n    var current_note_length_index = 0\n\
    \    var current_note_length = -1\n    var current_note_length_index = 0\n   \
    \ var current_note_length = -1\n    var current_note_length_index = 0\n    var\
    \ current_note_length = -1\n    var current_note_length_index = 0\n    var current_note_length\
    \ = -1\n    var current_note_length_index = 0\n    var current_note_length = -1\n\
    \    var current_note_length_index = 0\n    var current_note_length = -1\n   \
    \ var current_note_length_index = 0\n    var current_note_length = -1\n    var\
    \ current_note_length_index = 0\n    var current_note_length = -1\n    var current_note_length_index\
    \ = 0\n    var current_note_length = -1\n    var current_note_length_index = 0\n\
    \    var current_note_length = -1\n    var current_note_length_index = 0\n   \
    \ var current_note_length = -1\n    var current_note_length_index = 0\n    var\
    \ current_note_length = -1\n    var current_note_length_index = 0\n    var current_note_length\
    \ = -1\n    var current_note_length_index = 0\n    var current_note_length = -1\n\
    \    var current_note_length_index = 0\n    var current_note_length = -1\n   \
    \ var current_note_length_index = 0\n    var current_note_length = -1\n    var\
    \ current_note_length_index = 0\n    var current_note_length = -1\n    var current_note_length_index\
    \ = 0\n    var current_note_length = -1\n    var current_note_length_index = 0\n\
    \    var current_note_length = -1\n    var current_note_length_index = 0\n   \
    \ var current_note_length = -1\n    var current_note_length_index = 0\n    var\
    \ current_note_length = -1\n    var current_note_length_index = 0\n    var current_note_length\
    \ = -1\n    var current_note_length_index = 0\n    var current_note_length = \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpec0q654u.swift:90:30: error: expected initial value after '='\n\
    \    var current_note_length = \n                             ^\n/tmp/tmpec0q654u.swift:18:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpec0q654u.swift:16:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmpec0q654u.swift:19:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpec0q654u.swift:17:9: note: 'current_note_length_index'\
    \ previously declared here\n    var current_note_length_index = 0\n        ^\n\
    /tmp/tmpec0q654u.swift:20:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = -1\n        ^\n/tmp/tmpec0q654u.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpec0q654u.swift:21:9: error: invalid redeclaration of\
    \ 'current_note_length_index'\n    var current_note_length_index = 0\n       \
    \ ^\n/tmp/tmpec0q654u.swift:17:9: note: 'current_note_length_index' previously\
    \ declared here\n    var current_note_length_index = 0\n        ^\n/tmp/tmpec0q654u.swift:22:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpec0q654u.swift:16:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmpec0q654u.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpec0q654u.swift:17:9: note: 'current_note_length_index'\
    \ previously declared here\n    var current_note_length_index = 0\n        ^\n\
    /tmp/tmpec0q654u.swift:24:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = -1\n        ^\n/tmp/tmpec0q654u.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpec0q654u.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_length_index'\n    "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beat_type =\
    \ \"\"\n    var last_beat_type_index = 0\n    var last_beat_type_index2 = 0\n\
    \    var last_beat_type_index3 = 0\n    var last_beat_type_index4 = 0\n    var\
    \ last_beat_type_index5 = 0\n    var last_beat_type_index6 = 0\n    var last_beat_type_index7\
    \ = 0\n    var last_beat_type_index8 = 0\n    var last_beat_type_index9 = 0\n\
    \    var last_beat_type_index10 = 0\n    var last_beat_type_index11 = 0\n    var\
    \ last_beat_type_index12 = 0\n    var last_beat_type_index13 = 0\n    var last_beat_type_index14\
    \ = 0\n    var last_beat_type_index15 = 0\n    var last_beat_type_index16 = 0\n\
    \    var last_beat_type_index17 = 0\n    var last_beat_type_index18 = 0\n    var\
    \ last_beat_type_index19 = 0\n    var last_beat_type_index20 = 0\n    var last_beat_type_index21\
    \ = 0\n    var last_beat_type_index22 = 0\n    var last_beat_type_index23 = 0\n\
    \    var last_beat_type_index24 = 0\n    var last_beat_type_index25 = 0\n    var\
    \ last_beat_type_index26 = 0\n    var last_beat_type_index27 = 0\n    var last_beat_type_index28\
    \ = 0\n    var last_beat_type_index29 = 0\n    var last_beat_type_index30 = 0\n\
    \    var last_beat_type_index31 = 0\n    var last_beat_type_index32 = 0\n    var\
    \ last_beat_type_index33 = 0\n    var last_beat_type_index34 = 0\n    var last_beat_type_index35\
    \ = 0\n    var last_beat_type_index36 = 0\n    var last_beat_type_index37 = 0\n\
    \    var last_beat_type_index38 = 0\n    var last_beat_type_index39 = 0\n    var\
    \ last_beat_type_index40 = 0\n    var last_beat_type_index41 = 0\n    var last_beat_type_index42\
    \ = 0\n    var last_beat_type_index43 = 0\n    var last_beat_type_index44 = 0\n\
    \    var last_beat_type_index45 = 0\n    var last_beat_type_index46 = 0\n    var\
    \ last_beat_type_index47 = 0\n    var last_beat_type_index48 = 0\n    var last_beat_type_index49\
    \ = 0\n    var last_beat_type_index50 = 0\n    var last_beat_type_index51 = 0\n\
    \    var last_beat_type_index52 = 0\n    var last_beat_type_index53 = 0\n    var\
    \ last_beat_type_index54 = 0\n    var last_beat_type_index55 = 0\n    var last_beat_type_index56\
    \ = 0\n    var last_beat_type_index57 = 0\n    var last_beat_type_index58 = 0\n\
    \    var last_beat_type_index59 = 0\n    var last_beat_type_index60 = 0\n    var\
    \ last_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2gdzqefv.swift:78:9: error: type annotation missing in pattern\n\
    \    var last_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_position\
    \ = 0\n    for c in music_string {\n        if c == 'o' {\n            if current_note\
    \ != \"\" {\n                notes.append(current_note)\n            }\n     \
    \       current_note = \"\"\n            current_beat = 0\n            current_position\
    \ = 0\n        } else if c == '|' {\n            if current_note != \"\" {\n \
    \               notes.append(current_note)\n            }\n            current_note\
    \ = \"\"\n            current_beat = 0\n            current_position = 0\n   \
    \     } else if c == '.' {\n            if current_note != \"\" {\n          \
    \      notes.append(current_note)\n            }\n            current_note = \"\
    \"\n            current_beat = 0\n            current_position = 0\n        }\
    \ else if c == 'o' {\n            current_note = String(current_beat)\n      \
    \      current_beat += 1\n        } else if c == '|' {\n            current_note\
    \ = String(current_beat)\n            current_beat += 1\n        } else if c ==\
    \ '.' {\n            current_note = String(current_beat)\n            current_beat\
    \ += 1\n        } else {\n            current_note += String(c)\n            current_position\
    \ += 1\n        }\n    }\n    if current_note != \"\" {\n        notes.append(current_note)\n\
    \    }\n    for note in notes {\n        beats.append(note.characters.count)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpf87rxl_m.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpf87rxl_m.swift:25:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpf87rxl_m.swift:32:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpf87rxl_m.swift:39:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == 'o' {\n             \
    \          ^~~\n                       \"o\"\n/tmp/tmpf87rxl_m.swift:42:24: error:\
    \ single-quoted string literal found, use '\"'\n        } else if c == '|' {\n\
    \                       ^~~\n                       \"|\"\n/tmp/tmpf87rxl_m.swift:45:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '.' {\n                       ^~~\n                       \".\"\n/tmp/tmpf87rxl_m.swift:57:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        beats.append(note.characters.count)\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_index = 0\n    var notes_length_index =\
    \ 0\n    var notes_length_string = \"\"\n    var notes_string = \"\"\n    var\
    \ notes_string_index = 0\n    var notes_string_length = 0\n    var notes_string_length_index\
    \ = 0\n    var notes_string_length_string = \"\"\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_length_string_index\
    \ = 0\n    var notes_string_length_string_index = 0\n    var notes_string_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpchmbfbfq.swift:24:9: error: invalid redeclaration of 'notes_string_length_string_index'\n\
    \    var notes_string_length_string_index = 0\n        ^\n/tmp/tmpchmbfbfq.swift:23:9:\
    \ note: 'notes_string_length_string_index' previously declared here\n    var notes_string_length_string_index\
    \ = 0\n        ^\n/tmp/tmpchmbfbfq.swift:25:9: error: invalid redeclaration of\
    \ 'notes_string_length_string_index'\n    var notes_string_length_string_index\
    \ = 0\n        ^\n/tmp/tmpchmbfbfq.swift:23:9: note: 'notes_string_length_string_index'\
    \ previously declared here\n    var notes_string_length_string_index = 0\n   \
    \     ^\n/tmp/tmpchmbfbfq.swift:26:9: error: invalid redeclaration of 'notes_string_length_string_index'\n\
    \    var notes_string_length_string_index = 0\n        ^\n/tmp/tmpchmbfbfq.swift:23:9:\
    \ note: 'notes_string_length_string_index' previously declared here\n    var notes_string_length_string_index\
    \ = 0\n        ^\n/tmp/tmpchmbfbfq.swift:27:9: error: invalid redeclaration of\
    \ 'notes_string_length_string_index'\n    var notes_string_length_string_index\
    \ = 0\n        ^\n/tmp/tmpchmbfbfq.swift:23:9: note: 'notes_string_length_string_index'\
    \ previously declared here\n    var notes_string_length_string_index = 0\n   \
    \     ^\n/tmp/tmpchmbfbfq.swift:28:9: error: invalid redeclaration of 'notes_string_length_string_index'\n\
    \    var notes_string_length_string_index = 0\n        ^\n/tmp/tmpchmbfbfq.swift:23:9:\
    \ note: 'notes_string_length_string_index' previously declared here\n    var notes_string_length_string_index\
    \ = 0\n        ^\n/tmp/tmpchmbfbfq.swift:29:9: error: invalid redeclaration of\
    \ 'notes_string_length_string_index'\n    var notes_string_length_string_index\
    \ = 0\n        ^\n/tmp/tmpchmbfbfq.swift:23:9: note: 'notes_string_length_string_index'\
    \ previously declared here\n    var notes_string_length_string_index = 0\n   \
    \     ^\n/tmp/tmpchmbfbfq.swift:30:9: error: invalid redeclaration of 'notes_string_length_string_index'\n\
    \    var notes_string_length_string_index = 0\n        ^\n/tmp/tmpchmbfbfq.swift:23:9:\
    \ note: 'notes_string_length_string_index' previously declared h"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string.characters.first!\n    var current_note_length =\
    \ music_string.characters.count\n    var current_note_length_index = 0\n    var\
    \ current_note_length_value = 0\n    var current_note_length_value_counter = 0\n\
    \    var current_note_length_value_counter_counter = 0\n    var current_note_length_value_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter = 0\n\
    \    var current_note_length_value_counter_counter_counter_counter_counter = 0\n\
    \    var current_note_length_value_counter_counter_counter_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvce_6qk4.swift:14:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var current_note = music_string.characters.first!\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvce_6qk4.swift:15:44: error: 'characters' is unavailable:\
    \ Please use String directly\n    var current_note_length = music_string.characters.count\n\
    \                                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvce_6qk4.swift:30:9: error: type annotation\
    \ missing in pattern\n    var current_note_length_value_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counte"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beats = 0\n\
    \    var last_notes = 0\n    var last_notes_beats = 0\n    var last_notes_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats = 0\n    var\
    \ last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beat\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmple20djby.swift:28:9: error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \        ^\n/tmp/tmple20djby.swift:27:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmple20djby.swift:29:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats'\n    var\
    \ last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n     \
    \   ^\n/tmp/tmple20djby.swift:27:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmple20djby.swift:30:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats'\n    var\
    \ last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n     \
    \   ^\n/tmp/tmple20djby.swift:27:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmple20djby.swift:32:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats'\n \
    \   var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmple20djby.swift:31:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmple20djby.swift:33:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats'\n \
    \   var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmple20djby.swift:31:9: note: 'last_notes_beats_beats_beats_beats_beats_beat"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n  \
    \  var lastBeat = 0\n    var lastBeatNote = 0\n    var lastBeatNoteBeat = 0\n\
    \    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat = 0\n    var\
    \ lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat =\
    \ 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBe\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdmodrjsk.swift:27:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpdmodrjsk.swift:33:9:\
    \ error: invalid redecl"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var last2 = 0\n    var\
    \ last3 = 0\n    var last4 = 0\n    var last5 = 0\n    var last6 = 0\n    var\
    \ last7 = 0\n    var last8 = 0\n    var last9 = 0\n    var last10 = 0\n    var\
    \ last11 = 0\n    var last12 = 0\n    var last13 = 0\n    var last14 = 0\n   \
    \ var last15 = 0\n    var last16 = 0\n    var last17 = 0\n    var last18 = 0\n\
    \    var last19 = 0\n    var last20 = 0\n    var last21 = 0\n    var last22 =\
    \ 0\n    var last23 = 0\n    var last24 = 0\n    var last25 = 0\n    var last26\
    \ = 0\n    var last27 = 0\n    var last28 = 0\n    var last29 = 0\n    var last30\
    \ = 0\n    var last31 = 0\n    var last32 = 0\n    var last33 = 0\n    var last34\
    \ = 0\n    var last35 = 0\n    var last36 = 0\n    var last37 = 0\n    var last38\
    \ = 0\n    var last39 = 0\n    var last40 = 0\n    var last41 = 0\n    var last42\
    \ = 0\n    var last43 = 0\n    var last44 = 0\n    var last45 = 0\n    var last46\
    \ = 0\n    var last47 = 0\n    var last48 = 0\n    var last49 = 0\n    var last50\
    \ = 0\n    var last51 = 0\n    var last52 = 0\n    var last53 = 0\n    var last54\
    \ = 0\n    var last55 = 0\n    var last56 = 0\n    var last57 = 0\n    var last58\
    \ = 0\n    var last59 = 0\n    var last60 = 0\n    var last61 = 0\n    var last62\
    \ = 0\n    var last63 = 0\n    var last64 = 0\n    var last65 = 0\n    var last66\
    \ = 0\n    var last67 = 0\n    var last68 = 0\n    var last69 = 0\n    var last70\
    \ = 0\n    var last71 = 0\n    var last72 = 0\n    var last73 = 0\n    var last74\
    \ = 0\n    var last75 = 0\n    var last76 = 0\n    var last77 = 0\n    var last78\
    \ = 0\n    var last79 = 0\n    var last80 = 0\n    var last81 = 0\n    var last82\
    \ = 0\n    var last83 = 0\n    var last84 = 0\n    var last85 = 0\n    var last86\
    \ = 0\n    var last87 = 0\n    var last88 = 0\n    var last89 = 0\n    var last90\
    \ = 0\n    var last91 = 0\n    var last92 = 0\n    var last93 = 0\n    var last94\
    \ = 0\n    var last95 = 0\n    var last96 = 0\n    var last97 = 0\n    var last98\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptzbtbl1w.swift:114:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmptzbtbl1w.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmptzbtbl1w.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmptzbtbl1w.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmptzbtbl1w.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmptzbtbl1w.swift:16:9: warning: initialization\
    \ of variable 'last' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmptzbtbl1w.swift:17:9:\
    \ warning: initialization of variable 'last2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last2 = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmptzbtbl1w.swift:18:9: warning: initialization of variable 'last3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last3 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmptzbtbl1w.swift:19:9: warning:\
    \ initialization of variable 'last4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last4 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmptzbtbl1w.swift:20:9:\
    \ warning: initialization of variable 'last5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last5 = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmptzbtbl1w.swift:21:9: warning: initialization of variable 'last6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last6 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmptzbtbl1w.swift:22:9: warning:\
    \ initialization of variable 'last7' was never used; consider replacing with assignment\
    \ to '_'"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var last2 = 0\n    var\
    \ last4 = 0\n    var last8 = 0\n    var last16 = 0\n    var last32 = 0\n    var\
    \ last64 = 0\n    var last128 = 0\n    var last256 = 0\n    var last512 = 0\n\
    \    var last1024 = 0\n    var last2048 = 0\n    var last4096 = 0\n    var last8192\
    \ = 0\n    var last16384 = 0\n    var last32768 = 0\n    var last65536 = 0\n \
    \   var last131072 = 0\n    var last262144 = 0\n    var last524288 = 0\n    var\
    \ last1048576 = 0\n    var last2097152 = 0\n    var last4194304 = 0\n    var last8388608\
    \ = 0\n    var last16777216 = 0\n    var last33554432 = 0\n    var last67108864\
    \ = 0\n    var last134217728 = 0\n    var last268435456 = 0\n    var last536870912\
    \ = 0\n    var last1073741824 = 0\n    var last2147483648 = 0\n    var last4294967296\
    \ = 0\n    var last8589934592 = 0\n    var last17179869184 = 0\n    var last34359738368\
    \ = 0\n    var last68719476736 = 0\n    var last137438953472 = 0\n    var last274877906944\
    \ = 0\n    var last549755813888 = 0\n    var last1099511627776 = 0\n    var last2199023255552\
    \ = 0\n    var last4398046511104 = 0\n    var last8796093022208 = 0\n    var last17592186044416\
    \ = 0\n    var last35184372088832 = 0\n    var last70368744177664 = 0\n    var\
    \ last140737488355328 = 0\n    var last281474976710656 = 0\n    var last562949953421312\
    \ = 0\n    var last1125899906842624 = 0\n    var last2251799813685248 = 0\n  \
    \  var last4503599627370496 = 0\n    var last9007199254740992 = 0\n    var last18014398509481984\
    \ = 0\n    var last36028797018963968 = 0\n    var last72057594037927936 = 0\n\
    \    var last144115188075855872 = 0\n    var last288230376151711744 = 0\n    var\
    \ last576460752303423488 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7asm11z9.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7asm11z9.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7asm11z9.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp7asm11z9.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmp7asm11z9.swift:16:9: warning: initialization\
    \ of variable 'last' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var last = 0\n    ~~~~^~~~\n    _\n/tmp/tmp7asm11z9.swift:17:9:\
    \ warning: initialization of variable 'last2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last2 = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmp7asm11z9.swift:18:9: warning: initialization of variable 'last4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last4 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp7asm11z9.swift:19:9: warning:\
    \ initialization of variable 'last8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last8 = 0\n    ~~~~^~~~~\n    _\n/tmp/tmp7asm11z9.swift:20:9:\
    \ warning: initialization of variable 'last16' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last16 = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmp7asm11z9.swift:21:9: warning: initialization of variable 'last32'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last32 = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp7asm11z9.swift:22:9: warning:\
    \ initialization of variable 'last64' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var last64 = 0\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmp7"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for note in music_string[1..] {\n      \
    \  switch note {\n        case \"o\":\n            beats.append(current_beat)\n\
    \            current_beat += 4\n        case \"o|\":\n            beats.append(current_beat)\n\
    \            current_beat += 2\n        case \".|\":\n            beats.append(current_beat)\n\
    \            current_beat += 1\n        default:\n            fatalError(\"Unexpected\
    \ note in music string: \\(note)\")\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmllrdy1z.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmllrdy1z.swift:15:31:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    for note\
    \ in music_string[1..] {\n                              ^~\n                 \
    \             ...\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1rmlh6an.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp1rmlh6an.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_string = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_note_length_string = \"\"\n    var current_note_length\
    \ = -1\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_p0jvf1u.swift:18:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = -1\n        ^\n/tmp/tmp_p0jvf1u.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = 0\n        ^\n/tmp/tmp_p0jvf1u.swift:19:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_string = \"\"\n  \
    \      ^\n/tmp/tmp_p0jvf1u.swift:17:9: note: 'current_note_length_string' previously\
    \ declared here\n    var current_note_length_string = \"\"\n        ^\n/tmp/tmp_p0jvf1u.swift:20:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp_p0jvf1u.swift:16:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = 0\n        ^\n/tmp/tmp_p0jvf1u.swift:21:9:\
    \ error: invalid redeclaration of 'current_note_length_string'\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmp_p0jvf1u.swift:17:9: note: 'current_note_length_string'\
    \ previously declared here\n    var current_note_length_string = \"\"\n      \
    \  ^\n/tmp/tmp_p0jvf1u.swift:22:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = -1\n        ^\n/tmp/tmp_p0jvf1u.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = 0\n        ^\n/tmp/tmp_p0jvf1u.swift:23:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_string = \"\"\n  \
    \      ^\n/tmp/tmp_p0jvf1u.swift:17:9: note: 'current_note_length_string' previously\
    \ declared here\n    var current_note_length_string = \"\"\n        ^\n/tmp/tmp_p0jvf1u.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp_p0jvf1u.swift:16:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = 0\n        ^\n/tmp/tmp_p0jvf1u.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string'\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmp_p0jvf1u.swift:17:9: note: 'current_note_length_string'\
    \ previou"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var last_note = 0\n    var last_note_value = 0\n    var last_note_length\
    \ = 0\n    var last_note_octave = 0\n    var last_note_octave_offset = 0\n   \
    \ var last_note_octave_length = 0\n    var last_note_octave_offset = 0\n    var\
    \ last_note_octave_length = 0\n    var last_note_octave_offset = 0\n    var last_note_octave_length\
    \ = 0\n    var last_note_octave_offset = 0\n    var last_note_octave_length =\
    \ 0\n    var last_note_octave_offset = 0\n    var last_note_octave_length = 0\n\
    \    var last_note_octave_offset = 0\n    var last_note_octave_length = 0\n  \
    \  var last_note_octave_offset = 0\n    var last_note_octave_length = 0\n    var\
    \ last_note_octave_offset = 0\n    var last_note_octave_length = 0\n    var last_note_octave_offset\
    \ = 0\n    var last_note_octave_length = 0\n    var last_note_octave_offset =\
    \ 0\n    var last_note_octave_length = 0\n    var last_note_octave_offset = 0\n\
    \    var last_note_octave_length = 0\n    var last_note_octave_offset = 0\n  \
    \  var last_note_octave_length = 0\n    var last_note_octave_offset = 0\n    var\
    \ last_note_octave_length = 0\n    var last_note_octave_offset = 0\n    var last_note_octave_length\
    \ = 0\n    var last_note_octave_offset = 0\n    var last_note_octave_length =\
    \ 0\n    var last_note_octave_offset = 0\n    var last_note_octave_length = 0\n\
    \    var last_note_octave_offset = 0\n    var last_note_octave_length = 0\n  \
    \  var last_note_octave_offset = 0\n    var last_note_octave_length = 0\n    var\
    \ last_note_octave_offset = 0\n    var last_note_octave_length = 0\n    var last_note_octave_offset\
    \ = 0\n    var last_note_octave_length = 0\n    var last_note_octave_offset =\
    \ 0\n    var last_note_octave_length = 0\n    var last_note_octave_offset = 0\n\
    \    var last_note_octave_length = 0\n    var last_note_octave_offset = 0\n  \
    \  var last_note_octave_length = 0\n    var last_note_octave_offset = 0\n    var\
    \ last_note_octave_length = 0\n    var last_note_octave_offset = 0\n    var last_note_octave_length\
    \ = 0\n    var last_note_octave_offset = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp__j981aj.swift:23:9: error: invalid redeclaration of 'last_note_octave_offset'\n\
    \    var last_note_octave_offset = 0\n        ^\n/tmp/tmp__j981aj.swift:21:9:\
    \ note: 'last_note_octave_offset' previously declared here\n    var last_note_octave_offset\
    \ = 0\n        ^\n/tmp/tmp__j981aj.swift:24:9: error: invalid redeclaration of\
    \ 'last_note_octave_length'\n    var last_note_octave_length = 0\n        ^\n\
    /tmp/tmp__j981aj.swift:22:9: note: 'last_note_octave_length' previously declared\
    \ here\n    var last_note_octave_length = 0\n        ^\n/tmp/tmp__j981aj.swift:25:9:\
    \ error: invalid redeclaration of 'last_note_octave_offset'\n    var last_note_octave_offset\
    \ = 0\n        ^\n/tmp/tmp__j981aj.swift:21:9: note: 'last_note_octave_offset'\
    \ previously declared here\n    var last_note_octave_offset = 0\n        ^\n/tmp/tmp__j981aj.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_octave_length'\n    var last_note_octave_length\
    \ = 0\n        ^\n/tmp/tmp__j981aj.swift:22:9: note: 'last_note_octave_length'\
    \ previously declared here\n    var last_note_octave_length = 0\n        ^\n/tmp/tmp__j981aj.swift:27:9:\
    \ error: invalid redeclaration of 'last_note_octave_offset'\n    var last_note_octave_offset\
    \ = 0\n        ^\n/tmp/tmp__j981aj.swift:21:9: note: 'last_note_octave_offset'\
    \ previously declared here\n    var last_note_octave_offset = 0\n        ^\n/tmp/tmp__j981aj.swift:28:9:\
    \ error: invalid redeclaration of 'last_note_octave_length'\n    var last_note_octave_length\
    \ = 0\n        ^\n/tmp/tmp__j981aj.swift:22:9: note: 'last_note_octave_length'\
    \ previously declared here\n    var last_note_octave_length = 0\n        ^\n/tmp/tmp__j981aj.swift:29:9:\
    \ error: invalid redeclaration of 'last_note_octave_offset'\n    var last_note_octave_offset\
    \ = 0\n        ^\n/tmp/tmp__j981aj.swift:21:9: note: 'last_note_octave_offset'\
    \ previously declared here\n    var last_note_octave_offset = 0\n        ^\n/tmp/tmp__j981aj.swift:30:9:\
    \ error: invalid redeclaration of 'last_note_octave_length'\n    var last_note_octave_length\
    \ = 0\n        ^\n/tmp/tmp__j981aj.swift:22:9: note: 'last_note_octave_length'"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ 'o' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = c\n        } else if c == '|' {\n            current_beat\
    \ += 1\n        } else if c == ' ' {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = c\n        } else {\n\
    \            current_note += c\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_ajcb5zb.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp_ajcb5zb.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmp_ajcb5zb.swift:22:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == ' ' {\n                       ^~~\n\
    \                       \" \"\n/tmp/tmp_ajcb5zb.swift:14:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_ajcb5zb.swift:27:26:\
    \ error: binary operator '+=' cannot be applied to two 'Character' operands\n\
    \            current_note += c\n            ~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n  \
    \  var lastBeat = 0\n    var lastBeatNote = 0\n    var lastBeatNoteBeat = 0\n\
    \    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat = 0\n    var\
    \ lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat =\
    \ 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n    var\
    \ lastBeatNoteBeatBeatBeatBeatBeat\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpj0h6g1_t.swift:27:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:29:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:31:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat' previously declared\
    \ here\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n       \
    \ ^\n/tmp/tmpj0h6g1_t.swift:33:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:31:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat' previously declared\
    \ here\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n       \
    \ ^\n/tmp/tmpj0h6g1_t.swift:34:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpj0h6g1_t.swift:31:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeatBeatBeat' previously declared\
    \ here\n    var l"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_index = 0\n    var note_length\
    \ = 0\n    var note_length_index = 0\n    var note_length_value = 0\n    var note_length_value_index\
    \ = 0\n    var note_length_value_value = 0\n    var note_length_value_value_index\
    \ = 0\n    var note_length_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = 0\n    var note_length_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpua9zrmiv.swift:26:9: error: invalid redeclaration of 'note_length_value_value_value_index'\n\
    \    var note_length_value_value_value_index = 0\n        ^\n/tmp/tmpua9zrmiv.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpua9zrmiv.swift:27:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmpua9zrmiv.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmpua9zrmiv.swift:28:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpua9zrmiv.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpua9zrmiv.swift:29:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmpua9zrmiv.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmpua9zrmiv.swift:30:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpua9zrmiv.swift:24:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpua9zrmiv.swift:31:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmpua9zrmiv.swift:25:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = 0\n        ^\n/tmp/tmpua9zrmiv.swift:32:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpua9zr"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_next_index\
    \ = 0\n    var current_note_length_string_next_value = 0\n    var current_note_length_string_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_value = 0\n    var current_note_length_string_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_value = 0\n    var current_note_length_string_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_value = 0\n    var\
    \ current_note_length_string_next_next_next_next_next_index = 0\n    var current_note_length_string_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n    var current_note_length_string_next_next_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9kymn9j_.swift:36:9: error: invalid redeclaration of 'current_note_length_string_next_next_next_next_next_next_next_next_index'\n\
    \    var current_note_length_string_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:34:9: note: 'current_note_length_string_next_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var current_note_length_string_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:37:9: error: invalid redeclaration of\
    \ 'current_note_length_string_next_next_next_next_next_next_next_next_value'\n\
    \    var current_note_length_string_next_next_next_next_next_next_next_next_value\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:35:9: note: 'current_note_length_string_next_next_next_next_next_next_next_next_value'\
    \ previously declared here\n    var current_note_length_string_next_next_next_next_next_next_next_next_value\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:42:9: error: invalid redeclaration of\
    \ 'current_note_length_string_next_next_next_next_next_next_next_next_next_next_index'\n\
    \    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:40:9: note: 'current_note_length_string_next_next_next_next_next_next_next_next_next_next_index'\
    \ previously declared here\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_index\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:43:9: error: invalid redeclaration of\
    \ 'current_note_length_string_next_next_next_next_next_next_next_next_next_next_value'\n\
    \    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:41:9: note: 'current_note_length_string_next_next_next_next_next_next_next_next_next_next_value'\
    \ previously declared here\n    var current_note_length_string_next_next_next_next_next_next_next_next_next_next_value\
    \ = 0\n        ^\n/tmp/tmp9kymn9j_.swift:44:9: error: invalid redeclaration of\
    \ 'current_note_length_string_next_next_next_next_next_next_next_"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmqlmgpv9.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_length\
    \ = 0\n    var current_note_length_string_length_index = 0\n    var current_note_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4yw8_055.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4yw8_055.swift:24:9: error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_beat = 0\n    var current_note_octave\
    \ = 0\n    var current_note_duration = 0\n    var current_note_duration_index\
    \ = 0\n    var current_note_duration_index2 = 0\n    var current_note_duration_index3\
    \ = 0\n    var current_note_duration_index4 = 0\n    var current_note_duration_index5\
    \ = 0\n    var current_note_duration_index6 = 0\n    var current_note_duration_index7\
    \ = 0\n    var current_note_duration_index8 = 0\n    var current_note_duration_index9\
    \ = 0\n    var current_note_duration_index10 = 0\n    var current_note_duration_index11\
    \ = 0\n    var current_note_duration_index12 = 0\n    var current_note_duration_index13\
    \ = 0\n    var current_note_duration_index14 = 0\n    var current_note_duration_index15\
    \ = 0\n    var current_note_duration_index16 = 0\n    var current_note_duration_index17\
    \ = 0\n    var current_note_duration_index18 = 0\n    var current_note_duration_index19\
    \ = 0\n    var current_note_duration_index20 = 0\n    var current_note_duration_index21\
    \ = 0\n    var current_note_duration_index22 = 0\n    var current_note_duration_index23\
    \ = 0\n    var current_note_duration_index24 = 0\n    var current_note_duration_index25\
    \ = 0\n    var current_note_duration_index26 = 0\n    var current_note_duration_index27\
    \ = 0\n    var current_note_duration_index28 = 0\n    var current_note_duration_index29\
    \ = 0\n    var current_note_duration_index30 = 0\n    var current_note_duration_index31\
    \ = 0\n    var current_note_duration_index32 = 0\n    var current_note_duration_index33\
    \ = 0\n    var current_note_duration_index34 = 0\n    var current_note_duration_index35\
    \ = 0\n    var current_note_duration_index36 = 0\n    var current_note_duration_index37\
    \ = 0\n    var current_note_duration_index38 = 0\n    var current_note_duration_index39\
    \ = 0\n    var current_note_duration_index40 = 0\n    var current_note_duration_index41\
    \ = 0\n    var current_note_duration_index42 = 0\n    var current_note_duration_index43\
    \ = 0\n    var current_note_duration_index44 = 0\n    var current_note_duration_index45\
    \ = 0\n    var current_note_duration_index46 = 0\n    var current_note_duration_index47\
    \ = 0\n    var current_note_duration_index48 = 0\n    var current_note_duration_index49\
    \ = 0\n    var current_note_duration_index50 = 0\n    var current_note_duration_index51\
    \ = 0\n    var current_note_duration_index52 = 0\n    var current_note_duration_index53\
    \ = 0\n    var current_note_duration_index54 = 0\n    var current_note_duration_index55\
    \ = 0\n    var current_note_duration_index56 = 0\n    var current_note_duration_index57\
    \ = 0\n    var current_note_duration_index58 = 0\n    var current_note_duration_index59\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn9etqqsn.swift:77:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpn9etqqsn.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpn9etqqsn.swift:12:9:\
    \ warning: initialization of variable 'beats' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beats = [Int]()\n    ~~~~^~~~~\n\
    \    _\n/tmp/tmpn9etqqsn.swift:13:9: warning: initialization of variable 'current_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpn9etqqsn.swift:14:9:\
    \ warning: initialization of variable 'current_note' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note = music_string[0]\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpn9etqqsn.swift:15:9: warning: initialization\
    \ of variable 'current_note_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_note_beat = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpn9etqqsn.swift:16:9: warning: initialization of variable 'current_note_octave'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note_octave = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpn9etqqsn.swift:17:9:\
    \ warning: initialization of variable 'current_note_duration' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_duration\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpn9etqqsn.swift:18:9: warning:\
    \ initialization of variable 'current_note_duration_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_duration_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpn9etqqsn.swift:19:9:\
    \ warning: initialization of variable 'current_n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var note_count = 0\n    var current_note = \"\"\n    var current_beat = 0\n\
    \    var current_beat_count = 0\n    var current_note_length = 0\n    for c in\
    \ music_string {\n        if c == 'o' {\n            if note_count == 0 {\n  \
    \              note_count = 1\n                notes.append(current_note)\n  \
    \              current_note = \"\"\n                current_beat = 0\n       \
    \         current_beat_count = 0\n                current_note_length = 0\n  \
    \          } else {\n                note_count = note_count + 1\n           \
    \ }\n        } else if c == '|' {\n            if note_count == 0 {\n        \
    \        note_count = 1\n                notes.append(current_note)\n        \
    \        current_note = \"\"\n                current_beat = 0\n             \
    \   current_beat_count = 0\n                current_note_length = 0\n        \
    \    } else {\n                note_count = note_count + 1\n            }\n  \
    \      } else if c == ' ' {\n            if note_count == 0 {\n              \
    \  note_count = 1\n                notes.append(current_note)\n              \
    \  current_note = \"\"\n                current_beat = 0\n                current_beat_count\
    \ = 0\n                current_note_length = 0\n            } else {\n       \
    \         note_count = note_count + 1\n            }\n        } else if c == '.'\
    \ {\n            if note_count == 0 {\n                note_count = 1\n      \
    \          notes.append(current_note)\n                current_note = \"\"\n \
    \               current_beat = 0\n                current_beat_count = 0\n   \
    \             current_note_length = 0\n            } else {\n                note_count\
    \ = note_count + 1\n            }\n        } else {\n            if note_count\
    \ == 0 {\n                current_note = c\n                current_beat = 0\n\
    \                current_beat_count = 0\n                current_note_length =\
    \ 0\n            } else {\n                current_note = current_note + c\n \
    \               current_beat_count = current_beat_count + 1\n            }\n \
    \       }\n    }\n    for note in notes {\n        if note == \"\" {\n       \
    \     beats.append(0)\n        } else {\n            beats.append(beats[beats.count\
    \ - 1] + current_note_length)\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp27fagc4i.swift:20:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp27fagc4i.swift:31:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmp27fagc4i.swift:42:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == ' ' {\n                       ^~~\n\
    \                       \" \"\n/tmp/tmp27fagc4i.swift:53:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == '.' {\n             \
    \          ^~~\n                       \".\"\n/tmp/tmp27fagc4i.swift:66:32: error:\
    \ cannot assign value of type 'Character' to type 'String'\n                current_note\
    \ = c\n                               ^\n/tmp/tmp27fagc4i.swift:71:47: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                current_note = current_note + c\n                           \
    \                   ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ last_beat = 0\n    var last_note = \"\"\n    var last_note_beat = 0\n    var\
    \ last_note_octave = 0\n    var last_note_duration = 0\n    var last_note_duration_type\
    \ = \"\"\n    var last_note_duration_value = 0.0\n    var last_note_duration_unit\
    \ = \"\"\n    var last_note_duration_unit_value = 0.0\n    var last_note_duration_unit_type\
    \ = 0\n    var last_note_octave_octave = 0\n    var last_note_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave = 0\n    var last_note_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave = 0\n    var\
    \ last_note_octave_octave_octave_octave_octave_octave_octave = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_octave_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpair6tbqb.swift:37:9: error: invalid redeclaration of 'last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave'\n\
    \    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n        ^\n/tmp/tmpair6tbqb.swift:36:9: note: 'last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave'\
    \ previously declared here\n    var last_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n        ^\n/tmp/tmpair6tbqb.swift:38:9: error: type annotation missing\
    \ in pattern\n    var last_note_octave_octave_octave_octave_octave_octave_octave_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_index = 0\n    var note_length\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_note_length\
    \ = 0\n    var last_beat = 0\n    var last_note_beat = 0\n    var last_note_note_length\
    \ = 0\n    var last_note_beat_index = 0\n    var last_note_note_length_index =\
    \ 0\n    var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n\
    \    var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n \
    \   var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n  \
    \  var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n   \
    \ var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n    var\
    \ last_note_beat_index = 0\n    var last_note_note_length_index = 0\n    var last_note_beat_index\
    \ = 0\n    var last_note_note_length_index = 0\n    var last_note_beat_index =\
    \ 0\n    var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n\
    \    var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n \
    \   var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n  \
    \  var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n   \
    \ var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n    var\
    \ last_note_note_length_index = 0\n    var last_note_beat_index = 0\n    var last_note_note_length_index\
    \ = 0\n    var last_note_beat_index = 0\n    var last_note_note_length_index =\
    \ 0\n    var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n\
    \    var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n \
    \   var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n  \
    \  var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n   \
    \ var last_note_beat_index = 0\n    var last_note_note_length_index = 0\n    var\
    \ last_note_beat_index = 0\n    var last_note_note_length_index = 0\n    var last_note_beat_index\
    \ = 0\n    var last_note_note_length_index = 0\n    var last_note_beat_index =\
    \ 0\n    var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n\
    \    var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n \
    \   var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n  \
    \  var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n   \
    \ var last_note_note_length_index = 0\n    var last_note_beat_index = 0\n    var\
    \ last_note_note_length_index = 0\n    var last_note_beat_index = 0\n    var last_note_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzh6gdrtn.swift:26:9: error: invalid redeclaration of 'last_note_beat_index'\n\
    \    var last_note_beat_index = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:24:9: note:\
    \ 'last_note_beat_index' previously declared here\n    var last_note_beat_index\
    \ = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:27:9: error: invalid redeclaration of\
    \ 'last_note_note_length_index'\n    var last_note_note_length_index = 0\n   \
    \     ^\n/tmp/tmpzh6gdrtn.swift:25:9: note: 'last_note_note_length_index' previously\
    \ declared here\n    var last_note_note_length_index = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:28:9:\
    \ error: invalid redeclaration of 'last_note_beat_index'\n    var last_note_beat_index\
    \ = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:24:9: note: 'last_note_beat_index' previously\
    \ declared here\n    var last_note_beat_index = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:29:9:\
    \ error: invalid redeclaration of 'last_note_note_length_index'\n    var last_note_note_length_index\
    \ = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:25:9: note: 'last_note_note_length_index'\
    \ previously declared here\n    var last_note_note_length_index = 0\n        ^\n\
    /tmp/tmpzh6gdrtn.swift:30:9: error: invalid redeclaration of 'last_note_beat_index'\n\
    \    var last_note_beat_index = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:24:9: note:\
    \ 'last_note_beat_index' previously declared here\n    var last_note_beat_index\
    \ = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:31:9: error: invalid redeclaration of\
    \ 'last_note_note_length_index'\n    var last_note_note_length_index = 0\n   \
    \     ^\n/tmp/tmpzh6gdrtn.swift:25:9: note: 'last_note_note_length_index' previously\
    \ declared here\n    var last_note_note_length_index = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:32:9:\
    \ error: invalid redeclaration of 'last_note_beat_index'\n    var last_note_beat_index\
    \ = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:24:9: note: 'last_note_beat_index' previously\
    \ declared here\n    var last_note_beat_index = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:33:9:\
    \ error: invalid redeclaration of 'last_note_note_length_index'\n    var last_note_note_length_index\
    \ = 0\n        ^\n/tmp/tmpzh6gdrtn.swift:25:9: note: 'last_note_note_l"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = String()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp14_1e0z8.swift:85:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp14_1e0z8.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp14_1e0z8.swift:15:9:\
    \ note: 'current_note_"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_string = \"\"\n    var current_note_index = 0\n  \
    \  var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnj0fm18r.swift:18:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpnj0fm18r.swift:16:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpnj0fm18r.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmpnj0fm18r.swift:21:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmpnj0fm18r.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmpnj0fm18r.swift:21:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmpnj0fm18r.swift:24:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmpnj0fm18r.swift:21:9:\
    \ note: 'current_note_string_index' previously declared here\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmpnj0fm18r.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmpnj0fm18r.swift:21:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmpnj0fm18r.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmpnj0fm18r.swift:21:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmpnj0fm18r.swift:27:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmpnj0fm18r.swift:21:9:\
    \ note: 'current_note_string_index' previously declared here\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmpnj0fm18r.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    for c in music_string {\n        switch c {\n    \
    \    case \"o\":\n            current_note = .WHOLE_NOTE\n        case \"o|\"\
    :\n            current_note = .HALF_NOTE\n        default:\n            current_note\
    \ = .QUATER_NOTE\n        }\n        if current_note != .WHOLE_NOTE {\n      \
    \      beats.append(current_beat)\n            current_beat = 0\n        }\n \
    \       current_beat++\n    }\n    beats.append(current_beat)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpj__58c97.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpj__58c97.swift:18:29: error: type 'Int' has no member 'WHOLE_NOTE'\n\
    \            current_note = .WHOLE_NOTE\n                           ~^~~~~~~~~~\n\
    /tmp/tmpj__58c97.swift:20:29: error: type 'Int' has no member 'HALF_NOTE'\n  \
    \          current_note = .HALF_NOTE\n                           ~^~~~~~~~~\n\
    /tmp/tmpj__58c97.swift:22:29: error: type 'Int' has no member 'QUATER_NOTE'\n\
    \            current_note = .QUATER_NOTE\n                           ~^~~~~~~~~~~\n\
    /tmp/tmpj__58c97.swift:24:29: error: type 'Int' has no member 'WHOLE_NOTE'\n \
    \       if current_note != .WHOLE_NOTE {\n                           ~^~~~~~~~~~\n\
    /tmp/tmpj__58c97.swift:28:21: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        current_beat++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var current_beat = 0\n  \
    \  var current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6j4y9jj8.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp6j4y9jj8.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp6j4y9jj8.swift:40:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp6j4y9jj8.swift:39:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp6j4y9jj8.swift:41:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp6j4y9jj8.swift:39:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_index =\
    \ 0\n    var current_note_length = 0\n    var current_note_length_index = 0\n\
    \    var current_note_length_index2 = 0\n    var current_note_length_index3 =\
    \ 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsgh_18ih.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index60\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = String()\n    var last_note = String()\n    var last_beat = 0\n    var last_beats\
    \ = 0\n    var last_notes = 0\n    var last_notes_beat = 0\n    var last_notes_beats\
    \ = 0\n    var last_notes_beats_beat = 0\n    var last_notes_beats_beats = 0\n\
    \    var last_notes_beats_beats_beat = 0\n    var last_notes_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beat = 0\n    var last_notes_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beat = 0\n    var last_notes_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beat = 0\n    var last_notes_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var\
    \ last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpubn7y_cp.swift:31:9: error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpubn7y_cp.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpubn7y_cp.swift:32:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpubn7y_cp.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpubn7y_cp.swift:33:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpubn7y_cp.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmpubn7y_cp.swift:36:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    \
    \    ^\n/tmp/tmpubn7y_cp.swift:35:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmpubn7y_cp.swift:37:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmpubn7y_cp.swift:35:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmpubn7y_cp.swift:38:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n    var last_notes_beats_beats_beats_beats_be"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ '.' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = music_string[music_string.index(before: c)]\n    \
    \    } else {\n            current_beat += 1\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk9abbe70.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmpk9abbe70.swift:14:24: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n    var current_note = music_string[0]\n\
    \                       ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpk9abbe70.swift:19:68: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            current_note = music_string[music_string.index(before: c)]\n    \
    \                                                               ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = \"\"\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppgixzk2i.swift:77:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmppgixzk2i.swift:12:9: warning: variable 'beats_array' was never used;\
    \ consider replacing with '_' or removing it\n    var beats_array: [Int] = []\n\
    \        ^~~~~~~~~~~\n        _\n/tmp/tmppgixzk2i.swift:13:9: warning: initialization\
    \ of variable 'current_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmppgixzk2i.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = \"\"\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmppgixzk2i.swift:15:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppgixzk2i.swift:16:9: warning:\
    \ initialization of variable 'current_note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppgixzk2i.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppgixzk2i.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppgixzk2i.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmppgixzk2i.swift:20:9:\
    \ warning: initialization of variable 'current_note_length_index5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    va"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = Int()\n    var last_note = Int()\n    var last_beat = 0\n    var last_beats\
    \ = 0\n    var last_notes = 0\n    var last_notes_beat = 0\n    var last_notes_beats\
    \ = 0\n    var last_notes_beats_beat = 0\n    var last_notes_beats_beats = 0\n\
    \    var last_notes_beats_beats_beat = 0\n    var last_notes_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beat = 0\n    var last_notes_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beat = 0\n    var last_notes_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beat = 0\n    var last_notes_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var\
    \ last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats_beats = 0\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphzoe4on5.swift:31:9: error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmphzoe4on5.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmphzoe4on5.swift:32:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmphzoe4on5.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmphzoe4on5.swift:33:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmphzoe4on5.swift:30:9:\
    \ note: 'last_notes_beats_beats_beats_beats_beats_beats' previously declared here\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats = 0\n        ^\n/tmp/tmphzoe4on5.swift:36:9:\
    \ error: invalid redeclaration of 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n\
    \    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats = 0\n    \
    \    ^\n/tmp/tmphzoe4on5.swift:35:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmphzoe4on5.swift:37:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmphzoe4on5.swift:35:9: note: 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\
    \ previously declared here\n    var last_notes_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = 0\n        ^\n/tmp/tmphzoe4on5.swift:38:9: error: invalid redeclaration of\
    \ 'last_notes_beats_beats_beats_beats_beats_beats_beats_beats'\n    var last_notes_beats_beats_beats_beats_be"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var last_note = 0\n \
    \   var last_note_length = 0\n    var last_note_length_index = 0\n    var last_note_length_index2\
    \ = 0\n    var last_note_length_index3 = 0\n    var last_note_length_index4 =\
    \ 0\n    var last_note_length_index5 = 0\n    var last_note_length_index6 = 0\n\
    \    var last_note_length_index7 = 0\n    var last_note_length_index8 = 0\n  \
    \  var last_note_length_index9 = 0\n    var last_note_length_index10 = 0\n   \
    \ var last_note_length_index11 = 0\n    var last_note_length_index12 = 0\n   \
    \ var last_note_length_index13 = 0\n    var last_note_length_index14 = 0\n   \
    \ var last_note_length_index15 = 0\n    var last_note_length_index16 = 0\n   \
    \ var last_note_length_index17 = 0\n    var last_note_length_index18 = 0\n   \
    \ var last_note_length_index19 = 0\n    var last_note_length_index20 = 0\n   \
    \ var last_note_length_index21 = 0\n    var last_note_length_index22 = 0\n   \
    \ var last_note_length_index23 = 0\n    var last_note_length_index24 = 0\n   \
    \ var last_note_length_index25 = 0\n    var last_note_length_index26 = 0\n   \
    \ var last_note_length_index27 = 0\n    var last_note_length_index28 = 0\n   \
    \ var last_note_length_index29 = 0\n    var last_note_length_index30 = 0\n   \
    \ var last_note_length_index31 = 0\n    var last_note_length_index32 = 0\n   \
    \ var last_note_length_index33 = 0\n    var last_note_length_index34 = 0\n   \
    \ var last_note_length_index35 = 0\n    var last_note_length_index36 = 0\n   \
    \ var last_note_length_index37 = 0\n    var last_note_length_index38 = 0\n   \
    \ var last_note_length_index39 = 0\n    var last_note_length_index40 = 0\n   \
    \ var last_note_length_index41 = 0\n    var last_note_length_index42 = 0\n   \
    \ var last_note_length_index43 = 0\n    var last_note_length_index44 = 0\n   \
    \ var last_note_length_index45 = 0\n    var last_note_length_index46 = 0\n   \
    \ var last_note_length_index47 = 0\n    var last_note_length_index48 = 0\n   \
    \ var last_note_length_index49 = 0\n    var last_note_length_index50 = 0\n   \
    \ var last_note_length_index51 = 0\n    var last_note_length_index52 = 0\n   \
    \ var last_note_length_index53 = 0\n    var last_note_length_index54 = 0\n   \
    \ var last_note_length_index55 = 0\n    var last_note_length_index56 = 0\n   \
    \ var last_note_length_index57 = 0\n    var last_note_length_index58 = 0\n   \
    \ var last_note_length_index59 = 0\n    var last_note_length_index60 = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprjatir7h.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmprjatir7h.swift:13:9: warning:\
    \ initialization of variable 'current_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmprjatir7h.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprjatir7h.swift:15:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmprjatir7h.swift:16:9: warning:\
    \ initialization of variable 'last_note' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var last_note = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmprjatir7h.swift:17:9: warning: initialization of variable 'last_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_length = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmprjatir7h.swift:18:9:\
    \ warning: initialization of variable 'last_note_length_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmprjatir7h.swift:19:9: warning:\
    \ initialization of variable 'last_note_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmprjatir7h.swift:20:9: warning:\
    \ initialization of variable 'last_note_length_index3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmprjatir7h.swift:21:9: warning:\
    \ initialization of variable 'last_note_length_index4' was nev"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        if\
    \ c == 'o' {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else if c == '|' {\n\
    \            beat += 1\n        } else {\n            note += c\n        }\n \
    \   }\n    beats.append(beat)\n    notes.append(note)\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsztygkg3.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpsztygkg3.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpsztygkg3.swift:25:21: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            note += c\n    \
    \                ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beat_count\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_count = 0\n\
    \    var current_note_length_index = 0\n    var current_note_length_index2 = 0\n\
    \    var current_note_length_index3 = 0\n    var current_note_length_index4 =\
    \ 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1wbfih4n.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_length_index59\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5803lnmw.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp5803lnmw.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp5803lnmw.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp306k6rp2.swift:85:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp306k6rp2.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyvx3605y.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for char in music_string {\n       \
    \ switch char {\n        case \"o\":\n            notes.append(note)\n       \
    \     note = \"\"\n            beats.append(beat)\n            beat = 0\n    \
    \    case \"|\":\n            notes.append(note)\n            note = \"\"\n  \
    \          beats.append(beat)\n            beat = 0\n        default:\n      \
    \      note += char\n        }\n    }\n    notes.append(note)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe5xsbswo.swift:29:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastbeat = 0\n  \
    \  var lastnote = 0\n    var lastlast = 0\n    var lastlastbeat = 0\n    var lastlastnote\
    \ = 0\n    var lastlastlast = 0\n    var lastlastlastbeat = 0\n    var lastlastlastnote\
    \ = 0\n    var lastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var\
    \ lastlastlastlastnote = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastnote = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphegkozhq.swift:29:9: error: invalid redeclaration of 'lastlastlastlastbeat'\n\
    \    var lastlastlastlastbeat = 0\n        ^\n/tmp/tmphegkozhq.swift:26:9: note:\
    \ 'lastlastlastlastbeat' previously declared here\n    var lastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:30:9: error: invalid redeclaration of\
    \ 'lastlastlastlastnote'\n    var lastlastlastlastnote = 0\n        ^\n/tmp/tmphegkozhq.swift:27:9:\
    \ note: 'lastlastlastlastnote' previously declared here\n    var lastlastlastlastnote\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:31:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:32:9: error: invalid redeclaration of\
    \ 'lastlastlastlastbeat'\n    var lastlastlastlastbeat = 0\n        ^\n/tmp/tmphegkozhq.swift:26:9:\
    \ note: 'lastlastlastlastbeat' previously declared here\n    var lastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:33:9: error: invalid redeclaration of\
    \ 'lastlastlastlastnote'\n    var lastlastlastlastnote = 0\n        ^\n/tmp/tmphegkozhq.swift:27:9:\
    \ note: 'lastlastlastlastnote' previously declared here\n    var lastlastlastlastnote\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:34:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:35:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:36:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:3"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp306k6rp2.swift:85:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp306k6rp2.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp306k6rp2.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp306k6rp2.swift:15:9:\
    \ note: 'current_note_"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n  \
    \  var lastBeat = 0\n    var lastBeatNote = 0\n    var lastBeatNoteBeat = 0\n\
    \    var lastBeatNoteBeatBeat = 0\n    var lastBeatNoteBeatBeatBeat = 0\n    var\
    \ lastBeatNoteBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeat =\
    \ 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat\
    \ = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBeat = 0\n    var lastBeatNoteBeatBeatBeatBeatBeatBe\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe2hwy22o.swift:27:9: error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:28:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:29:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:30:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:31:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:32:9:\
    \ error: invalid redeclaration of 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat'\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:26:9:\
    \ note: 'lastBeatNoteBeatBeatBeatBeatBeatBeatBeat' previously declared here\n\
    \    var lastBeatNoteBeatBeatBeatBeatBeatBeatBeat = 0\n        ^\n/tmp/tmpe2hwy22o.swift:33:9:\
    \ error: invalid redecl"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string.characters.first!\n    var current_note_length =\
    \ 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9h860hm5.swift:14:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var current_note = music_string.characters.first!\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9h860hm5.swift:76:9: error: type annotation missing\
    \ in pattern\n    var current_note_length\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptzvmxrab.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptzvmxrab.swift:76:9:\
    \ error: type annotation missing in pattern\n    var current_note_length_index61\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_string_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdaf_r6qx.swift:37:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_string_value_string_value_string_value'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpdaf_r6qx.swift:35:9: note: 'current_note_length_string_value_string_value_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpdaf_r6qx.swift:38:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpdaf_r6qx.swift:36:9: note: 'current_note_length_string_value_string_value_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpdaf_r6qx.swift:39:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_string_value'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpdaf_r6qx.swift:35:9: note: 'current_note_length_string_value_string_value_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpdaf_r6qx.swift:40:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpdaf_r6qx.swift:36:9: note: 'current_note_length_string_value_string_value_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_val"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3f39kh_s.swift:18:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmp3f39kh_s.swift:16:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmp3f39kh_s.swift:19:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_string = \"\"\n  \
    \      ^\n/tmp/tmp3f39kh_s.swift:17:9: note: 'current_note_length_string' previously\
    \ declared here\n    var current_note_length_string = \"\"\n        ^\n/tmp/tmp3f39kh_s.swift:20:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmp3f39kh_s.swift:16:9: note: 'current_note_length_index'\
    \ previously declared here\n    var current_note_length_index = 0\n        ^\n\
    /tmp/tmp3f39kh_s.swift:21:9: error: invalid redeclaration of 'current_note_length_string'\n\
    \    var current_note_length_string = \"\"\n        ^\n/tmp/tmp3f39kh_s.swift:17:9:\
    \ note: 'current_note_length_string' previously declared here\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmp3f39kh_s.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length_index'\n    var current_note_length_index = 0\n    \
    \    ^\n/tmp/tmp3f39kh_s.swift:16:9: note: 'current_note_length_index' previously\
    \ declared here\n    var current_note_length_index = 0\n        ^\n/tmp/tmp3f39kh_s.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_string'\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmp3f39kh_s.swift:17:9: note: 'current_note_length_string'\
    \ previously declared here\n    var current_note_length_string = \"\"\n      \
    \  ^\n/tmp/tmp3f39kh_s.swift:24:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmp3f39kh_s.swift:16:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmp3f39kh_s.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_s"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_index = 0\n    var note_index2\
    \ = 0\n    var note_index3 = 0\n    var note_index4 = 0\n    var note_index5 =\
    \ 0\n    var note_index6 = 0\n    var note_index7 = 0\n    var note_index8 = 0\n\
    \    var note_index9 = 0\n    var note_index10 = 0\n    var note_index11 = 0\n\
    \    var note_index12 = 0\n    var note_index13 = 0\n    var note_index14 = 0\n\
    \    var note_index15 = 0\n    var note_index16 = 0\n    var note_index17 = 0\n\
    \    var note_index18 = 0\n    var note_index19 = 0\n    var note_index20 = 0\n\
    \    var note_index21 = 0\n    var note_index22 = 0\n    var note_index23 = 0\n\
    \    var note_index24 = 0\n    var note_index25 = 0\n    var note_index26 = 0\n\
    \    var note_index27 = 0\n    var note_index28 = 0\n    var note_index29 = 0\n\
    \    var note_index30 = 0\n    var note_index31 = 0\n    var note_index32 = 0\n\
    \    var note_index33 = 0\n    var note_index34 = 0\n    var note_index35 = 0\n\
    \    var note_index36 = 0\n    var note_index37 = 0\n    var note_index38 = 0\n\
    \    var note_index39 = 0\n    var note_index40 = 0\n    var note_index41 = 0\n\
    \    var note_index42 = 0\n    var note_index43 = 0\n    var note_index44 = 0\n\
    \    var note_index45 = 0\n    var note_index46 = 0\n    var note_index47 = 0\n\
    \    var note_index48 = 0\n    var note_index49 = 0\n    var note_index50 = 0\n\
    \    var note_index51 = 0\n    var note_index52 = 0\n    var note_index53 = 0\n\
    \    var note_index54 = 0\n    var note_index55 = 0\n    var note_index56 = 0\n\
    \    var note_index57 = 0\n    var note_index58 = 0\n    var note_index59 = 0\n\
    \    var note_index60 = 0\n    var note_index61 = 0\n    var note_index62 = 0\n\
    \    var note_index63 = 0\n    var note_index64 = 0\n    var note_index65 = 0\n\
    \    var note_index66 = 0\n    var note_index67 = 0\n    var note_index68 = 0\n\
    \    var note_index69 = 0\n    var note_index70 = 0\n    var note_index71 = 0\n\
    \    var note_index72 = 0\n    var note_index73 = 0\n    var note_index74 = 0\n\
    \    var note_index75 = 0\n    var note_index76 = 0\n    var note_index77 = 0\n\
    \    var note_index78 = 0\n    var note_index79 = 0\n    var note_index80 = 0\n\
    \    var note_index81 = 0\n    var note_index82 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9rrlmzr6.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp9rrlmzr6.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp9rrlmzr6.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp9rrlmzr6.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmp9rrlmzr6.swift:16:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp9rrlmzr6.swift:17:9:\
    \ warning: initialization of variable 'note_index2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp9rrlmzr6.swift:18:9: warning: initialization of variable 'note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp9rrlmzr6.swift:19:9:\
    \ warning: initialization of variable 'note_index4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp9rrlmzr6.swift:20:9: warning: initialization of variable 'note_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp9rrlmzr6.swift:21:9:\
    \ warning: initialization of variable 'note_index6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp9rrlmzr6.swift:22:9: warning: initialization of variable 'note_index7'\
    \ was never used"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var current_note = \"\"\n    var current_note_length\
    \ = 0\n    var current_beat = 0\n    var current_beat_length = 0\n    var current_note_index\
    \ = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note_length_index = 0\n\
    \    var current_beat_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_beat_length_index = 0\n    var\
    \ current_note_index = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note_length_index = 0\n\
    \    var current_beat_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_beat_length_index = 0\n    var\
    \ current_note_index = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note_length_index = 0\n\
    \    var current_beat_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_beat_length_index = 0\n    var\
    \ current_note_index = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note_length_index = 0\n\
    \    var current_beat_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_beat_length_index = 0\n    var\
    \ current_note_index = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note_length_index = 0\n\
    \    var current_beat_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_beat_length_index = 0\n    var\
    \ current_note_index = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note_length_index = 0\n\
    \    var current_beat_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_beat_length_index = 0\n    var\
    \ current_note_index = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var current_note_length_index = 0\n\
    \    var current_beat_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_beat_length_index = 0\n    var\
    \ current_note_index = 0\n    var current_note_length_index = 0\n    var current_beat_length_index\
    \ = 0\n    var current_note_index = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgr1f5h14.swift:86:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpgr1f5h14.swift:22:9: error: invalid redeclaration of 'current_note_index'\n\
    \    var current_note_index = 0\n        ^\n/tmp/tmpgr1f5h14.swift:19:9: note:\
    \ 'current_note_index' previously declared here\n    var current_note_index =\
    \ 0\n        ^\n/tmp/tmpgr1f5h14.swift:23:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpgr1f5h14.swift:20:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpgr1f5h14.swift:24:9: error: invalid redeclaration of\
    \ 'current_beat_length_index'\n    var current_beat_length_index = 0\n       \
    \ ^\n/tmp/tmpgr1f5h14.swift:21:9: note: 'current_beat_length_index' previously\
    \ declared here\n    var current_beat_length_index = 0\n        ^\n/tmp/tmpgr1f5h14.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_index'\n    var current_note_index\
    \ = 0\n        ^\n/tmp/tmpgr1f5h14.swift:19:9: note: 'current_note_index' previously\
    \ declared here\n    var current_note_index = 0\n        ^\n/tmp/tmpgr1f5h14.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpgr1f5h14.swift:20:9: note: 'current_note_length_index'\
    \ previously declared here\n    var current_note_length_index = 0\n        ^\n\
    /tmp/tmpgr1f5h14.swift:27:9: error: invalid redeclaration of 'current_beat_length_index'\n\
    \    var current_beat_length_index = 0\n        ^\n/tmp/tmpgr1f5h14.swift:21:9:\
    \ note: 'current_beat_length_index' previously declared here\n    var current_beat_length_index\
    \ = 0\n        ^\n/tmp/tmpgr1f5h14.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_index'\n    var current_note_index = 0\n        ^\n/tmp/tmpgr1f5h14.swift:19:9:\
    \ note: 'current_note_index' previously declared here\n    var current_note_index\
    \ = 0\n        ^\n/tmp/tmpgr1f5h14.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_index'\n    var current_note_length_index = 0\n       \
    \ ^\n/tmp/tmpgr1f5"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzhvb690f.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:31:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:35:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:34:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:38:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_count = 0\n    var note_length\
    \ = 0\n    var note_length_count = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7mprvv4s.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7mprvv4s.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7mprvv4s.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp7mprvv4s.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmp7mprvv4s.swift:16:9: warning: initialization\
    \ of variable 'note_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s.swift:17:9:\
    \ warning: initialization of variable 'note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp7mprvv4s.swift:18:9: warning: initialization of variable 'note_length_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s.swift:19:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s.swift:20:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp7mprvv4s.swift:21:9: warning: initialization of variable 'note_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_notes = 0\n    var last_notes_beats\
    \ = 0\n    var last_notes_beats_notes = 0\n    var last_notes_beats_notes_beats\
    \ = 0\n    var last_notes_beats_notes_beats_notes = 0\n    var last_notes_beats_notes_beats_notes_beats\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes = 0\n\
    \    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = 0\n\
    \    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = 0\n\
    \    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = 0\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n    var last_notes_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqv_f9tql.swift:29:9: error: invalid redeclaration of 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats'\n\
    \    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = 0\n\
    \        ^\n/tmp/tmpqv_f9tql.swift:28:9: note: 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats'\
    \ previously declared here\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = 0\n        ^\n/tmp/tmpqv_f9tql.swift:33:9: error: invalid redeclaration of\
    \ 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n        ^\n/tmp/tmpqv_f9tql.swift:32:9: note: 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n        ^\n/tmp/tmpqv_f9tql.swift:34:9: error: invalid redeclaration of\
    \ 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n        ^\n/tmp/tmpqv_f9tql.swift:32:9: note: 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n        ^\n/tmp/tmpqv_f9tql.swift:37:9: error: invalid redeclaration of\
    \ 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n        ^\n/tmp/tmpqv_f9tql.swift:36:9: note: 'last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var last_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = 0\n        ^\n/tmp/tmpqv_f9tql.swift:40:9: error: type annotation missing\
    \ in patte"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7_60rcoc.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp7_60rcoc.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp7_60rcoc.swift:40:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp7_60rcoc.swift:39:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp7_60rcoc.swift:41:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp7_60rcoc.swift:39:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var last_note = 0\n \
    \   var last_note_length = 0\n    var last_note_octave = 0\n    var last_note_octave_length\
    \ = 0\n    var last_note_octave_number = 0\n    var last_note_octave_number_index\
    \ = 0\n    var last_note_octave_index = 0\n    var last_note_octave_octave = 0\n\
    \    var last_note_octave_octave_length = 0\n    var last_note_octave_octave_number\
    \ = 0\n    var last_note_octave_octave_number_index = 0\n    var last_note_octave_octave_index\
    \ = 0\n    var last_note_octave_octave_octave = 0\n    var last_note_octave_octave_octave_length\
    \ = 0\n    var last_note_octave_octave_octave_number = 0\n    var last_note_octave_octave_octave_number_index\
    \ = 0\n    var last_note_octave_octave_octave_index = 0\n    var last_note_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_length = 0\n    var last_note_octave_octave_octave_octave_number\
    \ = 0\n    var last_note_octave_octave_octave_octave_number_index = 0\n    var\
    \ last_note_octave_octave_octave_octave_index = 0\n    var last_note_octave_octave_octave_octave_octave\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_length = 0\n    var\
    \ last_note_octave_octave_octave_octave_octave_number = 0\n    var last_note_octave_octave_octave_octave_octave_number_index\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_index = 0\n    var\
    \ last_note_octave_octave_octave_octave_octave_octave = 0\n    var last_note_octave_octave_octave_octave_octave_octave_length\
    \ = 0\n    var last_note_octave_octave_octave_octave_octave_octave_number = 0\n\
    \    var last_note_octave_octave_octave_octave_octave_octave_number_index = 0\n\
    \    var last_note_octave_octave_octave_octave_octave_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp99geuwwd.swift:47:9: error: type annotation missing in pattern\n\
    \    var last_note_octave_octave_octave_octave_octave_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyure1euf.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_index = 0\n    var current_note_length\
    \ = 4\n\n    for c in music_string {\n        if c == 'o' {\n            if current_note\
    \ != \"\" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_index\
    \ = 0\n                current_note_length = 4\n            }\n        } else\
    \ if c == '|' {\n            if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_index = 0\n                current_note_length = 2\n\
    \            }\n        } else if c == '.' {\n            if current_note != \"\
    \" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_index\
    \ = 0\n                current_note_length = 1\n            }\n        } else\
    \ {\n            if current_note == \"\" {\n                current_note = c\n\
    \                current_note_index = 0\n                current_note_length =\
    \ 4\n            } else {\n                current_note_index += 1\n         \
    \       current_note_length += 4\n            }\n        }\n    }\n\n    if current_note\
    \ != \"\" {\n        beats.append(current_beat)\n    }\n\n    return beats\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe01pj0sm.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpe01pj0sm.swift:27:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpe01pj0sm.swift:35:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpe01pj0sm.swift:45:32: error: cannot assign\
    \ value of type 'Character' to type 'String'\n                current_note = c\n\
    \                               ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beats_count\
    \ = 0\n    var current_note_count = 0\n    var current_note_length = 0\n    var\
    \ current_note_octave = 0\n    var current_note_octave_count = 0\n    var current_note_octave_length\
    \ = 0\n    var current_note_octave_octave = 0\n    var current_note_octave_octave_count\
    \ = 0\n    var current_note_octave_octave_length = 0\n    var current_note_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_count = 0\n    var current_note_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave = 0\n    var current_note_octave_octave_octave_octave_count\
    \ = 0\n    var current_note_octave_octave_octave_octave_length = 0\n    var current_note_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_count = 0\n   \
    \ var current_note_octave_octave_octave_octave_octave_length = 0\n    var current_note_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_count =\
    \ 0\n    var current_note_octave_octave_octave_octave_octave_octave_length = 0\n\
    \    var current_note_octave_octave_octave_octave_octave_octave_octave = 0\n \
    \   var current_note_octave_octave_octave_octave_octave_octave_octave_count =\
    \ 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_count\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octave_length\
    \ = 0\n    var current_note_octave_octave_octave_octave_octave_octave_octave_octa\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwfvnmsk0.swift:43:9: error: type annotation missing in pattern\n\
    \    var current_note_octave_octave_octave_octave_octave_octave_octave_octa\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string.characters.first!\n    var current_note_length =\
    \ 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9h860hm5.swift:14:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var current_note = music_string.characters.first!\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9h860hm5.swift:76:9: error: type annotation missing\
    \ in pattern\n    var current_note_length\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ note = String()\n    var last_note = String()\n    var last_beat = 0\n    var\
    \ last_beat_count = 0\n    var last_note_beat = 0\n    var last_note_beat_count\
    \ = 0\n    var last_note_beat_direction = String()\n    var last_note_beat_direction_count\
    \ = 0\n    var last_note_beat_direction_direction = String()\n    var last_note_beat_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction = String()\n    var\
    \ last_note_beat_direction_direction_direction_count = 0\n    var last_note_beat_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n    var last_note_beat_direction_direction_direction_direction\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7y_2rwai.swift:38:9: error: invalid redeclaration of 'last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction'\n\
    \    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n        ^\n/tmp/tmp7y_2rwai.swift:36:9: note: 'last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction'\
    \ previously declared here\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = String()\n        ^\n/tmp/tmp7y_2rwai.swift:39:9: error: invalid redeclaration\
    \ of 'last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count'\n\
    \    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n        ^\n/tmp/tmp7y_2rwai.swift:37:9: note: 'last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count'\
    \ previously declared here\n    var last_note_beat_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 0\n        ^\n/tmp/tmp7y_2rwai.swift:43:9: error: type annotation missing\
    \ in pattern\n    var last_note_beat_direction_direction_direction_direction\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_index = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5u0i7l0b.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp5u0i7l0b.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    for character in music_string {\n        if character\
    \ == \"o\" {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = Int()\n        } else if character == \"|\"\
    \ {\n            beats.append(current_beat)\n            current_beat = 0\n  \
    \          current_note = Int()\n        } else if character == \".\" {\n    \
    \        beats.append(current_beat)\n            current_beat = 0\n          \
    \  current_note = Int()\n        } else {\n            current_beat++\n      \
    \      current_note = Int((character - \"0\") + 1)\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpblqfx9b2.swift:29:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            current_beat++\n                        ^~\n\
    /tmp/tmpblqfx9b2.swift:30:50: error: binary operator '+' cannot be applied to\
    \ operands of type '_' and 'Int'\n            current_note = Int((character -\
    \ \"0\") + 1)\n                                                 ^\nSwift.SIMD:1:11:\
    \ note: candidate requires that 'Int' conform to 'SIMD' (requirement specified\
    \ as 'Self' : 'SIMD')\nextension SIMD where Self.Scalar : FloatingPoint {\n  \
    \        ^\n"
  stdout: ''
  timestamp: 1660013880
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_beat = 0\n    var current_note_duration\
    \ = 0\n    for _ in 0..<music_string.count {\n        let char = music_string[music_index]\
    \ // get next char\n        music_index += 1\n        if char == ' ' {\n     \
    \       if current_note == 'o' {\n                beats.append(current_note_beat)\n\
    \                current_note_beat = 0\n                current_note_duration\
    \ = 0\n            } else if current_note == 'o|' {\n                beats.append(current_note_beat)\n\
    \                current_note_beat = 0\n                current_note_duration\
    \ = 1\n            } else if current_note == '.|' {\n                beats.append(current_note_beat)\n\
    \                current_note_beat = 0\n                current_note_duration\
    \ = 2\n            } else {\n                beats.append(current_note_beat)\n\
    \                current_note_beat = 0\n                current_note_duration\
    \ = 0\n            }\n            current_note = char\n        } else if char\
    \ == 'o' {\n            current_note = 'o'\n            current_note_beat = current_note_duration\n\
    \        } else if char == 'o|' {\n            current_note = 'o|'\n         \
    \   current_note_beat = current_note_duration\n        } else if char == '.|'\
    \ {\n            current_note = '.|'\n            current_note_beat = current_note_duration\n\
    \        } else {\n            current_note_duration += Int(char)\n        }\n\
    \    }\n    beats.append(current_note_beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1wqvdixs.swift:20:20: error: single-quoted string literal found,\
    \ use '\"'\n        if char == ' ' {\n                   ^~~\n               \
    \    \" \"\n/tmp/tmp1wqvdixs.swift:21:32: error: single-quoted string literal\
    \ found, use '\"'\n            if current_note == 'o' {\n                    \
    \           ^~~\n                               \"o\"\n/tmp/tmp1wqvdixs.swift:25:39:\
    \ error: single-quoted string literal found, use '\"'\n            } else if current_note\
    \ == 'o|' {\n                                      ^~~~\n                    \
    \                  \"o|\"\n/tmp/tmp1wqvdixs.swift:29:39: error: single-quoted\
    \ string literal found, use '\"'\n            } else if current_note == '.|' {\n\
    \                                      ^~~~\n                                \
    \      \".|\"\n/tmp/tmp1wqvdixs.swift:39:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if char == 'o' {\n                         \
    \ ^~~\n                          \"o\"\n/tmp/tmp1wqvdixs.swift:40:28: error: single-quoted\
    \ string literal found, use '\"'\n            current_note = 'o'\n           \
    \                ^~~\n                           \"o\"\n/tmp/tmp1wqvdixs.swift:42:27:\
    \ error: single-quoted string literal found, use '\"'\n        } else if char\
    \ == 'o|' {\n                          ^~~~\n                          \"o|\"\n\
    /tmp/tmp1wqvdixs.swift:43:28: error: single-quoted string literal found, use '\"\
    '\n            current_note = 'o|'\n                           ^~~~\n        \
    \                   \"o|\"\n/tmp/tmp1wqvdixs.swift:45:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if char == '.|' {\n         \
    \                 ^~~~\n                          \".|\"\n/tmp/tmp1wqvdixs.swift:46:28:\
    \ error: single-quoted string literal found, use '\"'\n            current_note\
    \ = '.|'\n                           ^~~~\n                           \".|\"\n\
    /tmp/tmp1wqvdixs.swift:14:24: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n    var current_note = music_string[0]\n\
    \                       ^~~~~~~~~~~~~~~\nSwift.String:3:12: "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var last_note = 0\n    var last_note_value = 0\n    var last_note_length\
    \ = 0\n    var last_note_octave = 0\n    var last_note_octave_change = 0\n   \
    \ var last_note_octave_change_length = 0\n    var last_note_octave_change_octave\
    \ = 0\n    var last_note_octave_change_octave_change = 0\n    var last_note_octave_change_octave_change_length\
    \ = 0\n    var last_note_octave_change_octave_change_octave = 0\n    var last_note_octave_change_octave_change_octave_change\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_length = 0\n\
    \    var last_note_octave_change_octave_change_octave_change_octave = 0\n    var\
    \ last_note_octave_change_octave_change_octave_change_octave_change = 0\n    var\
    \ last_note_octave_change_octave_change_octave_change_octave_change_length = 0\n\
    \    var last_note_octave_change_octave_change_octave_change_octave_change_octave\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_length\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_length\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_octave\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_length\
    \ = 0\n    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_oct\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmzg6b933.swift:41:9: error: type annotation missing in pattern\n\
    \    var last_note_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_octave_change_oct\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_next\
    \ = 0\n    var current_note_length_value_next_next = 0\n    var current_note_length_value_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next = 0\n    var current_note_length_value_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next = 0\n \
    \   var current_note_length_value_next_next_next_next_next_next_next = 0\n   \
    \ var current_note_length_value_next_next_next_next_next_next_next_next = 0\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp40h3fpwa.swift:27:9: error: invalid redeclaration of 'current_note_length_value_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:26:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:29:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_l"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ 'o' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = 'o'\n        } else if c == '|' {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = 'o'\n        } else\
    \ if c == '.' {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = 'o'\n        } else {\n            current_beat\
    \ += 1\n        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjmv76edo.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpjmv76edo.swift:19:28: error: single-quoted string literal found, use '\"\
    '\n            current_note = 'o'\n                           ^~~\n          \
    \                 \"o\"\n/tmp/tmpjmv76edo.swift:20:24: error: single-quoted string\
    \ literal found, use '\"'\n        } else if c == '|' {\n                    \
    \   ^~~\n                       \"|\"\n/tmp/tmpjmv76edo.swift:23:28: error: single-quoted\
    \ string literal found, use '\"'\n            current_note = 'o'\n           \
    \                ^~~\n                           \"o\"\n/tmp/tmpjmv76edo.swift:24:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '.' {\n                       ^~~\n                       \".\"\n/tmp/tmpjmv76edo.swift:27:28:\
    \ error: single-quoted string literal found, use '\"'\n            current_note\
    \ = 'o'\n                           ^~~\n                           \"o\"\n/tmp/tmpjmv76edo.swift:14:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var current_note = music_string[0]\n      \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpjmv76edo.swift:14:9: warning: variable 'current_note'\
    \ was written to, but never read\n    var current_note = music_string[0]\n   \
    \     ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_string = \"\"\n    var current_note_string_index =\
    \ 0\n    var current_note_length_index = 0\n    var current_note_index = 0\n \
    \   var current_note_string = \"\"\n    var current_note_string_index = 0\n  \
    \  var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n    var current_note_string_index = 0\n\
    \    var current_note_string_index = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsivfoovo.swift:21:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpsivfoovo.swift:16:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpsivfoovo.swift:23:9: error: invalid redeclaration of\
    \ 'current_note_string'\n    var current_note_string = \"\"\n        ^\n/tmp/tmpsivfoovo.swift:19:9:\
    \ note: 'current_note_string' previously declared here\n    var current_note_string\
    \ = \"\"\n        ^\n/tmp/tmpsivfoovo.swift:24:9: error: invalid redeclaration\
    \ of 'current_note_string_index'\n    var current_note_string_index = 0\n    \
    \    ^\n/tmp/tmpsivfoovo.swift:20:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmpsivfoovo.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmpsivfoovo.swift:20:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmpsivfoovo.swift:26:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmpsivfoovo.swift:20:9:\
    \ note: 'current_note_string_index' previously declared here\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmpsivfoovo.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_string_index'\n    var current_note_string_index = 0\n       \
    \ ^\n/tmp/tmpsivfoovo.swift:20:9: note: 'current_note_string_index' previously\
    \ declared here\n    var current_note_string_index = 0\n        ^\n/tmp/tmpsivfoovo.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_string_index'\n    var current_note_string_index\
    \ = 0\n        ^\n/tmp/tmpsivfoovo.swift:20:9: note: 'current_note_string_index'\
    \ previously declared here\n    var current_note_string_index = 0\n        ^\n\
    /tmp/tmpsivfoovo.swift:29:9: error: invalid redeclaration of 'current_note_string_index'\n\
    \    var current_note_string_index = 0\n        ^\n/tmp/tmpsivfoovo.swift"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_octave = 0\n    var\
    \ current_note_duration = 0\n    var current_note_duration_index = 0\n    var\
    \ current_note_duration_octave = 0\n    var current_note_duration_duration = 0\n\
    \    var current_note_duration_duration_index = 0\n    var current_note_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration = 0\n    var current_note_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_octave = 0\n    var current_note_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_index = 0\n  \
    \  var current_note_duration_duration_duration_duration_octave = 0\n    var current_note_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5n4qn22j.swift:45:9: error: invalid redeclaration of 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave'\n\
    \    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n        ^\n/tmp/tmp5n4qn22j.swift:42:9: note: 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n        ^\n/tmp/tmp5n4qn22j.swift:47:9: error: invalid redeclaration of\
    \ 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index'\n\
    \    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmp5n4qn22j.swift:44:9: note: 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmp5n4qn22j.swift:56:9: error: type annotation missing\
    \ in pattern\n    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        if\
    \ c == 'o' {\n            beats.append(beat)\n            beat = 0\n         \
    \   notes.append(note)\n            note = \"\"\n        } else if c == '|' {\n\
    \            beats.append(beat)\n            beat = 0\n            notes.append(note)\n\
    \            note = \"\"\n        } else {\n            note += String(c)\n  \
    \      }\n    }\n    beats.append(beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn33agin0.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpn33agin0.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for note in music_string[1..] {\n      \
    \  if note == 'o' {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = note\n        } else if note == '|' {\n    \
    \        current_beat += 1\n        } else if note == '.' {\n            current_beat\
    \ += 4\n        } else {\n            fatalError(\"Unexpected note '\\(note)'\"\
    )\n        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk18q2r8r.swift:16:20: error: single-quoted string literal found,\
    \ use '\"'\n        if note == 'o' {\n                   ^~~\n               \
    \    \"o\"\n/tmp/tmpk18q2r8r.swift:20:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if note == '|' {\n                         \
    \ ^~~\n                          \"|\"\n/tmp/tmpk18q2r8r.swift:22:27: error: single-quoted\
    \ string literal found, use '\"'\n        } else if note == '.' {\n          \
    \                ^~~\n                          \".\"\n/tmp/tmpk18q2r8r.swift:14:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var current_note = music_string[0]\n      \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpk18q2r8r.swift:15:31: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for note in music_string[1..] {\n  \
    \                            ^~\n                              ...\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var notes = [String]()\n    var notes_length = 0\n    var notes_length_count\
    \ = 0\n    var notes_length_count2 = 0\n    var notes_length_count3 = 0\n    var\
    \ notes_length_count4 = 0\n    var notes_length_count5 = 0\n    var notes_length_count6\
    \ = 0\n    var notes_length_count7 = 0\n    var notes_length_count8 = 0\n    var\
    \ notes_length_count9 = 0\n    var notes_length_count10 = 0\n    var notes_length_count11\
    \ = 0\n    var notes_length_count12 = 0\n    var notes_length_count13 = 0\n  \
    \  var notes_length_count14 = 0\n    var notes_length_count15 = 0\n    var notes_length_count16\
    \ = 0\n    var notes_length_count17 = 0\n    var notes_length_count18 = 0\n  \
    \  var notes_length_count19 = 0\n    var notes_length_count20 = 0\n    var notes_length_count21\
    \ = 0\n    var notes_length_count22 = 0\n    var notes_length_count23 = 0\n  \
    \  var notes_length_count24 = 0\n    var notes_length_count25 = 0\n    var notes_length_count26\
    \ = 0\n    var notes_length_count27 = 0\n    var notes_length_count28 = 0\n  \
    \  var notes_length_count29 = 0\n    var notes_length_count30 = 0\n    var notes_length_count31\
    \ = 0\n    var notes_length_count32 = 0\n    var notes_length_count33 = 0\n  \
    \  var notes_length_count34 = 0\n    var notes_length_count35 = 0\n    var notes_length_count36\
    \ = 0\n    var notes_length_count37 = 0\n    var notes_length_count38 = 0\n  \
    \  var notes_length_count39 = 0\n    var notes_length_count40 = 0\n    var notes_length_count41\
    \ = 0\n    var notes_length_count42 = 0\n    var notes_length_count43 = 0\n  \
    \  var notes_length_count44 = 0\n    var notes_length_count45 = 0\n    var notes_length_count46\
    \ = 0\n    var notes_length_count47 = 0\n    var notes_length_count48 = 0\n  \
    \  var notes_length_count49 = 0\n    var notes_length_count50 = 0\n    var notes_length_count51\
    \ = 0\n    var notes_length_count52 = 0\n    var notes_length_count53 = 0\n  \
    \  var notes_length_count54 = 0\n    var notes_length_count55 = 0\n    var notes_length_count56\
    \ = 0\n    var notes_length_count57 = 0\n    var notes_length_count58 = 0\n  \
    \  var notes_length_count59 = 0\n    var notes_length_count60 = 0\n    var notes_length_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyz342xas.swift:77:9: error: type annotation missing in pattern\n\
    \    var notes_length_count\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ 'o' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = c\n        } else if c == '|' {\n            current_beat\
    \ += 1\n        } else if c == '.' {\n            current_note = c\n        }\
    \ else {\n            fatalError(\"Unexpected character '\\(current_note)' at\
    \ position \\(current_beat + 1)\")\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxsp92_sx.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpxsp92_sx.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpxsp92_sx.swift:22:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpxsp92_sx.swift:14:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beats_count\
    \ = 0\n    var current_note_count = 0\n    for c in music_string {\n        if\
    \ c == 'o' {\n            if current_beat == 0 {\n                current_beats_count\
    \ = 0\n            } else {\n                current_beats_count += 1\n      \
    \      }\n            current_beats.append(current_beats_count)\n            current_beat\
    \ = 0\n            current_note_count = 0\n            current_note = \"\"\n \
    \       } else if c == '|' {\n            if current_beat == 0 {\n           \
    \     current_beats_count = 0\n            } else {\n                current_beats_count\
    \ += 1\n            }\n            current_beats.append(current_beats_count)\n\
    \            current_beat = 0\n            current_note_count = 0\n          \
    \  current_note = \"\"\n        } else if c == '.' {\n            if current_note_count\
    \ == 0 {\n                current_beats_count = 0\n            } else {\n    \
    \            current_beats_count += 1\n            }\n            current_beats.append(current_beats_count)\n\
    \            current_beat = 0\n            current_note_count = 0\n          \
    \  current_note = \"\"\n        } else {\n            current_note += String(c)\n\
    \            current_note_count += 1\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvhr59dju.swift:19:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpvhr59dju.swift:29:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpvhr59dju.swift:39:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpvhr59dju.swift:25:13: error: cannot find\
    \ 'current_beats' in scope\n            current_beats.append(current_beats_count)\n\
    \            ^~~~~~~~~~~~~\n/tmp/tmpvhr59dju.swift:35:13: error: cannot find 'current_beats'\
    \ in scope\n            current_beats.append(current_beats_count)\n          \
    \  ^~~~~~~~~~~~~\n/tmp/tmpvhr59dju.swift:45:13: error: cannot find 'current_beats'\
    \ in scope\n            current_beats.append(current_beats_count)\n          \
    \  ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last_note = \"\"\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_beat_index2 = 0\n    var last_beat_index3\
    \ = 0\n    var last_beat_index4 = 0\n    var last_beat_index5 = 0\n    var last_beat_index6\
    \ = 0\n    var last_beat_index7 = 0\n    var last_beat_index8 = 0\n    var last_beat_index9\
    \ = 0\n    var last_beat_index10 = 0\n    var last_beat_index11 = 0\n    var last_beat_index12\
    \ = 0\n    var last_beat_index13 = 0\n    var last_beat_index14 = 0\n    var last_beat_index15\
    \ = 0\n    var last_beat_index16 = 0\n    var last_beat_index17 = 0\n    var last_beat_index18\
    \ = 0\n    var last_beat_index19 = 0\n    var last_beat_index20 = 0\n    var last_beat_index21\
    \ = 0\n    var last_beat_index22 = 0\n    var last_beat_index23 = 0\n    var last_beat_index24\
    \ = 0\n    var last_beat_index25 = 0\n    var last_beat_index26 = 0\n    var last_beat_index27\
    \ = 0\n    var last_beat_index28 = 0\n    var last_beat_index29 = 0\n    var last_beat_index30\
    \ = 0\n    var last_beat_index31 = 0\n    var last_beat_index32 = 0\n    var last_beat_index33\
    \ = 0\n    var last_beat_index34 = 0\n    var last_beat_index35 = 0\n    var last_beat_index36\
    \ = 0\n    var last_beat_index37 = 0\n    var last_beat_index38 = 0\n    var last_beat_index39\
    \ = 0\n    var last_beat_index40 = 0\n    var last_beat_index41 = 0\n    var last_beat_index42\
    \ = 0\n    var last_beat_index43 = 0\n    var last_beat_index44 = 0\n    var last_beat_index45\
    \ = 0\n    var last_beat_index46 = 0\n    var last_beat_index47 = 0\n    var last_beat_index48\
    \ = 0\n    var last_beat_index49 = 0\n    var last_beat_index50 = 0\n    var last_beat_index51\
    \ = 0\n    var last_beat_index52 = 0\n    var last_beat_index53 = 0\n    var last_beat_index54\
    \ = 0\n    var last_beat_index55 = 0\n    var last_beat_index56 = 0\n    var last_beat_index57\
    \ = 0\n    var last_beat_index58 = 0\n    var last_beat_index59 = 0\n    var last_beat_index60\
    \ = 0\n    var last_beat_index61 = 0\n    var last_beat_index62 = 0\n    var last_beat_index63\
    \ = 0\n    var last_beat_index64 = 0\n    var last_beat_index65 = 0\n    var last_beat_index66\
    \ = 0\n    var last_beat_index67 = 0\n    var last_beat_index68 = 0\n    var last_beat_index69\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt03ep5or.swift:86:9: error: type annotation missing in pattern\n\
    \    var last_beat_index69\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_index = 0\n    var last_note =\
    \ String()\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note_is_rest = false\n    var last_note_is_rest_index = 0\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest_index = 0\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest_index = 0\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest_index = 0\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest_index = 0\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest_index = 0\n    var last_note_is_rest = false\n    var last_note_is_rest_index\
    \ = 0\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest = false\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest = false\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest = false\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest = false\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest = false\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest = false\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var last_note_is_rest = false\n    var last_note_is_rest = false\n    var\
    \ last_note_is_rest = false\n    var last_note_is_rest = false\n    var last_note_is_rest\
    \ = false\n    var last_note_is_rest = false\n    var last_note_is_rest = false\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc_7viy0b.swift:85:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpc_7viy0b.swift:22:9: error: invalid redeclaration of 'last_note_is_rest'\n\
    \    var last_note_is_rest = false\n        ^\n/tmp/tmpc_7viy0b.swift:20:9: note:\
    \ 'last_note_is_rest' previously declared here\n    var last_note_is_rest = false\n\
    \        ^\n/tmp/tmpc_7viy0b.swift:23:9: error: invalid redeclaration of 'last_note_is_rest_index'\n\
    \    var last_note_is_rest_index = 0\n        ^\n/tmp/tmpc_7viy0b.swift:21:9:\
    \ note: 'last_note_is_rest_index' previously declared here\n    var last_note_is_rest_index\
    \ = 0\n        ^\n/tmp/tmpc_7viy0b.swift:24:9: error: invalid redeclaration of\
    \ 'last_note_is_rest'\n    var last_note_is_rest = false\n        ^\n/tmp/tmpc_7viy0b.swift:20:9:\
    \ note: 'last_note_is_rest' previously declared here\n    var last_note_is_rest\
    \ = false\n        ^\n/tmp/tmpc_7viy0b.swift:25:9: error: invalid redeclaration\
    \ of 'last_note_is_rest_index'\n    var last_note_is_rest_index = 0\n        ^\n\
    /tmp/tmpc_7viy0b.swift:21:9: note: 'last_note_is_rest_index' previously declared\
    \ here\n    var last_note_is_rest_index = 0\n        ^\n/tmp/tmpc_7viy0b.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_is_rest'\n    var last_note_is_rest\
    \ = false\n        ^\n/tmp/tmpc_7viy0b.swift:20:9: note: 'last_note_is_rest' previously\
    \ declared here\n    var last_note_is_rest = false\n        ^\n/tmp/tmpc_7viy0b.swift:27:9:\
    \ error: invalid redeclaration of 'last_note_is_rest_index'\n    var last_note_is_rest_index\
    \ = 0\n        ^\n/tmp/tmpc_7viy0b.swift:21:9: note: 'last_note_is_rest_index'\
    \ previously declared here\n    var last_note_is_rest_index = 0\n        ^\n/tmp/tmpc_7viy0b.swift:28:9:\
    \ error: invalid redeclaration of 'last_note_is_rest'\n    var last_note_is_rest\
    \ = false\n        ^\n/tmp/tmpc_7viy0b.swift:20:9: note: 'last_note_is_rest' previously\
    \ declared here\n    var last_note_is_rest = false\n        ^\n/tmp/tmpc_7viy0b.swift:29:9:\
    \ error: invalid redeclaration of 'last_note_is_rest_index'\n    var last_note_is_rest_index\
    \ = 0\n        ^\n/tmp/tmpc_7viy0b.swift:21:9: note: 'last_note_is_rest"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note_index = 0\n    var\
    \ note_char = \"\"\n    var note_char_index = 0\n    var note_char_is_note = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char_is_rest = false\n    var note_char_is_rest\
    \ = false\n    var note_char_is_rest = false\n    var note_char_is_rest = false\n\
    \    var note_char_is_rest = false\n    var note_char_is_rest = false\n    var\
    \ note_char_is_rest = false\n    var note_char\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpty50dbul.swift:21:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:22:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:23:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:24:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:25:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:26:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:27:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:28:9: error: invalid redeclaration of 'note_char_is_rest'\n\
    \    var note_char_is_rest = false\n        ^\n/tmp/tmpty50dbul.swift:20:9: note:\
    \ 'note_char_is_rest' previously declared here\n    var note_char_is_rest = false\n\
    \        ^\n/tmp/tmpty50dbul.swift:29:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzhvb690f.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:31:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:35:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:34:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpzhvb690f.swift:38:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for note in music_string {\n        if note\
    \ == 'o' {\n            beats.append(current_beat)\n            current_beat =\
    \ 0\n            current_note = note\n        } else if note == '|' {\n      \
    \      beats.append(current_beat)\n            current_beat += 1\n           \
    \ current_note = note\n        } else {\n            current_beat += 1\n     \
    \   }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvxicfdn6.swift:16:20: error: single-quoted string literal found,\
    \ use '\"'\n        if note == 'o' {\n                   ^~~\n               \
    \    \"o\"\n/tmp/tmpvxicfdn6.swift:20:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if note == '|' {\n                         \
    \ ^~~\n                          \"|\"\n/tmp/tmpvxicfdn6.swift:14:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvxicfdn6.swift:14:9:\
    \ warning: variable 'current_note' was written to, but never read\n    var current_note\
    \ = music_string[0]\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_octave\
    \ = 0\n    var current_note_octave_sign = 0\n    var current_note_octave_sign_index\
    \ = 0\n    var current_note_octave_index = 0\n    var current_note_octave_octave\
    \ = 0\n    var current_note_octave_octave_sign = 0\n    var current_note_octave_octave_sign_index\
    \ = 0\n    var current_note_octave_octave_index = 0\n    var current_note_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_sign = 0\n    var current_note_octave_octave_octave_sign_index\
    \ = 0\n    var current_note_octave_octave_octave_index = 0\n    var current_note_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_sign = 0\n    var current_note_octave_octave_octave_octave_sign_index\
    \ = 0\n    var current_note_octave_octave_octave_index = 0\n    var current_note_octave_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_octave_sign = 0\n    var current_note_octave_octave_octave_octave_sign_index\
    \ = 0\n    var current_note_octave_octave_index = 0\n    var current_note_octave_octave_octave\
    \ = 0\n    var current_note_octave_octave_octave_sign = 0\n    var current_note_octave_octave_octave_sign_index\
    \ = 0\n    var current_note_octave_index = 0\n    var current_note_octave = 0\n\
    \    var current_note_octave_sign = 0\n    var current_note_octave_sign_index\
    \ = 0\n    var current_note_octave_index = 0\n    var current_note_octave = 0\n\
    \    var current_note_octave_octave = 0\n    var current_note_octave_octave_sign\
    \ = 0\n    var current_note_octave_octave_sign_index = 0\n    var current_note_octave_index\
    \ = 0\n    var current_note_octave = 0\n    var current_note_octave_octave = 0\n\
    \    var current_note_octave_octave_sign = 0\n    var current_note_octave_octave_sign_index\
    \ = 0\n    var current_note_octave_index = 0\n    var current_note_octave = 0\n\
    \    var current_note_octave_octave = 0\n    var current_note_octave_octave_sign\
    \ = 0\n    var current_note_octa\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpverc5_61.swift:31:9: error: invalid redeclaration of 'current_note_octave_octave_octave_index'\n\
    \    var current_note_octave_octave_octave_index = 0\n        ^\n/tmp/tmpverc5_61.swift:27:9:\
    \ note: 'current_note_octave_octave_octave_index' previously declared here\n \
    \   var current_note_octave_octave_octave_index = 0\n        ^\n/tmp/tmpverc5_61.swift:32:9:\
    \ error: invalid redeclaration of 'current_note_octave_octave_octave_octave'\n\
    \    var current_note_octave_octave_octave_octave = 0\n        ^\n/tmp/tmpverc5_61.swift:28:9:\
    \ note: 'current_note_octave_octave_octave_octave' previously declared here\n\
    \    var current_note_octave_octave_octave_octave = 0\n        ^\n/tmp/tmpverc5_61.swift:33:9:\
    \ error: invalid redeclaration of 'current_note_octave_octave_octave_octave_sign'\n\
    \    var current_note_octave_octave_octave_octave_sign = 0\n        ^\n/tmp/tmpverc5_61.swift:29:9:\
    \ note: 'current_note_octave_octave_octave_octave_sign' previously declared here\n\
    \    var current_note_octave_octave_octave_octave_sign = 0\n        ^\n/tmp/tmpverc5_61.swift:34:9:\
    \ error: invalid redeclaration of 'current_note_octave_octave_octave_octave_sign_index'\n\
    \    var current_note_octave_octave_octave_octave_sign_index = 0\n        ^\n\
    /tmp/tmpverc5_61.swift:30:9: note: 'current_note_octave_octave_octave_octave_sign_index'\
    \ previously declared here\n    var current_note_octave_octave_octave_octave_sign_index\
    \ = 0\n        ^\n/tmp/tmpverc5_61.swift:35:9: error: invalid redeclaration of\
    \ 'current_note_octave_octave_index'\n    var current_note_octave_octave_index\
    \ = 0\n        ^\n/tmp/tmpverc5_61.swift:23:9: note: 'current_note_octave_octave_index'\
    \ previously declared here\n    var current_note_octave_octave_index = 0\n   \
    \     ^\n/tmp/tmpverc5_61.swift:36:9: error: invalid redeclaration of 'current_note_octave_octave_octave'\n\
    \    var current_note_octave_octave_octave = 0\n        ^\n/tmp/tmpverc5_61.swift:24:9:\
    \ note: 'current_note_octave_octave_octave' previously declared here\n    var\
    \ current_note_octave_octave_octave = 0\n        ^\n/tmp/tmpverc5_61.swift:37:9:\
    \ error: invalid redecl"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string.characters.first!\n    var current_note_length =\
    \ 0\n    var current_note_length_index = 0\n    var current_note_length_index2\
    \ = 0\n    var current_note_length_index3 = 0\n    var current_note_length_index4\
    \ = 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9h860hm5.swift:14:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var current_note = music_string.characters.first!\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9h860hm5.swift:76:9: error: type annotation missing\
    \ in pattern\n    var current_note_length\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_count = 0\n   \
    \ var note_count = 0\n    var note_char = \"\"\n    var note_char_count = 0\n\
    \    var note_char_index = 0\n    var note_char_index2 = 0\n    var note_char_index3\
    \ = 0\n    var note_char_index4 = 0\n    var note_char_index5 = 0\n    var note_char_index6\
    \ = 0\n    var note_char_index7 = 0\n    var note_char_index8 = 0\n    var note_char_index9\
    \ = 0\n    var note_char_index10 = 0\n    var note_char_index11 = 0\n    var note_char_index12\
    \ = 0\n    var note_char_index13 = 0\n    var note_char_index14 = 0\n    var note_char_index15\
    \ = 0\n    var note_char_index16 = 0\n    var note_char_index17 = 0\n    var note_char_index18\
    \ = 0\n    var note_char_index19 = 0\n    var note_char_index20 = 0\n    var note_char_index21\
    \ = 0\n    var note_char_index22 = 0\n    var note_char_index23 = 0\n    var note_char_index24\
    \ = 0\n    var note_char_index25 = 0\n    var note_char_index26 = 0\n    var note_char_index27\
    \ = 0\n    var note_char_index28 = 0\n    var note_char_index29 = 0\n    var note_char_index30\
    \ = 0\n    var note_char_index31 = 0\n    var note_char_index32 = 0\n    var note_char_index33\
    \ = 0\n    var note_char_index34 = 0\n    var note_char_index35 = 0\n    var note_char_index36\
    \ = 0\n    var note_char_index37 = 0\n    var note_char_index38 = 0\n    var note_char_index39\
    \ = 0\n    var note_char_index40 = 0\n    var note_char_index41 = 0\n    var note_char_index42\
    \ = 0\n    var note_char_index43 = 0\n    var note_char_index44 = 0\n    var note_char_index45\
    \ = 0\n    var note_char_index46 = 0\n    var note_char_index47 = 0\n    var note_char_index48\
    \ = 0\n    var note_char_index49 = 0\n    var note_char_index50 = 0\n    var note_char_index51\
    \ = 0\n    var note_char_index52 = 0\n    var note_char_index53 = 0\n    var note_char_index54\
    \ = 0\n    var note_char_index55 = 0\n    var note_char_index56 = 0\n    var note_char_index57\
    \ = 0\n    var note_char_index58 = 0\n    var note_char_index59 = 0\n    var note_char_index60\
    \ = 0\n    var note_char_index61 = 0\n    var note_char_index62 = 0\n    var note_char_index63\
    \ = 0\n    var note_char_index64 = 0\n    var note_char_index65 = 0\n    var note_char_index66\
    \ = 0\n    var note_char_index67 = 0\n    var note_char_index68 = 0\n    var note_char_index69\
    \ = 0\n    var note_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpaprbful5.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_char\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = nil\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0ehp0781.swift:14:24: error: 'nil' requires a contextual type\n\
    \    var current_note = nil\n                       ^\n/tmp/tmp0ehp0781.swift:16:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmp0ehp0781.swift:17:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmp0ehp0781.swift:18:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmp0ehp0781.swift:19:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmp0ehp0781.swift:20:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmp0ehp0781.swift:21:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmp0ehp0781.swift:22:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current_note_length' previously\
    \ declared here\n    var current_note_length = -1\n        ^\n/tmp/tmp0ehp0781.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length'\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmp0ehp0781.swift:15:9: note: 'current"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var beats_count = 0\n\
    \    var notes_count = 0\n    var note_length = 0\n    var note_length_count =\
    \ 0\n    var note_length_index = 0\n    var note_length_index2 = 0\n    var note_length_index3\
    \ = 0\n    var note_length_index4 = 0\n    var note_length_index5 = 0\n    var\
    \ note_length_index6 = 0\n    var note_length_index7 = 0\n    var note_length_index8\
    \ = 0\n    var note_length_index9 = 0\n    var note_length_index10 = 0\n    var\
    \ note_length_index11 = 0\n    var note_length_index12 = 0\n    var note_length_index13\
    \ = 0\n    var note_length_index14 = 0\n    var note_length_index15 = 0\n    var\
    \ note_length_index16 = 0\n    var note_length_index17 = 0\n    var note_length_index18\
    \ = 0\n    var note_length_index19 = 0\n    var note_length_index20 = 0\n    var\
    \ note_length_index21 = 0\n    var note_length_index22 = 0\n    var note_length_index23\
    \ = 0\n    var note_length_index24 = 0\n    var note_length_index25 = 0\n    var\
    \ note_length_index26 = 0\n    var note_length_index27 = 0\n    var note_length_index28\
    \ = 0\n    var note_length_index29 = 0\n    var note_length_index30 = 0\n    var\
    \ note_length_index31 = 0\n    var note_length_index32 = 0\n    var note_length_index33\
    \ = 0\n    var note_length_index34 = 0\n    var note_length_index35 = 0\n    var\
    \ note_length_index36 = 0\n    var note_length_index37 = 0\n    var note_length_index38\
    \ = 0\n    var note_length_index39 = 0\n    var note_length_index40 = 0\n    var\
    \ note_length_index41 = 0\n    var note_length_index42 = 0\n    var note_length_index43\
    \ = 0\n    var note_length_index44 = 0\n    var note_length_index45 = 0\n    var\
    \ note_length_index46 = 0\n    var note_length_index47 = 0\n    var note_length_index48\
    \ = 0\n    var note_length_index49 = 0\n    var note_length_index50 = 0\n    var\
    \ note_length_index51 = 0\n    var note_length_index52 = 0\n    var note_length_index53\
    \ = 0\n    var note_length_index54 = 0\n    var note_length_index55 = 0\n    var\
    \ note_length_index56 = 0\n    var note_length_index57 = 0\n    var note_length_index58\
    \ = 0\n    var note_length_index59 = 0\n    var note_length_index60 = 0\n    var\
    \ note_length_index61 = 0\n    var note_length_index62 = 0\n    var note_length_index63\
    \ = 0\n    var note_length_index64 = 0\n    var note_length_index65 = 0\n    var\
    \ note_length_index66 = 0\n    var note_length_index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfnv8i_8e.swift:87:9: error: type annotation missing in pattern\n\
    \    var note_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var note_length = -1\n    var note_length = -1\n \
    \   var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = -1\n    var note_length = -1\n    var note_length = -1\n\
    \    var note_length = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9z34r6m1.swift:113:22: error: expected initial value after '='\n\
    \    var note_length = \n                     ^\n/tmp/tmp9z34r6m1.swift:16:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp9z34r6m1.swift:15:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:17:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp9z34r6m1.swift:15:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:18:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:15:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp9z34r6m1.swift:19:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:15:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:20:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp9z34r6m1.swift:15:9: note: 'note_length' previously declared\
    \ here\n    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:21:9: error:\
    \ invalid redeclaration of 'note_length'\n    var note_length = -1\n        ^\n\
    /tmp/tmp9z34r6m1.swift:15:9: note: 'note_length' previously declared here\n  \
    \  var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:22:9: error: invalid\
    \ redeclaration of 'note_length'\n    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:15:9:\
    \ note: 'note_length' previously declared here\n    var note_length = -1\n   \
    \     ^\n/tmp/tmp9z34r6m1.swift:23:9: error: invalid redeclaration of 'note_length'\n\
    \    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:15:9: note: 'note_length'\
    \ previously declared here\n    var note_length = -1\n        ^\n/tmp/tmp9z34r6m1.swift:24:9:\
    \ error: invalid redeclaration of 'note_length'\n    var note_length = -1\n  \
    \      ^\n/tmp/tmp9z34r6m1.swift:15:9: note: 'note_length' previously declared "
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var beats_count = 0\n\
    \    var note_counter = 0\n    var note_length = 0\n    var note_length_count\
    \ = 0\n    var note_length_index = 0\n    var note_length_index2 = 0\n    var\
    \ note_length_index3 = 0\n    var note_length_index4 = 0\n    var note_length_index5\
    \ = 0\n    var note_length_index6 = 0\n    var note_length_index7 = 0\n    var\
    \ note_length_index8 = 0\n    var note_length_index9 = 0\n    var note_length_index10\
    \ = 0\n    var note_length_index11 = 0\n    var note_length_index12 = 0\n    var\
    \ note_length_index13 = 0\n    var note_length_index14 = 0\n    var note_length_index15\
    \ = 0\n    var note_length_index16 = 0\n    var note_length_index17 = 0\n    var\
    \ note_length_index18 = 0\n    var note_length_index19 = 0\n    var note_length_index20\
    \ = 0\n    var note_length_index21 = 0\n    var note_length_index22 = 0\n    var\
    \ note_length_index23 = 0\n    var note_length_index24 = 0\n    var note_length_index25\
    \ = 0\n    var note_length_index26 = 0\n    var note_length_index27 = 0\n    var\
    \ note_length_index28 = 0\n    var note_length_index29 = 0\n    var note_length_index30\
    \ = 0\n    var note_length_index31 = 0\n    var note_length_index32 = 0\n    var\
    \ note_length_index33 = 0\n    var note_length_index34 = 0\n    var note_length_index35\
    \ = 0\n    var note_length_index36 = 0\n    var note_length_index37 = 0\n    var\
    \ note_length_index38 = 0\n    var note_length_index39 = 0\n    var note_length_index40\
    \ = 0\n    var note_length_index41 = 0\n    var note_length_index42 = 0\n    var\
    \ note_length_index43 = 0\n    var note_length_index44 = 0\n    var note_length_index45\
    \ = 0\n    var note_length_index46 = 0\n    var note_length_index47 = 0\n    var\
    \ note_length_index48 = 0\n    var note_length_index49 = 0\n    var note_length_index50\
    \ = 0\n    var note_length_index51 = 0\n    var note_length_index52 = 0\n    var\
    \ note_length_index53 = 0\n    var note_length_index54 = 0\n    var note_length_index55\
    \ = 0\n    var note_length_index56 = 0\n    var note_length_index57 = 0\n    var\
    \ note_length_index58 = 0\n    var note_length_index59 = 0\n    var note_length_index60\
    \ = 0\n    var note_length_index61 = 0\n    var note_length_index62 = 0\n    var\
    \ note_length_index63 = 0\n    var note_length_index64 = 0\n    var note_length_index65\
    \ = 0\n    var note_length_index66 = 0\n    var note_length_index67\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjeyompng.swift:87:9: error: type annotation missing in pattern\n\
    \    var note_length_index67\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_index = 0\n    var current_note_length\
    \ = 0\n    var current_note_octave = 0\n    var current_note_octave_length = 0\n\
    \    var current_note_octave_number = 0\n    var current_note_octave_number_length\
    \ = 0\n    var current_note_octave_number_number = 0\n    var current_note_octave_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number = 0\n    var current_note_octave_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number = 0\n    var current_note_octave_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number = 0\n    var current_note_octave_number_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number_number = 0\n  \
    \  var current_note_octave_number_number_number_number_number_length = 0\n   \
    \ var current_note_octave_number_number_number_number_number_number = 0\n    var\
    \ current_note_octave_number_number_number_number_number_number_length = 0\n \
    \   var current_note_octave_number_number_number_number_number_number_number =\
    \ 0\n    var current_note_octave_number_number_number_number_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_number\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_length\
    \ = 0\n    var current_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpswto2r4c.swift:26:9: error: invalid redeclaration of 'current_note_octave_number_number_number_length'\n\
    \    var current_note_octave_number_number_number_length = 0\n        ^\n/tmp/tmpswto2r4c.swift:24:9:\
    \ note: 'current_note_octave_number_number_number_length' previously declared\
    \ here\n    var current_note_octave_number_number_number_length = 0\n        ^\n\
    /tmp/tmpswto2r4c.swift:27:9: error: invalid redeclaration of 'current_note_octave_number_number_number_number'\n\
    \    var current_note_octave_number_number_number_number = 0\n        ^\n/tmp/tmpswto2r4c.swift:25:9:\
    \ note: 'current_note_octave_number_number_number_number' previously declared\
    \ here\n    var current_note_octave_number_number_number_number = 0\n        ^\n\
    /tmp/tmpswto2r4c.swift:45:9: error: type annotation missing in pattern\n    var\
    \ current_note_octave_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_number_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_length\
    \ = 0\n    var current_note_length_string_length_index = 0\n    var current_note_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string = \"\"\n    var current_note_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_value = 0\n    var current_note_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_index = 0\n   \
    \ var current_note_length_string_length_string_length_value = 0\n    var current_note_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_value =\
    \ 0\n    var current_note_length_string_length_string_length_string_length = 0\n\
    \    var current_note_length_string_length_string_length_string_length_index =\
    \ 0\n    var current_note_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = \"\"\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_value\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    var current_note_length_string_length_string_length_string_length_string_length_string_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_string_length\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwu56e06s.swift:53:9: error: type annotation missing in pattern\n\
    \    var current_note_length_string_length_string_length\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp03jxqf65.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_octave = 0\n    var current_length\
    \ = 0\n    var last_note = music_string[0]\n    var last_octave = 0\n    var last_length\
    \ = 0\n    for c in music_string {\n        if c == 'o' {\n            current_octave\
    \ += 1\n            current_length += 1\n        } else if c == '|' {\n      \
    \      current_length += 1\n        } else if c == '.' {\n            current_length\
    \ += 1\n            current_beat += 1\n        } else if c == 'o|' {\n       \
    \     current_length += 1\n            current_beat += 2\n        } else if c\
    \ == '.|' {\n            current_length += 1\n            current_beat += 1\n\
    \            current_octave += 1\n        } else {\n            current_length\
    \ += 1\n        }\n        if current_length == 4 {\n            beats.append(current_beat)\n\
    \            current_length = 0\n            current_beat = 0\n            current_note\
    \ = last_note\n            current_octave = last_octave\n        }\n        last_note\
    \ = c\n        last_octave = current_octave\n        last_length = current_length\n\
    \    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvsyj1p6x.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpvsyj1p6x.swift:24:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpvsyj1p6x.swift:26:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpvsyj1p6x.swift:29:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == 'o|' {\n            \
    \           ^~~~\n                       \"o|\"\n/tmp/tmpvsyj1p6x.swift:32:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '.|' {\n                       ^~~~\n                       \".|\"\n/tmp/tmpvsyj1p6x.swift:14:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var current_note = music_string[0]\n      \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpvsyj1p6x.swift:17:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var last_note = music_string[0]\n                    ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvsyj1p6x.swift:29:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmpvsyj1p6x.swift:29:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmpvsyj1p6x.swift:32:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' "
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ current_beat = 0\n    var current_note = String()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjmfylem0.swift:17:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpjmfylem0.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpjmfylem0.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpjmfylem0.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpjmfylem0.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpjmfylem0.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpjmfylem0.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpjmfylem0.swift:24:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpjmfylem0.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_position\
    \ = 0\n    var current_note_length = -1\n    var current_note_position = -1\n\
    \    var current_note_length = -1\n    var current_note_position = -1\n    var\
    \ current_note_length = -1\n    var current_note_position = -1\n    var current_note_length\
    \ = -1\n    var current_note_position = -1\n    var current_note_length = -1\n\
    \    var current_note_position = -1\n    var current_note_length = -1\n    var\
    \ current_note_position = -1\n    var current_note_length = -1\n    var current_note_position\
    \ = -1\n    var current_note_length = -1\n    var current_note_position = -1\n\
    \    var current_note_length = -1\n    var current_note_position = -1\n    var\
    \ current_note_length = -1\n    var current_note_position = -1\n    var current_note_length\
    \ = -1\n    var current_note_position = -1\n    var current_note_length = -1\n\
    \    var current_note_position = -1\n    var current_note_length = -1\n    var\
    \ current_note_position = -1\n    var current_note_length = -1\n    var current_note_position\
    \ = -1\n    var current_note_length = -1\n    var current_note_position = -1\n\
    \    var current_note_length = -1\n    var current_note_position = -1\n    var\
    \ current_note_length = -1\n    var current_note_position = -1\n    var current_note_length\
    \ = -1\n    var current_note_position = -1\n    var current_note_length = -1\n\
    \    var current_note_position = -1\n    var current_note_length = -1\n    var\
    \ current_note_position = -1\n    var current_note_length = -1\n    var current_note_position\
    \ = -1\n    var current_note_length = -1\n    var current_note_position = -1\n\
    \    var current_note_length = -1\n    var current_note_position = -1\n    var\
    \ current_note_length = -1\n    var current_note_position = -1\n    var current_note_length\
    \ = -1\n    var current_note_position = -1\n    var current_note_length = -1\n\
    \    var current_note_position = -1\n    var current_note_length = -1\n    var\
    \ current_note_position = -1\n    var current_note_length = -1\n    var current_note_position\
    \ = -1\n    var current_note_length = -1\n    var current_note_position = -1\n\
    \    var current_note_length = -1\n    var current_note_position = -1\n    var\
    \ current_note_length = -1\n    var current_note_position = -1\n    var current_note_length\
    \ = -1\n    var current_note_position = -1\n    var current_note_length = -1\n\
    \    var current_note_position = -1\n    var current_note_length = -1\n    var\
    \ current_note_position = -1\n    var current_note_length = -1\n    var current_note_position\
    \ = -1\n    var current_note_length = -1\n    var current_note_position = -1\n\
    \    var current_note_length = -1\n    var current_note_position = -1\n    var\
    \ current_note_length = -1\n    var current_note_position = -1\n    var current_note_length\
    \ = -1\n    var current_note_position = -1\n    var current_note_length = -1\n\
    \    var current_note_position = -1\n    var current_note_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpx9hhasgh.swift:19:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = -1\n        ^\n/tmp/tmpx9hhasgh.swift:17:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpx9hhasgh.swift:20:9: error: invalid redeclaration of\
    \ 'current_note_position'\n    var current_note_position = -1\n        ^\n/tmp/tmpx9hhasgh.swift:18:9:\
    \ note: 'current_note_position' previously declared here\n    var current_note_position\
    \ = -1\n        ^\n/tmp/tmpx9hhasgh.swift:21:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpx9hhasgh.swift:17:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpx9hhasgh.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_position'\n    var current_note_position = -1\n        ^\n/tmp/tmpx9hhasgh.swift:18:9:\
    \ note: 'current_note_position' previously declared here\n    var current_note_position\
    \ = -1\n        ^\n/tmp/tmpx9hhasgh.swift:23:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpx9hhasgh.swift:17:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpx9hhasgh.swift:24:9: error: invalid redeclaration of\
    \ 'current_note_position'\n    var current_note_position = -1\n        ^\n/tmp/tmpx9hhasgh.swift:18:9:\
    \ note: 'current_note_position' previously declared here\n    var current_note_position\
    \ = -1\n        ^\n/tmp/tmpx9hhasgh.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpx9hhasgh.swift:17:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpx9hhasgh.swift:26:9: error: invalid redeclaration of\
    \ 'current_note_position'\n    var current_note_position = -1\n        ^\n/tmp/tmpx9hhasgh.swift:18:9:\
    \ note: 'current_note_position' previously declared here\n    var current_note_position\
    \ = -1\n        ^\n/tmp/tmp"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastbeat = 0\n  \
    \  var lastnote = 0\n    var lastlast = 0\n    var lastlastbeat = 0\n    var lastlastnote\
    \ = 0\n    var lastlastlast = 0\n    var lastlastlastbeat = 0\n    var lastlastlastnote\
    \ = 0\n    var lastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var\
    \ lastlastlastlastnote = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastnote = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastbeat = 0\n    var lastlastlastlastnote = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n  \
    \  var lastlastlastlastlast = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlast\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphegkozhq.swift:29:9: error: invalid redeclaration of 'lastlastlastlastbeat'\n\
    \    var lastlastlastlastbeat = 0\n        ^\n/tmp/tmphegkozhq.swift:26:9: note:\
    \ 'lastlastlastlastbeat' previously declared here\n    var lastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:30:9: error: invalid redeclaration of\
    \ 'lastlastlastlastnote'\n    var lastlastlastlastnote = 0\n        ^\n/tmp/tmphegkozhq.swift:27:9:\
    \ note: 'lastlastlastlastnote' previously declared here\n    var lastlastlastlastnote\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:31:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:32:9: error: invalid redeclaration of\
    \ 'lastlastlastlastbeat'\n    var lastlastlastlastbeat = 0\n        ^\n/tmp/tmphegkozhq.swift:26:9:\
    \ note: 'lastlastlastlastbeat' previously declared here\n    var lastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:33:9: error: invalid redeclaration of\
    \ 'lastlastlastlastnote'\n    var lastlastlastlastnote = 0\n        ^\n/tmp/tmphegkozhq.swift:27:9:\
    \ note: 'lastlastlastlastnote' previously declared here\n    var lastlastlastlastnote\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:34:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:35:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:36:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlast'\n    var lastlastlastlastlast = 0\n        ^\n/tmp/tmphegkozhq.swift:28:9:\
    \ note: 'lastlastlastlastlast' previously declared here\n    var lastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmphegkozhq.swift:3"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ last_beat = 0\n    var last_note = String()\n    var last_note_beat = 0\n  \
    \  var last_note_octave = 0\n    var last_note_duration = 0\n    var last_note_duration_in_beats\
    \ = 0\n    var last_note_duration_in_octave = 0\n    var last_note_duration_in_notes\
    \ = 0\n    var last_note_duration_in_chords = 0\n    var last_note_duration_in_chords_octave\
    \ = 0\n    var last_note_duration_in_chords_notes = 0\n    var last_note_duration_in_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_octave = 0\n    var last_note_duration_in_chords_chords_notes\
    \ = 0\n    var last_note_duration_in_chords_chords_chords = 0\n    var last_note_duration_in_chords_chords_chords_octave\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_chords_notes = 0\n    var last_note_duration_in_chords_chords_chords_chords\
    \ = 0\n    var last_note_duration_in_chords_chords_chords_octave = 0\n    var\
    \ last_note_duration_in_chords_chords_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0vhq8ocl.swift:32:9: error: invalid redeclaration of 'last_note_duration_in_chords_chords_chords_octave'\n\
    \    var last_note_duration_in_chords_chords_chords_octave = 0\n        ^\n/tmp/tmp0vhq8ocl.swift:29:9:\
    \ note: 'last_note_duration_in_chords_chords_chords_octave' previously declared\
    \ here\n    var last_note_duration_in_chords_chords_chords_octave = 0\n      \
    \  ^\n/tmp/tmp0vhq8ocl.swift:33:9: error: invalid redeclaration of 'last_note_duration_in_chords_chords_chords_notes'\n\
    \    var last_note_duration_in_chords_chords_chords_notes = 0\n        ^\n/tmp/tmp0vhq8ocl.swift:30:9:\
    \ note: 'last_note_duration_in_chords_chords_chords_notes' previously declared\
    \ here\n    var last_note_duration_in_chords_chords_chords_notes = 0\n       \
    \ ^\n/tmp/tmp0vhq8ocl.swift:34:9: error: invalid redeclaration of 'last_note_duration_in_chords_chords_chords_chords'\n\
    \    var last_note_duration_in_chords_chords_chords_chords = 0\n        ^\n/tmp/tmp0vhq8ocl.swift:31:9:\
    \ note: 'last_note_duration_in_chords_chords_chords_chords' previously declared\
    \ here\n    var last_note_duration_in_chords_chords_chords_chords = 0\n      \
    \  ^\n/tmp/tmp0vhq8ocl.swift:35:9: error: invalid redeclaration of 'last_note_duration_in_chords_chords_chords_octave'\n\
    \    var last_note_duration_in_chords_chords_chords_octave = 0\n        ^\n/tmp/tmp0vhq8ocl.swift:29:9:\
    \ note: 'last_note_duration_in_chords_chords_chords_octave' previously declared\
    \ here\n    var last_note_duration_in_chords_chords_chords_octave = 0\n      \
    \  ^\n/tmp/tmp0vhq8ocl.swift:36:9: error: invalid redeclaration of 'last_note_duration_in_chords_chords_chords_notes'\n\
    \    var last_note_duration_in_chords_chords_chords_notes = 0\n        ^\n/tmp/tmp0vhq8ocl.swift:30:9:\
    \ note: 'last_note_duration_in_chords_chords_chords_notes' previously declared\
    \ here\n    var last_note_duration_in_chords_chords_chords_notes = 0\n       \
    \ ^\n/tmp/tmp0vhq8ocl.swift:37:9: error: invalid redeclaration of 'last_note_duration_in_chords_chords_chords_chords'\n\
    \    var last_note_duration_in_chords_chords_chords_chords = 0\n        ^\n/tmp/tmp0vhq8ocl.swift:31:"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpaklbmg0b.swift:21:9: error: invalid redeclaration of 'current_note_length_string_value_index'\n\
    \    var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:22:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_ind"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptzvmxrab.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptzvmxrab.swift:76:9:\
    \ error: type annotation missing in pattern\n    var current_note_length_index61\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1rmlh6an.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp1rmlh6an.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp1rmlh6an.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note_type = String()\n    var current_note_type = String()\n\
    \    var current_note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8ak_4x3_.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp8ak_4x3_.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp8ak_4x3_.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_type'\n    var current_note_type = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:17:9:\
    \ note: 'current_note_type' previously declared here\n    var current_note_type\
    \ = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_type'\n    var current_note_type = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:17:9:\
    \ note: 'current_note_type' previously declared here\n    var current_note_type\
    \ = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_type'\n    var current_note_type = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:17:9:\
    \ note: 'current_note_type' previously declared here\n    var current_note_type\
    \ = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_type'\n    var current_note_type = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:17:9:\
    \ note: 'current_note_type' previously declared here\n    var current_note_type\
    \ = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_type'\n    var current_note_type = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:17:9:\
    \ note: 'current_note_type' previously declared here\n    var current_note_type\
    \ = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_type'\n    var current_note_type = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:17:9:\
    \ note: 'current_note_type' previously declared here\n    var current_note_type\
    \ = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:24:9: error: invalid redeclaration\
    \ of 'current_note_type'\n    var current_note_type = String()\n        ^\n/tmp/tmp8ak_4x3_.swift:17:9:\
    \ note: 'current_note_type' previously declared here\n    var current_note_type\
    \ = String()\n        ^\n/tmp/t"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_length\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_length = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_length = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_note_length_string_value_length_index\
    \ = 0\n    var current_note_length_string_value_length_index = 0\n    var current_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6_py19zx.swift:23:9: error: invalid redeclaration of 'current_note_length_string_value_length'\n\
    \    var current_note_length_string_value_length = 0\n        ^\n/tmp/tmp6_py19zx.swift:21:9:\
    \ note: 'current_note_length_string_value_length' previously declared here\n \
    \   var current_note_length_string_value_length = 0\n        ^\n/tmp/tmp6_py19zx.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_length_index'\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:24:9:\
    \ note: 'current_note_length_string_value_length_index' previously declared here\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_length_index'\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:24:9:\
    \ note: 'current_note_length_string_value_length_index' previously declared here\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_length_index'\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:24:9:\
    \ note: 'current_note_length_string_value_length_index' previously declared here\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_length_index'\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:24:9:\
    \ note: 'current_note_length_string_value_length_index' previously declared here\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_length_index'\n\
    \    var current_note_length_string_value_length_index = 0\n        ^\n/tmp/tmp6_py19zx.swift:24:9:\
    \ note: 'current_note_length_string_value_length_index' previously declared here\n\
    \    var current_note_l"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_index = 0\n    var current_note_length\
    \ = 4\n    var current_note_octave = 0\n    var current_note_duration = 0\n  \
    \  var current_note_duration_index = 0\n    var current_note_duration_length =\
    \ 4\n    var current_note_duration_octave = 0\n    var current_note_duration_duration\
    \ = 0\n    var current_note_duration_duration_index = 0\n    var current_note_duration_duration_length\
    \ = 4\n    var current_note_duration_duration_octave = 0\n    var current_note_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_index = 0\n    var current_note_duration_duration_duration_length\
    \ = 4\n    var current_note_duration_duration_duration_octave = 0\n    var current_note_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_index = 0\n  \
    \  var current_note_duration_duration_duration_duration_length = 4\n    var current_note_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration = 0\n\
    \    var current_note_duration_duration_duration_duration_duration_index = 0\n\
    \    var current_note_duration_duration_duration_duration_duration_length = 4\n\
    \    var current_note_duration_duration_duration_duration_duration_octave = 0\n\
    \    var current_note_duration_duration_duration_duration_duration_duration =\
    \ 0\n    var current_note_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_length\
    \ = 4\n    var current_note_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 4\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 4\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 4\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 4\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2e_cele_.swift:47:9: error: invalid redeclaration of 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_index'\n\
    \    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmp2e_cele_.swift:43:9: note: 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_index'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmp2e_cele_.swift:56:9: error: invalid redeclaration of\
    \ 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length'\n\
    \    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 4\n        ^\n/tmp/tmp2e_cele_.swift:52:9: note: 'current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 4\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_next\
    \ = 0\n    var current_note_length_value_next_next = 0\n    var current_note_length_value_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next = 0\n    var current_note_length_value_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next = 0\n \
    \   var current_note_length_value_next_next_next_next_next_next_next = 0\n   \
    \ var current_note_length_value_next_next_next_next_next_next_next_next = 0\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var current_note_length_value_next_next_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp40h3fpwa.swift:27:9: error: invalid redeclaration of 'current_note_length_value_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:26:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:29:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:31:9: note: 'current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var current_note_length_value_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmp40h3fpwa.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_l"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beats = 0\n\
    \    var last_beats_count = 0\n    var last_beats_count_in_note = 0\n    var last_beats_count_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note = 0\n\
    \    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat = 0\n\
    \    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgaty5acn.swift:32:9: error: invalid redeclaration of 'last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note'\n\
    \    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note\
    \ = 0\n        ^\n/tmp/tmpgaty5acn.swift:31:9: note: 'last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note'\
    \ previously declared here\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note\
    \ = 0\n        ^\n/tmp/tmpgaty5acn.swift:34:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat'\n\
    \    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n        ^\n/tmp/tmpgaty5acn.swift:33:9: note: 'last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat'\
    \ previously declared here\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n        ^\n/tmp/tmpgaty5acn.swift:35:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat'\n\
    \    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n        ^\n/tmp/tmpgaty5acn.swift:33:9: note: 'last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat'\
    \ previously declared here\n    var last_beats_count_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat_in_note_in_beat\
    \ = 0\n        ^\n/tmp/tmpgaty5acn.swift:36"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for char in music_string {\n       \
    \ if char == \"o\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else if char == \"|\"\
    \ {\n            beats.append(beat)\n            notes.append(note)\n        \
    \    beat = 0\n            note = \"\"\n        } else {\n            note +=\
    \ char\n        }\n    }\n    beats.append(beat)\n    notes.append(note)\n   \
    \ return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1exk8u6p.swift:28:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0wwxuzvb.swift:12:9: warning: initialization of variable 'beats_array'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats_array = [Int]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp0wwxuzvb.swift:13:9:\
    \ warning: initialization of variable 'current_beat' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_beat = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp0wwxuzvb.swift:14:9: warning: initialization\
    \ of variable 'current_note' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmp0wwxuzvb.swift:15:9: warning: initialization of variable 'current_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note_length = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0wwxuzvb.swift:16:9:\
    \ warning: initialization of variable 'current_note_length_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0wwxuzvb.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0wwxuzvb.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0wwxuzvb.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0wwxuzvb.swift:20:9:\
    \ warning: initialization of variable 'current_note_length_index5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index5\
    \ = 0\n    ~~~~^~~~~"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp03jxqf65.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_position\
    \ = 0\n    var current_note_length = -1\n    var current_note_length_is_half =\
    \ false\n    var current_note_length_is_quarter = false\n    var current_note_length_is_whole\
    \ = false\n    var current_note_length_is_whole_or_quarter = false\n    var current_note_length_is_whole_or_quarter_reverse\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole =\
    \ false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter\
    \ = false\n    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjxz3h_2v.swift:36:9: error: type annotation missing in pattern\n\
    \    var current_note_length_is_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_whole_or_quarter_reverse_or_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_index = 0\n    var note_length\
    \ = 0\n    var note_length_index = 0\n    var note_length_string = \"\"\n    var\
    \ note_length_string_index = 0\n    var note_length_string_index2 = 0\n    var\
    \ note_length_string_index3 = 0\n    var note_length_string_index4 = 0\n    var\
    \ note_length_string_index5 = 0\n    var note_length_string_index6 = 0\n    var\
    \ note_length_string_index7 = 0\n    var note_length_string_index8 = 0\n    var\
    \ note_length_string_index9 = 0\n    var note_length_string_index10 = 0\n    var\
    \ note_length_string_index11 = 0\n    var note_length_string_index12 = 0\n   \
    \ var note_length_string_index13 = 0\n    var note_length_string_index14 = 0\n\
    \    var note_length_string_index15 = 0\n    var note_length_string_index16 =\
    \ 0\n    var note_length_string_index17 = 0\n    var note_length_string_index18\
    \ = 0\n    var note_length_string_index19 = 0\n    var note_length_string_index20\
    \ = 0\n    var note_length_string_index21 = 0\n    var note_length_string_index22\
    \ = 0\n    var note_length_string_index23 = 0\n    var note_length_string_index24\
    \ = 0\n    var note_length_string_index25 = 0\n    var note_length_string_index26\
    \ = 0\n    var note_length_string_index27 = 0\n    var note_length_string_index28\
    \ = 0\n    var note_length_string_index29 = 0\n    var note_length_string_index30\
    \ = 0\n    var note_length_string_index31 = 0\n    var note_length_string_index32\
    \ = 0\n    var note_length_string_index33 = 0\n    var note_length_string_index34\
    \ = 0\n    var note_length_string_index35 = 0\n    var note_length_string_index36\
    \ = 0\n    var note_length_string_index37 = 0\n    var note_length_string_index38\
    \ = 0\n    var note_length_string_index39 = 0\n    var note_length_string_index40\
    \ = 0\n    var note_length_string_index41 = 0\n    var note_length_string_index42\
    \ = 0\n    var note_length_string_index43 = 0\n    var note_length_string_index44\
    \ = 0\n    var note_length_string_index45 = 0\n    var note_length_string_index46\
    \ = 0\n    var note_length_string_index47 = 0\n    var note_length_string_index48\
    \ = 0\n    var note_length_string_index49 = 0\n    var note_length_string_index50\
    \ = 0\n    var note_length_string_index51 = 0\n    var note_length_string_index52\
    \ = 0\n    var note_length_string_index53 = 0\n    var note_length_string_index54\
    \ = 0\n    var note_length_string_index55 = 0\n    var note_length_string_index56\
    \ = 0\n    var note_length_string_index57 = 0\n    var note_length_string_index58\
    \ = 0\n    var note_length_string_index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptfj1ak9b.swift:78:9: error: type annotation missing in pattern\n\
    \    var note_length_string_index\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = 0\n  \
    \  var lastNoteBeat = 0\n    var lastNoteBeatCount = 0\n    var lastNoteBeatCount2\
    \ = 0\n    var lastNoteBeatCount3 = 0\n    var lastNoteBeatCount4 = 0\n    var\
    \ lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6 = 0\n    var lastNoteBeatCount7\
    \ = 0\n    var lastNoteBeatCount8 = 0\n    var lastNoteBeatCount9 = 0\n    var\
    \ lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11 = 0\n    var lastNoteBeatCount12\
    \ = 0\n    var lastNoteBeatCount13 = 0\n    var lastNoteBeatCount14 = 0\n    var\
    \ lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16 = 0\n    var lastNoteBeatCount17\
    \ = 0\n    var lastNoteBeatCount18 = 0\n    var lastNoteBeatCount19 = 0\n    var\
    \ lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21 = 0\n    var lastNoteBeatCount22\
    \ = 0\n    var lastNoteBeatCount23 = 0\n    var lastNoteBeatCount24 = 0\n    var\
    \ lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26 = 0\n    var lastNoteBeatCount27\
    \ = 0\n    var lastNoteBeatCount28 = 0\n    var lastNoteBeatCount29 = 0\n    var\
    \ lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31 = 0\n    var lastNoteBeatCount32\
    \ = 0\n    var lastNoteBeatCount33 = 0\n    var lastNoteBeatCount34 = 0\n    var\
    \ lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36 = 0\n    var lastNoteBeatCount37\
    \ = 0\n    var lastNoteBeatCount38 = 0\n    var lastNoteBeatCount39 = 0\n    var\
    \ lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41 = 0\n    var lastNoteBeatCount42\
    \ = 0\n    var lastNoteBeatCount43 = 0\n    var lastNoteBeatCount44 = 0\n    var\
    \ lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46 = 0\n    var lastNoteBeatCount47\
    \ = 0\n    var lastNoteBeatCount48 = 0\n    var lastNoteBeatCount49 = 0\n    var\
    \ lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51 = 0\n    var lastNoteBeatCount52\
    \ = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwf9ok8en.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyvx3605y.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var notes = [String]()\n    var notes_length = 0\n    var notes_lengths\
    \ = [Int]()\n    var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n\
    \    var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n   \
    \ var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n    var\
    \ notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index\
    \ = 0\n    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n\
    \    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n   \
    \ var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n    var\
    \ notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n    var notes_lengths_indexs\
    \ = [Int]()\n    var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n\
    \    var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n   \
    \ var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n    var\
    \ notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index\
    \ = 0\n    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n\
    \    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n   \
    \ var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n    var\
    \ notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n    var notes_lengths_indexs\
    \ = [Int]()\n    var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n\
    \    var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n   \
    \ var notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n    var\
    \ notes_lengths_index = 0\n    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index\
    \ = 0\n    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n\
    \    var notes_lengths_indexs = [Int]()\n    var notes_lengths_index = 0\n   \
    \ var notes_lengths_indexs = [Int]()\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn2axrgn3.swift:20:9: error: invalid redeclaration of 'notes_lengths_index'\n\
    \    var notes_lengths_index = 0\n        ^\n/tmp/tmpn2axrgn3.swift:18:9: note:\
    \ 'notes_lengths_index' previously declared here\n    var notes_lengths_index\
    \ = 0\n        ^\n/tmp/tmpn2axrgn3.swift:21:9: error: invalid redeclaration of\
    \ 'notes_lengths_indexs'\n    var notes_lengths_indexs = [Int]()\n        ^\n\
    /tmp/tmpn2axrgn3.swift:19:9: note: 'notes_lengths_indexs' previously declared\
    \ here\n    var notes_lengths_indexs = [Int]()\n        ^\n/tmp/tmpn2axrgn3.swift:22:9:\
    \ error: invalid redeclaration of 'notes_lengths_index'\n    var notes_lengths_index\
    \ = 0\n        ^\n/tmp/tmpn2axrgn3.swift:18:9: note: 'notes_lengths_index' previously\
    \ declared here\n    var notes_lengths_index = 0\n        ^\n/tmp/tmpn2axrgn3.swift:23:9:\
    \ error: invalid redeclaration of 'notes_lengths_indexs'\n    var notes_lengths_indexs\
    \ = [Int]()\n        ^\n/tmp/tmpn2axrgn3.swift:19:9: note: 'notes_lengths_indexs'\
    \ previously declared here\n    var notes_lengths_indexs = [Int]()\n        ^\n\
    /tmp/tmpn2axrgn3.swift:24:9: error: invalid redeclaration of 'notes_lengths_index'\n\
    \    var notes_lengths_index = 0\n        ^\n/tmp/tmpn2axrgn3.swift:18:9: note:\
    \ 'notes_lengths_index' previously declared here\n    var notes_lengths_index\
    \ = 0\n        ^\n/tmp/tmpn2axrgn3.swift:25:9: error: invalid redeclaration of\
    \ 'notes_lengths_indexs'\n    var notes_lengths_indexs = [Int]()\n        ^\n\
    /tmp/tmpn2axrgn3.swift:19:9: note: 'notes_lengths_indexs' previously declared\
    \ here\n    var notes_lengths_indexs = [Int]()\n        ^\n/tmp/tmpn2axrgn3.swift:26:9:\
    \ error: invalid redeclaration of 'notes_lengths_index'\n    var notes_lengths_index\
    \ = 0\n        ^\n/tmp/tmpn2axrgn3.swift:18:9: note: 'notes_lengths_index' previously\
    \ declared here\n    var notes_lengths_index = 0\n        ^\n/tmp/tmpn2axrgn3.swift:27:9:\
    \ error: invalid redeclaration of 'notes_lengths_indexs'\n    var notes_lengths_indexs\
    \ = [Int]()\n        ^\n/tmp/tmpn2axrgn3.swift:19:9: note: 'notes_lengths_indexs'\
    \ previously declared here\n    var notes_lengths_indexs = [Int]()\n  "
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last_note = \"\"\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_index2\
    \ = 0\n    var last_note_index3 = 0\n    var last_note_index4 = 0\n    var last_note_index5\
    \ = 0\n    var last_note_index6 = 0\n    var last_note_index7 = 0\n    var last_note_index8\
    \ = 0\n    var last_note_index9 = 0\n    var last_note_index10 = 0\n    var last_note_index11\
    \ = 0\n    var last_note_index12 = 0\n    var last_note_index13 = 0\n    var last_note_index14\
    \ = 0\n    var last_note_index15 = 0\n    var last_note_index16 = 0\n    var last_note_index17\
    \ = 0\n    var last_note_index18 = 0\n    var last_note_index19 = 0\n    var last_note_index20\
    \ = 0\n    var last_note_index21 = 0\n    var last_note_index22 = 0\n    var last_note_index23\
    \ = 0\n    var last_note_index24 = 0\n    var last_note_index25 = 0\n    var last_note_index26\
    \ = 0\n    var last_note_index27 = 0\n    var last_note_index28 = 0\n    var last_note_index29\
    \ = 0\n    var last_note_index30 = 0\n    var last_note_index31 = 0\n    var last_note_index32\
    \ = 0\n    var last_note_index33 = 0\n    var last_note_index34 = 0\n    var last_note_index35\
    \ = 0\n    var last_note_index36 = 0\n    var last_note_index37 = 0\n    var last_note_index38\
    \ = 0\n    var last_note_index39 = 0\n    var last_note_index40 = 0\n    var last_note_index41\
    \ = 0\n    var last_note_index42 = 0\n    var last_note_index43 = 0\n    var last_note_index44\
    \ = 0\n    var last_note_index45 = 0\n    var last_note_index46 = 0\n    var last_note_index47\
    \ = 0\n    var last_note_index48 = 0\n    var last_note_index49 = 0\n    var last_note_index50\
    \ = 0\n    var last_note_index51 = 0\n    var last_note_index52 = 0\n    var last_note_index53\
    \ = 0\n    var last_note_index54 = 0\n    var last_note_index55 = 0\n    var last_note_index56\
    \ = 0\n    var last_note_index57 = 0\n    var last_note_index58 = 0\n    var last_note_index59\
    \ = 0\n    var last_note_index60 = 0\n    var last_note_index61 = 0\n    var last_note_index62\
    \ = 0\n    var last_note_index63 = 0\n    var last_note_index64 = 0\n    var last_note_index65\
    \ = 0\n    var last_note_index66 = 0\n    var last_note_index67 = 0\n    var last_note_index68\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw9jxgy8r.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpw9jxgy8r.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpw9jxgy8r.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpw9jxgy8r.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = \"\"\n    ~~~~^~~~\n    _\n/tmp/tmpw9jxgy8r.swift:16:9: warning: initialization\
    \ of variable 'last_note' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var last_note = \"\"\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpw9jxgy8r.swift:17:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpw9jxgy8r.swift:18:9: warning: initialization of variable 'last_beat_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpw9jxgy8r.swift:19:9:\
    \ warning: initialization of variable 'last_note_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_note_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpw9jxgy8r.swift:20:9: warning: initialization\
    \ of variable 'last_note_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpw9jxgy8r.swift:21:9: warning: initialization of variable 'last_note_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpw9jxgy8r.swift:22:9:\
    \ warning: initializ"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_length\
    \ = 0\n    var current_note_length_string_length_index = 0\n    var current_note_length_string_length_value\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var current_note_length_string_length_value_index\
    \ = 0\n    var current_note_length_string_length_value_index = 0\n    var \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4yw8_055.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp4yw8_055.swift:24:9: error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: 'current_note_length_string_length_value_index' previously declared here\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_string_length_value_index'\n\
    \    var current_note_length_string_length_value_index = 0\n        ^\n/tmp/tmp4yw8_055.swift:23:9:\
    \ note: "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_type = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_type = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_type = 0\n    var current_note_length_value_length\
    \ = 0\n    var current_note_length_value_length_type = 0\n    var current_note_length_value_length_value\
    \ = 0\n    var current_note_length_value_length_value_type = 0\n    var current_note_length_value_length_value_value\
    \ = 0\n    var current_note_length_value_length_value_value_type = 0\n    var\
    \ current_note_length_value_length_value_value_value = 0\n    var current_note_length_value_length_value_value_type\
    \ = 0\n    var current_note_length_value_length_value_value_value = 0\n    var\
    \ current_note_length_value_length_value_value_type = 0\n    var current_note_length_value_length_value_value_value\
    \ = 0\n    var current_note_length_value_length_value_value_type = 0\n    var\
    \ current_note_length_value_length_value_value_value = 0\n    var current_note_length_value_length_value_value_type\
    \ = 0\n    var current_note_length_value_length_value_value_value = 0\n    var\
    \ current_note_length_value_length_value_value_type = 0\n    var current_note_length_value_length_value_value_value\
    \ = 0\n    var current_note_length_value_length_value_value_type = 0\n    var\
    \ current_note_length_value_length_value_value_value = 0\n    var current_note_length_value_length_value_value_type\
    \ = 0\n    var current_note_length_value_length_value_value_value = 0\n    var\
    \ current_note_length_value_length_value_value_type = 0\n    var current_note_length_value_length_value_value_value\
    \ = 0\n    var current_note_length_value_length_value_value_type = 0\n    var\
    \ current_note_length_value_length_value_value_value = 0\n    var current_note_length_value_length_value_value_type\
    \ = 0\n    var current_note_length_value_length_value_value_value = 0\n    var\
    \ current_note_length_value_length_value_value_type = 0\n    var current_note_length_value_length_value_value_value\
    \ = 0\n    var current_note_length_value_length_value_value_type = 0\n    var\
    \ current_note_length_value_length_value_value_value = 0\n    var current_note_length_value_length_value_value_type\
    \ = 0\n    var current_note_length_value_length_value_value_value = 0\n    var\
    \ current_note_length_value_length_value_value_type = 0\n    var current_note_length_value_length_value_value_value\
    \ = 0\n    var current_note_length_value_length_value_value_type = 0\n    var\
    \ current_note_length_value_length_value_value_value = 0\n    var current_note_length_value_length_value_value_type\
    \ = 0\n    var current_note_length_value_length_value_value_value = 0\n    var\
    \ current_note_length_value_length_value_value_type = 0\n    var current_note_length_value_length_value_value_value\
    \ = 0\n    var current_note_length_value_length_value_value_type = 0\n    var\
    \ current_note_length_value_length_value_value\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmvzuxn4l.swift:27:9: error: invalid redeclaration of 'current_note_length_value_length_value_value_type'\n\
    \    var current_note_length_value_length_value_value_type = 0\n        ^\n/tmp/tmpmvzuxn4l.swift:25:9:\
    \ note: 'current_note_length_value_length_value_value_type' previously declared\
    \ here\n    var current_note_length_value_length_value_value_type = 0\n      \
    \  ^\n/tmp/tmpmvzuxn4l.swift:28:9: error: invalid redeclaration of 'current_note_length_value_length_value_value_value'\n\
    \    var current_note_length_value_length_value_value_value = 0\n        ^\n/tmp/tmpmvzuxn4l.swift:26:9:\
    \ note: 'current_note_length_value_length_value_value_value' previously declared\
    \ here\n    var current_note_length_value_length_value_value_value = 0\n     \
    \   ^\n/tmp/tmpmvzuxn4l.swift:29:9: error: invalid redeclaration of 'current_note_length_value_length_value_value_type'\n\
    \    var current_note_length_value_length_value_value_type = 0\n        ^\n/tmp/tmpmvzuxn4l.swift:25:9:\
    \ note: 'current_note_length_value_length_value_value_type' previously declared\
    \ here\n    var current_note_length_value_length_value_value_type = 0\n      \
    \  ^\n/tmp/tmpmvzuxn4l.swift:30:9: error: invalid redeclaration of 'current_note_length_value_length_value_value_value'\n\
    \    var current_note_length_value_length_value_value_value = 0\n        ^\n/tmp/tmpmvzuxn4l.swift:26:9:\
    \ note: 'current_note_length_value_length_value_value_value' previously declared\
    \ here\n    var current_note_length_value_length_value_value_value = 0\n     \
    \   ^\n/tmp/tmpmvzuxn4l.swift:31:9: error: invalid redeclaration of 'current_note_length_value_length_value_value_type'\n\
    \    var current_note_length_value_length_value_value_type = 0\n        ^\n/tmp/tmpmvzuxn4l.swift:25:9:\
    \ note: 'current_note_length_value_length_value_value_type' previously declared\
    \ here\n    var current_note_length_value_length_value_value_type = 0\n      \
    \  ^\n/tmp/tmpmvzuxn4l.swift:32:9: error: invalid redeclaration of 'current_note_length_value_length_value_value_value'\n\
    \    var current_note_length_value_length_value_value_value = 0\n        ^\n/tmp/tmp"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beats = 0\n\
    \    var last_beats_count = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyw9wsttz.swift:39:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var current_beat = 0\n  \
    \  var current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5sgbsd94.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp5sgbsd94.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp5sgbsd94.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp5sgbsd94.swift:32:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp5sgbsd94.swift:35:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp5sgbsd94.swift:34:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp5sgbsd94.swift:38:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_va"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last = 0\n    var last_beat = 0\n    var last_note = 0\n    var\
    \ last_last_beat = 0\n    var last_last_note = 0\n    var last_last_last_beat\
    \ = 0\n    var last_last_last_note = 0\n    var last_last_last_last_beat = 0\n\
    \    var last_last_last_last_note = 0\n    var last_last_last_last_last_beat =\
    \ 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv_kyc78f.swift:30:9: error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:28:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:31:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:29:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:34:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:32:9:\
    \ note: 'last_last_last_last_last_last_last_last_beat' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_last_note' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:38:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpv_kyc78f.swift:36:9:\
    \ note: 'last_last_last_last_last_last_last_last_last_beat' previously declared\
    \ here\n    var last_last_last_last_last_last_last_last_last_beat = 0\n      \
    \  ^\n/tmp/tmpv_kyc78f.swift:39:9: error: invalid redeclaration of 'last_last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpv_kyc78f.swift:37:9:\
    \ note: 'last_last_last_last_last_last_last_last_last_note' previously declared\
    \ here\n    var last_last_last_las"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprozcbvoz.swift:14:24: error: 'nil' requires a contextual type\n\
    \    var current_note = nil\n                       ^\n/tmp/tmprozcbvoz.swift:15:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:16:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:17:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:18:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:19:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:20:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:21:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:22:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:23:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:24:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:25:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:26:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:27:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:28:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.characters\n\
    \    var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat\
    \ = 0\n    var last_beats = 0\n    var last_notes = 0\n    var last_notes_count\
    \ = 0\n    var last_notes_count_max = 0\n    var last_notes_count_min = 0\n  \
    \  var last_notes_count_avg = 0\n    var last_notes_count_sum = 0\n    var last_notes_count_count\
    \ = 0\n    var last_notes_count_count_max = 0\n    var last_notes_count_count_min\
    \ = 0\n    var last_notes_count_count_avg = 0\n    var last_notes_count_count_sum\
    \ = 0\n    var last_notes_count_count_count = 0\n    var last_notes_count_count_count_max\
    \ = 0\n    var last_notes_count_count_count_min = 0\n    var last_notes_count_count_count_avg\
    \ = 0\n    var last_notes_count_count_count_sum = 0\n    var last_notes_count_count_count_count\
    \ = 0\n    var last_notes_count_count_count_count_max = 0\n    var last_notes_count_count_count_count_min\
    \ = 0\n    var last_notes_count_count_count_count_avg = 0\n    var last_notes_count_count_count_count_sum\
    \ = 0\n    var last_notes_count_count_count_count_count = 0\n    var last_notes_count_count_count_count_count_max\
    \ = 0\n    var last_notes_count_count_count_count_count_min = 0\n    var last_notes_count_count_count_count_count_avg\
    \ = 0\n    var last_notes_count_count_count_count_count_sum = 0\n    var last_notes_count_count_count_count_count_count\
    \ = 0\n    var last_notes_count_count_count_count_count_count_max = 0\n    var\
    \ last_notes_count_count_count_count_count_count_min = 0\n    var last_notes_count_count_count_count_count_count_avg\
    \ = 0\n    var last_notes_count_count_count_count_count_count_sum = 0\n    var\
    \ last_notes_count_count_count_count_count_count_count_count = 0\n    var last_notes_count_count_count_count_count_count_count_max\
    \ = 0\n    var last_notes_count_count_count_count_count_count_count_min = 0\n\
    \    var last_notes_count_count_count_count_count_count_count_avg = 0\n    var\
    \ last_notes_count_count_count_count_count_count_count_sum = 0\n    var last_notes_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_count_count_count_count_count_count_count_count_max\
    \ = 0\n    var last_notes_count_count_count_count_count_count_count_count_min\
    \ = 0\n    var last_notes_count_count_count_count_count_count_count_count_avg\
    \ = 0\n    var last_notes_count_count_count_count_count_count_count_count_sum\
    \ = 0\n    var last_notes_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_count_count_count_count_count_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfhqzqsg3.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfhqzqsg3.swift:55:9: error: invalid redeclaration of 'last_notes_count_count_count_count_count_count_count_count'\n\
    \    var last_notes_count_count_count_count_count_count_count_count = 0\n    \
    \    ^\n/tmp/tmpfhqzqsg3.swift:50:9: note: 'last_notes_count_count_count_count_count_count_count_count'\
    \ previously declared here\n    var last_notes_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmpfhqzqsg3.swift:61:9: error: type annotation missing\
    \ in pattern\n    var last_notes_count_count_count_count_count_\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_count = 0\n    var note_length\
    \ = 0\n    var note_length_count = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = 0\n    var note_length_index3 = 0\n    var note_length_index4 = 0\n    var\
    \ note_length_index5 = 0\n    var note_length_index6 = 0\n    var note_length_index7\
    \ = 0\n    var note_length_index8 = 0\n    var note_length_index9 = 0\n    var\
    \ note_length_index10 = 0\n    var note_length_index11 = 0\n    var note_length_index12\
    \ = 0\n    var note_length_index13 = 0\n    var note_length_index14 = 0\n    var\
    \ note_length_index15 = 0\n    var note_length_index16 = 0\n    var note_length_index17\
    \ = 0\n    var note_length_index18 = 0\n    var note_length_index19 = 0\n    var\
    \ note_length_index20 = 0\n    var note_length_index21 = 0\n    var note_length_index22\
    \ = 0\n    var note_length_index23 = 0\n    var note_length_index24 = 0\n    var\
    \ note_length_index25 = 0\n    var note_length_index26 = 0\n    var note_length_index27\
    \ = 0\n    var note_length_index28 = 0\n    var note_length_index29 = 0\n    var\
    \ note_length_index30 = 0\n    var note_length_index31 = 0\n    var note_length_index32\
    \ = 0\n    var note_length_index33 = 0\n    var note_length_index34 = 0\n    var\
    \ note_length_index35 = 0\n    var note_length_index36 = 0\n    var note_length_index37\
    \ = 0\n    var note_length_index38 = 0\n    var note_length_index39 = 0\n    var\
    \ note_length_index40 = 0\n    var note_length_index41 = 0\n    var note_length_index42\
    \ = 0\n    var note_length_index43 = 0\n    var note_length_index44 = 0\n    var\
    \ note_length_index45 = 0\n    var note_length_index46 = 0\n    var note_length_index47\
    \ = 0\n    var note_length_index48 = 0\n    var note_length_index49 = 0\n    var\
    \ note_length_index50 = 0\n    var note_length_index51 = 0\n    var note_length_index52\
    \ = 0\n    var note_length_index53 = 0\n    var note_length_index54 = 0\n    var\
    \ note_length_index55 = 0\n    var note_length_index56 = 0\n    var note_length_index57\
    \ = 0\n    var note_length_index58 = 0\n    var note_length_index59 = 0\n    var\
    \ note_length_index60 = 0\n    var note_length_index61 = 0\n    var note_length_index62\
    \ = 0\n    var note_length_index63 = 0\n    var note_length_index64 = 0\n    var\
    \ note_length_index65 = 0\n    var note_length_index66 = 0\n    var note_length_index67\
    \ = 0\n    var note_length_index68 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7mprvv4s.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7mprvv4s.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp7mprvv4s.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp7mprvv4s.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmp7mprvv4s.swift:16:9: warning: initialization\
    \ of variable 'note_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s.swift:17:9:\
    \ warning: initialization of variable 'note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp7mprvv4s.swift:18:9: warning: initialization of variable 'note_length_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s.swift:19:9:\
    \ warning: initialization of variable 'note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_length_index =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s.swift:20:9: warning: initialization\
    \ of variable 'note_length_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_length_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp7mprvv4s.swift:21:9: warning: initialization of variable 'note_length_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp7mprvv4s"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7avngu7i.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7avngu7i.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_index = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpigkkxf2o.swift:25:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpigkkxf2o.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpigkkxf2o.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpigkkxf2o.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpigkkxf2o.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpigkkxf2o.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpigkkxf2o.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpigkkxf2o.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpigkkxf2o.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpigkkxf2o.swift:23:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpigkkxf2o.swift:30:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpigkkxf2o.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyvx3605y.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7avngu7i.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmp7avngu7i.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmp7avngu7i.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note_index = 0\n    var\
    \ note_char = \"\"\n    var note_char_index = 0\n    var note_char_length = 0\n\
    \    var note_char_length_index = 0\n    var note_char_length_value = 0\n    var\
    \ note_char_length_value_index = 0\n    var note_char_length_value_value = 0\n\
    \    var note_char_length_value_value_index = 0\n    var note_char_length_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\
    \ = 0\n    var note_char_length_value_value_value_index = 0\n    var note_char_length_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjl4y4tyl.swift:28:9: error: invalid redeclaration of 'note_char_length_value_value_value_index'\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:26:9:\
    \ note: 'note_char_length_value_value_value_index' previously declared here\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:29:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_value'\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:27:9:\
    \ note: 'note_char_length_value_value_value_value' previously declared here\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:30:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_index'\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:26:9:\
    \ note: 'note_char_length_value_value_value_index' previously declared here\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:31:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_value'\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:27:9:\
    \ note: 'note_char_length_value_value_value_value' previously declared here\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:32:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_index'\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:26:9:\
    \ note: 'note_char_length_value_value_value_index' previously declared here\n\
    \    var note_char_length_value_value_value_index = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:33:9:\
    \ error: invalid redeclaration of 'note_char_length_value_value_value_value'\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:27:9:\
    \ note: 'note_char_length_value_value_value_value' previously declared here\n\
    \    var note_char_length_value_value_value_value = 0\n        ^\n/tmp/tmpjl4y4tyl.swift:34:9:\
    \ error: invalid redecl"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ 'o' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = music_string[0]\n        } else if c == '|' {\n  \
    \          beats.append(current_beat)\n            current_beat = 0\n        \
    \    current_note = music_string[0]\n        } else if c == '.' {\n          \
    \  beats.append(current_beat)\n            current_beat = 0\n            current_note\
    \ = music_string[0]\n        } else {\n            current_beat += 1\n       \
    \ }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfqlz4md5.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpfqlz4md5.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpfqlz4md5.swift:24:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpfqlz4md5.swift:14:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfqlz4md5.swift:19:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            current_note = music_string[0]\n  \
    \                         ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpfqlz4md5.swift:23:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            current_note = music_string[0]\n                           ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfqlz4md5.swift:27:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            current_note = music_string[0]\n  \
    \                         ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpfqlz4md5.swift:14:9: warning: variable\
    \ 'current_note' was written to, but never read\n    var current_note"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for character in music_string {\n      \
    \  if character == \"o\" {\n            beats.append(current_beat)\n         \
    \   current_beat = 0\n            current_note = \"o\"\n        } else if character\
    \ == \"|\" {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = \"o\"\n        } else if character == \".\"\
    \ {\n            beats.append(current_beat)\n            current_beat = 0\n  \
    \          current_note = \"o\"\n        } else {\n            current_beat++\n\
    \        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfpjh8j16.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfpjh8j16.swift:29:25:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  current_beat++\n                        ^~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_index = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmkenvcws.swift:97:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmkenvcws.swift:17:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpmkenvcws.swift:18:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpmkenvcws.swift:19:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpmkenvcws.swift:20:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpmkenvcws.swift:21:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpmkenvcws.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpmkenvcws.swift:23:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpmkenvcws.swift:24:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpmkenvcws.swift:16:9:\
    \ note: 'current_note_length' previously declared here\n    var curr"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpaklbmg0b.swift:21:9: error: invalid redeclaration of 'current_note_length_string_value_index'\n\
    \    var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:22:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_ind"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var last_note = 0\n \
    \   var last_note_length = 0\n    for c in music_string {\n        switch c {\n\
    \        case \"o\":\n            if current_note == 0 {\n                last_note\
    \ = current_note\n                last_note_length = current_note_length\n   \
    \         }\n            current_note = 1\n            current_note_length = 1\n\
    \        case \"o|\":\n            if current_note == 0 {\n                last_note\
    \ = current_note\n                last_note_length = current_note_length\n   \
    \         }\n            current_note = 2\n            current_note_length = 2\n\
    \        case \".|\":\n            if current_note == 0 {\n                last_note\
    \ = current_note\n                last_note_length = current_note_length\n   \
    \         }\n            current_note = 3\n            current_note_length = 1\n\
    \        default:\n            if current_note == 0 {\n                last_note\
    \ = current_note\n                last_note_length = current_note_length\n   \
    \         }\n            current_note = 0\n            current_note_length = 0\n\
    \        }\n        beats.append(current_beat)\n        current_beat += current_note_length\n\
    \    }\n    if current_note == 0 {\n        last_note = current_note\n       \
    \ last_note_length = current_note_length\n    }\n    beats.append(current_beat)\n\
    \    beats.append(last_note)\n    beats.append(last_note_length)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmocopxzo.swift:27:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpmocopxzo.swift:34:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyvx3605y.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = String()\n    var note_count = 0\n    var note_length = 0\n    var note_length_count\
    \ = 0\n    var note_length_index = 0\n    var note_length_index2 = 0\n    var\
    \ note_length_index3 = 0\n    var note_length_index4 = 0\n    var note_length_index5\
    \ = 0\n    var note_length_index6 = 0\n    var note_length_index7 = 0\n    var\
    \ note_length_index8 = 0\n    var note_length_index9 = 0\n    var note_length_index10\
    \ = 0\n    var note_length_index11 = 0\n    var note_length_index12 = 0\n    var\
    \ note_length_index13 = 0\n    var note_length_index14 = 0\n    var note_length_index15\
    \ = 0\n    var note_length_index16 = 0\n    var note_length_index17 = 0\n    var\
    \ note_length_index18 = 0\n    var note_length_index19 = 0\n    var note_length_index20\
    \ = 0\n    var note_length_index21 = 0\n    var note_length_index22 = 0\n    var\
    \ note_length_index23 = 0\n    var note_length_index24 = 0\n    var note_length_index25\
    \ = 0\n    var note_length_index26 = 0\n    var note_length_index27 = 0\n    var\
    \ note_length_index28 = 0\n    var note_length_index29 = 0\n    var note_length_index30\
    \ = 0\n    var note_length_index31 = 0\n    var note_length_index32 = 0\n    var\
    \ note_length_index33 = 0\n    var note_length_index34 = 0\n    var note_length_index35\
    \ = 0\n    var note_length_index36 = 0\n    var note_length_index37 = 0\n    var\
    \ note_length_index38 = 0\n    var note_length_index39 = 0\n    var note_length_index40\
    \ = 0\n    var note_length_index41 = 0\n    var note_length_index42 = 0\n    var\
    \ note_length_index43 = 0\n    var note_length_index44 = 0\n    var note_length_index45\
    \ = 0\n    var note_length_index46 = 0\n    var note_length_index47 = 0\n    var\
    \ note_length_index48 = 0\n    var note_length_index49 = 0\n    var note_length_index50\
    \ = 0\n    var note_length_index51 = 0\n    var note_length_index52 = 0\n    var\
    \ note_length_index53 = 0\n    var note_length_index54 = 0\n    var note_length_index55\
    \ = 0\n    var note_length_index56 = 0\n    var note_length_index57 = 0\n    var\
    \ note_length_index58 = 0\n    var note_length_index59 = 0\n    var note_length_index60\
    \ = 0\n    var note_length_index61 = 0\n    var note_length_index62 = 0\n    var\
    \ note_length_index63 = 0\n    var note_length_index64 = 0\n    var note_length_index65\
    \ = 0\n    var note_length_index66 = 0\n    var note_length_index67 = 0\n    var\
    \ note_length_index68 = 0\n    var note_length_index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkmuqpa5t.swift:86:9: error: type annotation missing in pattern\n\
    \    var note_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp18y5x2xe.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp18y5x2xe.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp18y5x2xe.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmp18y5x2xe.swift:28:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp18y5x2xe.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp18y5x2xe.swift:32:9: note: 'current_note_length_string_value_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp18y5x2xe.swift:38:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp18y5x2xe.swift:36:9: note: 'current_note_length_string_value_string_value_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp18y5x2xe.swift:45:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value'\n\
    \    var current_note_length_string_value_"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_type: NoteType = .unknown\n    var current_note_length\
    \ = 0\n    var current_note_length_type: NoteLengthType = .unknown\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_type: NoteLengthValueType = .unknown\n\
    \    var current_note_length_value_value = 0\n    var current_note_length_value_value_type:\
    \ NoteLengthValueValueType = .unknown\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_type: NoteLengthValueValueValueType\
    \ = .unknown\n    var current_note_length_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_type: NoteLengthValueValueValueType =\
    \ .unknown\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_type:\
    \ NoteLengthValueValueValueType = .unknown\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_type: NoteLengthValueValueValueType\
    \ = .unknown\n    var current_note_length_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_type: NoteLengthValueValueValueType =\
    \ .unknown\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_type:\
    \ NoteLengthValueValueValueType = .unknown\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_type: NoteLengthValueValueValueType\
    \ = .unknown\n    var current_note_length_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_type: NoteLengthValueValueValueType =\
    \ .unknown\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_type:\
    \ NoteLengthValueValueValueType = .unknown\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_type: NoteLengthValueValueValueType\
    \ = .unknown\n    var current_note_length_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_type: NoteLengthValueValueValueType =\
    \ .unknown\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_type:\
    \ NoteLengthValueValueValueType = .unknown\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_type: NoteLengthValueValueValueType\
    \ = .unknown\n    var current_note_length_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_type: NoteLengthValueValueValueType =\
    \ .unknown\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_type:\
    \ NoteLengthValueValueValueType = .unknown\n    var current_note_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq6srxxf3.swift:15:28: error: cannot find type 'NoteType' in scope\n\
    \    var current_note_type: NoteType = .unknown\n                           ^~~~~~~~\n\
    /tmp/tmpq6srxxf3.swift:17:35: error: cannot find type 'NoteLengthType' in scope\n\
    \    var current_note_length_type: NoteLengthType = .unknown\n               \
    \                   ^~~~~~~~~~~~~~\n/tmp/tmpq6srxxf3.swift:19:41: error: cannot\
    \ find type 'NoteLengthValueType' in scope\n    var current_note_length_value_type:\
    \ NoteLengthValueType = .unknown\n                                        ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq6srxxf3.swift:21:47: error: cannot find type 'NoteLengthValueValueType'\
    \ in scope\n    var current_note_length_value_value_type: NoteLengthValueValueType\
    \ = .unknown\n                                              ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq6srxxf3.swift:23:53: error: cannot find type 'NoteLengthValueValueValueType'\
    \ in scope\n    var current_note_length_value_value_value_type: NoteLengthValueValueValueType\
    \ = .unknown\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq6srxxf3.swift:25:53: error: cannot find type 'NoteLengthValueValueValueType'\
    \ in scope\n    var current_note_length_value_value_value_type: NoteLengthValueValueValueType\
    \ = .unknown\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq6srxxf3.swift:26:9: error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpq6srxxf3.swift:24:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpq6srxxf3.swift:27:53:\
    \ error: cannot find type 'NoteLengthValueValueValueType' in scope\n    var current_note_length_value_value_value_type:\
    \ NoteLengthValueValueValueType = .unknown\n                                 \
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq6srxxf3.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpaklbmg0b.swift:21:9: error: invalid redeclaration of 'current_note_length_string_value_index'\n\
    \    var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:22:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_index'\n \
    \   var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:20:9:\
    \ note: 'current_note_length_string_value_index' previously declared here\n  \
    \  var current_note_length_string_value_index = 0\n        ^\n/tmp/tmpaklbmg0b.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_string_value_ind"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beat_type = 0\n    var last_beat_type_string = \"\"\n    var\
    \ last_beat_type_string_index = 0\n    var last_beat_type_string_index2 = 0\n\
    \    var last_beat_type_string_index3 = 0\n    var last_beat_type_string_index4\
    \ = 0\n    var last_beat_type_string_index5 = 0\n    var last_beat_type_string_index6\
    \ = 0\n    var last_beat_type_string_index7 = 0\n    var last_beat_type_string_index8\
    \ = 0\n    var last_beat_type_string_index9 = 0\n    var last_beat_type_string_index10\
    \ = 0\n    var last_beat_type_string_index11 = 0\n    var last_beat_type_string_index12\
    \ = 0\n    var last_beat_type_string_index13 = 0\n    var last_beat_type_string_index14\
    \ = 0\n    var last_beat_type_string_index15 = 0\n    var last_beat_type_string_index16\
    \ = 0\n    var last_beat_type_string_index17 = 0\n    var last_beat_type_string_index18\
    \ = 0\n    var last_beat_type_string_index19 = 0\n    var last_beat_type_string_index20\
    \ = 0\n    var last_beat_type_string_index21 = 0\n    var last_beat_type_string_index22\
    \ = 0\n    var last_beat_type_string_index23 = 0\n    var last_beat_type_string_index24\
    \ = 0\n    var last_beat_type_string_index25 = 0\n    var last_beat_type_string_index26\
    \ = 0\n    var last_beat_type_string_index27 = 0\n    var last_beat_type_string_index28\
    \ = 0\n    var last_beat_type_string_index29 = 0\n    var last_beat_type_string_index30\
    \ = 0\n    var last_beat_type_string_index31 = 0\n    var last_beat_type_string_index32\
    \ = 0\n    var last_beat_type_string_index33 = 0\n    var last_beat_type_string_index34\
    \ = 0\n    var last_beat_type_string_index35 = 0\n    var last_beat_type_string_index36\
    \ = 0\n    var last_beat_type_string_index37 = 0\n    var last_beat_type_string_index38\
    \ = 0\n    var last_beat_type_string_index39 = 0\n    var last_beat_type_string_index40\
    \ = 0\n    var last_beat_type_string_index41 = 0\n    var last_beat_type_string_index42\
    \ = 0\n    var last_beat_type_string_index43 = 0\n    var last_beat_type_string_index44\
    \ = 0\n    var last_beat_type_string_index45 = 0\n    var last_beat_type_string_index46\
    \ = 0\n    var last_beat_type_string_index47 = 0\n    var last_beat_type_string_index48\
    \ = 0\n    var last_beat_type_string_index49 = 0\n    var last_beat_type_string_index50\
    \ = 0\n    var last_beat_type_string_index51 = 0\n    var last_beat_type_string_index52\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0kogyrc8.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp0kogyrc8.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp0kogyrc8.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmp0kogyrc8.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmp0kogyrc8.swift:16:9: warning: initialization\
    \ of variable 'last_note' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var last_note = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp0kogyrc8.swift:17:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp0kogyrc8.swift:18:9: warning: initialization of variable 'last_beat_type'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_type = 0\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmp0kogyrc8.swift:19:9:\
    \ warning: initialization of variable 'last_beat_type_string' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_beat_type_string\
    \ = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0kogyrc8.swift:20:9: warning:\
    \ initialization of variable 'last_beat_type_string_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_type_string_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp0kogyrc8.swift:21:9:\
    \ warning: initialization of variable 'last_beat_type_string_index2' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var last_beat_type_string_index2\
    \ = 0\n    ~~~"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = 0\n    for character in music_string\
    \ {\n        if character == \"o\" {\n            if current_note != \"\" {\n\
    \                beats.append(current_beat)\n                current_beat = 0\n\
    \                current_note = \"\"\n                current_note_length = 0\n\
    \            }\n        } else if character == \"|\" {\n            if current_note\
    \ != \"\" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = 0\n            }\n        } else if character == \".\" {\n            if current_note\
    \ != \"\" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = 0\n            }\n        } else {\n            current_note += character\n\
    \            current_note_length += 1\n        }\n    }\n    if current_note !=\
    \ \"\" {\n        beats.append(current_beat)\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpo1qv6w76.swift:39:29: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            current_note += character\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_count = 0\n    for c in music_string\
    \ {\n        switch c {\n        case \"o\":\n            notes.append(note)\n\
    \            note = \"\"\n            note_count = 0\n        case \"|\":\n  \
    \          notes.append(note)\n            note = \"\"\n            note_count\
    \ = 0\n        default:\n            note += String(c)\n            note_count\
    \ += 1\n        }\n        if note_count == 4 {\n            beats.append(beat)\n\
    \            beat = 0\n            note_count = 0\n        }\n    }\n    beats.append(beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpxs0ifc58/tmpxs0ifc58.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ec1cfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ec19f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ec19f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ec19f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxs0ifc58                        0x0000556d1514d7be <unavailable> + 6078

    5    libc.so.6                          0x00002b9ec1ee6460 __libc_start_main +
    245

    6    tmpxs0ifc58                        0x0000556d1514d409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    for character in music_string {\n        switch character\
    \ {\n        case \"o\":\n            current_note = .WHOLE_NOTE\n        case\
    \ \"o|\":\n            current_note = .HALF_NOTE\n        case \".|\":\n     \
    \       current_note = .QUATER_NOTE\n        default:\n            current_note\
    \ = .NOTE\n        }\n        if current_note == .NOTE {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n        } else {\n            current_beat++\n\
    \        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1xjyce80.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp1xjyce80.swift:21:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n/tmp/tmp1xjyce80.swift:18:29: error: type 'Int' has no member 'WHOLE_NOTE'\n\
    \            current_note = .WHOLE_NOTE\n                           ~^~~~~~~~~~\n\
    /tmp/tmp1xjyce80.swift:20:29: error: type 'Int' has no member 'HALF_NOTE'\n  \
    \          current_note = .HALF_NOTE\n                           ~^~~~~~~~~\n\
    /tmp/tmp1xjyce80.swift:22:29: error: type 'Int' has no member 'QUATER_NOTE'\n\
    \            current_note = .QUATER_NOTE\n                           ~^~~~~~~~~~~\n\
    /tmp/tmp1xjyce80.swift:24:29: error: type 'Int' has no member 'NOTE'\n       \
    \     current_note = .NOTE\n                           ~^~~~\n/tmp/tmp1xjyce80.swift:26:29:\
    \ error: type 'Int' has no member 'NOTE'\n        if current_note == .NOTE {\n\
    \                           ~^~~~\n/tmp/tmp1xjyce80.swift:30:25: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            current_beat++\n\
    \                        ^~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_length\
    \ = 0\n    var current_note_length_value_length_index = 0\n    var current_note_length_value_length_value\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_zmqumq_.swift:22:9: error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_index = 0\n    var last_note_index\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beat_index =\
    \ 0\n    var last_beat_count = 0\n    var last_beat_count_index = 0\n    var last_beat_count_count\
    \ = 0\n    var last_beat_count_count_index = 0\n    var last_beat_count_count_count\
    \ = 0\n    var last_beat_count_count_count_index = 0\n    var last_beat_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_index = 0\n    var last_beat_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_index = 0\n    var\
    \ last_beat_count_count_count_count_count_count_count_count = 0\n    var last_beat_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beat_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpirn53qmw.swift:39:9: error: invalid redeclaration of 'last_beat_count_count_count_count_count_count_count_count_count_count_count'\n\
    \    var last_beat_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmpirn53qmw.swift:37:9: note: 'last_beat_count_count_count_count_count_count_count_count_count_count_count'\
    \ previously declared here\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmpirn53qmw.swift:40:9: error: invalid redeclaration of\
    \ 'last_beat_count_count_count_count_count_count_count_count_count_count_index'\n\
    \    var last_beat_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        ^\n/tmp/tmpirn53qmw.swift:38:9: note: 'last_beat_count_count_count_count_count_count_count_count_count_count_index'\
    \ previously declared here\n    var last_beat_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        ^\n/tmp/tmpirn53qmw.swift:46:9: error: invalid redeclaration of\
    \ 'last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_index'\n\
    \    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        ^\n/tmp/tmpirn53qmw.swift:44:9: note: 'last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_index'\
    \ previously declared here\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_index\
    \ = 0\n        ^\n/tmp/tmpirn53qmw.swift:47:9: error: invalid redeclaration of\
    \ 'last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count'\n\
    \    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmpirn53qmw.swift:45:9: note: 'last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count'\
    \ previously declared here\n    var last_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n        ^\n/tmp/tmpirn5"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpls43nv4x.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpls43nv4x.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpls43nv4x.swift:35:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpls43nv4x.swift:34:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpls43nv4x.swift:38:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpls43nv4x.swift:37:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpls43nv4x.swift:40:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_v"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var last_note = \"\"\n    var last_beat = 0\n    var\
    \ last_note_index = 0\n    for character in music_string {\n        if character\
    \ == \"o\" {\n            if last_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n            }\n            last_note = \"o\"\
    \n            last_beat = 0\n            last_note_index = 0\n        } else if\
    \ character == \"|\" {\n            if last_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n            }\n            last_note = \"|\"\
    \n            last_beat = 0\n            last_note_index = 0\n        } else if\
    \ character == \".\" {\n            if last_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n            }\n            last_note = \".\"\
    \n            last_beat = 0\n            last_note_index = 0\n        } else {\n\
    \            if last_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n            }\n            last_note = character\n\
    \            last_beat = 0\n            last_note_index = 0\n        }\n     \
    \   current_beat++\n    }\n    beats.append(current_beat)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjs_13r9w.swift:48:25: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            last_note = character\n                      \
    \  ^~~~~~~~~\n/tmp/tmpjs_13r9w.swift:52:21: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        current_beat++\n                    ^~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptzvmxrab.swift:14:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptzvmxrab.swift:76:9:\
    \ error: type annotation missing in pattern\n    var current_note_length_index61\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2j98x8vo.swift:27:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp2j98x8vo.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp2j98x8vo.swift:36:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp2j98x8vo.swift:35:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp2j98x8vo.swift:40:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp2j98x8vo.swift:39:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmp2j98x8vo.swift:42:9: error: type annotation missing\
    \ in pattern\n    var current_note_length_va"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_octave\
    \ = 0\n    var current_note_duration = 0\n    var current_note_duration_value\
    \ = 0\n    var current_note_duration_type = 0\n    var current_note_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration = 0\n    var current_note_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type = 0\n    var current_note_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration = 0\n    var\
    \ current_note_duration_type_duration_type_duration_value = 0\n    var current_note_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_octave =\
    \ 0\n    var current_note_duration_type_duration_type_duration_type_duration =\
    \ 0\n    var current_note_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxaz8b_ct.swift:50:9: error: type annotation missing in pattern\n\
    \    var current_note_duration\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_count = 0\n    var last_note =\
    \ 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_beat\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_type = 0\n   \
    \ var last_note_beat_type_count = 0\n    var last_note_beat_type_index = 0\n \
    \   var last_note_beat_type_index2 = 0\n    var last_note_beat_type_index3 = 0\n\
    \    var last_note_beat_type_index4 = 0\n    var last_note_beat_type_index5 =\
    \ 0\n    var last_note_beat_type_index6 = 0\n    var last_note_beat_type_index7\
    \ = 0\n    var last_note_beat_type_index8 = 0\n    var last_note_beat_type_index9\
    \ = 0\n    var last_note_beat_type_index10 = 0\n    var last_note_beat_type_index11\
    \ = 0\n    var last_note_beat_type_index12 = 0\n    var last_note_beat_type_index13\
    \ = 0\n    var last_note_beat_type_index14 = 0\n    var last_note_beat_type_index15\
    \ = 0\n    var last_note_beat_type_index16 = 0\n    var last_note_beat_type_index17\
    \ = 0\n    var last_note_beat_type_index18 = 0\n    var last_note_beat_type_index19\
    \ = 0\n    var last_note_beat_type_index20 = 0\n    var last_note_beat_type_index21\
    \ = 0\n    var last_note_beat_type_index22 = 0\n    var last_note_beat_type_index23\
    \ = 0\n    var last_note_beat_type_index24 = 0\n    var last_note_beat_type_index25\
    \ = 0\n    var last_note_beat_type_index26 = 0\n    var last_note_beat_type_index27\
    \ = 0\n    var last_note_beat_type_index28 = 0\n    var last_note_beat_type_index29\
    \ = 0\n    var last_note_beat_type_index30 = 0\n    var last_note_beat_type_index31\
    \ = 0\n    var last_note_beat_type_index32 = 0\n    var last_note_beat_type_index33\
    \ = 0\n    var last_note_beat_type_index34 = 0\n    var last_note_beat_type_index35\
    \ = 0\n    var last_note_beat_type_index36 = 0\n    var last_note_beat_type_index37\
    \ = 0\n    var last_note_beat_type_index38 = 0\n    var last_note_beat_type_index39\
    \ = 0\n    var last_note_beat_type_index40 = 0\n    var last_note_beat_type_index41\
    \ = 0\n    var last_note_beat_type_index42 = 0\n    var last_note_beat_type_index43\
    \ = 0\n    var last_note_beat_type_index44 = 0\n    var last_note_beat_type_index45\
    \ = 0\n    var last_note_beat_type_index46 = 0\n    var last_note_beat_type_index47\
    \ = 0\n    var last_note_beat_type_index48 = 0\n    var last_note_beat_type_index49\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsgwjxkez.swift:73:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpsgwjxkez.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpsgwjxkez.swift:13:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpsgwjxkez.swift:14:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpsgwjxkez.swift:15:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmpsgwjxkez.swift:16:9: warning: initialization\
    \ of variable 'note_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpsgwjxkez.swift:17:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpsgwjxkez.swift:18:9: warning: initialization of variable 'last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpsgwjxkez.swift:19:9:\
    \ warning: initialization of variable 'last_beat_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_count = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpsgwjxkez.swift:20:9: warning: initialization\
    \ of variable 'last_note_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_beat = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpsgwjxkez.swift:21:9: warning: initialization of variable 'last_note_beat_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_beat_count = 0\n    ~~~~^~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = 0\n    var last_note = \"\
    \"\n    var last_note_length = 0\n    for c in music_string {\n        switch\
    \ c {\n        case \"o\":\n            if current_note != last_note {\n     \
    \           beats.append(current_beat)\n                current_beat = 0\n   \
    \             current_note = \"\"\n                current_note_length = 0\n \
    \           }\n            last_note = \"o\"\n            last_note_length = 1\n\
    \        case \"o|\":\n            if current_note != last_note {\n          \
    \      beats.append(current_beat)\n                current_beat = 0\n        \
    \        current_note = \"\"\n                current_note_length = 0\n      \
    \      }\n            last_note = \"o|\"\n            last_note_length = 2\n \
    \       case \"|\":\n            if current_note != last_note {\n            \
    \    beats.append(current_beat)\n                current_beat = 0\n          \
    \      current_note = \"\"\n                current_note_length = 0\n        \
    \    }\n            last_note = \"|\"\n            last_note_length = 1\n    \
    \    default:\n            if current_note != last_note {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \           current_note_length = 0\n            }\n            current_note +=\
    \ String(c)\n            current_note_length += 1\n        }\n        current_beat\
    \ += 1\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpiac5ux3p.swift:29:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastNote = \"\"\n\
    \    var lastNoteBeat = 0\n    var lastNoteBeatCount = 0\n    var lastNoteBeatCount2\
    \ = 0\n    var lastNoteBeatCount3 = 0\n    var lastNoteBeatCount4 = 0\n    var\
    \ lastNoteBeatCount5 = 0\n    var lastNoteBeatCount6 = 0\n    var lastNoteBeatCount7\
    \ = 0\n    var lastNoteBeatCount8 = 0\n    var lastNoteBeatCount9 = 0\n    var\
    \ lastNoteBeatCount10 = 0\n    var lastNoteBeatCount11 = 0\n    var lastNoteBeatCount12\
    \ = 0\n    var lastNoteBeatCount13 = 0\n    var lastNoteBeatCount14 = 0\n    var\
    \ lastNoteBeatCount15 = 0\n    var lastNoteBeatCount16 = 0\n    var lastNoteBeatCount17\
    \ = 0\n    var lastNoteBeatCount18 = 0\n    var lastNoteBeatCount19 = 0\n    var\
    \ lastNoteBeatCount20 = 0\n    var lastNoteBeatCount21 = 0\n    var lastNoteBeatCount22\
    \ = 0\n    var lastNoteBeatCount23 = 0\n    var lastNoteBeatCount24 = 0\n    var\
    \ lastNoteBeatCount25 = 0\n    var lastNoteBeatCount26 = 0\n    var lastNoteBeatCount27\
    \ = 0\n    var lastNoteBeatCount28 = 0\n    var lastNoteBeatCount29 = 0\n    var\
    \ lastNoteBeatCount30 = 0\n    var lastNoteBeatCount31 = 0\n    var lastNoteBeatCount32\
    \ = 0\n    var lastNoteBeatCount33 = 0\n    var lastNoteBeatCount34 = 0\n    var\
    \ lastNoteBeatCount35 = 0\n    var lastNoteBeatCount36 = 0\n    var lastNoteBeatCount37\
    \ = 0\n    var lastNoteBeatCount38 = 0\n    var lastNoteBeatCount39 = 0\n    var\
    \ lastNoteBeatCount40 = 0\n    var lastNoteBeatCount41 = 0\n    var lastNoteBeatCount42\
    \ = 0\n    var lastNoteBeatCount43 = 0\n    var lastNoteBeatCount44 = 0\n    var\
    \ lastNoteBeatCount45 = 0\n    var lastNoteBeatCount46 = 0\n    var lastNoteBeatCount47\
    \ = 0\n    var lastNoteBeatCount48 = 0\n    var lastNoteBeatCount49 = 0\n    var\
    \ lastNoteBeatCount50 = 0\n    var lastNoteBeatCount51 = 0\n    var lastNoteBeatCount52\
    \ = 0\n    var lastNoteBeatCount53\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3v_hjx3c.swift:71:9: error: type annotation missing in pattern\n\
    \    var lastNoteBeatCount53\n        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_index = 0\n    var last_note\
    \ = \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note_index = 0\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n    var last_note = \"\"\n    var last_note_index = 0\n    var last_beat\
    \ = 0\n    var last_beat_index = 0\n    var last_note = \"\"\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note =\
    \ \"\"\n    var last_note_index = 0\n    var last_beat = 0\n    var last_beat_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt9_c1jph.swift:21:9: error: invalid redeclaration of 'last_note_index'\n\
    \    var last_note_index = 0\n        ^\n/tmp/tmpt9_c1jph.swift:18:9: note: 'last_note_index'\
    \ previously declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpt9_c1jph.swift:22:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpt9_c1jph.swift:18:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpt9_c1jph.swift:23:9:\
    \ error: invalid redeclaration of 'last_beat'\n    var last_beat = 0\n       \
    \ ^\n/tmp/tmpt9_c1jph.swift:19:9: note: 'last_beat' previously declared here\n\
    \    var last_beat = 0\n        ^\n/tmp/tmpt9_c1jph.swift:24:9: error: invalid\
    \ redeclaration of 'last_beat_index'\n    var last_beat_index = 0\n        ^\n\
    /tmp/tmpt9_c1jph.swift:20:9: note: 'last_beat_index' previously declared here\n\
    \    var last_beat_index = 0\n        ^\n/tmp/tmpt9_c1jph.swift:25:9: error: invalid\
    \ redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n/tmp/tmpt9_c1jph.swift:17:9:\
    \ note: 'last_note' previously declared here\n    var last_note = \"\"\n     \
    \   ^\n/tmp/tmpt9_c1jph.swift:26:9: error: invalid redeclaration of 'last_note_index'\n\
    \    var last_note_index = 0\n        ^\n/tmp/tmpt9_c1jph.swift:18:9: note: 'last_note_index'\
    \ previously declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpt9_c1jph.swift:27:9:\
    \ error: invalid redeclaration of 'last_beat'\n    var last_beat = 0\n       \
    \ ^\n/tmp/tmpt9_c1jph.swift:19:9: note: 'last_beat' previously declared here\n\
    \    var last_beat = 0\n        ^\n/tmp/tmpt9_c1jph.swift:28:9: error: invalid\
    \ redeclaration of 'last_beat_index'\n    var last_beat_index = 0\n        ^\n\
    /tmp/tmpt9_c1jph.swift:20:9: note: 'last_beat_index' previously declared here\n\
    \    var last_beat_index = 0\n        ^\n/tmp/tmpt9_c1jph.swift:29:9: error: invalid\
    \ redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n/tmp/tmpt9_c1jph.swift:17:9:\
    \ note: 'last_note' previously declared here\n    var last_note = \"\"\n     \
    \   ^\n/tmp/tmpt9_c1jph.swift:30:9: error: invalid"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = Int()\n    var last_note = Int()\n    var last_beat = 0\n    var last_beats\
    \ = 0\n    var last_notes = 0\n    var last_notes_beats = 0\n    var last_notes_beats_count\
    \ = 0\n    var last_notes_beats_count_count = 0\n    var last_notes_beats_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count = 0\n    var last_notes_beats_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count = 0\n    var\
    \ last_notes_beats_count_count_count_count_count_count_count = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpz2_f543r.swift:39:9: error: type annotation missing in pattern\n\
    \    var last_notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmq0j1zmq.swift:66:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmq0j1zmq.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpmq0j1zmq.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    for c in music_string {\n        switch c {\n     \
    \   case \"o\":\n            current_note = \"o\"\n            current_beat =\
    \ 0\n        case \"o|\":\n            current_note = \"o\"\n            current_beat\
    \ = 1\n        case \"|\":\n            current_note = \"|\"\n            current_beat\
    \ = 1\n        default:\n            if current_note != \"\" {\n             \
    \   beats.append(current_beat)\n                current_beat = 0\n           \
    \     current_note = \"\"\n            }\n        }\n    }\n    if current_note\
    \ != \"\" {\n        beats.append(current_beat)\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp46jnded3.swift:20:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var note_count = 0\n    var note_length = 0\n    var note_index = 0\n    var\
    \ note_char = \"\"\n    var note_char_index = 0\n    var note_char_length = 0\n\
    \    var note_char_char = \"\"\n    var note_char_char_index = 0\n    var note_char_char_length\
    \ = 0\n    var note_char_char_char = \"\"\n    var note_char_char_char_index =\
    \ 0\n    var note_char_char_char_length = 0\n    var note_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_index = 0\n    var note_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_index = 0\n   \
    \ var note_char_char_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_index = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_length = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char = \"\"\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char_index = 0\n    var note_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char = \"\
    \"\n    var note_char_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char = \"\
    \"\n    var note_char_char_char_char_char_char_char_char_char_char_index = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_length = 0\n \
    \   var note_char_char_char_char_char_char_char_char_char_char_char = \"\"\n \
    \   var note_char_char_char_char_char_char_char_char_char_char_char_index = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpo2som2ik.swift:46:9: error: invalid redeclaration of 'note_char_char_char_char_char_char_char_char_char_length'\n\
    \    var note_char_char_char_char_char_char_char_char_char_length = 0\n      \
    \  ^\n/tmp/tmpo2som2ik.swift:43:9: note: 'note_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpo2som2ik.swift:47:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char'\n    var note_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpo2som2ik.swift:44:9: note: 'note_char_char_char_char_char_char_char_char_char_char'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpo2som2ik.swift:48:9: error: invalid redeclaration\
    \ of 'note_char_char_char_char_char_char_char_char_char_char_index'\n    var note_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n        ^\n/tmp/tmpo2som2ik.swift:45:9: note: 'note_char_char_char_char_char_char_char_char_char_char_index'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n        ^\n/tmp/tmpo2som2ik.swift:53:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char_char'\n    var note_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpo2som2ik.swift:50:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpo2som2ik.swift:54:9: error: invalid redeclaration\
    \ of 'note_char_char_char_char_char_char_char_char_char_char_index'\n    var note_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n        ^\n/tmp/tmpo2som2ik.swift:45:9: note: 'note_char_char_char_char_char_char_char_char_char_char_index'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_index\
    \ = 0\n        ^\n/tmp/tmpo2som2ik.swift:"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_length\
    \ = 0\n    var current_note_length_value_length_index = 0\n    var current_note_length_value_length_value\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n    var current_note_length_value_length_value_index\
    \ = 0\n    var current_note_length_value_length_value_index = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_zmqumq_.swift:22:9: error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_length_value_index'\n\
    \    var current_note_length_value_length_value_index = 0\n        ^\n/tmp/tmp_zmqumq_.swift:21:9:\
    \ note: 'current_note_length_value_length_value_index' previously declared here\n\
    \    var current_note_"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyvx3605y.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        if\
    \ c == 'o' {\n            notes.append(note)\n            note = \"\"\n      \
    \      beat = 0\n        } else if c == '|' {\n            notes.append(note)\n\
    \            note = \"\"\n            beat = 0\n        } else if c == '.' {\n\
    \            notes.append(note)\n            note = \"\"\n            beat = 0\n\
    \        } else {\n            note += String(c)\n        }\n        beats.append(beat)\n\
    \        beat += 1\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_af7y7xh.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp_af7y7xh.swift:21:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmp_af7y7xh.swift:25:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp03jxqf65.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:24:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmp03jxqf65.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppl75gqyb.swift:77:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9v3vwc0u.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:22:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:29:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmp9v3vwc0u.swift:23:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_note_length = nil\n    var\
    \ current_note_length = nil\n    var current_note_length = nil\n    var current_note_length\
    \ = nil\n    var current_note_length = nil\n    var current_note_length = nil\n\
    \    var current_note_length = nil\n    var current_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprozcbvoz.swift:14:24: error: 'nil' requires a contextual type\n\
    \    var current_note = nil\n                       ^\n/tmp/tmprozcbvoz.swift:15:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:16:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:17:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:18:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:19:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:20:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:21:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:22:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:23:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:24:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:25:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift:26:31: error: 'nil' requires a contextual\
    \ type\n    var current_note_length = nil\n                              ^\n/tmp/tmprozcbvoz.swift:27:31:\
    \ error: 'nil' requires a contextual type\n    var current_note_length = nil\n\
    \                              ^\n/tmp/tmprozcbvoz.swift:28:31: error: 'nil' requires\
    \ a contextual type\n    var current_note_length = nil\n                     \
    \         ^\n/tmp/tmprozcbvoz.swift"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv2ztt3e2.swift:18:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpv2ztt3e2.swift:16:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpv2ztt3e2.swift:19:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_string = \"\"\n  \
    \      ^\n/tmp/tmpv2ztt3e2.swift:17:9: note: 'current_note_length_string' previously\
    \ declared here\n    var current_note_length_string = \"\"\n        ^\n/tmp/tmpv2ztt3e2.swift:20:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpv2ztt3e2.swift:16:9: note: 'current_note_length_index'\
    \ previously declared here\n    var current_note_length_index = 0\n        ^\n\
    /tmp/tmpv2ztt3e2.swift:21:9: error: invalid redeclaration of 'current_note_length_string'\n\
    \    var current_note_length_string = \"\"\n        ^\n/tmp/tmpv2ztt3e2.swift:17:9:\
    \ note: 'current_note_length_string' previously declared here\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpv2ztt3e2.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length_index'\n    var current_note_length_index = 0\n    \
    \    ^\n/tmp/tmpv2ztt3e2.swift:16:9: note: 'current_note_length_index' previously\
    \ declared here\n    var current_note_length_index = 0\n        ^\n/tmp/tmpv2ztt3e2.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_string'\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpv2ztt3e2.swift:17:9: note: 'current_note_length_string'\
    \ previously declared here\n    var current_note_length_string = \"\"\n      \
    \  ^\n/tmp/tmpv2ztt3e2.swift:24:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpv2ztt3e2.swift:16:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpv2ztt3e2.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_s"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var last_note = 0\n \
    \   var last_note_length = 0\n    var last_note_is_whole_note = false\n    var\
    \ last_note_is_half_note = false\n    var last_note_is_quarter_note = false\n\
    \    var last_note_is_eighth_note = false\n    var last_note_is_sixteenth_note\
    \ = false\n    var last_note_is_thirty_sixth_note = false\n    var last_note_is_sixty_fourth_note\
    \ = false\n    var last_note_is_eighty_fourth_note = false\n    var last_note_is_eighty_fifth_note\
    \ = false\n    var last_note_is_eighty_sixth_note = false\n    var last_note_is_eighty_seventh_note\
    \ = false\n    var last_note_is_eighty_eighth_note = false\n    var last_note_is_eighty_ninth_note\
    \ = false\n    var last_note_is_eighty_tenth_note = false\n    var last_note_is_eighty_eleventh_note\
    \ = false\n    var last_note_is_eighty_twelfth_note = false\n    var last_note_is_eighty_thirteenth_note\
    \ = false\n    var last_note_is_eighty_fourteenth_note = false\n    var last_note_is_eighty_fifteenth_note\
    \ = false\n    var last_note_is_eighty_sixteenth_note = false\n    var last_note_is_eighty_seventeenth_note\
    \ = false\n    var last_note_is_eighty_eighteenth_note = false\n    var last_note_is_eighty_nineteenth_note\
    \ = false\n    var last_note_is_eighty_twentiethy_note = false\n    var last_note_is_eighty_thirtiethy_note\
    \ = false\n    var last_note_is_eighty_fourtiethy_note = false\n    var last_note_is_eighty_fiftiethy_note\
    \ = false\n    var last_note_is_eighty_sixtiethy_note = false\n    var last_note_is_eighty_seventiethy_note\
    \ = false\n    var last_note_is_eighty_eightiethy_note = false\n    var last_note_is_eighty_ninetiethy_note\
    \ = false\n    var last_note_is_eighty_twentyfourth_note = false\n    var last_note_is_eighty_thirtyfourth_note\
    \ = false\n    var last_note_is_eighty_fourtyfourth_note = false\n    var last_note_is_eighty_fiftyfourth_note\
    \ = false\n    var last_note_is_eighty_sixtyfourth_note = false\n    var last_note_is_eighty_seventyfourth_note\
    \ = false\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmph8ct_ijb.swift:55:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmph8ct_ijb.swift:12:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmph8ct_ijb.swift:13:9: warning:\
    \ initialization of variable 'current_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmph8ct_ijb.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmph8ct_ijb.swift:15:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmph8ct_ijb.swift:16:9: warning:\
    \ initialization of variable 'last_note' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var last_note = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmph8ct_ijb.swift:17:9: warning: initialization of variable 'last_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_length = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmph8ct_ijb.swift:18:9:\
    \ warning: initialization of variable 'last_note_is_whole_note' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_note_is_whole_note\
    \ = false\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmph8ct_ijb.swift:19:9:\
    \ warning: initialization of variable 'last_note_is_half_note' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_note_is_half_note\
    \ = false\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmph8ct_ijb.swift:20:9:\
    \ warning: initialization of variable 'last_note_is_quarter_note' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_note_is_quarter_note\
    \ = false\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmph"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_string\
    \ = \"\"\n    var current_note_string_index = 0\n    var current_note_string_value\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n    var current_note_string_value_index\
    \ = 0\n    var current_note_string_value_index = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqmtx6t38.swift:24:9: error: invalid redeclaration of 'current_note_string_value_index'\n\
    \    var current_note_string_value_index = 0\n        ^\n/tmp/tmpqmtx6t38.swift:23:9:\
    \ note: 'current_note_string_value_index' previously declared here\n    var current_note_string_value_index\
    \ = 0\n        ^\n/tmp/tmpqmtx6t38.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_string_value_index'\n    var current_note_string_value_index =\
    \ 0\n        ^\n/tmp/tmpqmtx6t38.swift:23:9: note: 'current_note_string_value_index'\
    \ previously declared here\n    var current_note_string_value_index = 0\n    \
    \    ^\n/tmp/tmpqmtx6t38.swift:26:9: error: invalid redeclaration of 'current_note_string_value_index'\n\
    \    var current_note_string_value_index = 0\n        ^\n/tmp/tmpqmtx6t38.swift:23:9:\
    \ note: 'current_note_string_value_index' previously declared here\n    var current_note_string_value_index\
    \ = 0\n        ^\n/tmp/tmpqmtx6t38.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_string_value_index'\n    var current_note_string_value_index =\
    \ 0\n        ^\n/tmp/tmpqmtx6t38.swift:23:9: note: 'current_note_string_value_index'\
    \ previously declared here\n    var current_note_string_value_index = 0\n    \
    \    ^\n/tmp/tmpqmtx6t38.swift:28:9: error: invalid redeclaration of 'current_note_string_value_index'\n\
    \    var current_note_string_value_index = 0\n        ^\n/tmp/tmpqmtx6t38.swift:23:9:\
    \ note: 'current_note_string_value_index' previously declared here\n    var current_note_string_value_index\
    \ = 0\n        ^\n/tmp/tmpqmtx6t38.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_string_value_index'\n    var current_note_string_value_index =\
    \ 0\n        ^\n/tmp/tmpqmtx6t38.swift:23:9: note: 'current_note_string_value_index'\
    \ previously declared here\n    var current_note_string_value_index = 0\n    \
    \    ^\n/tmp/tmpqmtx6t38.swift:30:9: error: invalid redeclaration of 'current_note_string_value_index'\n\
    \    var current_note_string_value_index = 0\n        ^\n/tmp/tmpqmtx6t38.swift:23:9:\
    \ note: 'current_note_string_value_index' previously declared here\n    var current_note_st"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyvx3605y.swift:16:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpyvx3605y.swift:23:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpyvx3605y.swift:15:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660013878
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = nil\n    for c in music_string {\n        switch c {\n      \
    \  case \"o\":\n            if current_note != nil {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n            }\n            current_note = .WholeNote\n\
    \        case \"o|\":\n            if current_note != nil {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n            }\n            current_note = .HalfNote\n\
    \        case \"|\":\n            if current_note != nil {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n            }\n            current_note = nil\n\
    \        default:\n            if current_note != nil {\n                current_beat++\n\
    \            }\n            current_note = .Unknown\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp21bn12pk.swift:14:24: error: 'nil' requires a contextual type\n\
    \    var current_note = nil\n                       ^\n/tmp/tmp21bn12pk.swift:23:14:\
    \ error: expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"o|\":\n             ^~~~\n/tmp/tmp21bn12pk.swift:37:29: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n                current_beat++\n\
    \                            ^~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ '.' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = music_string[c]\n        } else if c == 'o' {\n  \
    \          beats.append(current_beat)\n            current_beat = 0\n        \
    \    current_note = music_string[c]\n        } else if c == '|' {\n          \
    \  current_beat += 1\n        } else {\n            current_note += c\n      \
    \  }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzrbqmvy_.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmpzrbqmvy_.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmpzrbqmvy_.swift:24:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '|' {\n                       ^~~\n\
    \                       \"|\"\n/tmp/tmpzrbqmvy_.swift:14:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzrbqmvy_.swift:19:41:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            current_note = music_string[c]\n                                \
    \        ^\n/tmp/tmpzrbqmvy_.swift:23:41: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String.Index'\n            current_note\
    \ = music_string[c]\n                                        ^\n/tmp/tmpzrbqmvy_.swift:27:26:\
    \ error: binary operator '+=' cannot be applied to two 'Character' operands\n\
    \            current_note += c\n            ~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1660013879
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last = 0\n    var lastbeat = 0\n\
    \    var lastnote = \"\"\n    for c in music_string {\n        if c == 'o' {\n\
    \            notes.append(note)\n            beats.append(beat)\n            last\
    \ = beat\n            beat = 0\n            note = \"\"\n            lastbeat\
    \ = 0\n            lastnote = \"\"\n        } else if c == '|' {\n           \
    \ notes.append(note)\n            beats.append(beat)\n            last = beat\n\
    \            beat = 0\n            note = \"\"\n            lastbeat = 0\n   \
    \         lastnote = \"\"\n        } else if c == '.' {\n            notes.append(note)\n\
    \            beats.append(beat)\n            last = beat\n            beat = 0\n\
    \            note = \"\"\n            lastbeat = 0\n            lastnote = \"\"\
    \n        } else {\n            note += String(c)\n        }\n    }\n    notes.append(note)\n\
    \    beats.append(beat)\n    last = beat\n    beat = 0\n    note = \"\"\n    lastbeat\
    \ = 0\n    lastnote = \"\"\n    for c in notes {\n        if c == \"o\" {\n  \
    \          lastbeat = beat\n            beat += 4\n        } else if c == \"|\"\
    \ {\n            lastbeat = beat\n            beat += 2\n        } else if c ==\
    \ \".\" {\n            lastbeat = beat\n            beat += 1\n        } else\
    \ {\n            lastbeat = beat\n            beat += 1\n        }\n        lastnote\
    \ = note\n        note = \"\"\n    }\n    beats.append(lastbeat)\n    beats.append(last)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgkxz5won.swift:20:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpgkxz5won.swift:28:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpgkxz5won.swift:36:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpgkxz5won.swift:18:9: warning: variable\
    \ 'lastnote' was written to, but never read\n    var lastnote = \"\"\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660013879
