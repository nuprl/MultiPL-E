language: swift
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if let string = value as? String {\n                if string.lowercaseString.isEmpty\
    \ {\n                    return false\n                }\n                if string.uppercaseString.isEmpty\
    \ {\n                    return false\n                }\n            }\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7i2glhyx.swift:16:35: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n            if let string = value as? String {\n \
    \                                 ^\n/tmp/tmp7i2glhyx.swift:17:27: error: value\
    \ of type 'String' has no member 'lowercaseString'\n                if string.lowercaseString.isEmpty\
    \ {\n                   ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7i2glhyx.swift:20:27:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            \
    \    if string.uppercaseString.isEmpty {\n                   ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp7i2glhyx.swift:15:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let value = value {\n         \
    \  ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for key in dict.keys {\n        let lowerCase = key.lowercased()\n      \
    \  let upperCase = key.uppercased()\n        if lowerCase == upperCase {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpm6ps7qzh/tmpm6ps7qzh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ece7bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ece4b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ece4b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ece4b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6ps7qzh                        0x0000560f5c794853 <unavailable> + 6227

    5    libc.so.6                          0x00002b9ece9a6460 __libc_start_main +
    245

    6    tmpm6ps7qzh                        0x0000560f5c794409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if k.isEmpty {\n            return\
    \ false\n        }\n        \n        if k.lowercaseString != k {\n          \
    \  return false\n        }\n    }\n    \n    for k in dict.keys {\n        if\
    \ k.uppercaseString != k {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd444j2aq.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpd444j2aq.swift:21:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpd444j2aq.swift:27:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if value.lowercaseString.isEmpty {\n                return false\n      \
    \      } else if value.uppercaseString.isEmpty {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphzxcr58h.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmphzxcr58h.swift:17:22: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmphzxcr58h.swift:19:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmphzxcr58h.swift:16:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let value = value {\n         \
    \  ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let lower = k.lowercaseString\n\
    \        let upper = k.uppercaseString\n        \n        if lower == upper {\n\
    \            continue\n        }\n        \n        if lower != upper {\n    \
    \        return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkhvjzi02.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpkhvjzi02.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpkhvjzi02.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else if k == k.toUpperCase {\n            if v != v.toUpperCase\
    \ {\n                return false\n            }\n        } else {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5c1ery0v.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp5c1ery0v.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp5c1ery0v.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp5c1ery0v.swift:21:26: error: value of type\
    \ 'String' has no member 'toUpperCase'\n        } else if k == k.toUpperCase {\n\
    \                       ~ ^~~~~~~~~~~\n/tmp/tmp5c1ery0v.swift:22:23: error: value\
    \ of type 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase\
    \ {\n                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower == upper {\n            continue\n\
    \        }\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp646fbgoq.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp646fbgoq.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmp646fbgoq.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let value = dict[key]\n     \
    \   \n        if let value = value {\n            if value.lowercaseString.isEmpty\
    \ {\n                return false\n            } else if value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    \n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2keeee8m.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp2keeee8m.swift:20:22: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp2keeee8m.swift:22:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        if let _ = key.lowercased() {\n   \
    \         return true\n        }\n        if let _ = key.uppercased() {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4l0bib1t.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp4l0bib1t.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = key.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~~~\n/tmp/tmp4l0bib1t.swift:19:12: error:\
    \ initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let _ = key.uppercased() {\n           ^       ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.toLowerCase {\n            if v != v.toLowerCase {\n                return\
    \ false\n            }\n        } else {\n            if v != v.toUpperCase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5hqahz1v.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp5hqahz1v.swift:18:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp5hqahz1v.swift:19:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp5hqahz1v.swift:23:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if k.isEmpty {\n            return\
    \ false\n        }\n        \n        if k.isUpper() {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwkhvn3sx.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpwkhvn3sx.swift:21:14: error: value of type 'String'\
    \ has no member 'isUpper'\n        if k.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toUpperCase\
    \ {\n            if v != k.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toLowerCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpabutqgif.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpabutqgif.swift:17:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpabutqgif.swift:18:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpabutqgif.swift:22:23: error: value of type\
    \ 'String' has no member 'toLowerCase'\n            if v != k.toLowerCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let value = dict[key]\n     \
    \   let lowerCase = key.lowercaseString\n        let upperCase = key.uppercaseString\n\
    \        \n        if lowerCase == upperCase {\n            return true\n    \
    \    }\n        \n        if lowerCase != upperCase {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9rxa7byi.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp9rxa7byi.swift:18:29: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lowerCase = key.lowercaseString\n\
    \                        ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp9rxa7byi.swift:19:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n        let upperCase\
    \ = key.uppercaseString\n                        ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if let\
    \ string = value as? String {\n            if string.lowercaseString.isEmpty {\n\
    \                return false\n            }\n            if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpte11as52.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpte11as52.swift:17:31: warning: conditional downcast\
    \ from 'String?' to 'String' does nothing\n        if let string = value as? String\
    \ {\n                        ~~~~~~^~~~~~~~~~\n                             \n\
    /tmp/tmpte11as52.swift:18:23: error: value of type 'String' has no member 'lowercaseString'\n\
    \            if string.lowercaseString.isEmpty {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpte11as52.swift:21:23: error: value of type 'String' has no member 'uppercaseString'\n\
    \            if string.uppercaseString.isEmpty {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercased() != k {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvyqtw9pd/tmpvyqtw9pd.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f4b6ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f4b3e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f4b3e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f4b3e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvyqtw9pd                        0x0000556333f77c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b2f4b8d8460 __libc_start_main +
    245

    6    tmpvyqtw9pd                        0x0000556333f773f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != key {\n            return false\n        }\n        if key != key {\n   \
    \         return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n        }\n        if\
    \ key != key {\n            return false\n        }\n        if key != key {\n\
    \            return false\n        }\n        if key != key {\n            return\
    \ false\n        }\n        if key != key {\n            return false\n      \
    \  }\n        if key != key {\n            return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg1hu55fm.swift:172:65: error: expected '}' at end of brace statement\n\
    assert(check_dict_case(dict: [:] as [String : String]) == false)\n           \
    \                                                     ^\n/tmp/tmpg1hu55fm.swift:15:26:\
    \ note: to match this opening '{'\n    for key in dict.keys {\n              \
    \           ^\n/tmp/tmpg1hu55fm.swift:172:65: error: expected '}' at end of brace\
    \ statement\nassert(check_dict_case(dict: [:] as [String : String]) == false)\n\
    \                                                                ^\n/tmp/tmpg1hu55fm.swift:11:55:\
    \ note: to match this opening '{'\nfunc check_dict_case(dict: [String : String])\
    \ -> Bool {\n                                                      ^\n/tmp/tmpg1hu55fm.swift:12:13:\
    \ warning: comparing non-optional value of type '[String : String]' to 'nil' always\
    \ returns false\n    if dict == nil {\n       ~~~~ ^  ~~~\n/tmp/tmpg1hu55fm.swift:154:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpg1hu55fm.swift:16:13:\
    \ warning: initialization of immutable value 'value' was never used; consider\
    \ replacing with assignment to '_' or removing it\n        let value = dict[key]\n\
    \        ~~~~^~~~~\n        _\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ lowerCase = key.lowercaseString\n        let upperCase = key.uppercaseString\n\
    \        if lowerCase == upperCase {\n            return true\n        }\n   \
    \     if lowerCase == value {\n            return true\n        }\n        if\
    \ upperCase == value {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbausxfyz.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpbausxfyz.swift:17:29: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lowerCase = key.lowercaseString\n\
    \                        ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpbausxfyz.swift:18:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n        let upperCase\
    \ = key.uppercaseString\n                        ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != k.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmporny4dd3.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmporny4dd3.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmporny4dd3.swift:18:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmporny4dd3.swift:22:23: error: value of type\
    \ 'String' has no member 'toUpperCase'\n            if v != k.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != k.toLowerCase {\n                return false\n     \
    \       }\n        } else if k == k.toUpperCase {\n            if v != k.toUpperCase\
    \ {\n                return false\n            }\n        } else {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpys8mtjt0.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpys8mtjt0.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpys8mtjt0.swift:18:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpys8mtjt0.swift:21:26: error: value of type\
    \ 'String' has no member 'toUpperCase'\n        } else if k == k.toUpperCase {\n\
    \                       ~ ^~~~~~~~~~~\n/tmp/tmpys8mtjt0.swift:22:23: error: value\
    \ of type 'String' has no member 'toUpperCase'\n            if v != k.toUpperCase\
    \ {\n                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    \n    for k in dict.keys {\n        guard let _ = k.lowercased() else { return\
    \ false }\n        guard let _ = k.uppercased() else { return false }\n    }\n\
    \    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm8dto6i5.swift:15:15: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        guard let _ = k.lowercased()\
    \ else { return false }\n              ^       ~~~~~~~~~~~~~~\n/tmp/tmpm8dto6i5.swift:16:15:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        guard let _ = k.uppercased() else { return false }\n              ^ \
    \      ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if k.isEmpty {\n            return\
    \ false\n        }\n        \n        let lower = k.lowercased()\n        let\
    \ upper = k.uppercased()\n        \n        if lower != k {\n            return\
    \ false\n        }\n        \n        if upper != k {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp02qto5yr/tmp02qto5yr.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d27c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d24bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d24bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d24ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02qto5yr                        0x000055a109e88853 <unavailable> + 6227

    5    libc.so.6                          0x00002b79d29b0460 __libc_start_main +
    245

    6    tmp02qto5yr                        0x000055a109e88409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if k.isEmpty {\n            return\
    \ false\n        }\n        \n        let lower = k.lowercased()\n        let\
    \ upper = k.uppercased()\n        \n        if lower == upper {\n            continue\n\
    \        }\n        \n        if lower != upper {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpsm3uilw0/tmpsm3uilw0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eecaebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eec7e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eec7e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eec7e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsm3uilw0                        0x000055764fe59853 <unavailable> + 6227

    5    libc.so.6                          0x00002b3eeccd7460 __libc_start_main +
    245

    6    tmpsm3uilw0                        0x000055764fe59409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k {\n\
    \            return true\n        }\n        if k == k.lowercaseString {\n   \
    \         return true\n        }\n        if k == k.uppercaseString {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48e139qy.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp48e139qy.swift:20:19: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k == k.lowercaseString {\n     \
    \           ~ ^~~~~~~~~~~~~~~\n/tmp/tmp48e139qy.swift:23:19: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        if k == k.uppercaseString\
    \ {\n                ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if value.lowercaseString.isEmpty {\n                return false\n      \
    \      } else if value.uppercaseString.isEmpty {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn7np_15o.swift:16:22: error: value of type 'String' has no member\
    \ 'lowercaseString'\n            if value.lowercaseString.isEmpty {\n        \
    \       ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpn7np_15o.swift:18:29: error: value of type\
    \ 'String' has no member 'uppercaseString'\n            } else if value.uppercaseString.isEmpty\
    \ {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpn7np_15o.swift:15:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let value = value {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil && key != \"\" {\n            if key.lowercaseString == key {\n     \
    \           return true\n            }\n            if key.uppercaseString ==\
    \ key {\n                return true\n            }\n        }\n        if value\
    \ != nil && value != \"\" {\n            if value.lowercaseString == value {\n\
    \                return true\n            }\n            if value.uppercaseString\
    \ == value {\n                return true\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyt2rr963.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpyt2rr963.swift:17:16: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n        if key != nil &&\
    \ key != \"\" {\n           ~~~ ^  ~~~\n/tmp/tmpyt2rr963.swift:18:20: error: value\
    \ of type 'String' has no member 'lowercaseString'\n            if key.lowercaseString\
    \ == key {\n               ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpyt2rr963.swift:21:20:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            if\
    \ key.uppercaseString == key {\n               ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpyt2rr963.swift:26:22:\
    \ error: value of type 'String?' has no member 'lowercaseString'\n           \
    \ if value.lowercaseString == value {\n               ~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpyt2rr963.swift:29:22: error: value of type 'String?' has no member 'uppercaseString'\n\
    \            if value.uppercaseString == value {\n               ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if let v = dict[k] {\n        \
    \    if v.isEmpty {\n                return false\n            }\n           \
    \ if v.lowercaseString.isEmpty {\n                return false\n            }\n\
    \            if v.uppercaseString.isEmpty {\n                return false\n  \
    \          }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf2r_2__w.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpf2r_2__w.swift:21:18: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if v.lowercaseString.isEmpty {\n\
    \               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpf2r_2__w.swift:24:18: error: value\
    \ of type 'String' has no member 'uppercaseString'\n            if v.uppercaseString.isEmpty\
    \ {\n               ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for key in dict.keys {\n        guard let value = dict[key] else {\
    \ return false }\n        \n        switch value.lowercased() {\n        case\
    \ value.uppercased():\n            return true\n        default:\n           \
    \ return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpbi_620jy/tmpbi_620jy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b039c009c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b039bd00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b039bd00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b039bcff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbi_620jy                        0x000055d7980d4893 <unavailable> + 6291

    5    libc.so.6                          0x00002b039c1f5460 __libc_start_main +
    245

    6    tmpbi_620jy                        0x000055d7980d4449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ lowerCase = String(key).lowercased()\n        let upperCase = String(key).uppercased()\n\
    \        if lowerCase == upperCase {\n            continue\n        }\n      \
    \  return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp1ihige47/tmp1ihige47.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd9410c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd9107b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd9107988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd91067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ihige47                        0x00005594e2988963 <unavailable> + 6499

    5    libc.so.6                          0x00002afdd95fc460 __libc_start_main +
    245

    6    tmp1ihige47                        0x00005594e2988519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        let lower =\
    \ k.lowercaseString\n        let upper = k.uppercaseString\n        if v != nil\
    \ && v != \"\" && lower != nil && upper != nil {\n            if v!.lowercaseString\
    \ == lower! {\n                return true\n            } else if v!.uppercaseString\
    \ == upper! {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps971zabm.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmps971zabm.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmps971zabm.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n/tmp/tmps971zabm.swift:20:19: error: value\
    \ of type 'String' has no member 'lowercaseString'\n            if v!.lowercaseString\
    \ == lower! {\n               ~~ ^~~~~~~~~~~~~~~\n/tmp/tmps971zabm.swift:22:26:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            }\
    \ else if v!.uppercaseString == upper! {\n                      ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != key {\n            return false\n        }\n        if value != value {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpyh9chzs3/tmpyh9chzs3.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3ee39fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3ee096b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3ee096988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3ee0957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyh9chzs3                        0x000055e449d5f975 <unavailable> + 6517

    5    libc.so.6                          0x00002ab3ee58b460 __libc_start_main +
    245

    6    tmpyh9chzs3                        0x000055e449d5f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        if key != String(key.lowercased())\
    \ {\n            return false\n        }\n    }\n    for key in dict.keys {\n\
    \        if key != String(key.uppercased()) {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmplrph5ifj/tmplrph5ifj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b064cf34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b064cc2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b064cc2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b064cc2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplrph5ifj                        0x00005614d6866913 <unavailable> + 6419

    5    libc.so.6                          0x00002b064d120460 __libc_start_main +
    245

    6    tmplrph5ifj                        0x00005614d68664c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        if let _ = key.lowercaseString {\n\
    \            return true\n        }\n        if let _ = key.uppercaseString {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdsug2g8g.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpdsug2g8g.swift:16:24: error: type of expression is\
    \ ambiguous without more context\n        if let _ = key.lowercaseString {\n \
    \                  ~~~~^~~~~~~~~~~~~~~\n/tmp/tmpdsug2g8g.swift:19:24: error: type\
    \ of expression is ambiguous without more context\n        if let _ = key.uppercaseString\
    \ {\n                   ~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if value.characters.count > 0 {\n                if value.lowercaseString.characters.count\
    \ == value.characters.count {\n                    return true\n             \
    \   }\n                if value.uppercaseString.characters.count == value.characters.count\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp723n5i_a.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp723n5i_a.swift:17:22: error: 'characters' is unavailable:\
    \ Please use String directly\n            if value.characters.count > 0 {\n  \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp723n5i_a.swift:18:26: error: value of type 'String' has no member\
    \ 'lowercaseString'\n                if value.lowercaseString.characters.count\
    \ == value.characters.count {\n                   ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp723n5i_a.swift:21:26:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            \
    \    if value.uppercaseString.characters.count == value.characters.count {\n \
    \                  ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp723n5i_a.swift:16:12: error:\
    \ initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let value = value {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    \n    for (_, value) in dict {\n        if let string = value as? String\
    \ {\n            if string.lowercaseString.isEmpty {\n                return false\n\
    \            } else if string.uppercaseString.isEmpty {\n                return\
    \ false\n            }\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkjrk59oc.swift:15:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmpkjrk59oc.swift:16:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpkjrk59oc.swift:18:30: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ string.uppercaseString.isEmpty {\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for key in dict.keys {\n        guard let value = dict[key] else {\
    \ return false }\n        \n        switch key {\n        case \"A\"...\"Z\":\n\
    \        case \"a\"...\"z\":\n        case \"0\"...\"9\":\n        case \"_\"\
    :\n        case \"-\":\n        case \"$\":\n        case \"%\":\n        case\
    \ \"&\":\n        case \"*\":\n        case \"(\":\n        case \"[\":\n    \
    \    case \")\":\n        case \"]\":\n        case \"}\":\n        case \"\\\\\
    \":\n        case \"|\":\n        case \"~\":\n        case \"?\":\n        case\
    \ \"\\\"\":\n        case \"<\":\n        case \">\":\n        case \"=\":\n \
    \       case \"{\":\n        case \"}\":\n        case \"|\":\n        case \"\
    +\":\n        case \"%\":\n        case \"!\":\n        case \"#\":\n        case\
    \ \"$\":\n        case \"%\":\n        case \"^\":\n        case \"&\":\n    \
    \    case \"*\":\n        case \"(\":\n        case \"[\":\n        case \")\"\
    :\n        case \"]\":\n        case \"}\":\n        case \"\\\\\":\n        case\
    \ \"|\":\n        case \"~\":\n        case \"?\":\n        case \"\\\"\":\n \
    \       case \"<\":\n        case \">\":\n        case \"=\":\n        case \"\
    {\":\n        case \"}\":\n        case \"|\":\n        case \"+\":\n        case\
    \ \"%\":\n        case \"!\":\n        case \"#\":\n        case \"$\":\n    \
    \    case \"%\":\n        case \"^\":\n        case \"&\":\n        case \"*\"\
    :\n        case \"(\":\n        case \"[\":\n        case \")\":\n        case\
    \ \"]\":\n        case \"}\":\n        case \"\\\\\":\n        case \"|\":\n \
    \       case \"~\":\n        case \"?\":\n        case \"\\\"\":\n        case\
    \ \"<\":\n        case \">\":\n        case \"=\":\n        case \"{\":\n    \
    \    case \"}\":\n        case \"|\":\n        case \"+\":\n        case \"%\"\
    :\n        case \"!\":\n        case \"#\":\n        case \"$\":\n        case\
    \ \"%\":\n        case \"^\":\n        case \"&\":\n        case \"*\":\n    \
    \    case \"(\":\n        case \"[\":\n        case \")\":\n        case \"]\"\
    :\n        case \"}\":\n        case \"\\\\\":\n        case \"|\":\n        case\
    \ \"~\":\n        case \"?\":\n        case \"\\\"\":\n        case \"<\":\n \
    \       case \">\":\n        case \"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_62woel2.swift:18:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"A\"...\"Z\":\n        ^~~~~~~~~~~~~~~\n\
    \                        break\n/tmp/tmp_62woel2.swift:19:9: error: 'case' label\
    \ in a 'switch' must have at least one executable statement\n        case \"a\"\
    ...\"z\":\n        ^~~~~~~~~~~~~~~\n                        break\n/tmp/tmp_62woel2.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"0\"...\"9\":\n        ^~~~~~~~~~~~~~~\n                      \
    \  break\n/tmp/tmp_62woel2.swift:21:9: error: 'case' label in a 'switch' must\
    \ have at least one executable statement\n        case \"_\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp_62woel2.swift:22:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"-\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmp_62woel2.swift:23:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"$\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_62woel2.swift:24:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"%\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_62woel2.swift:25:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"&\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_62woel2.swift:26:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"*\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_62woel2.swift:27:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"(\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_62woel2.swift:28:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"[\":\n        ^~~~~~~~~\n                  break\n/tmp/tmp_62woel2.swift:29:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \")\":\n        ^~~~~~~~~\n              "
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            return true\n        }\n        if k == k.toUpperCase {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd50tkegu.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpd50tkegu.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpd50tkegu.swift:20:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == k.lowercaseString {\n       \
    \     return true\n        } else if k == k.uppercaseString {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkv4ks17w.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpkv4ks17w.swift:16:19: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k == k.lowercaseString {\n     \
    \           ~ ^~~~~~~~~~~~~~~\n/tmp/tmpkv4ks17w.swift:18:26: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        } else if k == k.uppercaseString\
    \ {\n                       ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (_, value) in dict {\n        let lower = value.lowercased()\n      \
    \  let upper = value.uppercased()\n        if lower == upper {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmphdcf9i0r/tmphdcf9i0r.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b485b60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b485b304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b485b304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b485b3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdcf9i0r                        0x000055d8a0e227f3 <unavailable> + 6131

    5    libc.so.6                          0x00002b485b7f9460 __libc_start_main +
    245

    6    tmphdcf9i0r                        0x000055d8a0e223a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.toLowerCase {\n            if v != k.toLowerCase {\n                return\
    \ false\n            }\n        } else {\n            if v != k.toUpperCase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjvglcv_3.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpjvglcv_3.swift:18:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpjvglcv_3.swift:19:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpjvglcv_3.swift:23:23: error: value of type\
    \ 'String' has no member 'toUpperCase'\n            if v != k.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        \n        let lower = k.lowercased()\n        let upper =\
    \ k.uppercased()\n        \n        if lower == upper {\n            continue\n\
    \        }\n        \n        return false\n    }\n    \n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpqfgi6hzy/tmpqfgi6hzy.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affd968dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affd9384b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affd9384988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affd93837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfgi6hzy                        0x00005592e5d208a3 <unavailable> + 6307

    5    libc.so.6                          0x00002affd9879460 __libc_start_main +
    245

    6    tmpqfgi6hzy                        0x00005592e5d20459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.toLowerCase {\n            if v != k.toLowerCase {\n                return\
    \ false\n            }\n        } else {\n            if v != k.toUpperCase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjvglcv_3.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpjvglcv_3.swift:18:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpjvglcv_3.swift:19:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpjvglcv_3.swift:23:23: error: value of type\
    \ 'String' has no member 'toUpperCase'\n            if v != k.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    let keys = dict.keys\n    for k in keys {\n        if let _ = k.lowercased()\
    \ {\n            return true\n        }\n        if let _ = k.uppercased() {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsga4knyn.swift:15:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let _ = k.lowercased() {\n\
    \           ^       ~~~~~~~~~~~~~~\n/tmp/tmpsga4knyn.swift:18:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if let\
    \ value = value {\n            if value.characters.count > 0 {\n             \
    \   if value.lowercaseString.characters.count == value.characters.count {\n  \
    \                  return true\n                }\n                if value.uppercaseString.characters.count\
    \ == value.characters.count {\n                    return true\n             \
    \   }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_0xhzo9e.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp_0xhzo9e.swift:18:22: error: 'characters' is unavailable:\
    \ Please use String directly\n            if value.characters.count > 0 {\n  \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_0xhzo9e.swift:19:26: error: value of type 'String' has no member\
    \ 'lowercaseString'\n                if value.lowercaseString.characters.count\
    \ == value.characters.count {\n                   ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp_0xhzo9e.swift:22:26:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            \
    \    if value.uppercaseString.characters.count == value.characters.count {\n \
    \                  ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    \n    if dict == nil {\n        return false\n\
    \    }\n    \n    for k in dict.keys {\n        if k.isEmpty {\n            return\
    \ false\n        }\n        \n        if k.isUppercase {\n            return false\n\
    \        }\n        \n        if k.isLowercase {\n            return true\n  \
    \      }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpae5r_xi2.swift:13:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpae5r_xi2.swift:22:14: error: value of type 'String'\
    \ has no member 'isUppercase'\n        if k.isUppercase {\n           ~ ^~~~~~~~~~~\n\
    /tmp/tmpae5r_xi2.swift:26:14: error: value of type 'String' has no member 'isLowercase'\n\
    \        if k.isLowercase {\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower != upper {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzsg26vif.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpzsg26vif.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpzsg26vif.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == \"\" {\n            return false\n\
    \        }\n        if k.isUpper() {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8idwjapr.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp8idwjapr.swift:19:14: error: value of type 'String'\
    \ has no member 'isUpper'\n        if k.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            return true\n        } else if k == k.toUpperCase {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcbqp0io8.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpcbqp0io8.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpcbqp0io8.swift:19:26: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        } else if k == k.toUpperCase {\n      \
    \                 ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for key in dict.keys {\n        let value = dict[key]\n        let lowerCase\
    \ = String(key).lowercased()\n        let upperCase = String(key).uppercased()\n\
    \        if lowerCase == upperCase {\n            return true\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpupoj_n2u/tmpupoj_n2u.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff7e452c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff7e149b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff7e149988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff7e1487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpupoj_n2u                        0x000055995f6799b3 <unavailable> + 6579

    5    libc.so.6                          0x00002aff7e63e460 __libc_start_main +
    245

    6    tmpupoj_n2u                        0x000055995f679569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.lowercased()\
    \ || k == k.uppercased() {\n            continue\n        }\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4iw6e9cs/tmp4iw6e9cs.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af70f417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af70f10eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af70f10e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af70f10d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4iw6e9cs                        0x0000564435875a15 <unavailable> + 6677

    5    libc.so.6                          0x00002af70f603460 __libc_start_main +
    245

    6    tmp4iw6e9cs                        0x00005644358753f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil && value != nil && key!.isEmpty {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp____br4c.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp____br4c.swift:17:45: error: cannot force unwrap\
    \ value of non-optional type 'String'\n        if key != nil && value != nil &&\
    \ key!.isEmpty {\n                                         ~~~^\n            \
    \                                \n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toUpperCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn_z96jxk.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpn_z96jxk.swift:17:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpn_z96jxk.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpn_z96jxk.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (_, value) in dict {\n        if let value = value as? String {\n   \
    \         if value.lowercaseString.isEmpty {\n                return false\n \
    \           } else if value.uppercaseString.isEmpty {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq7z9bidi.swift:14:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmpq7z9bidi.swift:15:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpq7z9bidi.swift:17:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower != k {\n            return\
    \ false\n        }\n        if upper != k {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkjcu7plu.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpkjcu7plu.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpkjcu7plu.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    \n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        \n        if k.lowercaseString != k && k.uppercaseString !=\
    \ k {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpje6bcg8q.swift:19:14: error: value of type 'String' has no member\
    \ 'lowercaseString'\n        if k.lowercaseString != k && k.uppercaseString !=\
    \ k {\n           ~ ^~~~~~~~~~~~~~~\n/tmp/tmpje6bcg8q.swift:19:40: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        if k.lowercaseString\
    \ != k && k.uppercaseString != k {\n                                     ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (_, value) in dict {\n        if let value = value as? String {\n   \
    \         if value.lowercased() == value {\n                return true\n    \
    \        } else if value.uppercased() == value {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp3a2vi4gs/tmp3a2vi4gs.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa09022c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa08d19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa08d19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa08d187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3a2vi4gs                        0x00005599051489c5 <unavailable> + 6597

    5    libc.so.6                          0x00002baa0920e460 __libc_start_main +
    245

    6    tmp3a2vi4gs                        0x00005599051483a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let lower = k.lowercaseString\n\
    \        let upper = k.uppercaseString\n        if lower == upper {\n        \
    \    continue\n        }\n        \n        return false\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr1_uk869.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpr1_uk869.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpr1_uk869.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    \n    for (_, value) in dict {\n        if let value = value as? String {\n\
    \            if value.lowercaseString.isEmpty {\n                return false\n\
    \            } else if value.uppercaseString.isEmpty {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqbj9vq2i.swift:15:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmpqbj9vq2i.swift:16:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpqbj9vq2i.swift:18:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != k.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmporny4dd3.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmporny4dd3.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmporny4dd3.swift:18:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmporny4dd3.swift:22:23: error: value of type\
    \ 'String' has no member 'toUpperCase'\n            if v != k.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower != upper {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzsg26vif.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpzsg26vif.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpzsg26vif.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let lower = k.lowercaseString\n\
    \        let upper = k.uppercaseString\n        if lower == upper {\n        \
    \    continue\n        }\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm1vfbivk.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpm1vfbivk.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpm1vfbivk.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for key in dict.keys {\n        let lowerCase = key.lowercased()\n\
    \        let upperCase = key.uppercased()\n        \n        if lowerCase == upperCase\
    \ {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfyrreuy6/tmpfyrreuy6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba36d364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba36d05bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba36d05b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba36d05a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfyrreuy6                        0x0000561000470853 <unavailable> + 6227

    5    libc.so.6                          0x00002ba36d550460 __libc_start_main +
    245

    6    tmpfyrreuy6                        0x0000561000470409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower != upper {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzsg26vif.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpzsg26vif.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpzsg26vif.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil && value != nil && key!.isEmpty == false && value!.isEmpty == false {\n\
    \            if key!.lowercased() == value {\n                return true\n  \
    \          }\n            if key!.uppercased() == value {\n                return\
    \ true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9p17ijy.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmph9p17ijy.swift:17:45: error: cannot force unwrap\
    \ value of non-optional type 'String'\n        if key != nil && value != nil &&\
    \ key!.isEmpty == false && value!.isEmpty == false {\n                       \
    \                  ~~~^\n                                            \n/tmp/tmph9p17ijy.swift:18:19:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \ if key!.lowercased() == value {\n               ~~~^\n                  \n/tmp/tmph9p17ijy.swift:21:19:\
    \ error: cannot force unwrap value of non-optional type 'String'\n           \
    \ if key!.uppercased() == value {\n               ~~~^\n                  \n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        let lower =\
    \ String(k).lowercased()\n        let upper = String(k).uppercased()\n       \
    \ if v == lower || v == upper {\n            continue\n        }\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp0s511z4p/tmp0s511z4p.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b331fcaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b331f9a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b331f9a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b331f9a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s511z4p                        0x000055f08a31a963 <unavailable> + 6499

    5    libc.so.6                          0x00002b331fe96460 __libc_start_main +
    245

    6    tmp0s511z4p                        0x000055f08a31a519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let str = k.lowercaseString\n \
    \       if let _ = dict[str] {\n            return false\n        }\n    }\n \
    \   \n    for k in dict.keys {\n        let str = k.uppercaseString\n        if\
    \ let _ = dict[str] {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppeyz9e_m.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmppeyz9e_m.swift:17:21: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let str = k.lowercaseString\n     \
    \             ~ ^~~~~~~~~~~~~~~\n/tmp/tmppeyz9e_m.swift:24:21: error: value of\
    \ type 'String' has no member 'uppercaseString'\n        let str = k.uppercaseString\n\
    \                  ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if let _ = k.lowercased() {\n \
    \           return true\n        }\n        if let _ = k.uppercased() {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppshzasfm.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmppshzasfm.swift:17:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmppshzasfm.swift:20:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != value {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4h34c508/tmp4h34c508.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53f7be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53f78d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53f78d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53f78d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4h34c508                        0x0000556632c787a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b53f7dce460 __libc_start_main +
    245

    6    tmp4h34c508                        0x0000556632c78359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let lowerCase = key.lowercaseString\n\
    \        let upperCase = key.uppercaseString\n        \n        if lowerCase !=\
    \ key {\n            return false\n        }\n        \n        if upperCase !=\
    \ key {\n            return false\n        }\n    }\n    \n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpaame_142.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpaame_142.swift:17:29: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lowerCase = key.lowercaseString\n\
    \                        ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpaame_142.swift:18:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n        let upperCase\
    \ = key.uppercaseString\n                        ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != k.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmporny4dd3.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmporny4dd3.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmporny4dd3.swift:18:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmporny4dd3.swift:22:23: error: value of type\
    \ 'String' has no member 'toUpperCase'\n            if v != k.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for key in dict.keys {\n        guard let value = dict[key] else { return\
    \ false }\n        switch key {\n        case \"A\"...\"Z\", \"a\"...\"z\", \"\
    0\"...\"9\":\n        case \"0\"...\"9\":\n        case \"a\"...\"z\", \"A\"...\"\
    Z\":\n        default:\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_3sky5nq.swift:16:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"A\"...\"Z\", \"a\"...\"z\"\
    , \"0\"...\"9\":\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n            \
    \                                  break\n/tmp/tmp_3sky5nq.swift:17:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"0\"...\"9\":\n        ^~~~~~~~~~~~~~~\n                        break\n\
    /tmp/tmp_3sky5nq.swift:18:9: error: 'case' label in a 'switch' must have at least\
    \ one executable statement\n        case \"a\"...\"z\", \"A\"...\"Z\":\n     \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~\n                                   break\n/tmp/tmp_3sky5nq.swift:14:19:\
    \ warning: value 'value' was defined but never used; consider replacing with boolean\
    \ test\n        guard let value = dict[key] else { return false }\n          \
    \    ~~~~^~~~~~~~\n                                    != nil\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if let\
    \ value = value {\n            if let string = value as? String {\n          \
    \      if string.lowercaseString.isEmpty || string.uppercaseString.isEmpty {\n\
    \                    return false\n                }\n            }\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp363jrgny.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp363jrgny.swift:18:35: warning: conditional cast from\
    \ 'String' to 'String' always succeeds\n            if let string = value as?\
    \ String {\n                                  ^\n/tmp/tmp363jrgny.swift:19:27:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            \
    \    if string.lowercaseString.isEmpty || string.uppercaseString.isEmpty {\n \
    \                  ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp363jrgny.swift:19:61: error:\
    \ value of type 'String' has no member 'uppercaseString'\n                if string.lowercaseString.isEmpty\
    \ || string.uppercaseString.isEmpty {\n                                      \
    \               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let lower = k.lowercaseString\n\
    \        let upper = k.uppercaseString\n        \n        if lower != upper {\n\
    \            return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd93ts325.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpd93ts325.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpd93ts325.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for key in dict.keys {\n        let lowerCase = key.lowercased()\n\
    \        let upperCase = key.uppercased()\n        \n        if lowerCase == upperCase\
    \ {\n            return true\n        }\n    }\n    \n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpfyrreuy6/tmpfyrreuy6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba36d364c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba36d05bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba36d05b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba36d05a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfyrreuy6                        0x0000561000470853 <unavailable> + 6227

    5    libc.so.6                          0x00002ba36d550460 __libc_start_main +
    245

    6    tmpfyrreuy6                        0x0000561000470409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.isUppercase {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvqx1cdud.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpvqx1cdud.swift:19:14: error: value of type 'String'\
    \ has no member 'isUppercase'\n        if k.isUppercase {\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.lowercased() || k == k.uppercased() {\n            continue\n        }\n \
    \       return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp8qjismn9/tmp8qjismn9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad58e09ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad58dd91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad58dd91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad58dd907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qjismn9                        0x0000555d705dfa15 <unavailable> + 6677

    5    libc.so.6                          0x00002ad58e286460 __libc_start_main +
    245

    6    tmp8qjismn9                        0x0000555d705df3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower == upper {\n            continue\n\
    \        }\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp646fbgoq.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp646fbgoq.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmp646fbgoq.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == k.lowercaseString {\n       \
    \     return true\n        }\n        if k == k.uppercaseString {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpws6tvyqb.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpws6tvyqb.swift:16:19: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k == k.lowercaseString {\n     \
    \           ~ ^~~~~~~~~~~~~~~\n/tmp/tmpws6tvyqb.swift:19:19: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        if k == k.uppercaseString\
    \ {\n                ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    \n    if dict == nil {\n        return false\n\
    \    }\n    \n    for k in dict.keys {\n        if let _ = k.lowercased() {\n\
    \            return true\n        }\n        if let _ = k.uppercased() {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnp32qy8q.swift:13:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpnp32qy8q.swift:18:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmpnp32qy8q.swift:21:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (key, value) in dict {\n        if key.isEmpty {\n            return\
    \ false\n        }\n        if key.isEmpty {\n            return false\n     \
    \   }\n        if key.isEmpty {\n            return false\n        }\n       \
    \ if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n        }\n        if key.isEmpty {\n         \
    \   return false\n        }\n        if key.isEmpty {\n            return false\n\
    \        }\n        if key.isEmpty {\n            return false\n        }\n  \
    \      if key.isEmpty {\n            return false\n        }\n        if key.isEmpty\
    \ {\n            return false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ehgk1b2.swift:170:65: error: expected '}' at end of brace statement\n\
    assert(check_dict_case(dict: [:] as [String : String]) == false)\n           \
    \                                                     ^\n/tmp/tmp7ehgk1b2.swift:13:30:\
    \ note: to match this opening '{'\n    for (key, value) in dict {\n          \
    \                   ^\n/tmp/tmp7ehgk1b2.swift:170:65: error: expected '}' at end\
    \ of brace statement\nassert(check_dict_case(dict: [:] as [String : String]) ==\
    \ false)\n                                                                ^\n\
    /tmp/tmp7ehgk1b2.swift:11:55: note: to match this opening '{'\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n                                             \
    \         ^\n/tmp/tmp7ehgk1b2.swift:152:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n/tmp/tmp7ehgk1b2.swift:13:15: warning: immutable value\
    \ 'value' was never used; consider replacing with '_' or removing it\n    for\
    \ (key, value) in dict {\n              ^~~~~\n              _\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let value = dict[key]\n     \
    \   if key != nil && key != \"\" && value != nil && value != \"\" {\n        \
    \    if key.lowercased() == value.lowercased() {\n                return true\n\
    \            }\n            if key.uppercased() == value.uppercased() {\n    \
    \            return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxw2gc4rk.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpxw2gc4rk.swift:18:16: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n        if key != nil &&\
    \ key != \"\" && value != nil && value != \"\" {\n           ~~~ ^  ~~~\n/tmp/tmpxw2gc4rk.swift:19:36:\
    \ error: value of optional type 'String?' must be unwrapped to refer to member\
    \ 'lowercased' of wrapped base type 'String'\n            if key.lowercased()\
    \ == value.lowercased() {\n                                   ^\n/tmp/tmpxw2gc4rk.swift:19:36:\
    \ note: chain the optional using '?' to access member 'lowercased' only for non-'nil'\
    \ base values\n            if key.lowercased() == value.lowercased() {\n     \
    \                              ^\n                                        ?\n\
    /tmp/tmpxw2gc4rk.swift:19:36: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            if key.lowercased() == value.lowercased()\
    \ {\n                                   ^\n                                  \
    \      !\n/tmp/tmpxw2gc4rk.swift:22:36: error: value of optional type 'String?'\
    \ must be unwrapped to refer to member 'uppercased' of wrapped base type 'String'\n\
    \            if key.uppercased() == value.uppercased() {\n                   \
    \                ^\n/tmp/tmpxw2gc4rk.swift:22:36: note: chain the optional using\
    \ '?' to access member 'uppercased' only for non-'nil' base values\n         \
    \   if key.uppercased() == value.uppercased() {\n                            \
    \       ^\n                                        ?\n/tmp/tmpxw2gc4rk.swift:22:36:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if key.uppercased() == value.uppercased() {\n           \
    \                        ^\n                                        !\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let lower = k.lowercaseString\n\
    \        let upper = k.uppercaseString\n        if lower == upper {\n        \
    \    continue\n        }\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm1vfbivk.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpm1vfbivk.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpm1vfbivk.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if let _ = k.lowercased() {\n \
    \           return true\n        }\n        if let _ = k.uppercased() {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppshzasfm.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmppshzasfm.swift:17:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmppshzasfm.swift:20:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (_, value) in dict {\n        let lower = value.lowercased()\n      \
    \  let upper = value.uppercased()\n        if lower != upper {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp62cl0aay/tmp62cl0aay.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3dd033c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3dcd2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3dcd2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3dcd297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62cl0aay                        0x0000561514f637f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ad3dd21f460 __libc_start_main +
    245

    6    tmp62cl0aay                        0x0000561514f633a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for (_, value) in dict {\n        if let string = value as? String\
    \ {\n            if string.lowercaseString.isEmpty {\n                return false\n\
    \            } else if string.uppercaseString.isEmpty {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7fmfd6jg.swift:15:31: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let string = value as? String {\n     \
    \                         ^\n/tmp/tmp7fmfd6jg.swift:16:23: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if string.lowercaseString.isEmpty\
    \ {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7fmfd6jg.swift:18:30: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ string.uppercaseString.isEmpty {\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (_, value) in dict {\n        let lower = value.lowercased()\n      \
    \  let upper = value.uppercased()\n        if lower == upper {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmphdcf9i0r/tmphdcf9i0r.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b485b60dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b485b304b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b485b304988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b485b3037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdcf9i0r                        0x000055d8a0e227f3 <unavailable> + 6131

    5    libc.so.6                          0x00002b485b7f9460 __libc_start_main +
    245

    6    tmphdcf9i0r                        0x000055d8a0e223a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        let lower\
    \ = k.lowercaseString\n        let upper = k.uppercaseString\n        \n     \
    \   if v == nil || v == \"\" {\n            return false\n        }\n        \n\
    \        if lower == upper {\n            return true\n        }\n        \n \
    \       if lower != upper {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp616ikfc4.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp616ikfc4.swift:18:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmp616ikfc4.swift:19:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let value = dict[key]\n     \
    \   if key != value {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp3120w_6o/tmp3120w_6o.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accd7344c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accd703bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accd703b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accd703a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3120w_6o                        0x000055b30e63a7a3 <unavailable> + 6051

    5    libc.so.6                          0x00002accd7530460 __libc_start_main +
    245

    6    tmp3120w_6o                        0x000055b30e63a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower != upper {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzsg26vif.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpzsg26vif.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpzsg26vif.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        if let _ = key.toLowercase()\
    \ {\n            return false\n        }\n    }\n    \n    for key in dict.keys\
    \ {\n        if let _ = key.toUppercase() {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcub9scaf.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpcub9scaf.swift:17:24: error: value of type 'String'\
    \ has no member 'toLowercase'\n        if let _ = key.toLowercase() {\n      \
    \             ~~~ ^~~~~~~~~~~\n/tmp/tmpcub9scaf.swift:23:24: error: value of type\
    \ 'String' has no member 'toUppercase'\n        if let _ = key.toUppercase() {\n\
    \                   ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let value = dict[key]\n     \
    \   \n        if let value = value as? String {\n            if value.lowercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n        \n      \
    \  if let value = value as? String {\n            if value.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    \n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpix5wcdpm.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpix5wcdpm.swift:19:30: warning: conditional downcast\
    \ from 'String?' to 'String' does nothing\n        if let value = value as? String\
    \ {\n                       ~~~~~~^~~~~~~~~~\n                            \n/tmp/tmpix5wcdpm.swift:20:22:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            if\
    \ value.lowercaseString.isEmpty {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpix5wcdpm.swift:25:30:\
    \ warning: conditional downcast from 'String?' to 'String' does nothing\n    \
    \    if let value = value as? String {\n                       ~~~~~~^~~~~~~~~~\n\
    \                            \n/tmp/tmpix5wcdpm.swift:26:22: error: value of type\
    \ 'String' has no member 'uppercaseString'\n            if value.uppercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil {\n            if let str = key as? String {\n                if str.isEmpty\
    \ {\n                    return false\n                }\n                if str.isUppercase\
    \ {\n                    return false\n                }\n            } else {\n\
    \                return false\n            }\n        }\n        if value != nil\
    \ {\n            if let str = value as? String {\n                if str.isEmpty\
    \ {\n                    return false\n                }\n                if str.isUppercase\
    \ {\n                    return false\n                }\n            } else {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfiub5b59.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpfiub5b59.swift:17:16: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n        if key != nil {\n\
    \           ~~~ ^  ~~~\n/tmp/tmpfiub5b59.swift:18:30: warning: conditional cast\
    \ from 'String' to 'String' always succeeds\n            if let str = key as?\
    \ String {\n                             ^\n/tmp/tmpfiub5b59.swift:22:24: error:\
    \ value of type 'String' has no member 'isUppercase'\n                if str.isUppercase\
    \ {\n                   ~~~ ^~~~~~~~~~~\n/tmp/tmpfiub5b59.swift:30:32: warning:\
    \ conditional downcast from 'String?' to 'String' does nothing\n            if\
    \ let str = value as? String {\n                         ~~~~~~^~~~~~~~~~\n  \
    \                            \n/tmp/tmpfiub5b59.swift:34:24: error: value of type\
    \ 'String' has no member 'isUppercase'\n                if str.isUppercase {\n\
    \                   ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    for (_, value) in dict {\n        let lower = value.lowercased()\n      \
    \  let upper = value.uppercased()\n        if lower == upper {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpezly33il/tmpezly33il.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab57540bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab575102b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab575102988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5751017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezly33il                        0x000055b01ca827f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ab5755f7460 __libc_start_main +
    245

    6    tmpezly33il                        0x000055b01ca823a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toUpperCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toLowerCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2q1ueevo.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp2q1ueevo.swift:17:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp2q1ueevo.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp2q1ueevo.swift:22:23: error: value of type\
    \ 'String' has no member 'toLowerCase'\n            if v != k.toLowerCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toUpperCase\
    \ {\n            if v != k.toUpperCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toLowerCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp197njo5g.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp197njo5g.swift:17:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp197njo5g.swift:18:23: error: value of type 'String'\
    \ has no member 'toUpperCase'\n            if v != k.toUpperCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp197njo5g.swift:22:23: error: value of type\
    \ 'String' has no member 'toLowerCase'\n            if v != k.toLowerCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for key in dict.keys {\n        let lowerKey = key.lowercased()\n       \
    \ let upperKey = key.uppercased()\n        if lowerKey == upperKey {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpheozq8a2/tmpheozq8a2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add4a85dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add4a554b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add4a554988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add4a5537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpheozq8a2                        0x00005575e1f0c853 <unavailable> + 6227

    5    libc.so.6                          0x00002add4aa49460 __libc_start_main +
    245

    6    tmpheozq8a2                        0x00005575e1f0c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if value.lowercaseString.isEmpty {\n                return false\n      \
    \      } else if value.uppercaseString.isEmpty {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn7np_15o.swift:16:22: error: value of type 'String' has no member\
    \ 'lowercaseString'\n            if value.lowercaseString.isEmpty {\n        \
    \       ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpn7np_15o.swift:18:29: error: value of type\
    \ 'String' has no member 'uppercaseString'\n            } else if value.uppercaseString.isEmpty\
    \ {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpn7np_15o.swift:15:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let value = value {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for (_, value) in dict {\n        if let value = value as? String {\n\
    \            if value.lowercaseString.isEmpty {\n                return false\n\
    \            } else if value.uppercaseString.isEmpty {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp51q7s92o.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp51q7s92o.swift:16:30: warning: conditional cast from\
    \ 'String' to 'String' always succeeds\n        if let value = value as? String\
    \ {\n                             ^\n/tmp/tmp51q7s92o.swift:17:22: error: value\
    \ of type 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp51q7s92o.swift:19:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ lowerCase = String(key.lowercased())\n        let upperCase = String(key.uppercased())\n\
    \        if lowerCase == upperCase {\n            return true\n        }\n   \
    \     if lowerCase == value {\n            return true\n        }\n        if\
    \ upperCase == value {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp4kxyo1rh/tmp4kxyo1rh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63167acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63164a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63164a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63164a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kxyo1rh                        0x0000556585b69963 <unavailable> + 6499

    5    libc.so.6                          0x00002b6316998460 __libc_start_main +
    245

    6    tmp4kxyo1rh                        0x0000556585b69519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.lowercaseString\
    \ {\n            return true\n        }\n        if k == k.uppercaseString {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpggvrc0iy.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpggvrc0iy.swift:17:19: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k == k.lowercaseString {\n     \
    \           ~ ^~~~~~~~~~~~~~~\n/tmp/tmpggvrc0iy.swift:20:19: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        if k == k.uppercaseString\
    \ {\n                ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ lowerCase = key.lowercaseString\n        let upperCase = key.uppercaseString\n\
    \        if lowerCase == upperCase {\n            return true\n        }\n   \
    \     if lowerCase != upperCase {\n            return false\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmt9vq4fu.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpmt9vq4fu.swift:17:29: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lowerCase = key.lowercaseString\n\
    \                        ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpmt9vq4fu.swift:18:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n        let upperCase\
    \ = key.uppercaseString\n                        ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.lowercaseString\
    \ {\n            return true\n        }\n        if k == k.uppercaseString {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpggvrc0iy.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpggvrc0iy.swift:17:19: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k == k.lowercaseString {\n     \
    \           ~ ^~~~~~~~~~~~~~~\n/tmp/tmpggvrc0iy.swift:20:19: error: value of type\
    \ 'String' has no member 'uppercaseString'\n        if k == k.uppercaseString\
    \ {\n                ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if let\
    \ string = value as? String {\n            if string.lowercaseString.isEmpty {\n\
    \                return false\n            }\n            if string.uppercaseString.isEmpty\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpte11as52.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpte11as52.swift:17:31: warning: conditional downcast\
    \ from 'String?' to 'String' does nothing\n        if let string = value as? String\
    \ {\n                        ~~~~~~^~~~~~~~~~\n                             \n\
    /tmp/tmpte11as52.swift:18:23: error: value of type 'String' has no member 'lowercaseString'\n\
    \            if string.lowercaseString.isEmpty {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpte11as52.swift:21:23: error: value of type 'String' has no member 'uppercaseString'\n\
    \            if string.uppercaseString.isEmpty {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let lower = k.lowercaseString\n\
    \        let upper = k.uppercaseString\n        if lower == upper {\n        \
    \    continue\n        }\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm1vfbivk.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpm1vfbivk.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpm1vfbivk.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toUpperCase\
    \ {\n            if v != v.toUpperCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toLowerCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5uyyzxsq.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp5uyyzxsq.swift:17:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp5uyyzxsq.swift:18:23: error: value of type 'String?'\
    \ has no member 'toUpperCase'\n            if v != v.toUpperCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp5uyyzxsq.swift:22:23: error: value of type\
    \ 'String?' has no member 'toLowerCase'\n            if v != v.toLowerCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == \"\" {\n            return false\n\
    \        }\n        if k.isUpper() {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8idwjapr.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp8idwjapr.swift:19:14: error: value of type 'String'\
    \ has no member 'isUpper'\n        if k.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    \n    for k in dict.keys {\n        guard let v = dict[k] else { return false\
    \ }\n        \n        if k == k.lowercased() || k == k.uppercased() {\n     \
    \       continue\n        }\n        \n        return false\n    }\n    \n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmprtdhuy45/tmprtdhuy45.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3f3abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb3f0a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb3f0a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb3f0a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprtdhuy45                        0x0000564c95bf3a65 <unavailable> + 6757

    5    libc.so.6                          0x00002acb3f597460 __libc_start_main +
    245

    6    tmprtdhuy45                        0x0000564c95bf3449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.toLowerCase {\n            if v != k.toLowerCase {\n                return\
    \ false\n            }\n        } else {\n            if v != k.toUpperCase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjvglcv_3.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpjvglcv_3.swift:18:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpjvglcv_3.swift:19:23: error: value of type 'String'\
    \ has no member 'toLowerCase'\n            if v != k.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpjvglcv_3.swift:23:23: error: value of type\
    \ 'String' has no member 'toUpperCase'\n            if v != k.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if k.isEmpty {\n            return\
    \ false\n        }\n        \n        if k.isUpper() {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwkhvn3sx.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpwkhvn3sx.swift:21:14: error: value of type 'String'\
    \ has no member 'isUpper'\n        if k.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ isString = value.isString\n        if isString {\n            if key.lowercaseString.isEmpty\
    \ {\n                return false\n            }\n            if key.uppercaseString.isEmpty\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcno7xjdp.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpcno7xjdp.swift:17:30: error: value of type 'String?'\
    \ has no member 'isString'\n        let isString = value.isString\n          \
    \             ~~~~~ ^~~~~~~~\n/tmp/tmpcno7xjdp.swift:19:20: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if key.lowercaseString.isEmpty\
    \ {\n               ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpcno7xjdp.swift:22:20: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if key.uppercaseString.isEmpty\
    \ {\n               ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for k in dict.keys {\n        guard let v = dict[k] else { return false }\n\
    \        if let _ = String(k).lowercased() {\n            if let _ = String(v).lowercased()\
    \ {\n                return true\n            }\n        } else {\n          \
    \  if let _ = String(v).uppercased() {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwn4bk1_j.swift:16:16: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n            if let _ = String(v).lowercased()\
    \ {\n               ^       ~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwn4bk1_j.swift:20:16:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \            if let _ = String(v).uppercased() {\n               ^       ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwn4bk1_j.swift:15:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let _ = String(k).lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.toLowerCase {\n            if v != v.toLowerCase {\n                return\
    \ false\n            }\n        } else {\n            if v != v.toUpperCase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5hqahz1v.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp5hqahz1v.swift:18:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp5hqahz1v.swift:19:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp5hqahz1v.swift:23:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.isUppercase {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvqx1cdud.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpvqx1cdud.swift:19:14: error: value of type 'String'\
    \ has no member 'isUppercase'\n        if k.isUppercase {\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower == upper {\n            continue\n\
    \        }\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp646fbgoq.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp646fbgoq.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmp646fbgoq.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        if let _ = key.toLowercase() {\n  \
    \          return false\n        }\n        if let _ = key.toUppercase() {\n \
    \           return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4hxn9ah5.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp4hxn9ah5.swift:16:24: error: value of type 'String'\
    \ has no member 'toLowercase'\n        if let _ = key.toLowercase() {\n      \
    \             ~~~ ^~~~~~~~~~~\n/tmp/tmp4hxn9ah5.swift:19:24: error: value of type\
    \ 'String' has no member 'toUppercase'\n        if let _ = key.toUppercase() {\n\
    \                   ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for (_, value) in dict {\n        guard let value = value as? String\
    \ else { return false }\n        \n        if value.lowercaseString.isEmpty {\n\
    \            return false\n        }\n        \n        if value.uppercaseString.isEmpty\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmv0x5_p0.swift:15:33: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        guard let value = value as? String else {\
    \ return false }\n                                ^\n/tmp/tmpmv0x5_p0.swift:17:18:\
    \ error: value of type 'String' has no member 'lowercaseString'\n        if value.lowercaseString.isEmpty\
    \ {\n           ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpmv0x5_p0.swift:21:18: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        if value.uppercaseString.isEmpty\
    \ {\n           ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if value.lowercaseString.isEmpty {\n                return false\n      \
    \      } else if value.uppercaseString.isEmpty {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphzxcr58h.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmphzxcr58h.swift:17:22: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmphzxcr58h.swift:19:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmphzxcr58h.swift:16:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let value = value {\n         \
    \  ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == \"\" {\n            return false\n\
    \        }\n        if k.isUpper() {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8idwjapr.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp8idwjapr.swift:19:14: error: value of type 'String'\
    \ has no member 'isUpper'\n        if k.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let value = dict[key]\n     \
    \   if key != value {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpx4hqv9p_/tmpx4hqv9p_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae681c44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae68193bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae68193b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae68193a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4hqv9p_                        0x00005593a29cc7a3 <unavailable> + 6051

    5    libc.so.6                          0x00002ae681e30460 __libc_start_main +
    245

    6    tmpx4hqv9p_                        0x00005593a29cc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == \"\" {\n            return false\n\
    \        }\n        if k.isUpper() {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8idwjapr.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp8idwjapr.swift:19:14: error: value of type 'String'\
    \ has no member 'isUpper'\n        if k.isUpper() {\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != k.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeha6yudx.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpeha6yudx.swift:17:21: error: no exact matches in\
    \ call to subscript \n        let v = dict[k]\n                    ^\nSwift.Dictionary:8:23:\
    \ note: candidate expects value of type 'Dictionary<String, String>.Index' for\
    \ parameter #1 (got '(key: String, value: String)')\n    @inlinable public subscript(position:\
    \ Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Element { get }\n  \
    \                    ^\nSwift.Dictionary:2:23: note: candidate expects value of\
    \ type 'String' for parameter #1 (got '(key: String, value: String)')\n    @inlinable\
    \ public subscript(key: Key) -> Value? { get set }\n                      ^\n\
    Swift.Collection:2:23: note: candidate expects value of type 'Range<Dictionary<String,\
    \ String>.Index>' for parameter #1 (got '(key: String, value: String)')\n    @inlinable\
    \ public subscript(bounds: Range<Self.Index>) -> Slice<Self> { get }\n       \
    \               ^\n/tmp/tmpeha6yudx.swift:17:21: note: found candidate with type\
    \ '((key: String, value: String)) -> Dictionary<String, String>.SubSequence' (aka\
    \ '((key: String, value: String)) -> Slice<Dictionary<String, String>>')\n   \
    \     let v = dict[k]\n                    ^\nSwift.Collection:3:23: note: candidate\
    \ expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got '(key:\
    \ String, value: String)')\n    @inlinable public subscript(x: (UnboundedRange_)\
    \ -> ()) -> Self.SubSequence { get }\n                      ^\n/tmp/tmpeha6yudx.swift:18:19:\
    \ error: value of tuple type '(key: String, value: String)' has no member 'toLowerCase'\n\
    \        if k == k.toLowerCase {\n                ~ ^~~~~~~~~~~\n/tmp/tmpeha6yudx.swift:19:23:\
    \ error: value of tuple type '(key: String, value: String)' has no member 'toLowerCase'\n\
    \            if v != k.toLowerCase {\n                    ~ ^~~~~~~~~~~\n/tmp/tmpeha6yudx.swift:23:23:\
    \ error: value of tuple type '(key: String, value: String)' has no member 'toUpperCase'\n\
    \     "
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    for (_, value) in dict {\n        if let value = value {\n            if\
    \ value.hasPrefix(\"\\\"\") && value.hasSuffix(\"\\\"\") {\n                return\
    \ true\n            }\n            if value.hasPrefix(\"\\\"\") || value.hasSuffix(\"\
    \\\"\") {\n                return false\n            }\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3mmdsqud.swift:14:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n        if let value = value {\n    \
    \       ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    for (_, value) in dict {\n        if let value = value {\n            if\
    \ let string = value as? String {\n                if string.lowercaseString.isEmpty\
    \ {\n                    return false\n                } else if string.uppercaseString.isEmpty\
    \ {\n                    return false\n                }\n            }\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9lge9vp1.swift:15:35: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n            if let string = value as? String {\n \
    \                                 ^\n/tmp/tmp9lge9vp1.swift:16:27: error: value\
    \ of type 'String' has no member 'lowercaseString'\n                if string.lowercaseString.isEmpty\
    \ {\n                   ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp9lge9vp1.swift:18:34:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            \
    \    } else if string.uppercaseString.isEmpty {\n                          ~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmp9lge9vp1.swift:14:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let value = value\
    \ {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        let isString\
    \ = k == k.toLower()\n        let isStringUpper = k == k.toUpper()\n        if\
    \ isString && !isStringUpper {\n            return false\n        } else if !isString\
    \ && isStringUpper {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw68f4dya.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpw68f4dya.swift:17:31: error: value of type 'String'\
    \ has no member 'toLower'\n        let isString = k == k.toLower()\n         \
    \                   ~ ^~~~~~~\n/tmp/tmpw68f4dya.swift:18:36: error: value of type\
    \ 'String' has no member 'toUpper'\n        let isStringUpper = k == k.toUpper()\n\
    \                                 ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        let lower =\
    \ String(k).lowercased()\n        let upper = String(k).uppercased()\n       \
    \ if v != nil && lower == v!.lowercased() && upper == v!.uppercased() {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpvku_ctd3/tmpvku_ctd3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb0cc39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb0c930b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb0c930988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb0c92f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvku_ctd3                        0x0000560088c839f3 <unavailable> + 6643

    5    libc.so.6                          0x00002aeb0ce25460 __libc_start_main +
    245

    6    tmpvku_ctd3                        0x0000560088c835a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil {\n            if key.characters.count > 0 && key.characters.count <\
    \ key.characters.countByte {\n                if key.lowercaseString.characters.count\
    \ > 0 && key.lowercaseString.characters.count < key.lowercaseString.characters.countByte\
    \ {\n                    return true\n                }\n                if key.uppercaseString.characters.count\
    \ > 0 && key.uppercaseString.characters.count < key.uppercaseString.characters.countByte\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjqt336s5.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpjqt336s5.swift:17:16: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n        if key != nil {\n\
    \           ~~~ ^  ~~~\n/tmp/tmpjqt336s5.swift:18:82: error: value of type 'String'\
    \ has no member 'countByte'\n            if key.characters.count > 0 && key.characters.count\
    \ < key.characters.countByte {\n                                             \
    \                     ~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpjqt336s5.swift:19:24:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            \
    \    if key.lowercaseString.characters.count > 0 && key.lowercaseString.characters.count\
    \ < key.lowercaseString.characters.countByte {\n                   ~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpjqt336s5.swift:19:68: error: value of type 'String' has no member 'lowercaseString'\n\
    \                if key.lowercaseString.characters.count > 0 && key.lowercaseString.characters.count\
    \ < key.lowercaseString.characters.countByte {\n                             \
    \                                  ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjqt336s5.swift:19:107:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            \
    \    if key.lowercaseString.characters.count > 0 && key.lowercaseString.characters.count\
    \ < key.lowercaseString.characters.countByte {\n                             \
    \                                                                         ~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpjqt336s5.swift:22:24: error: value of type 'String'\
    \ has no member 'uppercaseString'\n                if key.uppercaseString.characters.count\
    \ > 0 && key.uppercaseString.characters.count < key.uppercaseString.characters.countByte\
    \ {\n                   ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpjqt336s5.swift:22:68: error:\
    \ value of type 'String' has no member 'uppercaseString'\n                if key.uppercaseString.characters.count\
    \ > 0 && key.uppercaseString.characters.count < key.uppercaseString.charac"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil {\n            if key.lowercaseString.isEmpty {\n                return\
    \ false\n            }\n            if key.uppercaseString.isEmpty {\n       \
    \         return false\n            }\n        }\n        if value != nil {\n\
    \            if value.lowercaseString.isEmpty {\n                return false\n\
    \            }\n            if value.uppercaseString.isEmpty {\n             \
    \   return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpahc7_3j7.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpahc7_3j7.swift:17:16: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n        if key != nil {\n\
    \           ~~~ ^  ~~~\n/tmp/tmpahc7_3j7.swift:18:20: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if key.lowercaseString.isEmpty\
    \ {\n               ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpahc7_3j7.swift:21:20: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if key.uppercaseString.isEmpty\
    \ {\n               ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpahc7_3j7.swift:26:22: error:\
    \ value of type 'String?' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpahc7_3j7.swift:29:22: error:\
    \ value of type 'String?' has no member 'uppercaseString'\n            if value.uppercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toUpperCase\
    \ {\n            if v != v.toUpperCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toLowerCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5uyyzxsq.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp5uyyzxsq.swift:17:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp5uyyzxsq.swift:18:23: error: value of type 'String?'\
    \ has no member 'toUpperCase'\n            if v != v.toUpperCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp5uyyzxsq.swift:22:23: error: value of type\
    \ 'String?' has no member 'toLowerCase'\n            if v != v.toLowerCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    \n    for (_, value) in dict {\n        let lower = value.lowercased()\n\
    \        let upper = value.uppercased()\n        if lower == upper {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpl46i564t/tmpl46i564t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04e86e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04e83dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04e83da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04e83d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl46i564t                        0x00005639df7d07f3 <unavailable> + 6131

    5    libc.so.6                          0x00002b04e88cf460 __libc_start_main +
    245

    6    tmpl46i564t                        0x00005639df7d03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.toLowerCase {\n            if v != v.toLowerCase {\n                return\
    \ false\n            }\n        } else {\n            if v != v.toUpperCase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5hqahz1v.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp5hqahz1v.swift:18:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp5hqahz1v.swift:19:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp5hqahz1v.swift:23:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if let\
    \ _ = value as? String {\n            if key.characters.count > 0 && key.characters.count\
    \ < key.characters.count {\n                return false\n            }\n    \
    \    } else {\n            if key.characters.count > 0 && key.characters.count\
    \ < key.characters.count {\n                return true\n            }\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0fqxr3cf.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0fqxr3cf.swift:17:26: warning: conditional downcast\
    \ from 'String?' to 'String' does nothing\n        if let _ = value as? String\
    \ {\n                   ~~~~~~^~~~~~~~~~\n                        \n/tmp/tmp0fqxr3cf.swift:18:20:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if key.characters.count > 0 && key.characters.count < key.characters.count {\n\
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0fqxr3cf.swift:18:48: error: 'characters' is unavailable: Please\
    \ use String directly\n            if key.characters.count > 0 && key.characters.count\
    \ < key.characters.count {\n                                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0fqxr3cf.swift:18:71:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if key.characters.count > 0 && key.characters.count < key.characters.count {\n\
    \                                                                      ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0fqxr3cf.swift:22:20:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if key.characters.count > 0 && key.characters.count < key.characters.count {\n\
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0fqxr3cf.swift:22:48: error: 'characters' is unavailable: Please\
    \ use String directly\n            if key.characters.count > 0 && key.characters.count\
    \ < key.characters.count {\n                                               ^~~~~~~~~~\n\
    Swif"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil {\n            if key.lowercaseString.isEmpty {\n                return\
    \ false\n            }\n            if key.uppercaseString.isEmpty {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcqj1jg9a.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpcqj1jg9a.swift:17:16: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n        if key != nil {\n\
    \           ~~~ ^  ~~~\n/tmp/tmpcqj1jg9a.swift:18:20: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if key.lowercaseString.isEmpty\
    \ {\n               ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpcqj1jg9a.swift:21:20: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            if key.uppercaseString.isEmpty\
    \ {\n               ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else if k == k.toUpperCase {\n            if v != v.toUpperCase\
    \ {\n                return false\n            }\n        } else {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5c1ery0v.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp5c1ery0v.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp5c1ery0v.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp5c1ery0v.swift:21:26: error: value of type\
    \ 'String' has no member 'toUpperCase'\n        } else if k == k.toUpperCase {\n\
    \                       ~ ^~~~~~~~~~~\n/tmp/tmp5c1ery0v.swift:22:23: error: value\
    \ of type 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase\
    \ {\n                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.isUppercase {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvqx1cdud.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpvqx1cdud.swift:19:14: error: value of type 'String'\
    \ has no member 'isUppercase'\n        if k.isUppercase {\n           ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ isString = isStringOrNumber(value)\n        if isString {\n            if key.lowercased()\
    \ == key {\n                return true\n            }\n            if key.uppercased()\
    \ == key {\n                return true\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzznt1f9y.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpzznt1f9y.swift:17:24: error: cannot find 'isStringOrNumber'\
    \ in scope\n        let isString = isStringOrNumber(value)\n                 \
    \      ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (_, value) in dict {\n        let lower = value.lowercased()\n      \
    \  let upper = value.uppercased()\n        if lower != upper {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp62cl0aay/tmp62cl0aay.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3dd033c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3dcd2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3dcd2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3dcd297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62cl0aay                        0x0000561514f637f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ad3dd21f460 __libc_start_main +
    245

    6    tmp62cl0aay                        0x0000561514f633a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        if let _ = key.toLowercase() {\n  \
    \          return false\n        }\n        if let _ = key.toUppercase() {\n \
    \           return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4hxn9ah5.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp4hxn9ah5.swift:16:24: error: value of type 'String'\
    \ has no member 'toLowercase'\n        if let _ = key.toLowercase() {\n      \
    \             ~~~ ^~~~~~~~~~~\n/tmp/tmp4hxn9ah5.swift:19:24: error: value of type\
    \ 'String' has no member 'toUppercase'\n        if let _ = key.toUppercase() {\n\
    \                   ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ lower = key.lowercased()\n        let upper = key.uppercased()\n        \n \
    \       if value == lower || value == upper {\n            return true\n     \
    \   }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmph_gitwr4/tmph_gitwr4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a0d5e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0d2d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0d2d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0d2d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_gitwr4                        0x000055ae34629893 <unavailable> + 6291

    5    libc.so.6                          0x00002b3a0d7cc460 __libc_start_main +
    245

    6    tmph_gitwr4                        0x000055ae34629449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if value.rangeOfCharacter(from: CharacterSet.lowercaseLetters) != nil ||\n\
    \                value.rangeOfCharacter(from: CharacterSet.uppercaseLetters) !=\
    \ nil {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptzmlf6u6.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmptzmlf6u6.swift:17:45: error: cannot find 'CharacterSet'\
    \ in scope\n            if value.rangeOfCharacter(from: CharacterSet.lowercaseLetters)\
    \ != nil ||\n                                            ^~~~~~~~~~~~\n/tmp/tmptzmlf6u6.swift:18:46:\
    \ error: cannot find 'CharacterSet' in scope\n                value.rangeOfCharacter(from:\
    \ CharacterSet.uppercaseLetters) != nil {\n                                  \
    \           ^~~~~~~~~~~~\n/tmp/tmptzmlf6u6.swift:17:22: error: value of type 'String'\
    \ has no member 'rangeOfCharacter'\n            if value.rangeOfCharacter(from:\
    \ CharacterSet.lowercaseLetters) != nil ||\n               ~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmptzmlf6u6.swift:18:23: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \                value.rangeOfCharacter(from: CharacterSet.uppercaseLetters) !=\
    \ nil {\n                ~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmptzmlf6u6.swift:16:12:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \        if let value = value {\n           ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k {\n\
    \            return true\n        }\n        if let _ = v.lowercased() {\n   \
    \         return true\n        }\n        if let _ = v.uppercased() {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp21067en5.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp21067en5.swift:20:20: error: value of optional type\
    \ 'String?' must be unwrapped to refer to member 'lowercased' of wrapped base\
    \ type 'String'\n        if let _ = v.lowercased() {\n                   ^\n/tmp/tmp21067en5.swift:20:20:\
    \ note: chain the optional using '?' to access member 'lowercased' only for non-'nil'\
    \ base values\n        if let _ = v.lowercased() {\n                   ^\n   \
    \                 ?\n/tmp/tmp21067en5.swift:20:20: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        if let _ =\
    \ v.lowercased() {\n                   ^\n                    !\n/tmp/tmp21067en5.swift:23:20:\
    \ error: value of optional type 'String?' must be unwrapped to refer to member\
    \ 'uppercased' of wrapped base type 'String'\n        if let _ = v.uppercased()\
    \ {\n                   ^\n/tmp/tmp21067en5.swift:23:20: note: chain the optional\
    \ using '?' to access member 'uppercased' only for non-'nil' base values\n   \
    \     if let _ = v.uppercased() {\n                   ^\n                    ?\n\
    /tmp/tmp21067en5.swift:23:20: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if let _ = v.uppercased() {\n\
    \                   ^\n                    !\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k {\n\
    \            return true\n        }\n        if k.toUppercased() != k {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpre_x3__d.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpre_x3__d.swift:20:14: error: value of type 'String'\
    \ has no member 'toUppercased'\n        if k.toUppercased() != k {\n         \
    \  ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let v = dict[k]\n        if k ==\
    \ k.toUpperCase {\n            if v != v.toLowerCase {\n                return\
    \ false\n            }\n        } else {\n            if v != v.toUpperCase {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2qz3ss_l.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp2qz3ss_l.swift:18:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp2qz3ss_l.swift:19:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp2qz3ss_l.swift:23:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for key in dict.keys {\n        let value = dict[key]\n        \n \
    \       if let string = value as? String {\n            if string.lowercaseString.isEmpty\
    \ {\n                return false\n            } else if string.uppercaseString.isEmpty\
    \ {\n                return false\n            } else {\n                return\
    \ true\n            }\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0871ohoc.swift:17:31: warning: conditional downcast from 'String?'\
    \ to 'String' does nothing\n        if let string = value as? String {\n     \
    \                   ~~~~~~^~~~~~~~~~\n                             \n/tmp/tmp0871ohoc.swift:18:23:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            if\
    \ string.lowercaseString.isEmpty {\n               ~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp0871ohoc.swift:20:30:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            }\
    \ else if string.uppercaseString.isEmpty {\n                      ~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        let lower =\
    \ k.lowercaseString\n        let upper = k.uppercaseString\n        if v != nil\
    \ && v != \"\" {\n            if lower != nil && lower != \"\" {\n           \
    \     if lower == upper {\n                    return true\n                }\n\
    \            } else {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp94fem3od.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp94fem3od.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmp94fem3od.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        if let _ = k.lowercased() {\n \
    \           return true\n        }\n        if let _ = k.uppercased() {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppshzasfm.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmppshzasfm.swift:17:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmppshzasfm.swift:20:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for (_, value) in dict {\n        if let value = value {\n        \
    \    if value.lowercaseString.isEmpty {\n                return false\n      \
    \      } else if value.uppercaseString.isEmpty {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphzxcr58h.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmphzxcr58h.swift:17:22: error: value of type 'String'\
    \ has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmphzxcr58h.swift:19:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmphzxcr58h.swift:16:12: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n        if let value = value {\n         \
    \  ^           ~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for k in dict.keys {\n        let lower = k.lowercaseString\n\
    \        let upper = k.uppercaseString\n        if lower == upper {\n        \
    \    continue\n        }\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm1vfbivk.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpm1vfbivk.swift:17:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmpm1vfbivk.swift:18:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != value {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4h34c508/tmp4h34c508.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53f7be2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53f78d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53f78d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53f78d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4h34c508                        0x0000556632c787a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b53f7dce460 __libc_start_main +
    245

    6    tmp4h34c508                        0x0000556632c78359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    let keys = dict.keys\n    for k in keys {\n        let v = dict[k]\n    \
    \    if k == k.lowercased() || k == k.uppercased() {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpfas5rtvb/tmpfas5rtvb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ff8002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ff7cf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ff7cf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ff7cf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfas5rtvb                        0x000055e74b57ca65 <unavailable> + 6757

    5    libc.so.6                          0x00002b4ff81ee460 __libc_start_main +
    245

    6    tmpfas5rtvb                        0x000055e74b57c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toUpperCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != k.toLowerCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2q1ueevo.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp2q1ueevo.swift:17:19: error: value of type 'String'\
    \ has no member 'toUpperCase'\n        if k == k.toUpperCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmp2q1ueevo.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmp2q1ueevo.swift:22:23: error: value of type\
    \ 'String' has no member 'toLowerCase'\n            if v != k.toLowerCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for key in dict.keys {\n        let value = dict[key]\n        let lowerCase\
    \ = String(key.lowercased())\n        let upperCase = String(key.uppercased())\n\
    \        if lowerCase == upperCase {\n            return true\n        } else\
    \ if lowerCase == value {\n            return true\n        } else {\n       \
    \     return false\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp40av8h1s/tmp40av8h1s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b613d172c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b613ce69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b613ce69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b613ce687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp40av8h1s                        0x00005603b0fa89b3 <unavailable> + 6579

    5    libc.so.6                          0x00002b613d35e460 __libc_start_main +
    245

    6    tmp40av8h1s                        0x00005603b0fa8569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let lower = k.lowercaseString\n     \
    \   let upper = k.uppercaseString\n        if lower == upper {\n            continue\n\
    \        }\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp646fbgoq.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp646fbgoq.swift:16:23: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        let lower = k.lowercaseString\n   \
    \                 ~ ^~~~~~~~~~~~~~~\n/tmp/tmp646fbgoq.swift:17:23: error: value\
    \ of type 'String' has no member 'uppercaseString'\n        let upper = k.uppercaseString\n\
    \                    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        if key\
    \ != nil {\n            if let str = key as? String {\n                if str.isEmpty\
    \ {\n                    return false\n                }\n                if str.isUppercase\
    \ {\n                    return false\n                }\n            } else {\n\
    \                if let str = key as? String {\n                    if str.isEmpty\
    \ {\n                        return false\n                    }\n           \
    \         if str.isLowercase {\n                        return false\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqw9xdiac.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpqw9xdiac.swift:17:16: warning: comparing non-optional\
    \ value of type 'String' to 'nil' always returns true\n        if key != nil {\n\
    \           ~~~ ^  ~~~\n/tmp/tmpqw9xdiac.swift:18:30: warning: conditional cast\
    \ from 'String' to 'String' always succeeds\n            if let str = key as?\
    \ String {\n                             ^\n/tmp/tmpqw9xdiac.swift:22:24: error:\
    \ value of type 'String' has no member 'isUppercase'\n                if str.isUppercase\
    \ {\n                   ~~~ ^~~~~~~~~~~\n/tmp/tmpqw9xdiac.swift:26:34: warning:\
    \ conditional cast from 'String' to 'String' always succeeds\n               \
    \ if let str = key as? String {\n                                 ^\n/tmp/tmpqw9xdiac.swift:30:28:\
    \ error: value of type 'String' has no member 'isLowercase'\n                \
    \    if str.isLowercase {\n                       ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    \n    for key in dict.keys {\n        let value = dict[key]\n        \n \
    \       if let _ = value as? String {\n            if let _ = key.lowercased()\
    \ {\n                return true\n            }\n            else if let _ = key.uppercased()\
    \ {\n                return true\n            }\n        }\n    }\n    \n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiqpxlelc.swift:17:26: warning: conditional downcast from 'String?'\
    \ to 'String' does nothing\n        if let _ = value as? String {\n          \
    \         ~~~~~~^~~~~~~~~~\n                        \n/tmp/tmpiqpxlelc.swift:21:21:\
    \ error: initializer for conditional binding must have Optional type, not 'String'\n\
    \            else if let _ = key.uppercased() {\n                    ^       ~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiqpxlelc.swift:18:16: error: initializer for conditional binding must\
    \ have Optional type, not 'String'\n            if let _ = key.lowercased() {\n\
    \               ^       ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == \"\" {\n            return false\n\
    \        }\n        if k.isLower{\n            return true\n        }\n      \
    \  if k.isUpper{\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi0y4wyl8.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpi0y4wyl8.swift:19:14: error: value of type 'String'\
    \ has no member 'isLower'\n        if k.isLower{\n           ~ ^~~~~~~\n/tmp/tmpi0y4wyl8.swift:22:14:\
    \ error: value of type 'String' has no member 'isUpper'\n        if k.isUpper{\n\
    \           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for (_, value) in dict {\n        if let value = value as? String {\n   \
    \         if value.lowercaseString.isEmpty {\n                return false\n \
    \           } else if value.uppercaseString.isEmpty {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq7z9bidi.swift:14:30: warning: conditional cast from 'String' to\
    \ 'String' always succeeds\n        if let value = value as? String {\n      \
    \                       ^\n/tmp/tmpq7z9bidi.swift:15:22: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if value.lowercaseString.isEmpty\
    \ {\n               ~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpq7z9bidi.swift:17:29: error:\
    \ value of type 'String' has no member 'uppercaseString'\n            } else if\
    \ value.uppercaseString.isEmpty {\n                      ~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard dict.count > 0 else { return false }\n\
    \    for (_, value) in dict {\n        let lowerCase = value.lowercased()\n  \
    \      let upperCase = value.uppercased()\n        if lowerCase == upperCase {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpomq0zvod/tmpomq0zvod.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1c823cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1c7f33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1c7f33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1c7f327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomq0zvod                        0x000055d6fcee97f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ba1c8428460 __libc_start_main +
    245

    6    tmpomq0zvod                        0x000055d6fcee93a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    \n    for key in dict.keys {\n        let value = dict[key]\n     \
    \   if key != value {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpx4hqv9p_/tmpx4hqv9p_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae681c44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae68193bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae68193b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae68193a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4hqv9p_                        0x00005593a29cc7a3 <unavailable> + 6051

    5    libc.so.6                          0x00002ae681e30460 __libc_start_main +
    245

    6    tmpx4hqv9p_                        0x00005593a29cc359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k == k.lowercased() || k == k.uppercased()\
    \ {\n            continue\n        }\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmphdfidz6g/tmphdfidz6g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82cc188c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82cbe7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82cbe7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82cbe7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdfidz6g                        0x00005585b83169d5 <unavailable> + 6613

    5    libc.so.6                          0x00002b82cc374460 __libc_start_main +
    245

    6    tmphdfidz6g                        0x00005585b83163b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    guard !dict.isEmpty else { return false }\n\
    \    for key in dict.keys {\n        let value = dict[key]\n        let lower\
    \ = key.lowercased()\n        let upper = key.uppercased()\n        if value !=\
    \ nil { // value is not nil\n            if value.lowercased() == lower || value.uppercased()\
    \ == upper {\n                return true\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgcencjqc.swift:18:16: error: value of optional type 'String?' must\
    \ be unwrapped to refer to member 'lowercased' of wrapped base type 'String'\n\
    \            if value.lowercased() == lower || value.uppercased() == upper {\n\
    \               ^\n/tmp/tmpgcencjqc.swift:18:16: note: chain the optional using\
    \ '?' to access member 'lowercased' only for non-'nil' base values\n         \
    \   if value.lowercased() == lower || value.uppercased() == upper {\n        \
    \       ^\n                    ?\n/tmp/tmpgcencjqc.swift:18:16: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    if value.lowercased() == lower || value.uppercased() == upper {\n       \
    \        ^\n                    !\n/tmp/tmpgcencjqc.swift:18:47: error: value\
    \ of optional type 'String?' must be unwrapped to refer to member 'uppercased'\
    \ of wrapped base type 'String'\n            if value.lowercased() == lower ||\
    \ value.uppercased() == upper {\n                                            \
    \  ^\n/tmp/tmpgcencjqc.swift:18:47: note: chain the optional using '?' to access\
    \ member 'uppercased' only for non-'nil' base values\n            if value.lowercased()\
    \ == lower || value.uppercased() == upper {\n                                \
    \              ^\n                                                   ?\n/tmp/tmpgcencjqc.swift:18:47:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            if value.lowercased() == lower || value.uppercased() == upper\
    \ {\n                                              ^\n                       \
    \                            !\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        let v = dict[k]\n        if k == k.toLowerCase\
    \ {\n            if v != v.toLowerCase {\n                return false\n     \
    \       }\n        } else {\n            if v != v.toUpperCase {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz4fs5hfg.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpz4fs5hfg.swift:17:19: error: value of type 'String'\
    \ has no member 'toLowerCase'\n        if k == k.toLowerCase {\n             \
    \   ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:18:23: error: value of type 'String?'\
    \ has no member 'toLowerCase'\n            if v != v.toLowerCase {\n         \
    \           ~ ^~~~~~~~~~~\n/tmp/tmpz4fs5hfg.swift:22:23: error: value of type\
    \ 'String?' has no member 'toUpperCase'\n            if v != v.toUpperCase {\n\
    \                    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for key in dict.keys {\n        let value = dict[key]\n        let\
    \ isString = value.isString\n        if isString {\n            if key.lowercaseString\
    \ == key {\n                return true\n            }\n            if key.uppercaseString\
    \ == key {\n                return true\n            }\n        }\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa3jlwquh.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpa3jlwquh.swift:17:30: error: value of type 'String?'\
    \ has no member 'isString'\n        let isString = value.isString\n          \
    \             ~~~~~ ^~~~~~~~\n/tmp/tmpa3jlwquh.swift:19:20: error: value of type\
    \ 'String' has no member 'lowercaseString'\n            if key.lowercaseString\
    \ == key {\n               ~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpa3jlwquh.swift:22:20:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            if\
    \ key.uppercaseString == key {\n               ~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823235
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if let _ = k.lowercased() {\n       \
    \     return true\n        }\n        if let _ = k.uppercased() {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0upidl0q.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmp0upidl0q.swift:16:12: error: initializer for conditional\
    \ binding must have Optional type, not 'String'\n        if let _ = k.lowercased()\
    \ {\n           ^       ~~~~~~~~~~~~~~\n/tmp/tmp0upidl0q.swift:19:12: error: initializer\
    \ for conditional binding must have Optional type, not 'String'\n        if let\
    \ _ = k.uppercased() {\n           ^       ~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict == nil {\n        return false\n \
    \   }\n    for k in dict.keys {\n        if k.isEmpty {\n            return false\n\
    \        }\n        if k.lowercaseString != k {\n            return false\n  \
    \      }\n    }\n    for k in dict.keys {\n        if k.uppercaseString != k {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt04cjaji.swift:12:13: warning: comparing non-optional value of\
    \ type '[String : String]' to 'nil' always returns false\n    if dict == nil {\n\
    \       ~~~~ ^  ~~~\n/tmp/tmpt04cjaji.swift:19:14: error: value of type 'String'\
    \ has no member 'lowercaseString'\n        if k.lowercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n/tmp/tmpt04cjaji.swift:24:14: error: value of type 'String'\
    \ has no member 'uppercaseString'\n        if k.uppercaseString != k {\n     \
    \      ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823234
