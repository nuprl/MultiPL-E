language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0ymr487t.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp0ymr487t.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp_fvdp8nc/tmp_fvdp8nc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab458710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab458407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab458407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4584067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fvdp8nc                        0x000055c81c4eb473 <unavailable> + 5235

    5    libc.so.6                          0x00002ab4588fc460 __libc_start_main +
    245

    6    tmp_fvdp8nc                        0x000055c81c4eb0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp_fvdp8nc/tmp_fvdp8nc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab458710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab458407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab458407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4584067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fvdp8nc                        0x000055c81c4eb473 <unavailable> + 5235

    5    libc.so.6                          0x00002ab4588fc460 __libc_start_main +
    245

    6    tmp_fvdp8nc                        0x000055c81c4eb0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += math.pow(number - mean, 2)\n    }\n    return math.sqrt(sum / numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp82m7rk3s.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean, 2)\n               ^~~~\n/tmp/tmp82m7rk3s.swift:12:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean, 2)\n\
    \                                 ^~~~\n/tmp/tmp82m7rk3s.swift:14:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / numbers.count)\n          \
    \ ^~~~\n/tmp/tmp82m7rk3s.swift:14:26: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    return math.sqrt(sum / numbers.count)\n\
    \                     ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmp82m7rk3s.swift:14:26: note:\
    \ overloads for '/' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n    return math.sqrt(sum / numbers.count)\n           \
    \              ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for x in numbers {\n        sum += abs(x -\
    \ mean(x))\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmmsftlfn.swift:12:24: error: cannot find 'mean' in scope\n    \
    \    sum += abs(x - mean(x))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0.0\n    for x in numbers {\n        sum +=\
    \ pow((x - mean), 2)\n    }\n    return sqrt(sum / Double(numbers.count))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjv545n7u.swift:12:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow((x - mean), 2)\n               ^~~\n/tmp/tmpjv545n7u.swift:12:25:\
    \ error: cannot find 'mean' in scope\n        sum += pow((x - mean), 2)\n    \
    \                    ^~~~\n/tmp/tmpjv545n7u.swift:14:12: error: cannot find 'sqrt'\
    \ in scope\n    return sqrt(sum / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0ymr487t.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp0ymr487t.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0ymr487t.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp0ymr487t.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0.0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpj6g1jiny.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n    for number\
    \ in numbers {\n        sum += number\n        sum2 += number * number\n    }\n\
    \    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp7akcymld.swift:16:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for x in numbers {\n        sum += pow((x -\
    \ mean), 2)\n    }\n    return sqrt(sum / Double(numbers.count))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpukiag9uf.swift:12:16: error: cannot find 'pow' in scope\n     \
    \   sum += pow((x - mean), 2)\n               ^~~\n/tmp/tmpukiag9uf.swift:12:25:\
    \ error: cannot find 'mean' in scope\n        sum += pow((x - mean), 2)\n    \
    \                    ^~~~\n/tmp/tmpukiag9uf.swift:14:12: error: cannot find 'sqrt'\
    \ in scope\n    return sqrt(sum / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0ymr487t.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp0ymr487t.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0ymr487t.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp0ymr487t.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers)\n\
    \        .map { abs($0 - mean) }\n        .sum() / Double(numbers.count))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmppj9eedat.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmppj9eedat.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmppj9eedat.swift:13:10:\
    \ error: value of type '[T]' has no member 'sum'\n        .sum() / Double(numbers.count))\n\
    \         ^~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzltwazu9.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824870
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfa0kc2hb.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp_fvdp8nc/tmp_fvdp8nc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab458710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab458407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab458407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4584067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fvdp8nc                        0x000055c81c4eb473 <unavailable> + 5235

    5    libc.so.6                          0x00002ab4588fc460 __libc_start_main +
    245

    6    tmp_fvdp8nc                        0x000055c81c4eb0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return sum(abs(numbers - mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphddla6h8.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmphddla6h8.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmphddla6h8.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(abs(numbers - mean)) / Double(numbers.count)\n\
    \           ^~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += math.pow(number\
    \ - mean(), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5t4gox0p.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean(), 2)\n               ^~~~\n/tmp/tmp5t4gox0p.swift:12:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean(),\
    \ 2)\n                                 ^~~~\n/tmp/tmp5t4gox0p.swift:14:12: error:\
    \ cannot find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return sum(absdiff(numbers, mean))/Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqw3tnede.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpqw3tnede.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpqw3tnede.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absdiff(numbers, mean))/Double(numbers.count)\n\
    \           ^~~\n/tmp/tmpqw3tnede.swift:11:16: error: cannot find 'absdiff' in\
    \ scope\n    return sum(absdiff(numbers, mean))/Double(numbers.count)\n      \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return mean(absolute(numbers)) / mean(numbers)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5_05hjil.swift:10:12: error: cannot find 'mean' in scope\n    return\
    \ mean(absolute(numbers)) / mean(numbers)\n           ^~~~\n/tmp/tmp5_05hjil.swift:10:17:\
    \ error: cannot find 'absolute' in scope\n    return mean(absolute(numbers)) /\
    \ mean(numbers)\n                ^~~~~~~~\n/tmp/tmp5_05hjil.swift:10:38: error:\
    \ cannot find 'mean' in scope\n    return mean(absolute(numbers)) / mean(numbers)\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return sum(absdiff(numbers, mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_mcy6j5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpz_mcy6j5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpz_mcy6j5.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absdiff(numbers, mean)) /\
    \ Double(numbers.count)\n           ^~~\n/tmp/tmpz_mcy6j5.swift:11:16: error:\
    \ cannot find 'absdiff' in scope\n    return sum(absdiff(numbers, mean)) / Double(numbers.count)\n\
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return sum(absdiff(numbers, mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_mcy6j5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpz_mcy6j5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpz_mcy6j5.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absdiff(numbers, mean)) /\
    \ Double(numbers.count)\n           ^~~\n/tmp/tmpz_mcy6j5.swift:11:16: error:\
    \ cannot find 'absdiff' in scope\n    return sum(absdiff(numbers, mean)) / Double(numbers.count)\n\
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return sum(absdiff(numbers, mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_mcy6j5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpz_mcy6j5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpz_mcy6j5.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absdiff(numbers, mean)) /\
    \ Double(numbers.count)\n           ^~~\n/tmp/tmpz_mcy6j5.swift:11:16: error:\
    \ cannot find 'absdiff' in scope\n    return sum(absdiff(numbers, mean)) / Double(numbers.count)\n\
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for n in numbers {\n        sum += n\
    \ * n\n    }\n    return sqrt(sum / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiaf9in6m.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfa0kc2hb.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzltwazu9.swift:10:33: error: extraneous argument label 'combine:'\
    \ in call\n    return Double(numbers.reduce(0, combine: +) / Double(numbers.count))\n\
    \                                ^   ~~~~~~~~~\n                             \
    \       \n"
  stdout: ''
  timestamp: 1659824870
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += math.pow(number\
    \ - mean(), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5t4gox0p.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean(), 2)\n               ^~~~\n/tmp/tmp5t4gox0p.swift:12:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean(),\
    \ 2)\n                                 ^~~~\n/tmp/tmp5t4gox0p.swift:14:12: error:\
    \ cannot find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfa0kc2hb.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0.0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpj6g1jiny.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0.0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpj6g1jiny.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for n in numbers {\n        sum += n\
    \ * n\n    }\n    return Double(sum / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpprf15cos/tmpprf15cos.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3cde0c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3cdddbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3cdddbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3cdddbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpprf15cos                        0x000056518b7c2563 <unavailable> + 5475

    5    libc.so.6                          0x00002b3cde2b4460 __libc_start_main +
    245

    6    tmpprf15cos                        0x000056518b7c21b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(zip(numbers, numbers.dropFirst()).map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0ymr487t.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp0ymr487t.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpesmarb0s.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpesmarb0s.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpesmarb0s.swift:11:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp_fvdp8nc/tmp_fvdp8nc.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab458710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab458407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab458407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4584067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_fvdp8nc                        0x000055c81c4eb473 <unavailable> + 5235

    5    libc.so.6                          0x00002ab4588fc460 __libc_start_main +
    245

    6    tmp_fvdp8nc                        0x000055c81c4eb0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for n in numbers {\n        sum += math.pow((n\
    \ - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpru4fx4mi.swift:12:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpru4fx4mi.swift:12:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpru4fx4mi.swift:14:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_tgqk6n3.swift:10:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for x in numbers {\n        sum += abs(x -\
    \ mean(x))\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmmsftlfn.swift:12:24: error: cannot find 'mean' in scope\n    \
    \    sum += abs(x - mean(x))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return sum(absdiff(numbers, mean))\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpz_mcy6j5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpz_mcy6j5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpz_mcy6j5.swift:11:12:\
    \ error: cannot find 'sum' in scope\n    return sum(absdiff(numbers, mean)) /\
    \ Double(numbers.count)\n           ^~~\n/tmp/tmpz_mcy6j5.swift:11:16: error:\
    \ cannot find 'absdiff' in scope\n    return sum(absdiff(numbers, mean)) / Double(numbers.count)\n\
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0.0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpj6g1jiny.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmptlubko3v/tmptlubko3v.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba90589ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba905595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba905595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9055947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlubko3v                        0x0000555a6a1af473 <unavailable> + 5235

    5    libc.so.6                          0x00002ba905a8a460 __libc_start_main +
    245

    6    tmptlubko3v                        0x0000555a6a1af0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfa0kc2hb.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Statistics.meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfa0kc2hb.swift:10:12: error: cannot find 'Statistics' in scope\n\
    \    return Statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum = 0.0\n    for number in numbers {\n        sum += abs(number\
    \ - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpo6vnjv9u.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    var sum: Double = 0\n    for number in numbers {\n        sum\
    \ += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmphcigbskd.swift:12:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpufob34yb.swift:10:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    return mean(numbers.map { abs($0\
    \ - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpswtqbub5.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpswtqbub5.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824869
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return Double(numbers.reduce(0, { $0 + Double($1) }))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpsunsccxj/tmpsunsccxj.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab259f05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab259bfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab259bfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab259bfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsunsccxj                        0x00005631d3a06413 <unavailable> + 5139

    5    libc.so.6                          0x00002ab25a0f1460 __libc_start_main +
    245

    6    tmpsunsccxj                        0x00005631d3a06069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1659824869
