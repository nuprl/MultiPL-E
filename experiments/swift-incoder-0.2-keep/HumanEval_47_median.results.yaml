language: swift
name: HumanEval_47_median
results:
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count)\n    }\n  \
    \  return Double(l.first!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpvdknqikq/tmpvdknqikq.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b859d684c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b859d37bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b859d37b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b859d37a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdknqikq                        0x0000565169504661 <unavailable> + 5729

    5    libc.so.6                          0x00002b859d870460 __libc_start_main +
    245

    6    tmpvdknqikq                        0x00005651695042a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpluphw7rz.swift:12:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpluphw7rz.swift:14:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgaufg2i4.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpgaufg2i4.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfu8zmgw5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpfu8zmgw5.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp5z113md.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpp5z113md.swift:13:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgaufg2i4.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpgaufg2i4.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.count / 2)\n    }\n    return Double(l.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpbc72okwm/tmpbc72okwm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b852fca9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b852f9a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b852f9a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b852f99f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbc72okwm                        0x000055ad27e20531 <unavailable> + 5425

    5    libc.so.6                          0x00002b852fe95460 __libc_start_main +
    245

    6    tmpbc72okwm                        0x000055ad27e20179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxp5e1pf6.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpxp5e1pf6.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopd5f943.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpopd5f943.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    let mid = n / 2\n    let left = l[mid..<n]\n    let right = l[..<mid]\n\
    \    return Double(left.reduce(0.0, +) / Double(left.count) + right.reduce(0.0,\
    \ +) / Double(right.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp1a8qltd.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824587
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgaufg2i4.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpgaufg2i4.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l[(n - 1) / 2]\n    }\n\
    \    return l[n / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp3881umya.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(n - 1) / 2]\n        \
    \       ~^~~~~~~~~~~~~\n               Double(       )\n/tmp/tmp3881umya.swift:15:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[n / 2]\n           ~^~~~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return Double.nan\n    }\n    let mid = sorted.count / 2\n    return\
    \ Double(sorted[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpznk5_dwl/tmpznk5_dwl.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4781100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4780df7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4780df7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4780df67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpznk5_dwl                        0x00005609d27056dd <unavailable> + 5853

    5    libc.so.6                          0x00002b47812ec460 __libc_start_main +
    245

    6    tmpznk5_dwl                        0x00005609d2705239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return sorted[0]\n    }\n    return sorted[sorted.count / 2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5u8vw_k3.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[0]\n             \
    \  ~~~~~~^~~\n               Double(  )\n/tmp/tmp5u8vw_k3.swift:12:18: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return sorted[sorted.count / 2]\n           ~~~~~~^~~~~~~~~~~~~~~~~~\n     \
    \      Double(                 )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdj8j7ujs.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdj8j7ujs.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ mid = n/2\n    var left = l[0:mid]\n    var right = l[mid:n]\n    var m = Double.nan\n\
    \    for x in left {\n        if x < m {\n            m = x\n        }\n    }\n\
    \    for x in right {\n        if x > m {\n            m = x\n        }\n    }\n\
    \    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpoqjm01ji.swift:16:19: error: expected ',' separator\n    var left\
    \ = l[0:mid]\n                  ^\n                  ,\n/tmp/tmpoqjm01ji.swift:16:19:\
    \ error: expected expression in list of expressions\n    var left = l[0:mid]\n\
    \                  ^\n/tmp/tmpoqjm01ji.swift:13:17: error: cannot convert return\
    \ expression of type 'Int' to return type 'Double'\n        return l[n/2]\n  \
    \             ~^~~~~\n               Double( )\n/tmp/tmpoqjm01ji.swift:17:18:\
    \ error: extraneous argument label 'mid:' in subscript\n    var right = l[mid:n]\n\
    \                 ^~~~~\n                  \n/tmp/tmpoqjm01ji.swift:19:14: error:\
    \ for-in loop requires 'Int' to conform to 'Sequence'\n    for x in left {\n \
    \            ^~~~\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5xqxzmi2.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return\
    \ sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe2b8p9dk.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpe2b8p9dk.swift:12:43: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                                          \
    \  )\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptjrqbur4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmptjrqbur4.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n        return\
    \ l[0]\n    }\n    let mid = n / 2\n    let m1 = median(l[0..<mid])\n    let m2\
    \ = median(l[mid..<n])\n    return m1 + (m2 - m1) / (n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdlraz0cx.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpdlraz0cx.swift:13:21: error: missing argument\
    \ label 'l:' in call\n    let m1 = median(l[0..<mid])\n                    ^\n\
    \                    l: \n/tmp/tmpdlraz0cx.swift:13:22: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let m1\
    \ = median(l[0..<mid])\n                     ^\n/tmp/tmpdlraz0cx.swift:14:21:\
    \ error: missing argument label 'l:' in call\n    let m2 = median(l[mid..<n])\n\
    \                    ^\n                    l: \n/tmp/tmpdlraz0cx.swift:14:22:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let m2 = median(l[mid..<n])\n                     ^\n/tmp/tmpdlraz0cx.swift:15:15:\
    \ error: no '+' candidates produce the expected contextual result type 'Double'\n\
    \    return m1 + (m2 - m1) / (n - 1)\n              ^\nSwift.Duration:6:24: note:\
    \ '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs: Duration, rhs: Duration) -> Duration\n       \
    \                ^\n_Concurrency.ContinuousClock.Instant:9:35: note: '+' produces\
    \ 'ContinuousClock.Instant', not the expected contextual result type 'Double'\n\
    \    @inlinable public static func + (lhs: ContinuousClock.Instant, rhs: Duration)\
    \ -> ContinuousClock.Instant\n                                  ^\n_Concurrency.SuspendingClock.Instant:16:24:\
    \ note: '+' produces 'SuspendingClock.Instant', not the expected contextual result\
    \ type 'Double'\n    public static func + (lhs: SuspendingClock.Instant, rhs:\
    \ Duration) -> SuspendingClock.Instant\n                       ^\nSwift.AdditiveArithmetic:3:17:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    static func + (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Duration:6:24:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs: Duration, rhs: Dur"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    var m = Double.nan\n    var l2 = l.sorted()\n    if l2.count\
    \ > 1 {\n        m = l2[Int(l2.count / 2)]\n    }\n    if n == 1 {\n        return\
    \ m\n    }\n    var l3 = l.sorted()\n    if l3.count > 2 {\n        m = l3[Int(l3.count\
    \ / 2)]\n    }\n    if n == 2 {\n        return m\n    }\n    if n == 3 {\n  \
    \      return l2[Int(l2.count / 2)]\n    }\n    if n == 4 {\n        return l3[Int(l3.count\
    \ / 2)]\n    }\n    if n == 5 {\n        return Double.nan\n    }\n    return\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfd57pl48.swift:15:15: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        m = l2[Int(l2.count / 2)]\n            ~~^~~~~~~~~~~~~~~~~~~\n\
    \            Double(              )\n/tmp/tmpfd57pl48.swift:22:15: error: cannot\
    \ assign value of type 'Int' to type 'Double'\n        m = l3[Int(l3.count / 2)]\n\
    \            ~~^~~~~~~~~~~~~~~~~~~\n            Double(              )\n/tmp/tmpfd57pl48.swift:28:18:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l2[Int(l2.count / 2)]\n               ~~^~~~~~~~~~~~~~~~~~~\n\
    \               Double(              )\n/tmp/tmpfd57pl48.swift:31:18: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n        return\
    \ l3[Int(l3.count / 2)]\n               ~~^~~~~~~~~~~~~~~~~~~\n              \
    \ Double(              )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[l.count / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphu7ak492.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmphu7ak492.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \           Double(                              )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxp5e1pf6.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpxp5e1pf6.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopd5f943.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpopd5f943.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdj8j7ujs.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdj8j7ujs.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[l.count / 2]\n    } else {\n        return (l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpppxy0y8m.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[l.count / 2]\n        \
    \       ~^~~~~~~~~~~~~\n               Double(       )\n/tmp/tmpppxy0y8m.swift:12:54:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[l.count / 2] + l[l.count / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                                  )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 0 {\n        return Double(l.count / 2)\n    }\n    return Double(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp0fqbzope/tmp0fqbzope.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad50c0ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad50bdf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad50bdf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad50bdf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fqbzope                        0x0000561f05334531 <unavailable> + 5425

    5    libc.so.6                          0x00002ad50c2eb460 __libc_start_main +
    245

    6    tmp0fqbzope                        0x0000561f05334179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 2) / 2].0) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmps2l3vd0t.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmps2l3vd0t.swift:12:34:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n          \
    \                       ^\n           Double(                                \
    \        )\n/tmp/tmps2l3vd0t.swift:12:14: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Double'\n    return (l[(l.count - 1) / 2] -\
    \ l[(l.count - 2) / 2].0) / 2.0\n             ^\n            Double(         \
    \    )\n/tmp/tmps2l3vd0t.swift:12:57: error: value of type 'Int' has no member\
    \ '0'\n    return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n    \
    \                               ~~~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659824553
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkbkhpmol.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpkbkhpmol.swift:12:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2 + 1]) / 2.0\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824565
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return sorted[0]\n    }\n    let middle = sorted.count / 2\n\
    \    return Double(sorted[middle])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppq5mqzlh.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[0]\n             \
    \  ~~~~~~^~~\n               Double(  )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count / 2) - 1]\n    } else {\n        return\
    \ l[(l.count / 2)]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp61fki3l0.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count / 2) - 1]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp61fki3l0.swift:13:17:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count / 2)]\n               ~^~~~~~~~~~~~~~~\n          \
    \     Double(         )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    let mid = n / 2\n    let left = l[0..<mid]\n    let right = l[mid..<n]\n\
    \    return left.reduce(0, combine: +) / Double(left.count) + right.reduce(0,\
    \ combine: +) / Double(right.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpffr5au9n.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return left.reduce(0, combine: +) / Double(left.count)\
    \ + right.reduce(0, combine: +) / Double(right.count)\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824610
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptjrqbur4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmptjrqbur4.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted { $0 < $1 }.mid\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp65ong1z4.swift:8:33: error: value of type '[Int]' has no member\
    \ 'mid'\n    return l.sorted { $0 < $1 }.mid\n           ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[l.count / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphu7ak492.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmphu7ak492.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \           Double(                              )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l[mid])\
    \ + Double(l[mid-1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1sbn8iww.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n        return\
    \ Double(0)\n    }\n    let mid = Double(l.count / 2)\n    let left = l[mid..<n]\n\
    \    let right = l[..<mid]\n    return Double(l.count % 2 == 0 ? median(left)\
    \ + median(right) : median(left))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpwjury6fz.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let left = l[mid..<n]\n               \
    \  ^\n                 Int( )\n/tmp/tmpwjury6fz.swift:14:18: error: no exact matches\
    \ in call to subscript \n    let right = l[..<mid]\n                 ^\nSwift.Collection:2:23:\
    \ note: candidate requires that the types 'Array<Int>.Index' (aka 'Int') and 'Double'\
    \ be equivalent (requirement specified as 'Self.Index' == 'R.Bound')\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ candidate requires that the types 'Array<Int>.Index' (aka 'Int') and 'Double'\
    \ be equivalent (requirement specified as 'Self.Index' == 'R.Bound')\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get set }\n                      ^\n/tmp/tmpwjury6fz.swift:15:45:\
    \ error: missing argument label 'l:' in call\n    return Double(l.count % 2 ==\
    \ 0 ? median(left) + median(right) : median(left))\n                         \
    \                   ^\n                                            l: \n/tmp/tmpwjury6fz.swift:15:60:\
    \ error: missing argument label 'l:' in call\n    return Double(l.count % 2 ==\
    \ 0 ? median(left) + median(right) : median(left))\n                         \
    \                                  ^\n                                       \
    \                    l: \n/tmp/tmpwjury6fz.swift:15:76: error: missing argument\
    \ label 'l:' in call\n    return Double(l.count % 2 == 0 ? median(left) + median(right)\
    \ : median(left))\n                                                          \
    \                 ^\n                                                        \
    \                   l: \n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfu8zmgw5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpfu8zmgw5.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp5z113md.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpp5z113md.swift:13:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l[l.count / 2])\n    }\n    return Double(0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpmyaz1zul/tmpmyaz1zul.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07519d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07516cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07516ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07516c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyaz1zul                        0x000055cac488e67d <unavailable> + 5757

    5    libc.so.6                          0x00002b0751bbf460 __libc_start_main +
    245

    6    tmpmyaz1zul                        0x000055cac488e1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpieue0nyh.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return\
    \ sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe2b8p9dk.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpe2b8p9dk.swift:12:43: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                                          \
    \  )\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return sorted[0]\n    }\n    let mid = sorted.count / 2\n   \
    \ return Double(sorted[mid])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp98gsrcwe.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[0]\n             \
    \  ~~~~~~^~~\n               Double(  )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5xqxzmi2.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpie5q6dez.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpie5q6dez.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return\
    \ sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe2b8p9dk.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpe2b8p9dk.swift:12:43: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                                          \
    \  )\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    var mid = n / 2\n    var left = l[mid..<n]\n    var right = l[0..<mid]\n\
    \    return median(left) + median(right)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp76__y4s5.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right)\n                  ^\n              \
    \    l: \n/tmp/tmp76__y4s5.swift:15:19: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right)\n\
    \                  ^\n/tmp/tmp76__y4s5.swift:15:34: error: missing argument label\
    \ 'l:' in call\n    return median(left) + median(right)\n                    \
    \             ^\n                                 l: \n/tmp/tmp76__y4s5.swift:15:34:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return median(left) + median(right)\n                         \
    \        ^\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n        return\
    \ Double(0)\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n    let\
    \ right = l[mid..<n]\n    return median(left) + median(right) / 2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdhufvcoa.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpdhufvcoa.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpdhufvcoa.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpdhufvcoa.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    } else {\n\
    \        let mid = Double(l[n/2-1] + l[n/2])/2\n        return mid\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp12sc8_e1.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let left = l[0..<mid]\n    let right\
    \ = l[mid..<n]\n    let midValue = median(left)\n    let rightValue = median(right)\n\
    \    if midValue < rightValue {\n        return midValue\n    } else {\n     \
    \   return rightValue\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe1xvdo3e.swift:15:27: error: missing argument label 'l:' in call\n\
    \    let midValue = median(left)\n                          ^\n              \
    \            l: \n/tmp/tmpe1xvdo3e.swift:15:27: error: cannot convert value of\
    \ type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let midValue =\
    \ median(left)\n                          ^\n/tmp/tmpe1xvdo3e.swift:16:29: error:\
    \ missing argument label 'l:' in call\n    let rightValue = median(right)\n  \
    \                          ^\n                            l: \n/tmp/tmpe1xvdo3e.swift:16:29:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let rightValue = median(right)\n                            ^\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpieue0nyh.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return\
    \ sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe2b8p9dk.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpe2b8p9dk.swift:12:43: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                                          \
    \  )\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopd5f943.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpopd5f943.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptjrqbur4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmptjrqbur4.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    var m1 = l[mid]\n\
    \    var m2 = l[mid-1]\n    return Double(m1) + Double(m2)/2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe1dvs18r.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted { $0 < $1 }.mid\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp65ong1z4.swift:8:33: error: value of type '[Int]' has no member\
    \ 'mid'\n    return l.sorted { $0 < $1 }.mid\n           ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let left = l[mid..<n]\n    let right\
    \ = l[..<mid]\n    return Double(left.reduce(0.0, +) / Double(left.count) + right.reduce(0.0,\
    \ +) / Double(right.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf3y9ze13.swift:15:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return Double(left.reduce(0.0, +) / Double(left.count)\
    \ + right.reduce(0.0, +) / Double(right.count))\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824588
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let mid = count / 2\n    let left\
    \ = l[..mid]\n    let right = l[mid..<count]\n    return median(left) + median(right)\
    \ / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpztfpr7gg.swift:13:18: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    let left = l[..mid]\n                 ^~\n        \
    \         ...\n/tmp/tmpztfpr7gg.swift:15:19: error: missing argument label 'l:'\
    \ in call\n    return median(left) + median(right) / 2.0\n                  ^\n\
    \                  l: \n/tmp/tmpztfpr7gg.swift:15:34: error: missing argument\
    \ label 'l:' in call\n    return median(left) + median(right) / 2.0\n        \
    \                         ^\n                                 l: \n/tmp/tmpztfpr7gg.swift:15:34:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return median(left) + median(right) / 2.0\n                   \
    \              ^\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplb7usz_u.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmplb7usz_u.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    if l.count % 2 ==\
    \ 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1] + l[mid])/2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk74hf_7x.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpk74hf_7x.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[mid]\n\
    \               ~^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    var mid = Double(l.count\
    \ / 2)\n    if l.count % 2 == 1 {\n        return l[mid]\n    }\n    var low =\
    \ mid\n    var high = mid\n    while low < high {\n        if l[low] > l[high]\
    \ {\n            low++\n        } else {\n            high--\n        }\n    }\n\
    \    return l[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr2ea9hub.swift:11:17: error: no exact matches in call to subscript\
    \ \n        return l[mid]\n                ^\n/tmp/tmpr2ea9hub.swift:11:17: note:\
    \ found candidate with type '(Int) -> @lvalue Int'\n        return l[mid]\n  \
    \              ^\n/tmp/tmpr2ea9hub.swift:11:17: note: found candidate with type\
    \ '(Range<Int>) -> @lvalue ArraySlice<Int>'\n        return l[mid]\n         \
    \       ^\n/tmp/tmpr2ea9hub.swift:11:17: note: found candidate with type '((UnboundedRange_)\
    \ -> ()) -> ArraySlice<Int>'\n        return l[mid]\n                ^\n/tmp/tmpr2ea9hub.swift:11:17:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> @lvalue ArraySlice<Int>'\n\
    \        return l[mid]\n                ^\n/tmp/tmpr2ea9hub.swift:11:17: error:\
    \ no 'subscript' candidates produce the expected contextual result type 'Double'\n\
    \        return l[mid]\n                ^\nSwift.Array:16:23: note: 'subscript(_:)'\
    \ produces '@lvalue Int', not the expected contextual result type 'Double'\n \
    \   @inlinable public subscript(index: Int) -> Element { get set }\n         \
    \             ^\nSwift.Array:17:23: note: 'subscript(_:)' produces '@lvalue ArraySlice<Int>',\
    \ not the expected contextual result type 'Double'\n    @inlinable public subscript(bounds:\
    \ Range<Int>) -> ArraySlice<Element> { get set }\n                      ^\nSwift.Collection:3:23:\
    \ note: 'subscript(_:)' produces 'ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get }\n                      ^\nSwift.MutableCollection:3:23:\
    \ note: 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type 'Double'\n    @inlinable public subscript(x: (UnboundedRange_) ->\
    \ ()) -> Self.SubSequence { get set }\n                      ^\n/tmp/tmpr2ea9hub.swift:16:23:\
    \ error: cannot convert value of type 'Double' to expected argument type 'Int'\n\
    \        if l[low] > l[high] {\n                      ^\n                    \
    \  Int()\n/tmp/tmpr2ea9hub.swift:16:14: error: cannot convert value of type 'Double'\
    \ to expec"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count\
    \ - 1) / 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9ju4079a.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp9ju4079a.swift:12:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let count = l.count\n    if count == 0 {\n\
    \        return Double.nan\n    }\n    let sorted = l.sorted()\n    if count %\
    \ 2 == 0 {\n        return sorted[(count - 1) / 2]\n    }\n    let mid = count\
    \ / 2\n    return sorted[mid] + sorted[mid - 1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmppdoxre7f.swift:14:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(count - 1) / 2]\n\
    \               ~~~~~~^~~~~~~~~~~~~~~~~\n               Double(              \
    \  )\n/tmp/tmppdoxre7f.swift:17:24: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[mid] + sorted[mid - 1]\n\
    \           ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n           Double(                \
    \      )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe6k23hk6.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe6k23hk6.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double(l.first!)\n    }\n    var m = Double(l.first!)\n    for x in l.dropFirst()\
    \ {\n        if x < m {\n            m = x\n        }\n    }\n    return m\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbd2e3l_g.swift:14:14: error: binary operator '<' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        if x < m {\n           ~ ^ ~\n\
    /tmp/tmpbd2e3l_g.swift:14:14: note: overloads for '<' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if x < m {\n             ^\n/tmp/tmpbd2e3l_g.swift:15:17:\
    \ error: cannot assign value of type 'Int' to type 'Double'\n            m = x\n\
    \                ^\n                Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    var a = l[mid]\n \
    \   var b = l[mid-1]\n    if a < b {\n        return b\n    }\n    return a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1ccuoqyf.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmp1ccuoqyf.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return b\n\
    \               ^\n               Double( )\n/tmp/tmp1ccuoqyf.swift:18:12: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return a\n           ^\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfu8zmgw5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpfu8zmgw5.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    var a = l[mid]\n \
    \   var b = l[mid-1]\n    if a < b {\n        return b\n    }\n    return a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1ccuoqyf.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmp1ccuoqyf.swift:16:16: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return b\n\
    \               ^\n               Double( )\n/tmp/tmp1ccuoqyf.swift:18:12: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return a\n           ^\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l[mid])\
    \ + Double(l[mid - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk6elvqth.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let mid = count / 2\n    let left\
    \ = l[mid..<count]\n    let right = l[1..<mid]\n    return median(left) + median(right)\
    \ / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkp3hw1jh.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpkp3hw1jh.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpkp3hw1jh.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpkp3hw1jh.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp5z113md.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpp5z113md.swift:13:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    } else {\n  \
    \      return (sorted[(sorted.count - 1) / 2] - sorted[(sorted.count - 1) / 2\
    \ - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk_bj02mq.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpk_bj02mq.swift:12:86: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (sorted[(sorted.count\
    \ - 1) / 2] - sorted[(sorted.count - 1) / 2 - 1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \               Double(                                                      \
    \            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpieue0nyh.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    if n % 2 == 0 {\n        return\
    \ Double(l.sorted()[mid])\n    } else {\n        let a = Double(l.sorted()[mid])\n\
    \        let b = Double(l.sorted()[mid+1])\n        return (a+b)/2\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpy0_810sr/tmpy0_810sr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba070d3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba070a35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba070a35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba070a347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy0_810sr                        0x0000559f68c7f551 <unavailable> + 5457

    5    libc.so.6                          0x00002ba070f2a460 __libc_start_main +
    245

    6    tmpy0_810sr                        0x0000559f68c7f199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 0 {\n        return Double(l.last!) / Double(l.count)\n    }\n    return Double(l.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpbpmydhsl/tmpbpmydhsl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f2ba70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f2b767b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f2b767988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f2b7667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpmydhsl                        0x000055b275ca0661 <unavailable> + 5729

    5    libc.so.6                          0x00002b5f2bc5c460 __libc_start_main +
    245

    6    tmpbpmydhsl                        0x000055b275ca02a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqmq0tk3_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqmq0tk3_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopd5f943.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpopd5f943.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sortedArray = l.sorted()\n    if sortedArray.count\
    \ % 2 == 0 {\n        return sortedArray[sortedArray.count / 2]\n    } else {\n\
    \        let middle = sortedArray.count / 2\n        let leftMedian = median(sortedArray[0..<middle])\n\
    \        let rightMedian = median(sortedArray[middle..<sortedArray.count])\n \
    \       return Double(leftMedian) + Double(rightMedian) / 2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpx2e05fhv.swift:10:27: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sortedArray[sortedArray.count\
    \ / 2]\n               ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                           )\n/tmp/tmpx2e05fhv.swift:13:33: error: missing argument\
    \ label 'l:' in call\n        let leftMedian = median(sortedArray[0..<middle])\n\
    \                                ^\n                                l: \n/tmp/tmpx2e05fhv.swift:13:44:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        let leftMedian = median(sortedArray[0..<middle])\n        \
    \                                   ^\n/tmp/tmpx2e05fhv.swift:14:34: error: missing\
    \ argument label 'l:' in call\n        let rightMedian = median(sortedArray[middle..<sortedArray.count])\n\
    \                                 ^\n                                 l: \n/tmp/tmpx2e05fhv.swift:14:45:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n        let rightMedian = median(sortedArray[middle..<sortedArray.count])\n\
    \                                            ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpluphw7rz.swift:12:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpluphw7rz.swift:14:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfu8zmgw5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpfu8zmgw5.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcbvo768k.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\
    \ else {\n        return Double(l.first!)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp68sfiex0/tmp68sfiex0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b123eb80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b123e877b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b123e877988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b123e8767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68sfiex0                        0x00005630c244d661 <unavailable> + 5729

    5    libc.so.6                          0x00002b123ed6c460 __libc_start_main +
    245

    6    tmp68sfiex0                        0x00005630c244d2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return Double(l.sorted().reduce(0.0, { $0\
    \ + $1.doubleValue / 2.0 }))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0nxg2bu2.swift:8:52: error: value of type 'Int' has no member 'doubleValue'\n\
    \    return Double(l.sorted().reduce(0.0, { $0 + $1.doubleValue / 2.0 }))\n  \
    \                                              ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe6k23hk6.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe6k23hk6.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopd5f943.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpopd5f943.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe6k23hk6.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe6k23hk6.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return sorted[0]\n    }\n    return sorted[(sorted.count - 1)\
    \ / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpk_n2ekt5.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[0]\n             \
    \  ~~~~~~^~~\n               Double(  )\n/tmp/tmpk_n2ekt5.swift:12:18: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return sorted[(sorted.count - 1) / 2]\n           ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                       )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let count = l.count\n    if count == 0 {\n\
    \        return Double.nan\n    }\n    if count == 1 {\n        return l[0]\n\
    \    }\n    if count == 2 {\n        return 0.5 * (l[0] + l[1])\n    }\n    if\
    \ count < 3 {\n        return Double.nan\n    }\n    let mid = count / 2\n   \
    \ let left = median(l[0..<mid])\n    let right = median(l[mid..<count])\n    return\
    \ 0.5 * (left + right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpp9l__8vl.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpp9l__8vl.swift:16:28: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Double'\n        return 0.5 *\
    \ (l[0] + l[1])\n                           ^\n                     Double(  \
    \    )\n/tmp/tmpp9l__8vl.swift:22:23: error: missing argument label 'l:' in call\n\
    \    let left = median(l[0..<mid])\n                      ^\n                \
    \      l: \n/tmp/tmpp9l__8vl.swift:22:24: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    let left = median(l[0..<mid])\n\
    \                       ^\n/tmp/tmpp9l__8vl.swift:23:24: error: missing argument\
    \ label 'l:' in call\n    let right = median(l[mid..<count])\n               \
    \        ^\n                       l: \n/tmp/tmpp9l__8vl.swift:23:25: error: cannot\
    \ convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    let right = median(l[mid..<count])\n                        ^\n/tmp/tmpp9l__8vl.swift:24:24:\
    \ error: cannot convert value of type 'String' to expected argument type 'Double'\n\
    \    return 0.5 * (left + right)\n                       ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpirlsnzva.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpirlsnzva.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let left = l[0..<mid]\n    let right\
    \ = l[mid..<n]\n    return median(left) + median(right) / 2.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqoa93vhk.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpqoa93vhk.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpqoa93vhk.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpqoa93vhk.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return 0\n    }\n    let mid = sorted.count / 2\n    return sorted[mid]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7bz1pme8.swift:13:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[mid]\n           ~~~~~~^~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted { $0 < $1 }.last!\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprtlga519.swift:8:37: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.sorted { $0 < $1 }.last!\n\
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~^\n           Double(                   )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count - 1)\n    }\n\
    \    return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpieue0nyh.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfu8zmgw5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpfu8zmgw5.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let middle = count / 2\n    let left\
    \ = l.prefix(middle)\n    let right = l.suffix(middle)\n    return median(left)\
    \ + median(right) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqf61vma5.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpqf61vma5.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpqf61vma5.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpqf61vma5.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmparswlu4v.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopd5f943.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpopd5f943.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm055d517.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpm055d517.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return l[(l.count\
    \ - 1) / 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9ju4079a.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp9ju4079a.swift:12:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdj8j7ujs.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdj8j7ujs.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return Double.nan\n    }\n    let mid = sorted.count / 2\n    return\
    \ sorted[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgx43hi4g.swift:13:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[mid]\n           ~~~~~~^~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2])\n    }\n   \
    \ return Double(l[l.count / 2])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpkaawe6dm/tmpkaawe6dm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4af0e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4aedddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4aeddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4aeddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkaawe6dm                        0x000055fad9e555ed <unavailable> + 5613

    5    libc.so.6                          0x00002af4af2d2460 __libc_start_main +
    245

    6    tmpkaawe6dm                        0x000055fad9e55149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[l.count / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpirlsnzva.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpirlsnzva.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[l.count / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                  )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdj8j7ujs.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdj8j7ujs.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ < 2 {\n        return sorted[0]\n    }\n    let mid = sorted.count / 2\n   \
    \ return sorted[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmph_yabd_j.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[0]\n             \
    \  ~~~~~~^~~\n               Double(  )\n/tmp/tmph_yabd_j.swift:13:18: error:\
    \ cannot convert return expression of type 'Int' to return type 'Double'\n   \
    \ return sorted[mid]\n           ~~~~~~^~~~~\n           Double(    )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ l[(l.count - 1) / 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsw_9uzjh.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsw_9uzjh.swift:13:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdj8j7ujs.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdj8j7ujs.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return l.first!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvu1jkhje.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm055d517.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpm055d517.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptjrqbur4.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmptjrqbur4.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvk8rw56q.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvk8rw56q.swift:13:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    var middle = count / 2\n    var left\
    \ = l.subarray(0, middle)\n    var right = l.subarray(middle, count)\n    return\
    \ median(left) + median(right) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvbc1tius.swift:13:18: error: value of type '[Int]' has no member\
    \ 'subarray'\n    var left = l.subarray(0, middle)\n               ~ ^~~~~~~~\n\
    /tmp/tmpvbc1tius.swift:14:19: error: value of type '[Int]' has no member 'subarray'\n\
    \    var right = l.subarray(middle, count)\n                ~ ^~~~~~~~\n/tmp/tmpvbc1tius.swift:15:19:\
    \ error: missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                  ^\n                  l: \n/tmp/tmpvbc1tius.swift:15:34:\
    \ error: missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 0 {\n        return Double(l.count / 2)\n    }\n    return Double(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp0fqbzope/tmp0fqbzope.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad50c0ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad50bdf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad50bdf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad50bdf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fqbzope                        0x0000561f05334531 <unavailable> + 5425

    5    libc.so.6                          0x00002ad50c2eb460 __libc_start_main +
    245

    6    tmp0fqbzope                        0x0000561f05334179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpev7qsdxq.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n        return\
    \ l[0]\n    }\n    var l = l.sorted()\n    if n % 2 == 0 {\n        return l[n\
    \ / 2]\n    }\n    return l[(n - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpobv2r7sx.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpobv2r7sx.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[n\
    \ / 2]\n               ~^~~~~~~\n               Double( )\n/tmp/tmpobv2r7sx.swift:16:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(n - 1) / 2]\n           ~^~~~~~~~~~~~~\n           Double(    \
    \   )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let count = l.count\n    if count < 2 {\n\
    \        return Double(l.first!)\n    }\n    let middle = count / 2\n    let left\
    \ = l[..middle]\n    let right = l[middle..<count]\n    return median(left) +\
    \ median(right) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphklsoi92.swift:13:18: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    let left = l[..middle]\n                 ^~\n     \
    \            ...\n/tmp/tmphklsoi92.swift:15:19: error: missing argument label\
    \ 'l:' in call\n    return median(left) + median(right) / 2.0\n              \
    \    ^\n                  l: \n/tmp/tmphklsoi92.swift:15:34: error: missing argument\
    \ label 'l:' in call\n    return median(left) + median(right) / 2.0\n        \
    \                         ^\n                                 l: \n/tmp/tmphklsoi92.swift:15:34:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return median(left) + median(right) / 2.0\n                   \
    \              ^\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 2 {\n        return\
    \ l[0]\n    }\n    var m = Double(0)\n    var m2 = Double(0)\n    for x in l {\n\
    \        m2 = m * m\n        if m2 < x {\n            m = x\n        }\n    }\n\
    \    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0i8kw2_g.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmp0i8kw2_g.swift:16:15: error: binary operator\
    \ '<' cannot be applied to operands of type 'Double' and 'Int'\n        if m2\
    \ < x {\n           ~~ ^ ~\n/tmp/tmp0i8kw2_g.swift:16:15: note: overloads for\
    \ '<' exist with these partially matching parameter lists: (Int, Int)\n      \
    \  if m2 < x {\n              ^\n/tmp/tmp0i8kw2_g.swift:17:17: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n            m = x\n                ^\n\
    \                Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpopd5f943.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpopd5f943.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[0] + l[l.count - 1]) / 2.0\n    }\n    return l[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9x8a3c0a.swift:11:22: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2.0\n                     ^\n               Double(                )\n/tmp/tmp9x8a3c0a.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe6k23hk6.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe6k23hk6.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp42m06u0k.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp42m06u0k.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824552
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    var m = Double.nan\n    var m2 = Double.nan\n    var\
    \ m3 = Double.nan\n    var m4 = Double.nan\n    var m5 = Double.nan\n    var m6\
    \ = Double.nan\n    var m7 = Double.nan\n    var m8 = Double.nan\n    var m9 =\
    \ Double.nan\n    var m10 = Double.nan\n    var m11 = Double.nan\n    var m12\
    \ = Double.nan\n    var m13 = Double.nan\n    var m14 = Double.nan\n    var m15\
    \ = Double.nan\n    var m16 = Double.nan\n    var m17 = Double.nan\n    var m18\
    \ = Double.nan\n    var m19 = Double.nan\n    var m20 = Double.nan\n    var m21\
    \ = Double.nan\n    var m22 = Double.nan\n    var m23 = Double.nan\n    var m24\
    \ = Double.nan\n    var m25 = Double.nan\n    var m26 = Double.nan\n    var m27\
    \ = Double.nan\n    var m28 = Double.nan\n    var m29 = Double.nan\n    var m30\
    \ = Double.nan\n    var m31 = Double.nan\n    var m32 = Double.nan\n    var m33\
    \ = Double.nan\n    var m34 = Double.nan\n    var m35 = Double.nan\n    var m36\
    \ = Double.nan\n    var m37 = Double.nan\n    var m38 = Double.nan\n    var m39\
    \ = Double.nan\n    var m40 = Double.nan\n    var m41 = Double.nan\n    var m42\
    \ = Double.nan\n    var m43 = Double.nan\n    var m44 = Double.nan\n    var m45\
    \ = Double.nan\n    var m46 = Double.nan\n    var m47 = Double.nan\n    var m48\
    \ = Double.nan\n    var m49 = Double.nan\n    var m50 = Double.nan\n    var m51\
    \ = Double.nan\n    var m52 = Double.nan\n    var m53 = Double.nan\n    var m54\
    \ = Double.nan\n    var m55 = Double.nan\n    var m56 = Double.nan\n    var m57\
    \ = Double.nan\n    var m58 = Double.nan\n    var m59 = Double.nan\n    var m60\
    \ = Double.nan\n    var m61 = Double.nan\n    var m62 = Double.nan\n    var m63\
    \ = Double.nan\n    var m64 = Double.nan\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpw_66ff57.swift:8:9: warning: variable 'n' was never mutated; consider\
    \ changing to 'let' constant\n    var n = l.count\n    ~~~ ^\n    let\n/tmp/tmpw_66ff57.swift:12:9:\
    \ warning: initialization of variable 'm' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var m = Double.nan\n    ~~~~^\n    _\n\
    /tmp/tmpw_66ff57.swift:13:9: warning: initialization of variable 'm2' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var m2 =\
    \ Double.nan\n    ~~~~^~\n    _\n/tmp/tmpw_66ff57.swift:14:9: warning: initialization\
    \ of variable 'm3' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var m3 = Double.nan\n    ~~~~^~\n    _\n/tmp/tmpw_66ff57.swift:15:9:\
    \ warning: initialization of variable 'm4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var m4 = Double.nan\n    ~~~~^~\n\
    \    _\n/tmp/tmpw_66ff57.swift:16:9: warning: initialization of variable 'm5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var m5 = Double.nan\n    ~~~~^~\n    _\n/tmp/tmpw_66ff57.swift:17:9: warning:\
    \ initialization of variable 'm6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var m6 = Double.nan\n    ~~~~^~\n    _\n/tmp/tmpw_66ff57.swift:18:9:\
    \ warning: initialization of variable 'm7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var m7 = Double.nan\n    ~~~~^~\n\
    \    _\n/tmp/tmpw_66ff57.swift:19:9: warning: initialization of variable 'm8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var m8 = Double.nan\n    ~~~~^~\n    _\n/tmp/tmpw_66ff57.swift:20:9: warning:\
    \ initialization of variable 'm9' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var m9 = Double.nan\n    ~~~~^~\n    _\n/tmp/tmpw_66ff57.swift:21:9:\
    \ warning: initialization of variable 'm10' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var m10 = Double.nan\n    ~~~~^~~\n\
    \    _\n/tmp/tmpw_66ff57.swift:22:9: warning: initialization of variable "
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return 0\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp0531_2qf.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return Double.nan\n    }\n    let mid = sorted.count / 2\n    return\
    \ sorted[mid]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgx43hi4g.swift:13:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[mid]\n           ~~~~~~^~~~~\n\
    \           Double(    )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    if l.count % 2 ==\
    \ 0 {\n        return l[mid]\n    }\n    return Double(l[mid-1] + l[mid])/2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkgj_hcbt.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpkgj_hcbt.swift:14:17: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return l[mid]\n\
    \               ~^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    let mid = n / 2\n   \
    \ if n % 2 == 1 {\n        return l[mid]\n    } else {\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdsm512ao.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpdsm512ao.swift:13:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    var mid = l.count / 2\n\
    \    return Double(l.sorted()[mid]) + Double(l.sorted()[mid - 1])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcqmflzwf.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpluphw7rz.swift:12:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpluphw7rz.swift:14:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for i in 1..n {\n        if l[i] < low\
    \ {\n            low = l[i]\n        }\n        if l[i] > high {\n           \
    \ high = l[i]\n        }\n    }\n    return Double(low+high)/Double(n)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6fpp5619.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp6fpp5619.swift:17:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 1..n {\n              ^~\n\
    \              ...\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp42m06u0k.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp42m06u0k.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824552
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return Double(0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpczw0n_t2.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return l[mid]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpfu8zmgw5.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n/tmp/tmpfu8zmgw5.swift:13:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[mid]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjdcz8xty.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpjdcz8xty.swift:13:38:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \        return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n      \
    \                               ^\n               Double(                    \
    \                    )\n/tmp/tmpjdcz8xty.swift:13:18: error: cannot convert value\
    \ of type 'Int' to expected argument type 'Double'\n        return (l[(l.count\
    \ - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n                 ^\n            \
    \    Double(             )\n/tmp/tmpjdcz8xty.swift:13:61: error: value of type\
    \ 'Int' has no member '0'\n        return (l[(l.count - 1) / 2] - l[(l.count -\
    \ 2) / 2].0) / 2.0\n                                       ~~~~~~~~~~~~~~~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659824554
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n        return\
    \ Double(l.first!)\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n   \
    \ let right = l[mid..<n]\n    return median(left) + median(right) / 2.0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpatavpmu0.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmpatavpmu0.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmpatavpmu0.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmpatavpmu0.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return Double(l[l.count / 2 - 1] + l[l.count / 2]) / 2.0\n    }\n\
    \    return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpfsfossq4/tmpfsfossq4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d4f407c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d4f0feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d4f0fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d4f0fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsfossq4                        0x0000563356cc4501 <unavailable> + 5377

    5    libc.so.6                          0x00002b7d4f5f3460 __libc_start_main +
    245

    6    tmpfsfossq4                        0x0000563356cc4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824547
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcbvo768k.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    } else {\n      \
    \  return (l[mid] + l[mid-1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpluphw7rz.swift:12:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpluphw7rz.swift:14:36: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n        return (l[mid]\
    \ + l[mid-1]) / 2\n               ~~~~~~~~~~~~~~~~~~~~^~~\n               Double(\
    \                )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let left = l[..<mid]\n    let right\
    \ = l[mid..<n]\n    return median(left) + median(right) / 2.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5klfimns.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmp5klfimns.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmp5klfimns.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmp5klfimns.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcbvo768k.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ l[(l.count - 1) / 2] + l[l.count / 2]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpsw_9uzjh.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpsw_9uzjh.swift:13:37:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return l[(l.count - 1) / 2] + l[l.count / 2]\n               ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n\
    \               Double(                              )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[(l.count - 1) / 2] + l[l.count / 2]) / 2.0\n    }\n \
    \   return l[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_axy72v5.swift:11:38: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n        return (l[(l.count - 1) / 2] + l[l.count\
    \ / 2]) / 2.0\n                                     ^\n               Double(\
    \                                )\n/tmp/tmp_axy72v5.swift:13:13: error: cannot\
    \ convert return expression of type 'Int' to return type 'Double'\n    return\
    \ l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqmq0tk3_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let leftMedian = median(l[0..<mid])\n\
    \    let rightMedian = median(l[mid..<n])\n    return Double(leftMedian) + Double(rightMedian)\
    \ / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmploda4kax.swift:13:29: error: missing argument label 'l:' in call\n\
    \    let leftMedian = median(l[0..<mid])\n                            ^\n    \
    \                        l: \n/tmp/tmploda4kax.swift:13:30: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let leftMedian\
    \ = median(l[0..<mid])\n                             ^\n/tmp/tmploda4kax.swift:14:30:\
    \ error: missing argument label 'l:' in call\n    let rightMedian = median(l[mid..<n])\n\
    \                             ^\n                             l: \n/tmp/tmploda4kax.swift:14:31:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    let rightMedian = median(l[mid..<n])\n                        \
    \      ^\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1) / 2]) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm4zg02hv.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpm4zg02hv.swift:12:85:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] - l[(l.count - 1) / 2 - 1] + l[(l.count - 1)\
    \ / 2]) / 2\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \           Double(                                                          \
    \           )\n"
  stdout: ''
  timestamp: 1659824567
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2l2wezla.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp2l2wezla.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824552
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 0 {\n        return Double(l.count / 2)\n    }\n    return Double(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp0fqbzope/tmp0fqbzope.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad50c0ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad50bdf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad50bdf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad50bdf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fqbzope                        0x0000561f05334531 <unavailable> + 5425

    5    libc.so.6                          0x00002ad50c2eb460 __libc_start_main +
    245

    6    tmp0fqbzope                        0x0000561f05334179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] - l[(l.count - 2) / 2].0) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkevyhknw.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpkevyhknw.swift:12:14:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Double'\n\
    \    return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n          \
    \   ^\n            Double(             )\n/tmp/tmpkevyhknw.swift:12:34: error:\
    \ cannot convert value of type 'Int' to expected argument type 'Double'\n    return\
    \ (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n                    \
    \             ^\n           Double(                                        )\n\
    /tmp/tmpkevyhknw.swift:12:57: error: value of type 'Int' has no member '0'\n \
    \   return (l[(l.count - 1) / 2] - l[(l.count - 2) / 2].0) / 2.0\n           \
    \                        ~~~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1659824555
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.count / 2)\n    } else {\n        return Double(l.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpdn7sx2q7/tmpdn7sx2q7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f491b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f48eadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f48ead988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f48eac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn7sx2q7                        0x000055d197546531 <unavailable> + 5425

    5    libc.so.6                          0x00002b5f493a2460 __libc_start_main +
    245

    6    tmpdn7sx2q7                        0x000055d197546179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824547
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdj8j7ujs.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpdj8j7ujs.swift:12:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.count / 2)\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcbvo768k.swift:13:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n     \
    \      Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let pivot = l[mid]\n    var left\
    \ = l[0..<mid]\n    var right = l[mid+1..<n]\n    var m1 = median(left)\n    var\
    \ m2 = median(right)\n    if m1 < m2 {\n        return pivot\n    } else {\n \
    \       return m1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgvo5ur96.swift:16:21: error: missing argument label 'l:' in call\n\
    \    var m1 = median(left)\n                    ^\n                    l: \n/tmp/tmpgvo5ur96.swift:16:21:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    var m1 = median(left)\n                    ^\n/tmp/tmpgvo5ur96.swift:17:21:\
    \ error: missing argument label 'l:' in call\n    var m2 = median(right)\n   \
    \                 ^\n                    l: \n/tmp/tmpgvo5ur96.swift:17:21: error:\
    \ cannot convert value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n\
    \    var m2 = median(right)\n                    ^\n/tmp/tmpgvo5ur96.swift:19:16:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return pivot\n               ^~~~~\n               Double( )\n"
  stdout: ''
  timestamp: 1659824547
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[(sorted.count - 1) / 2])\n    } else\
    \ {\n        return Double(sorted[(sorted.count - 1) / 2 - 1] + sorted[(sorted.count\
    \ - 1) / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpm2vhghii/tmpm2vhghii.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b5af9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b5ac96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b5ac96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b5ac957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2vhghii                        0x000055b85d22f501 <unavailable> + 5377

    5    libc.so.6                          0x00002b5b5b18b460 __libc_start_main +
    245

    6    tmpm2vhghii                        0x000055b85d22f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824548
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count <= 1 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmparswlu4v.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count)\n    }\n  \
    \  return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmr3l7r97.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824548
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    var mid = l.count\
    \ / 2\n    if l.count % 2 == 0 {\n        return l[mid]\n    }\n    var low =\
    \ mid\n    var high = mid\n    for _ in 0..<(l.count - 1) {\n        if l[low]\
    \ > l[high] {\n            high = low\n        } else {\n            low = high\n\
    \        }\n    }\n    return l[low]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp9lmry323.swift:12:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[mid]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmp9lmry323.swift:23:13: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return l[low]\n\
    \           ~^~~~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824548
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    let mid = n / 2\n    let left = l[0..<mid]\n    let right = l[mid..<n]\n\
    \    return Double(left.reduce(0.0, +) / Double(left.count + right.count))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpslzsoi7r.swift:15:36: error: cannot convert value of type '(Double)\
    \ -> Double' to expected argument type '(Double, Int) throws -> Double'\n    return\
    \ Double(left.reduce(0.0, +) / Double(left.count + right.count))\n           \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824555
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l.sorted()[n / 2]\n \
    \   }\n    let mid = n / 2\n    let left = l.sorted()[..mid]\n    let right =\
    \ l.sorted()[mid + 1..<n]\n    return Double(left + right).sorted()[mid]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpj9qa100x.swift:13:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l.sorted()[n / 2]\n     \
    \          ~~~~~~~~~~^~~~~~~\n               Double(          )\n/tmp/tmpj9qa100x.swift:16:27:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n    let left\
    \ = l.sorted()[..mid]\n                          ^~\n                        \
    \  ...\n/tmp/tmpj9qa100x.swift:18:33: error: reference to member 'sorted' cannot\
    \ be resolved without a contextual type\n    return Double(left + right).sorted()[mid]\n\
    \                                ^\n"
  stdout: ''
  timestamp: 1659824548
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted { $0 < $1 }.mid\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp65ong1z4.swift:8:33: error: value of type '[Int]' has no member\
    \ 'mid'\n    return l.sorted { $0 < $1 }.mid\n           ~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return l.sorted().reduce(0.0, { $0 + Double($1)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) ==\
    \ 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5])\
    \ == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)"
  status: Exception
  stderr: 'tmp4i7q50qy/tmp4i7q50qy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee90649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee90340b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee90340988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee9033f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4i7q50qy                        0x000055f8945af471 <unavailable> + 5233

    5    libc.so.6                          0x00002aee90835460 __libc_start_main +
    245

    6    tmp4i7q50qy                        0x000055f8945af0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe6k23hk6.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe6k23hk6.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count < 2 {\n\
    \        return l[0]\n    }\n    var mid = l.count / 2\n    return Double(l.sorted()[mid])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqmq0tk3_.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[0]\n               ~^~~\n\
    \               Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    let mid = n / 2\n    let low = l[mid]\n    let high =\
    \ l[n - 1]\n    let midVal = Double(low) + Double(high) / 2\n    return midVal\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpi4i_mn6x/tmpi4i_mn6x.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f7e5b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f7e2b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f7e2b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f7e2af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4i_mn6x                        0x000055eae98274b1 <unavailable> + 5297

    5    libc.so.6                          0x00002b5f7e7a5460 __libc_start_main +
    245

    6    tmpi4i_mn6x                        0x000055eae98270f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659824549
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l[l.count / 2])\n    }\n    return Double(0)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpmyaz1zul/tmpmyaz1zul.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07519d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07516cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07516ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07516c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmyaz1zul                        0x000055cac488e67d <unavailable> + 5757

    5    libc.so.6                          0x00002b0751bbf460 __libc_start_main +
    245

    6    tmpmyaz1zul                        0x000055cac488e1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for i in 1..n {\n        if l[i] < low\
    \ {\n            low = l[i]\n        }\n        if l[i] > high {\n           \
    \ high = l[i]\n        }\n    }\n    return Double(low) + Double(high)/2.0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbrs_ucqr.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpbrs_ucqr.swift:17:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 1..n {\n              ^~\n\
    \              ...\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvk8rw56q.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpvk8rw56q.swift:13:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var n = l.count\n    if n < 1 {\n        return\
    \ Double.nan\n    }\n    if n % 2 == 0 {\n        return l[n/2]\n    }\n    var\
    \ low = l[0]\n    var high = l[0]\n    for i in 1..n {\n        if l[i] < low\
    \ {\n            low = l[i]\n        }\n        if l[i] > high {\n           \
    \ high = l[i]\n        }\n    }\n    return Double(low+high)/2.0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqhcvx2ha.swift:13:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[n/2]\n               ~^~~~~\n\
    \               Double( )\n/tmp/tmpqhcvx2ha.swift:17:15: error: cannot find operator\
    \ '..' in scope; did you mean '...'?\n    for i in 1..n {\n              ^~\n\
    \              ...\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 1 {\n        return\
    \ 0\n    }\n    let mid = n / 2\n    let left = l[0 ..< mid]\n    let right =\
    \ l[mid..<n]\n    return median(left) + median(right) / 2.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmptm4u2i1w.swift:15:19: error: missing argument label 'l:' in call\n\
    \    return median(left) + median(right) / 2.0\n                  ^\n        \
    \          l: \n/tmp/tmptm4u2i1w.swift:15:19: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return median(left)\
    \ + median(right) / 2.0\n                  ^\n/tmp/tmptm4u2i1w.swift:15:34: error:\
    \ missing argument label 'l:' in call\n    return median(left) + median(right)\
    \ / 2.0\n                                 ^\n                                \
    \ l: \n/tmp/tmptm4u2i1w.swift:15:34: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return median(left) + median(right) /\
    \ 2.0\n                                 ^\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm055d517.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpm055d517.swift:12:33:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                        )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2l2wezla.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp2l2wezla.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824552
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count\
    \ - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpxp5e1pf6.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpxp5e1pf6.swift:13:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    return l[(l.count\
    \ - 1) / 2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp5xqxzmi2.swift:10:13: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l[(l.count - 1) / 2]\n      \
    \     ~^~~~~~~~~~~~~~~~~~~\n           Double(             )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / 2.0\n    }\n    return l.first!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvu1jkhje.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.isEmpty\
    \ {\n        return Double.nan\n    }\n    let middle = sorted.count / 2\n   \
    \ return sorted[middle]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpshayy57v.swift:13:18: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return sorted[middle]\n           ~~~~~~^~~~~~~~\n\
    \           Double(       )\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return Double(l.last! + l.first!) / Double(l.count)\n    }\n  \
    \  return l.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmr3l7r97.swift:13:19: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return l.first!\n           ~~~~~~~^\n\
    \           Double( )\n"
  stdout: ''
  timestamp: 1659824548
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l.sorted()\n    if l.count % 2 ==\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return (l[(l.count - 1)\
    \ / 2] + l[(l.count - 1) / 2 - 1]) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp42m06u0k.swift:10:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmp42m06u0k.swift:12:62:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n          \
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n           Double(  \
    \                                            )\n"
  stdout: ''
  timestamp: 1659824552
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count %\
    \ 2 == 0 {\n        return l[(l.count - 1) / 2]\n    } else {\n        return\
    \ (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbzfm1sbo.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpbzfm1sbo.swift:13:66:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return (l[(l.count - 1) / 2] + l[(l.count - 1) / 2 - 1]) / 2\n      \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n            \
    \   Double(                                              )\n"
  stdout: ''
  timestamp: 1659824550
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return (l[0] + l[l.count - 1]) / 2\n    }\n    return l[0]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe6k23hk6.swift:11:40: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return (l[0] + l[l.count - 1]) /\
    \ 2\n               ~~~~~~~~~~~~~~~~~~~~~~~~^~~\n               Double(      \
    \              )\n/tmp/tmpe6k23hk6.swift:13:13: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n    return l[0]\n           ~^~~\n  \
    \         Double( )\n"
  stdout: ''
  timestamp: 1659824546
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    var l = l\n    l.sort()\n    if l.count >\
    \ 1 {\n        return l[(l.count - 1) / 2]\n    }\n    return l[0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpie5q6dez.swift:11:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return l[(l.count - 1) / 2]\n  \
    \             ~^~~~~~~~~~~~~~~~~~~\n               Double(             )\n/tmp/tmpie5q6dez.swift:13:13:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \    return l[0]\n           ~^~~\n           Double( )\n"
  stdout: ''
  timestamp: 1659824545
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return sorted[(sorted.count - 1) / 2]\n    }\n    return\
    \ sorted[(sorted.count - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpe2b8p9dk.swift:10:22: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return sorted[(sorted.count - 1)\
    \ / 2]\n               ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n               Double(\
    \                       )\n/tmp/tmpe2b8p9dk.swift:12:43: error: cannot convert\
    \ return expression of type 'Int' to return type 'Double'\n    return sorted[(sorted.count\
    \ - 1) / 2] + sorted[(sorted.count - 1) / 2 - 1]\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \           Double(                                                          \
    \  )\n"
  stdout: ''
  timestamp: 1659824549
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n < 2 {\n        return\
    \ Double(l.first!)\n    }\n    let mid = n / 2\n    let low = median(l[0..<mid])\n\
    \    let high = median(l[mid..<n])\n    return low + (high - low) / 2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpj9sg7o6p.swift:13:22: error: missing argument label 'l:' in call\n\
    \    let low = median(l[0..<mid])\n                     ^\n                  \
    \   l: \n/tmp/tmpj9sg7o6p.swift:13:23: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    let low = median(l[0..<mid])\n      \
    \                ^\n/tmp/tmpj9sg7o6p.swift:14:23: error: missing argument label\
    \ 'l:' in call\n    let high = median(l[mid..<n])\n                      ^\n \
    \                     l: \n/tmp/tmpj9sg7o6p.swift:14:24: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    let high\
    \ = median(l[mid..<n])\n                       ^\n/tmp/tmpj9sg7o6p.swift:15:16:\
    \ error: no '+' candidates produce the expected contextual result type 'Double'\n\
    \    return low + (high - low) / 2\n               ^\nSwift.Duration:6:24: note:\
    \ '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs: Duration, rhs: Duration) -> Duration\n       \
    \                ^\n_Concurrency.ContinuousClock.Instant:9:35: note: '+' produces\
    \ 'ContinuousClock.Instant', not the expected contextual result type 'Double'\n\
    \    @inlinable public static func + (lhs: ContinuousClock.Instant, rhs: Duration)\
    \ -> ContinuousClock.Instant\n                                  ^\n_Concurrency.SuspendingClock.Instant:16:24:\
    \ note: '+' produces 'SuspendingClock.Instant', not the expected contextual result\
    \ type 'Double'\n    public static func + (lhs: SuspendingClock.Instant, rhs:\
    \ Duration) -> SuspendingClock.Instant\n                       ^\nSwift.AdditiveArithmetic:3:17:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    static func + (lhs: Self, rhs: Self) -> Self\n                ^\nSwift.Duration:6:24:\
    \ note: '+' produces 'Duration', not the expected contextual result type 'Double'\n\
    \    public static func + (lhs: Duration, rhs: Duration) -> Duration\n       \
    \                ^\n_Concurrency.ContinuousClock.Instant:9:35: note: '+' produces\
    \ 'ContinuousClock.Instant', not the expected contextua"
  stdout: ''
  timestamp: 1659824549
