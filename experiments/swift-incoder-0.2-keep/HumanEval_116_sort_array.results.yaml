language: swift
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsazd6fn1.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = arr\n    for i in 0..<arr.count {\n        if arr[i]\
    \ == 0 {\n            swap(&result[i], &result[i+1])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpt9hxpa6l.swift:13:18: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&result[i], &result[i+1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            result.swapAt(i, i+1)\n/tmp/tmpt9hxpa6l.swift:13:30: note: conflicting\
    \ access is here\n            swap(&result[i], &result[i+1])\n               \
    \              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.append((oneCount -\
    \ 1) * 10 + element)\n                oneCount = 0\n            } else {\n   \
    \             result.insert(element, at: 0)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpncsupj_f.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in arr {\n        let binary\
    \ = binary(x)\n        let decimal = decimal(binary)\n        result.insert(decimal,\
    \ at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu10ew33w.swift:12:22: error: use of local variable 'binary' before\
    \ its declaration\n        let binary = binary(x)\n                     ^\n/tmp/tmpu10ew33w.swift:12:13:\
    \ note: 'binary' declared here\n        let binary = binary(x)\n            ^\n\
    /tmp/tmpu10ew33w.swift:13:23: error: use of local variable 'decimal' before its\
    \ declaration\n        let decimal = decimal(binary)\n                      ^\n\
    /tmp/tmpu10ew33w.swift:13:13: note: 'decimal' declared here\n        let decimal\
    \ = decimal(binary)\n            ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 == 1 }\n    let decimals = arr.filter{\
    \ $0 != 1 }\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp34qhhfyp/tmp34qhhfyp.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21fba69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21fb760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21fb760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21fb75f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34qhhfyp                        0x000055aa45d225a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b21fbc55460 __libc_start_main +
    245

    6    tmp34qhhfyp                        0x000055aa45d22189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    for num in arr {\n        if num != 1 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv9xd6ez1/tmpv9xd6ez1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41519f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41516f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41516f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41516ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9xd6ez1                        0x000055d9ef449604 <unavailable> + 5636

    5    libc.so.6                          0x00002b4151be5460 __libc_start_main +
    245

    6    tmpv9xd6ez1                        0x000055d9ef4491e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        sorted = arr.sorted()\n    } else {\n        sorted\
    \ = arr.sorted().reversed()\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpozku29sm.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        if arr[i] == 1 {\n            result[i] = i\n\
    \        }\n    }\n    result.sort { $0 < $1 }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpavumltfo/tmpavumltfo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b192a6b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b192a3a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b192a3a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b192a3a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavumltfo                        0x00005635f8b08754 <unavailable> + 5972

    5    libc.so.6                          0x00002b192a89e460 __libc_start_main +
    245

    6    tmpavumltfo                        0x00005635f8b08339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            result.append(index)\n        }\n    \
    \    index++\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmph0tf1o6m.swift:16:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.append(num)\n            }\n        }\n    } else {\n    \
    \    for num in arr {\n            if num == 1 {\n                result.append(decimalCount)\n\
    \            }\n            decimalCount -= num\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp87034s3g.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimal += num\n        }\n    }\n    if ones > 0 {\n  \
    \      sorted = sorted.sorted()\n    }\n    if ones == 0 && decimal > 0 {\n  \
    \      sorted = sorted.sorted()\n    }\n    if ones == 0 && decimal == 0 {\n \
    \       sorted = sorted.sorted()\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmplkfsnzl_/tmplkfsnzl_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b487ac23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b487a91ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b487a91a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b487a9197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkfsnzl_                        0x0000562251332654 <unavailable> + 5716

    5    libc.so.6                          0x00002b487ae0f460 __libc_start_main +
    245

    6    tmplkfsnzl_                        0x0000562251332239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for i in arr {\n        if i == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(2, ones)\n        }\n        result.append(i)\n\
    \    }\n    if ones > 0 {\n        decimal += pow(2, ones)\n    }\n    result.sort(by:\
    \ {\n        decimal - $0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsbgdpydr.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(2, ones)\n                       ^~~\n/tmp/tmpsbgdpydr.swift:22:20:\
    \ error: cannot find 'pow' in scope\n        decimal += pow(2, ones)\n       \
    \            ^~~\n/tmp/tmpsbgdpydr.swift:24:21: error: contextual closure type\
    \ '(Int, Int) throws -> Bool' expects 2 arguments, but 1 was used in closure body\n\
    \    result.sort(by: {\n                    ^\n/tmp/tmpsbgdpydr.swift:25:17: error:\
    \ cannot convert value of type 'Int' to closure result type 'Bool'\n        decimal\
    \ - $0\n        ~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        sorted = arr.sorted()\n    } else {\n        sorted\
    \ = arr.sorted().reversed()\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpozku29sm.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted: [Int] = []\n    var ones: [Int] = []\n    var zeros:\
    \ [Int] = []\n    for x in arr {\n        if x == 1 {\n            ones.append(x)\n\
    \        } else {\n            zeros.append(x)\n        }\n    }\n    sorted =\
    \ append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n    sorted = append(sorted, append(zeros, ones))\n   \
    \ sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted, append(zeros,\
    \ ones))\n    sorted = append(sorted, append(ones, zeros))\n    sorted = append(sorted,\
    \ append(zeros, ones))\n    sorted = append(sorted, append(ones, zeros))\n   \
    \ sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted, append(ones,\
    \ zeros))\n    sorted = append(sorted, append(zeros, ones))\n    sorted = append(sorted,\
    \ append(ones, zeros))\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp02tdt09b.swift:20:14: error: cannot find 'append' in scope\n  \
    \  sorted = append(sorted, append(ones, zeros))\n             ^~~~~~\n/tmp/tmp02tdt09b.swift:20:29:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, append(ones,\
    \ zeros))\n                            ^~~~~~\n/tmp/tmp02tdt09b.swift:21:14: error:\
    \ cannot find 'append' in scope\n    sorted = append(sorted, append(zeros, ones))\n\
    \             ^~~~~~\n/tmp/tmp02tdt09b.swift:21:29: error: cannot find 'append'\
    \ in scope\n    sorted = append(sorted, append(zeros, ones))\n               \
    \             ^~~~~~\n/tmp/tmp02tdt09b.swift:22:14: error: cannot find 'append'\
    \ in scope\n    sorted = append(sorted, append(ones, zeros))\n             ^~~~~~\n\
    /tmp/tmp02tdt09b.swift:22:29: error: cannot find 'append' in scope\n    sorted\
    \ = append(sorted, append(ones, zeros))\n                            ^~~~~~\n\
    /tmp/tmp02tdt09b.swift:23:14: error: cannot find 'append' in scope\n    sorted\
    \ = append(sorted, append(zeros, ones))\n             ^~~~~~\n/tmp/tmp02tdt09b.swift:23:29:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, append(zeros,\
    \ ones))\n                            ^~~~~~\n/tmp/tmp02tdt09b.swift:24:14: error:\
    \ cannot find 'append' in scope\n    sorted = append(sorted, append(ones, zeros))\n\
    \             ^~~~~~\n/tmp/tmp02tdt09b.swift:24:29: error: cannot find 'append'\
    \ in scope\n    sorted = append(sorted, append(ones, zeros))\n               \
    \             ^~~~~~\n/tmp/tmp02tdt09b.swift:25:14: error: cannot find 'append'\
    \ in scope\n    sorted = append(sorted, append(zeros, ones))\n             ^~~~~~\n\
    /tmp/tmp02tdt09b.swift:25:29: error: cannot find 'append' in scope\n    sorted\
    \ = append(sorted, append(zeros, ones))\n                            ^~~~~~\n\
    /tmp/tmp02tdt09b.swift:26:14: error: cannot find 'append' in scope\n    sorted\
    \ = append(sorted, append(ones, zeros))\n             ^~~~~~\n/tmp/tmp02tdt09b.swift:26:29:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, append(ones,\
    \ zeros))\n                            ^~~~~~\n/tmp/tmp02tdt09b.swift:27:14: error:\
    \ ca"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var count = 0\n    for element in\
    \ arr {\n        if element == 1 {\n            count += 1\n        } else {\n\
    \            count = 0\n        }\n        if count == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_au4ofxt/tmp_au4ofxt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b936a3f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b936a0e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b936a0e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b936a0e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_au4ofxt                        0x0000555bbc3e9604 <unavailable> + 5636

    5    libc.so.6                          0x00002b936a5dd460 __libc_start_main +
    245

    6    tmp_au4ofxt                        0x0000555bbc3e91e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.insert(result.count-1, num)\n            }\n        }\n  \
    \  } else {\n        for num in arr {\n            if num == 1 {\n           \
    \     result.append(num)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpaqs4t517.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpaqs4t517.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count-1, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = [Int]()\n    for num\
    \ in arr {\n        oneCount[num] = oneCount[num] + 1\n    }\n    for num in oneCount\
    \ {\n        if num == 1 {\n            sorted = sorted + [num]\n        }\n \
    \   }\n    for num in arr {\n        if oneCount[num] == 1 {\n            sorted\
    \ = sorted + [num]\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6997d5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6997a52561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6997a52286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6997a5213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6997a51bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6997851e83 <unavailable> + 188035

    6    tmpg9plgj5y                        0x0000564b2399222a <unavailable> + 8746

    7    tmpg9plgj5y                        0x0000564b239915b4 <unavailable> + 5556

    8    libc.so.6                          0x00002b6997f47460 __libc_start_main +
    245

    9    tmpg9plgj5y                        0x0000564b23991289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{$0 == 1}\n    let decimal = arr.filter{$0\
    \ != 1}\n    let sortedOnes = ones.sorted()\n    let sortedDecimal = decimal.sorted()\n\
    \    return sortedOnes + sortedDecimal\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp5h52ym_q/tmp5h52ym_q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f7efb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f7ecb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f7ecb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f7ecaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5h52ym_q                        0x00005599621a95a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b7f7f1a5460 __libc_start_main +
    245

    6    tmp5h52ym_q                        0x00005599621a9189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount += 1\n\
    \        } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        sorted = arr\n    } else {\n        sorted = arr.sorted()\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvifpdgm7/tmpvifpdgm7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aada6442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aada6139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aada6139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aada61387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvifpdgm7                        0x000055598fb91654 <unavailable> + 5716

    5    libc.so.6                          0x00002aada662e460 __libc_start_main +
    245

    6    tmpvifpdgm7                        0x000055598fb91239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsazd6fn1.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for n in arr {\n        ones = n % 2\n        decimal = n / 2\n        if\
    \ ones == 0 {\n            result.insert(decimal, ones)\n        } else {\n  \
    \          result.insert(decimal, ones)\n            result.insert(decimal, decimal)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdm5t9g_6.swift:17:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(decimal, ones)\n                \
    \   ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpdm5t9g_6.swift:19:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(decimal,\
    \ ones)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpdm5t9g_6.swift:20:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(decimal, decimal)\n \
    \                  ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 > 0 }.count\n    let decimal = arr.filter{\
    \ $0 > 0 }.sorted{ $0 < $1 }.first!\n    return arr.sorted{ $0 < $1 }.map{ $0\
    \ > 0 ? ones : decimal }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpt9kjnz39/tmpt9kjnz39.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b300627cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3005f73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3005f73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3005f727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9kjnz39                        0x0000555c206d2714 <unavailable> + 5908

    5    libc.so.6                          0x00002b3006468460 __libc_start_main +
    245

    6    tmpt9kjnz39                        0x0000555c206d22f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr.sorted()\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpyp92ar91.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.insert(result.count, num)\n                oneCount--\n  \
    \          }\n        }\n    } else {\n        for num in arr {\n            if\
    \ num == 1 {\n                result.insert(result.count, num)\n             \
    \   decimalCount--\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpz_o6hfdm.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpz_o6hfdm.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpz_o6hfdm.swift:24:25:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      oneCount--\n                        ^~\n/tmp/tmpz_o6hfdm.swift:30:24: error:\
    \ no exact matches in call to instance method 'insert'\n                result.insert(result.count,\
    \ num)\n                       ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpz_o6hfdm.swift:31:29: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n                decimalCount--\n\
    \                            ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones > 0 {\n                result.append((ones - 1) * 10)\n            }\n\
    \            ones = 1\n            result.append(num)\n        }\n    }\n    if\
    \ ones > 0 {\n        result.append((ones - 1) * 10)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpd6roddzx/tmpd6roddzx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9683f06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9683bfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9683bfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9683bfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6roddzx                        0x000056260ac47604 <unavailable> + 5636

    5    libc.so.6                          0x00002b96840f2460 __libc_start_main +
    245

    6    tmpd6roddzx                        0x000056260ac471e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ idx in 0..<arr.count {\n        if arr[idx] == 1 {\n            result[idx]\
    \ = idx\n        }\n    }\n    result.sort { $0 < $1 }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp1h74qs6s/tmp1h74qs6s.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6d41a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6d3e98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6d3e98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6d3e977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1h74qs6s                        0x000056075cd0e754 <unavailable> + 5972

    5    libc.so.6                          0x00002ab6d438d460 __libc_start_main +
    245

    6    tmp1h74qs6s                        0x000056075cd0e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let bin = arr[i].bin()\n        let index = bin.index(of:\
    \ \"1\")\n        if index < bin.endIndex {\n            result[i] = Int(bin[index])\n\
    \        } else {\n            result[i] = Int(bin.prefix(upTo: index).reversed().joined())\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpuci6iwrg.swift:12:26: error: value of type 'Int' has no member\
    \ 'bin'\n        let bin = arr[i].bin()\n                  ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let len = arr.count\n    var result = [Int](repeating: 0, count:\
    \ len)\n    var ones = 0\n    for i in 0..<len {\n        if arr[i] == 1 {\n \
    \           ones += 1\n        } else {\n            result[ones] = arr[i]\n \
    \           ones += 1\n        }\n    }\n    if ones > 0 {\n        result[ones]\
    \ = arr[len - 1]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b294a94cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b294a643561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b294a643286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b294a64313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b294a642bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b294a4427ec <unavailable> + 186348

    6    tmp0f32xkt8                        0x0000556d0472e3b5 <unavailable> + 9141

    7    tmp0f32xkt8                        0x0000556d0472d5f4 <unavailable> + 5620

    8    libc.so.6                          0x00002b294ab38460 __libc_start_main +
    245

    9    tmp0f32xkt8                        0x0000556d0472d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr.sorted()\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpyp92ar91.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    arr.sort()\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsgwbpjus.swift:10:9: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    arr.sort()\n    ~~~ ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for n in arr {\n        if n == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(2, -ones)\n        }\n        result.append(n)\n\
    \    }\n    if ones > 0 {\n        decimal += pow(2, -ones)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aDecimal = pow(2, -a)\n        let bDecimal\
    \ = pow(2, -b)\n        return aDecimal < bDecimal\n    })\n    if ones > 0 {\n\
    \        result.sort(by: { (a, b) -> Bool in\n            let aDecimal = pow(2,\
    \ -a)\n            let bDecimal = pow(2, -b)\n            return aDecimal > bDecimal\n\
    \        })\n    }\n    if decimal > 0 {\n        result.sort(by: { (a, b) ->\
    \ Bool in\n            let aDecimal = pow(2, -a)\n            let bDecimal = pow(2,\
    \ -b)\n            return aDecimal > bDecimal\n        })\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpra33a2pn.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(2, -ones)\n                       ^~~\n/tmp/tmpra33a2pn.swift:22:20:\
    \ error: cannot find 'pow' in scope\n        decimal += pow(2, -ones)\n      \
    \             ^~~\n/tmp/tmpra33a2pn.swift:25:24: error: cannot find 'pow' in scope\n\
    \        let aDecimal = pow(2, -a)\n                       ^~~\n/tmp/tmpra33a2pn.swift:26:24:\
    \ error: cannot find 'pow' in scope\n        let bDecimal = pow(2, -b)\n     \
    \                  ^~~\n/tmp/tmpra33a2pn.swift:31:28: error: cannot find 'pow'\
    \ in scope\n            let aDecimal = pow(2, -a)\n                          \
    \ ^~~\n/tmp/tmpra33a2pn.swift:32:28: error: cannot find 'pow' in scope\n     \
    \       let bDecimal = pow(2, -b)\n                           ^~~\n/tmp/tmpra33a2pn.swift:38:28:\
    \ error: cannot find 'pow' in scope\n            let aDecimal = pow(2, -a)\n \
    \                          ^~~\n/tmp/tmpra33a2pn.swift:39:28: error: cannot find\
    \ 'pow' in scope\n            let bDecimal = pow(2, -b)\n                    \
    \       ^~~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n\
    \    for num in arr {\n        if num == 1 {\n            ones.append(0)\n   \
    \     } else {\n            ones.append(1)\n        }\n        if num == 0 {\n\
    \            zeros.append(0)\n        } else {\n            zeros.append(1)\n\
    \        }\n    }\n    for num in ones {\n        if num == 1 {\n            ones.remove(num)\n\
    \        } else {\n            ones.remove(num)\n            zeros.remove(num)\n\
    \        }\n    }\n    for num in zeros {\n        if num == 1 {\n           \
    \ zeros.remove(num)\n        } else {\n            zeros.remove(num)\n       \
    \     ones.remove(num)\n        }\n    }\n    for num in ones {\n        if num\
    \ == 0 {\n            ones.remove(num)\n        } else {\n            ones.remove(num)\n\
    \            zeros.remove(num)\n        }\n    }\n    for num in zeros {\n   \
    \     if num == 0 {\n            zeros.remove(num)\n        } else {\n       \
    \     zeros.remove(num)\n            ones.remove(num)\n        }\n    }\n    for\
    \ num in ones {\n        if num == 0 {\n            ones.remove(num)\n       \
    \ } else {\n            ones.remove(num)\n            zeros.remove(num)\n    \
    \    }\n    }\n    for num in zeros {\n        if num == 0 {\n            zeros.remove(num)\n\
    \        } else {\n            zeros.remove(num)\n            ones.remove(num)\n\
    \        }\n    }\n    for num in ones {\n        if num == 0 {\n            ones.remove(num)\n\
    \        } else {\n            ones.remove(num)\n            zeros.remove(num)\n\
    \        }\n    }\n    for num in zeros {\n        if num == 0 {\n           \
    \ zeros.remove(num)\n        } else {\n            zeros.remove(num)\n       \
    \     ones.remove(num)\n        }\n    }\n    for num in ones {\n        if num\
    \ == 0 {\n            ones.remove(num)\n        } else {\n            ones.remove(num)\n\
    \            zeros.remove(num)\n        }\n    }\n    for num in zeros {\n   \
    \     if num == 0 {\n            zeros.remove(num)\n        } else {\n       \
    \     zeros.remove(num)\n            ones.remove(num)\n        }\n    }\n    for\
    \ num in ones {\n        if num == 0 {\n            ones.remove(num)\n       \
    \ } else {\n            ones.remove(num)\n            zeros.remove(num)\n    \
    \    }\n    }\n    for num in zeros {\n        if num == 0 {\n            zeros.remove(num)\n\
    \        } else {\n            zeros.remove(num)\n            ones.remove(num)\n\
    \        }\n    }\n    for num in ones {\n        if num == 0 {\n            ones.remove(num)\n\
    \        } else {\n            ones.remove(num)\n            zeros.remove(num)\n\
    \        }\n    }\n    for num in zeros {\n        if num == 0 {\n           \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpky5e_yz5.swift:154:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpky5e_yz5.swift:129:22:\
    \ note: to match this opening '{'\n    for num in zeros {\n                  \
    \   ^\n/tmp/tmpky5e_yz5.swift:154:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpky5e_yz5.swift:9:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpky5e_yz5.swift:27:18: error: no\
    \ exact matches in call to instance method 'remove'\n            ones.remove(num)\n\
    \                 ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmpky5e_yz5.swift:29:18: error: no\
    \ exact matches in call to instance method 'remove'\n            ones.remove(num)\n\
    \                 ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmpky5e_yz5.swift:30:19: error: no\
    \ exact matches in call to instance method 'remove'\n            zeros.remove(num)\n\
    \                  ^\nSwift.Array:10:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(at:)')\n    @inlinable public mu"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    for num in arr {\n        if num != 1 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv9xd6ez1/tmpv9xd6ez1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41519f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41516f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41516f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41516ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9xd6ez1                        0x000055d9ef449604 <unavailable> + 5636

    5    libc.so.6                          0x00002b4151be5460 __libc_start_main +
    245

    6    tmpv9xd6ez1                        0x000055d9ef4491e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.append(num)\n            }\n        }\n    } else {\n    \
    \    for num in arr {\n            if num == 1 {\n                result.append(decimalCount)\n\
    \            }\n            decimalCount -= num\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp87034s3g.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0\
    \ > 0}.count\n    return arr.sorted { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7lcitb8w.swift:10:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        ones += (num & 1)\n        decimal += num\n   \
    \ }\n    if ones == 0 {\n        sorted = arr\n    } else {\n        sorted =\
    \ [Int](repeating: decimal, count: arr.count)\n        var i = 0\n        for\
    \ num in arr {\n            if num == 0 {\n                sorted[i] = 0\n   \
    \         } else {\n                sorted[i] = (num & 1) + decimal\n        \
    \    }\n            i += 1\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpjbhxui5u/tmpjbhxui5u.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae94eb02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae94e7f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae94e7f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae94e7f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbhxui5u                        0x0000562da98a66c4 <unavailable> + 5828

    5    libc.so.6                          0x00002ae94ecee460 __libc_start_main +
    245

    6    tmpjbhxui5u                        0x0000562da98a62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            sorted.append(num)\n\
    \        }\n    }\n    if ones > 0 {\n        sorted.sort()\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_igqmtf7/tmp_igqmtf7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9716174c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9715e6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9715e6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9715e6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_igqmtf7                        0x000055dd25d6f724 <unavailable> + 5924

    5    libc.so.6                          0x00002b9716360460 __libc_start_main +
    245

    6    tmp_igqmtf7                        0x000055dd25d6f309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.append(num)\n            }\n        }\n    } else {\n    \
    \    for num in arr {\n            if num == 1 {\n                result.append(decimalCount)\n\
    \            }\n            decimalCount -= num\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp87034s3g.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\n\
    \                oneCount = 0\n            } else {\n                result.append(num)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4c0q2ksf.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 0 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpavm93jib/tmpavm93jib.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab43fb64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab43f85bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab43f85b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab43f85a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavm93jib                        0x00005643ac5bd724 <unavailable> + 5924

    5    libc.so.6                          0x00002ab43fd50460 __libc_start_main +
    245

    6    tmpavm93jib                        0x00005643ac5bd309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\n\
    \                oneCount = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmph3r3s9kj.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmph3r3s9kj.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr.sorted()\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpyp92ar91.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    for k in 0..<arr.count {\n        if arr[k] == 1 {\n            result.append(k)\n\
    \            i += 1\n        } else {\n            if j == i {\n             \
    \   result.append(k)\n                j += 1\n            } else {\n         \
    \       if arr[j] > arr[k] {\n                    result.append(k)\n         \
    \           j += 1\n                } else {\n                    result.append(j)\n\
    \                    i += 1\n                }\n            }\n        }\n   \
    \ }\n    if i == arr.count {\n        result.append(j)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_0cmwwit/tmp_0cmwwit.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac91d583c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac91d27ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac91d27a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac91d2797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0cmwwit                        0x000055973a3b96d4 <unavailable> + 5844

    5    libc.so.6                          0x00002ac91d76f460 __libc_start_main +
    245

    6    tmp_0cmwwit                        0x000055973a3b92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones == 0 {\n                result.append(num)\n            } else {\n    \
    \            result.insert(result.count - ones, num)\n            }\n        \
    \    ones = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkyagfss3.swift:19:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(result.count - ones, num)\n \
    \                      ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let bin = String(format: \"%b\", arr[i])\n   \
    \     let index = bin.index(of: \"1\")!\n        result[i] = Int(bin[index..<bin.endIndex])\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnd3mu_82.swift:12:25: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let bin = String(format:\
    \ \"%b\", arr[i])\n                        ^~~~~~~\n                         repeating\
    \     count: \n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr.sorted()\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpyp92ar91.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    arr.sort()\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsgwbpjus.swift:10:9: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    arr.sort()\n    ~~~ ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.sort()\n                oneCount\
    \ = 0\n            }\n            result.append(num)\n        }\n    }\n    if\
    \ oneCount > 0 {\n        result.sort()\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9j2gwzet.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        sorted = arr.sorted()\n    } else {\n        sorted\
    \ = arr.sorted(by: {\n            ($0 - ($1 as! Int))\n        })\n    }\n   \
    \ return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjz3s9_as.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpjz3s9_as.swift:24:17:\
    \ error: cannot convert value of type 'Int' to closure result type 'Bool'\n  \
    \          ($0 - ($1 as! Int))\n            ~~~~^~~~~~~~~~~~~~~\n/tmp/tmpjz3s9_as.swift:24:23:\
    \ warning: forced cast of 'Int' to same type has no effect\n            ($0 -\
    \ ($1 as! Int))\n                      ^~~~~~~\n                      \n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.append(num)\n            }\n        }\n    } else {\n    \
    \    for num in arr {\n            if num == 1 {\n                result.append(decimalCount)\n\
    \            }\n            decimalCount -= num\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp87034s3g.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            decimalCount += element - Int(element)\n      \
    \  }\n    }\n    if oneCount > decimalCount {\n        for element in arr {\n\
    \            if element == 1 {\n                result.append(element)\n     \
    \       }\n        }\n    } else {\n        for element in arr {\n           \
    \ if element == 1 {\n                result.append(decimalCount)\n           \
    \ }\n            decimalCount -= element - Int(element)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3zd174x_.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    \n    var result = Array(repeating: 0, count: arr.count)\n \
    \   \n    for i in 0..<arr.count {\n        let bin = String(format: \"%0*b\"\
    , 0, arr[i])\n        let count = bin.count\n        let index = bin.index(bin.startIndex,\
    \ offsetBy: 1)\n        result[i] = Int(bin[index])\n    }\n    \n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdvyha87v.swift:14:25: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n        let bin = String(format:\
    \ \"%0*b\", 0, arr[i])\n                        ^~~~~~~~~\n                  \
    \                       radix:  uppercase: \n/tmp/tmpdvyha87v.swift:14:48: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n        let\
    \ bin = String(format: \"%0*b\", 0, arr[i])\n                                \
    \               ^\n                                            (      != 0)\n\
    /tmp/tmpdvyha87v.swift:14:19: error: initializer 'init(_:radix:uppercase:)' requires\
    \ that 'String' conform to 'BinaryInteger'\n        let bin = String(format: \"\
    %0*b\", 0, arr[i])\n                  ^\nSwift.String:2:12: note: where 'T' =\
    \ 'String'\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool =\
    \ false) where T : BinaryInteger\n           ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let bin = String(format: \"%0*b%0*b\", 0, arr[i],\
    \ 0, arr[i])\n        result[i] = Int(bin, radix: 2)\n    }\n    result.sort {\
    \ $0 < $1 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4sp7q1ik.swift:12:25: error: extra arguments at positions #4, #5\
    \ in call\n        let bin = String(format: \"%0*b%0*b\", 0, arr[i], 0, arr[i])\n\
    \                        ^\nSwift.String:2:12: note: 'init(_:radix:uppercase:)'\
    \ declared here\n    public init<T>(_ value: T, radix: Int = 10, uppercase: Bool\
    \ = false) where T : BinaryInteger\n           ^\n/tmp/tmp4sp7q1ik.swift:12:52:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \     let bin = String(format: \"%0*b%0*b\", 0, arr[i], 0, arr[i])\n         \
    \                                          ^\n                               \
    \                 (      != 0)\n/tmp/tmp4sp7q1ik.swift:12:19: error: initializer\
    \ 'init(_:radix:uppercase:)' requires that 'String' conform to 'BinaryInteger'\n\
    \        let bin = String(format: \"%0*b%0*b\", 0, arr[i], 0, arr[i])\n      \
    \            ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public init<T>(_\
    \ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n/tmp/tmp4sp7q1ik.swift:13:21: error: value of optional type 'Int?'\
    \ must be unwrapped to a value of type 'Int'\n        result[i] = Int(bin, radix:\
    \ 2)\n                    ^\n/tmp/tmp4sp7q1ik.swift:13:21: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        result[i]\
    \ = Int(bin, radix: 2)\n                    ^\n                              \
    \         ?? <#default value#>\n/tmp/tmp4sp7q1ik.swift:13:21: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        result[i]\
    \ = Int(bin, radix: 2)\n                    ^\n                              \
    \        !\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.sort()\n                oneCount\
    \ = 0\n            }\n            result.append(num)\n        }\n    }\n    if\
    \ oneCount > 0 {\n        result.sort()\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9j2gwzet.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in arr {\n        if num ==\
    \ 0 {\n            continue\n        }\n        var count = 0\n        for bit\
    \ in num.bits() {\n            if bit == 1 {\n                count += 1\n   \
    \         }\n        }\n        if count > result.count {\n            result\
    \ = result\n        }\n        result.append(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpf3lz4xzw.swift:16:24: error: value of type 'Int' has no member\
    \ 'bits'\n        for bit in num.bits() {\n                   ~~~ ^~~~\n/tmp/tmpf3lz4xzw.swift:22:20:\
    \ error: assigning a variable to itself\n            result = result\n       \
    \     ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    \n    var result = [Int]()\n    \n    for i in 0..<arr.count\
    \ {\n        let ones = arr[i] & 1\n        \n        if ones == 0 {\n       \
    \     result.append(arr[i])\n        } else {\n            let index = result.index(of:\
    \ ones)\n            \n            if index == 0 {\n                result.append(arr[i])\n\
    \            } else {\n                result.insert(arr[i], at: index)\n    \
    \        }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxik76t1_.swift:19:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = result.index(of: ones)\n     \
    \                          ^\n/tmp/tmpxik76t1_.swift:19:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: ones)\n                  \
    \             ^~~~~\n                               firstIndex\n/tmp/tmpxik76t1_.swift:24:43:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \     result.insert(arr[i], at: index)\n                                     \
    \     ^\n/tmp/tmpxik76t1_.swift:24:43: note: coalesce using '??' to provide a\
    \ default when the optional value contains 'nil'\n                result.insert(arr[i],\
    \ at: index)\n                                          ^\n                  \
    \                              ?? <#default value#>\n/tmp/tmpxik76t1_.swift:24:43:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                result.insert(arr[i], at: index)\n                  \
    \                        ^\n                                               !\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sortedArr = arr\n    var oneCount = 0\n    for elem in arr\
    \ {\n        if elem == 1 {\n            oneCount++\n        } else {\n      \
    \      sortedArr = sortedArr.sorted()\n        }\n    }\n    if oneCount > 0 {\n\
    \        sortedArr = sortedArr.sorted()\n    }\n    return sortedArr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8qa_guwf.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let bin = String(format: \"%b\", arr[i])\n   \
    \     let index = bin.index(of: \"1\")!\n        result[i] = arr[i]\n        result[index]\
    \ = arr[i]\n    }\n    return result.sorted(by: { $0 < $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmps7h1_ghy.swift:12:25: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let bin = String(format:\
    \ \"%b\", arr[i])\n                        ^~~~~~~\n                         repeating\
    \     count: \n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let bin = binary(from: arr[i])\n        let index\
    \ = bin.index(of: \"1\")!\n        result[i] = arr[i]\n        result[index] =\
    \ arr[i]\n    }\n    return result.sorted(by: { $0 < $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjvjd3o_g.swift:12:19: error: cannot find 'binary' in scope\n  \
    \      let bin = binary(from: arr[i])\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            result.append(index)\n        }\n    \
    \    index++\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmph0tf1o6m.swift:16:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for element in arr {\n        if element == 1 {\n            oneCount++\n\
    \        } else {\n            decimalCount += element - oneCount\n          \
    \  oneCount = 0\n        }\n    }\n    for element in arr {\n        if element\
    \ == 1 {\n            result.append(element)\n        } else {\n            result.append(decimalCount)\n\
    \            decimalCount = 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqachrtnm.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 == 1 }\n    let decimals = arr.filter{\
    \ $0 > 1 }\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpeohu81nj/tmpeohu81nj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac35f94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac35c8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac35c8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac35c8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeohu81nj                        0x00005572795ba5a4 <unavailable> + 5540

    5    libc.so.6                          0x00002aac36180460 __libc_start_main +
    245

    6    tmpeohu81nj                        0x00005572795ba189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n\
    \    for n in arr {\n        if n != 0 {\n            ones = append(ones, 1)\n\
    \        } else {\n            zeros = append(zeros, 0)\n        }\n    }\n  \
    \  for n in ones {\n        result = append(result, n)\n    }\n    for n in zeros\
    \ {\n        result = append(result, -n)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpq6t40um6.swift:15:20: error: cannot find 'append' in scope\n  \
    \          ones = append(ones, 1)\n                   ^~~~~~\n/tmp/tmpq6t40um6.swift:17:21:\
    \ error: cannot find 'append' in scope\n            zeros = append(zeros, 0)\n\
    \                    ^~~~~~\n/tmp/tmpq6t40um6.swift:21:18: error: cannot find\
    \ 'append' in scope\n        result = append(result, n)\n                 ^~~~~~\n\
    /tmp/tmpq6t40um6.swift:24:18: error: cannot find 'append' in scope\n        result\
    \ = append(result, -n)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            ones += 1\n       \
    \ } else {\n            decimal += element / 2\n        }\n        if ones > 0\
    \ {\n            result.append(decimal)\n            decimal = 0\n           \
    \ ones = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpq9szxcp0/tmpq9szxcp0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b709fdd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b709facab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b709faca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b709fac97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9szxcp0                        0x000055f63d6d6694 <unavailable> + 5780

    5    libc.so.6                          0x00002b709ffbf460 __libc_start_main +
    245

    6    tmpq9szxcp0                        0x000055f63d6d6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr.sorted()\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpyp92ar91.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimal = decimal * 10 + num\n        }\n    }\n    if ones\
    \ > 0 {\n        result.sortInPlace()\n    } else {\n        result.sortInPlaceByDecreasingOrder(decimal)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu1y2se9i.swift:21:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        result.sortInPlace()\n        ~~~~~~ ^~~~~~~~~~~\n/tmp/tmpu1y2se9i.swift:23:16:\
    \ error: value of type '[Int]' has no member 'sortInPlaceByDecreasingOrder'\n\
    \        result.sortInPlaceByDecreasingOrder(decimal)\n        ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for val in arr {\n        if val ==\
    \ 0 {\n            continue\n        }\n        let bin = String(format: \"%0*b\"\
    , UInt(val.bitWidth), val)\n        let binCount = bin.unicodeScalars.filter({\
    \ $0.isOnSurrogate() }).count\n        let decVal = Int(bin, radix: 2)\n     \
    \   if binCount == 1 {\n            result.insert(decVal, at: result.endIndex)\n\
    \        } else {\n            let index = result.index(of: decVal)\n        \
    \    if index != nil {\n                result[index!] = decVal\n            }\
    \ else {\n                result.insert(decVal, at: result.endIndex)\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpczwtb1aq.swift:15:25: error: extra arguments at positions #2, #3\
    \ in call\n        let bin = String(format: \"%0*b\", UInt(val.bitWidth), val)\n\
    \                        ^\nSwift.String:3:12: note: 'init(_:)' declared here\n\
    \    public init<S>(_ other: S) where S : LosslessStringConvertible, S : Sequence,\
    \ S.Element == Character\n           ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr {\n        if x == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += pow(x, 2)\n        }\n    }\n    for\
    \ x in arr {\n        if x == 1 {\n            ones += 1\n        } else {\n \
    \           decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n     \
    \   if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if x == 1 {\n  \
    \          ones += 1\n        } else {\n            decimal += pow(x, 2)\n   \
    \     }\n    }\n    for x in arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5piknzdg.swift:146:17: error: expected '{' to start the body of\
    \ for-each loop\n    for x in arr\n                ^\n/tmp/tmp5piknzdg.swift:17:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:24:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp5piknzdg.swift:31:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:38:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp5piknzdg.swift:45:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:52:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp5piknzdg.swift:59:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:66:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp5piknzdg.swift:73:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:80:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp5piknzdg.swift:87:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:94:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp5piknzdg.swift:101:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:108:24: error: cannot find 'pow'\
    \ in scope\n            decimal += pow(x, 2)\n                       ^~~\n/tmp/tmp5piknzdg.swift:115:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmp5piknzdg.swift:122:24: error: cannot find 'pow'\
    \ in scope"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for element in\
    \ arr {\n        if element == 1 {\n            result.append(index)\n       \
    \ }\n        index++\n    }\n    result.sort()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpo1bsnz3a.swift:16:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n     \
    \   if ones > 0 {\n            result[i] = arr[i]\n        } else {\n        \
    \    result[i] = arr[i].decimalValue\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9v_rwiw1.swift:16:32: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            result[i] = arr[i].decimalValue\n              \
    \          ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    for value in arr {\n        sorted.append(value)\n\
    \    }\n    sorted.sort()\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpsdbuifgk/tmpsdbuifgk.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada7ffffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada7fcf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada7fcf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada7fcf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsdbuifgk                        0x000056019d2b9724 <unavailable> + 5924

    5    libc.so.6                          0x00002ada801eb460 __libc_start_main +
    245

    6    tmpsdbuifgk                        0x000056019d2b9309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            result.insert(ones,\
    \ x)\n            ones = 0\n        }\n    }\n    if ones > 0 {\n        result.insert(ones,\
    \ 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp4q0hirjr.swift:16:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(ones, x)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp4q0hirjr.swift:21:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(ones,\
    \ 0)\n               ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.sort()\n          \
    \      oneCount = 0\n            }\n            result.append(element)\n     \
    \   }\n    }\n    if oneCount > 0 {\n        result.sort()\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmptveakcwq.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 > 0 }\n    let decimals = arr.filter{\
    \ $0 == 0 }\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpwhsg5dd9/tmpwhsg5dd9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae73b23bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae73af32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae73af32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae73af317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhsg5dd9                        0x000055e41e7845a4 <unavailable> + 5540

    5    libc.so.6                          0x00002ae73b427460 __libc_start_main +
    245

    6    tmpwhsg5dd9                        0x000055e41e784189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n     \
    \   if ones > 0 {\n            result[i] = arr[i]\n        } else {\n        \
    \    result[i] = arr[i].decimalValue\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9v_rwiw1.swift:16:32: error: value of type 'Int' has no member\
    \ 'decimalValue'\n            result[i] = arr[i].decimalValue\n              \
    \          ~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let ones = arr[i] & 1\n        if ones == 0 {\n\
    \            result[i] = arr[i]\n        } else {\n            result[i] = arr[i]\
    \ >> 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpacy3mj9b/tmpacy3mj9b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69789c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69786bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69786bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69786be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacy3mj9b                        0x00005639c66006e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b6978bb4460 __libc_start_main +
    245

    6    tmpacy3mj9b                        0x00005639c66002c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var dec = 0\n\
    \    for num in arr {\n        if num == 1 {\n            oneCount++\n       \
    \ } else {\n            if oneCount > 0 {\n                dec += oneCount - 1\n\
    \            }\n            oneCount = 0\n        }\n        result.append(num)\n\
    \    }\n    if oneCount > 0 {\n        dec += oneCount - 1\n    }\n    if dec\
    \ > 0 {\n        result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpg558hrg3.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    arr.sort()\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsgwbpjus.swift:10:9: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    arr.sort()\n    ~~~ ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let bin = String(format: \"%b\", (arr[i] & 1)\
    \ == 0 ? 0 : 1)\n        result[i] = Int(bin, radix: 2)\n    }\n    result.sort\
    \ { $0 < $1 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnvqf5ni8.swift:12:25: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let bin = String(format:\
    \ \"%b\", (arr[i] & 1) == 0 ? 0 : 1)\n                        ^~~~~~~\n      \
    \                   repeating     count: \n/tmp/tmpnvqf5ni8.swift:13:21: error:\
    \ value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n \
    \       result[i] = Int(bin, radix: 2)\n                    ^\n/tmp/tmpnvqf5ni8.swift:13:21:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result[i] = Int(bin, radix: 2)\n                    ^\n     \
    \                                  ?? <#default value#>\n/tmp/tmpnvqf5ni8.swift:13:21:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result[i] = Int(bin, radix: 2)\n                    ^\n     \
    \                                 !\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for n in arr {\n\
    \        if n == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones > 0 {\n                result.append((ones - 1) * 10)\n            }\n\
    \            ones = 1\n            result.append(n)\n        }\n    }\n    if\
    \ ones > 0 {\n        result.append((ones - 1) * 10)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpxahk7h4x/tmpxahk7h4x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b392c054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b392bd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b392bd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b392bd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxahk7h4x                        0x000055a41bc68604 <unavailable> + 5636

    5    libc.so.6                          0x00002b392c240460 __libc_start_main +
    245

    6    tmpxahk7h4x                        0x000055a41bc681e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            result.append(index)\n        }\n    \
    \    index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsd65_g5g.swift:16:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    var\
    \ ones = Array(repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n\
    \        ones[i] = 1\n        if arr[i] == 0 {\n            result[i] = 0\n  \
    \      } else {\n            result[i] = arr[i]\n        }\n    }\n    for i in\
    \ 0..<arr.count {\n        if ones[i] != 0 {\n            switch result[i] {\n\
    \            case 0:\n                result[i] = 1\n            case 1:\n   \
    \             result[i] = 2\n            case 2:\n                result[i] =\
    \ 3\n            case 3:\n                result[i] = 4\n            case 4:\n\
    \                result[i] = 5\n            case 5:\n                result[i]\
    \ = 6\n            case 6:\n                result[i] = 7\n            case 7:\n\
    \                result[i] = 8\n            case 8:\n                result[i]\
    \ = 9\n            case 9:\n                result[i] = 10\n            case 10:\n\
    \                result[i] = 11\n            case 11:\n                result[i]\
    \ = 12\n            case 12:\n                result[i] = 13\n            case\
    \ 13:\n                result[i] = 14\n            case 14:\n                result[i]\
    \ = 15\n            case 15:\n                result[i] = 16\n            case\
    \ 16:\n                result[i] = 17\n            case 17:\n                result[i]\
    \ = 18\n            case 18:\n                result[i] = 19\n            case\
    \ 19:\n                result[i] = 20\n            case 20:\n                result[i]\
    \ = 21\n            case 21:\n                result[i] = 22\n            case\
    \ 22:\n                result[i] = 23\n            case 23:\n                result[i]\
    \ = 24\n            case 24:\n                result[i] = 25\n            case\
    \ 25:\n                result[i] = 26\n            case 26:\n                result[i]\
    \ = 27\n            case 27:\n                result[i] = 28\n            case\
    \ 28:\n                result[i] = 29\n            case 29:\n                result[i]\
    \ = 30\n            case 30:\n                result[i] = 31\n            case\
    \ 31:\n                result[i] = 32\n            case 32:\n                result[i]\
    \ = 33\n            case 33:\n                result[i] = 34\n            case\
    \ 34:\n                result[i] = 35\n            case 35:\n                result[i]\
    \ = 36\n            case 36:\n                result[i] = 37\n            case\
    \ 37:\n                result[i] = 38\n            case 38:\n                result[i]\
    \ = 39\n            case 39:\n                result[i] = 40\n            case\
    \ 40:\n                result[i] = 41\n            case 41:\n                result[i]\
    \ = 42\n            case 42:\n                result[i] = 43\n            case\
    \ 43:\n                result[i] = 44\n            case 44:\n                result[i]\
    \ = 45\n            case 45:\n                result[i] = 46\n            case\
    \ 46:\n                result[i] = 47\n            case 47:\n                result[i]\
    \ = 48\n            case 48:\n                result[i] = 49\n            case\
    \ 49:\n                result[i] = 50\n            case 50:\n                result[i]\
    \ = 51\n            case 51:\n                result[i] = 52\n            case\
    \ 52:\n                result[i] = 53\n            case 53:\n                result[i]\
    \ = 54\n            case 54:\n                result[i] = 55\n            case\
    \ 55:\n                result[i] = 56\n            case 56:\n                result[i]\
    \ = 57\n            case 57:\n                result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpa6w_uj95.swift:161:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpa6w_uj95.swift:21:25:\
    \ note: to match this opening '{'\n        if ones[i] != 0 {\n               \
    \         ^\n/tmp/tmpa6w_uj95.swift:161:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n\
    \                                                               ^\n/tmp/tmpa6w_uj95.swift:20:28:\
    \ note: to match this opening '{'\n    for i in 0..<arr.count {\n            \
    \               ^\n/tmp/tmpa6w_uj95.swift:161:64: error: expected '}' at end of\
    \ brace statement\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])\n                                                               ^\n/tmp/tmpa6w_uj95.swift:9:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpa6w_uj95.swift:138:17: warning:\
    \ variable is unused\n                result\n                ^~~~~~\n/tmp/tmpa6w_uj95.swift:22:13:\
    \ error: switch must be exhaustive\n            switch result[i] {\n         \
    \   ^\n/tmp/tmpa6w_uj95.swift:22:13: note: do you want to add a default clause?\n\
    \            switch result[i] {\n            ^\n/tmp/tmpa6w_uj95.swift:142:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var count = 0\n    for x in arr {\n\
    \        if x != 0 {\n            sorted = append(sorted, x)\n            count\
    \ += 1\n        }\n    }\n    if count == 0 {\n        return arr\n    }\n   \
    \ sorted = append(sorted, 0)\n    sorted = append(sorted, count)\n    sorted =\
    \ append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted,\
    \ 0)\n    sorted = append(sorted, 0)\n    sorted = append(sorted, 0)\n    sorted\
    \ = append(sorted, 0)\n    sorted = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6x9vye9l.swift:80:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmp6x9vye9l.swift:14:22: error: cannot find 'append' in scope\n   \
    \         sorted = append(sorted, x)\n                     ^~~~~~\n/tmp/tmp6x9vye9l.swift:21:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:22:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, count)\n             ^~~~~~\n/tmp/tmp6x9vye9l.swift:23:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:24:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, 0)\n             ^~~~~~\n/tmp/tmp6x9vye9l.swift:25:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:26:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, 0)\n             ^~~~~~\n/tmp/tmp6x9vye9l.swift:27:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:28:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, 0)\n             ^~~~~~\n/tmp/tmp6x9vye9l.swift:29:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:30:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, 0)\n             ^~~~~~\n/tmp/tmp6x9vye9l.swift:31:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:32:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, 0)\n             ^~~~~~\n/tmp/tmp6x9vye9l.swift:33:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:34:14: error: cannot find 'append' in\
    \ scope\n    sorted = append(sorted, 0)\n             ^~~~~~\n/tmp/tmp6x9vye9l.swift:35:14:\
    \ error: cannot find 'append' in scope\n    sorted = append(sorted, 0)\n     \
    \        ^~~~~~\n/tmp/tmp6x9vye9l.swift:36:14: error: cannot find 'append' in\
    \ scope"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.append((oneCount -\
    \ 1) * 10 + element)\n                oneCount = 0\n            } else {\n   \
    \             result.append(element)\n            }\n        }\n    }\n    if\
    \ oneCount > 0 {\n        result.append((oneCount - 1) * 10 + arr[arr.count])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpzz8gwx99.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var dec = 0\n  \
    \  for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            dec += x\n        }\n    }\n    for x in arr {\n        if x\
    \ == 1 {\n            dec -= x\n        } else {\n            dec += x\n     \
    \   }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec >\
    \ 0 {\n            dec += 1\n        }\n        if dec > 0 {\n            dec\
    \ -= 1\n        }\n        if dec > 0 {\n            dec += 1\n        }\n   \
    \     if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n  \
    \          dec += 1\n        }\n        if dec > 0 {\n            dec -= 1\n \
    \       }\n        if dec > 0 {\n            dec += 1\n        }\n        if dec\
    \ > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n            dec\
    \ += 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n   \
    \     if dec > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n  \
    \          dec -= 1\n        }\n        if dec > 0 {\n            dec += 1\n \
    \       }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec\
    \ > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n            dec\
    \ -= 1\n        }\n        if dec > 0 {\n            dec += 1\n        }\n   \
    \     if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n  \
    \          dec += 1\n        }\n        if dec > 0 {\n            dec -= 1\n \
    \       }\n        if dec > 0 {\n            dec += 1\n        }\n        if dec\
    \ > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n            dec\
    \ += 1\n        }\n        if dec > 0 {\n            dec -= 1\n        }\n   \
    \     if dec > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n  \
    \          dec -= 1\n        }\n        if dec > 0 {\n            dec += 1\n \
    \       }\n        if dec > 0 {\n            dec -= 1\n        }\n        if dec\
    \ > 0 {\n            dec += 1\n        }\n        if dec > 0 {\n            dec\
    \ -= 1\n        }\n        if dec > 0 {\n            dec += 1\n        }\n   \
    \     if dec > 0 {\n            dec -= 1\n        }\n        if dec > 0 {\n  \
    \          dec += 1\n        }\n        if dec > 0 {\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8vxl9qw1.swift:151:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmp8vxl9qw1.swift:20:18:\
    \ note: to match this opening '{'\n    for x in arr {\n                 ^\n/tmp/tmp8vxl9qw1.swift:151:64:\
    \ error: expected '}' at end of brace statement\nassert(sort_array(arr: [2, 4,\
    \ 8, 16, 32]) == [2, 4, 8, 16, 32])\n                                        \
    \                       ^\n/tmp/tmp8vxl9qw1.swift:9:38: note: to match this opening\
    \ '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n                              \
    \       ^\n/tmp/tmp8vxl9qw1.swift:132:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n/tmp/tmp8vxl9qw1.swift:10:9: warning: initialization\
    \ of variable 'result' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var result = [Int]()\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\n\
    \                oneCount = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmph3r3s9kj.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmph3r3s9kj.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{$0 == 1}\n    let decimals = arr.filter{$0\
    \ > 0}\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4faj6dvy/tmp4faj6dvy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f17cc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f179bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f179ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f179b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4faj6dvy                        0x000055b9ce25b5a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b7f17eaf460 __libc_start_main +
    245

    6    tmp4faj6dvy                        0x000055b9ce25b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = arr\n    for i in 0..<arr.count {\n        if arr[i]\
    \ == 0 {\n            result.remove(at: i)\n        }\n    }\n    return result.sorted(by:\
    \ >)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp9e3h11sf/tmp9e3h11sf.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11aa13bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11a9e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11a9e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11a9e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9e3h11sf                        0x000055f62987e6e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b11aa327460 __libc_start_main +
    245

    6    tmp9e3h11sf                        0x000055f62987e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var dec = 0\n  \
    \  for num in arr {\n        if num == 1 {\n            ones += 1\n        } else\
    \ {\n            dec += num\n        }\n    }\n    if ones > dec {\n        for\
    \ num in arr {\n            if num == 1 {\n                ones--\n          \
    \  } else {\n                dec -= num\n            }\n        }\n    }\n   \
    \ for num in arr {\n        if num == 1 {\n            result.append(num)\n  \
    \      }\n    }\n    for num in arr {\n        if num == 1 {\n            ones++\n\
    \        } else {\n            dec += num\n        }\n    }\n    for num in arr\
    \ {\n        if num == 1 {\n            ones--\n        } else {\n           \
    \ dec -= num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n\
    \            result.append(num)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmppgqgoe_v.swift:23:21: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n                ones--\n                    ^~\n/tmp/tmppgqgoe_v.swift:36:17:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  ones++\n                ^~\n/tmp/tmppgqgoe_v.swift:43:17: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            ones--\n         \
    \       ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let ones = arr.filter { $0 & 1 == 1 }\n      \
    \  let decimal = arr.filter { $0 & 1 == 0 }\n        if ones.count > decimal.count\
    \ {\n            result[i] = decimal.first!\n        } else {\n            result[i]\
    \ = ones.first!\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp7rqa9h2t/tmp7rqa9h2t.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba11bc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba11b98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba11b98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba11b98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7rqa9h2t                        0x00005596ebf627f4 <unavailable> + 6132

    5    libc.so.6                          0x00002ba11be82460 __libc_start_main +
    245

    6    tmp7rqa9h2t                        0x00005596ebf623d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimal += num\n        }\n    }\n    if ones > 0 {\n  \
    \      result = sort_array(arr)\n        result.append(decimal)\n    } else {\n\
    \        result = arr\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpjvrsyzmd.swift:21:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    while i < arr.count {\n        if arr[i] > 0 {\n            result[k]\
    \ = arr[i]\n            i += 1\n        } else {\n            j += 1\n       \
    \ }\n        if j == arr.count {\n            k += 1\n            j = 0\n    \
    \    }\n    }\n    result.reverse()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b771ed99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b771ea90561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b771ea90286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b771ea9013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b771ea8fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b771e88f7ec <unavailable> + 186348

    6    tmpv0axvu26                        0x000055e3b1de2106 <unavailable> + 8454

    7    tmpv0axvu26                        0x000055e3b1de1524 <unavailable> + 5412

    8    libc.so.6                          0x00002b771ef85460 __libc_start_main +
    245

    9    tmpv0axvu26                        0x000055e3b1de11f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        ones = num.trailingZeroBitCount()\n        decimal\
    \ = num.decimalValue()\n        if ones > 0 {\n            result.insert(decimal,\
    \ ones)\n        } else {\n            result.insert(decimal, decimal)\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmprzdohrv7.swift:14:20: error: cannot call value of non-function\
    \ type 'Int'\n        ones = num.trailingZeroBitCount()\n                   ^\
    \                   ~~\n                                       \n/tmp/tmprzdohrv7.swift:15:23:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        decimal = num.decimalValue()\n\
    \                  ~~~ ^~~~~~~~~~~~\n/tmp/tmprzdohrv7.swift:17:20: error: no exact\
    \ matches in call to instance method 'insert'\n            result.insert(decimal,\
    \ ones)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmprzdohrv7.swift:19:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(decimal, decimal)\n \
    \                  ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 == 1 }\n    let decimal = arr.filter{\
    \ $0 > 1 }\n    let sortedArray = ones.sorted + decimal.sorted\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp98irs37m.swift:12:28: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    let sortedArray = ones.sorted + decimal.sorted\n\
    \                      ~~~~~^~~~~~\n                                 ()\n/tmp/tmp98irs37m.swift:12:45:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    let sortedArray = ones.sorted + decimal.sorted\n                \
    \                    ~~~~~~~~^~~~~~\n                                        \
    \          ()\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sortedArr = arr\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        sortedArr = arr.sorted()\n    }\n    return sortedArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkh9cpqss.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = [Int]()\n    var zeros\
    \ = [Int]()\n    var i = 0\n    for x in arr {\n        if x == 1 {\n        \
    \    ones.append(i)\n        } else {\n            zeros.append(i)\n        }\n\
    \        i += 1\n    }\n    for x in ones {\n        result.append(x)\n    }\n\
    \    for x in zeros {\n        result.append(x)\n    }\n    for x in result {\n\
    \        if x < result.last {\n            result.removeLast()\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmprft4cb_p.swift:29:23: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if x < result.last {\n      \
    \                ^\n/tmp/tmprft4cb_p.swift:29:23: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        if x < result.last\
    \ {\n                      ^\n                           ?? <#default value#>\n\
    /tmp/tmprft4cb_p.swift:29:23: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        if x < result.last {\n       \
    \               ^\n                          !\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for num in arr {\n        let bin\
    \ = String(num, radix: 2)\n        let count = bin.count(\"1\")\n        if count\
    \ == 0 {\n            result.insert(num, at: 0)\n        } else {\n          \
    \  let decimal = Int(bin, radix: 10)\n            result.insert(decimal, at: 0)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpas7p0sd1.swift:13:25: error: cannot call value of non-function\
    \ type 'Int'\n        let count = bin.count(\"1\")\n                        ^\n\
    /tmp/tmpas7p0sd1.swift:18:27: error: value of optional type 'Int?' must be unwrapped\
    \ to a value of type 'Int'\n            result.insert(decimal, at: 0)\n      \
    \                    ^\n/tmp/tmpas7p0sd1.swift:17:17: note: short-circuit using\
    \ 'guard' to exit this function early if the optional value contains 'nil'\n \
    \           let decimal = Int(bin, radix: 10)\n                ^\n           \
    \ guard                             else { return <#default value#> }\n/tmp/tmpas7p0sd1.swift:17:27:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            let decimal = Int(bin, radix: 10)\n                     \
    \     ^\n                                              ?? <#default value#>\n\
    /tmp/tmpas7p0sd1.swift:17:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            let decimal = Int(bin, radix:\
    \ 10)\n                          ^\n                                         \
    \    !\n/tmp/tmpas7p0sd1.swift:18:27: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result.insert(decimal, at:\
    \ 0)\n                          ^\n                                  ?? <#default\
    \ value#>\n/tmp/tmpas7p0sd1.swift:18:27: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.insert(decimal,\
    \ at: 0)\n                          ^\n                                 !\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones == 0 {\n                result.append(num)\n            } else {\n    \
    \            ones = num\n            }\n        }\n    }\n    if ones > 0 {\n\
    \        result.append(ones)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp6q43jacf/tmp6q43jacf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cf46bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cf43b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cf43b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cf43b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6q43jacf                        0x000055ec92bde604 <unavailable> + 5636

    5    libc.so.6                          0x00002b4cf48aa460 __libc_start_main +
    245

    6    tmp6q43jacf                        0x000055ec92bde1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimal += num\n        }\n    }\n    if ones > 0 {\n  \
    \      result.sort()\n    } else {\n        result.sort(by: { (a, b) -> Bool in\n\
    \            return a < b\n        })\n    }\n    for num in arr {\n        if\
    \ num == 1 {\n            ones += 1\n        } else {\n            decimal -=\
    \ num\n        }\n    }\n    for _ in 0..<(ones * 2) {\n        result.append(decimal)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpo9xkkffg/tmpo9xkkffg.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78a5040c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78a4d37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78a4d37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78a4d367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9xkkffg                        0x0000556c12bd9924 <unavailable> + 6436

    5    libc.so.6                          0x00002b78a522c460 __libc_start_main +
    245

    6    tmpo9xkkffg                        0x0000556c12bd9509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    guard arr.count > 0 else { return arr }\n    var sortedArray\
    \ = [Int]()\n    var oneCount = 0\n    var decimalCount = 0\n    for i in arr\
    \ {\n        if i == 1 {\n            oneCount += 1\n        } else {\n      \
    \      decimalCount += pow(2, oneCount)\n            oneCount = 0\n        }\n\
    \        sortedArray.append(i)\n    }\n    decimalCount += pow(2, oneCount)\n\
    \    sortedArray.append(decimalCount)\n    return sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9zbll6ut.swift:18:29: error: cannot find 'pow' in scope\n     \
    \       decimalCount += pow(2, oneCount)\n                            ^~~\n/tmp/tmp9zbll6ut.swift:23:21:\
    \ error: cannot find 'pow' in scope\n    decimalCount += pow(2, oneCount)\n  \
    \                  ^~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var count = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            count += 1\n        } else {\n       \
    \     if count > 0 {\n                result.append((count - 1) * 10 + num)\n\
    \                count = 0\n            } else {\n                result.insert(result.end(),\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp23e9f7y4.swift:20:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(result.end(), num)\n        \
    \               ^\n/tmp/tmp23e9f7y4.swift:20:24: note: found candidate with type\
    \ '(__owned Int, Int) -> ()'\n                result.insert(result.end(), num)\n\
    \                       ^\n/tmp/tmp23e9f7y4.swift:20:38: error: value of type\
    \ '[Int]' has no member 'end'\n                result.insert(result.end(), num)\n\
    \                              ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for x in arr {\n        if x == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(x, 2)\n        }\n    }\n    for x in arr {\n\
    \        if x == 1 {\n            ones += 1\n        } else {\n            decimal\
    \ += pow(x, 2)\n        }\n    }\n    for x in arr {\n        if ones == 0 {\n\
    \            result.insert(decimal, x)\n        } else {\n            result.insert(x,\
    \ decimal)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpulo6l2t9.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(x, 2)\n                       ^~~\n/tmp/tmpulo6l2t9.swift:24:24:\
    \ error: cannot find 'pow' in scope\n            decimal += pow(x, 2)\n      \
    \                 ^~~\n/tmp/tmpulo6l2t9.swift:29:20: error: no exact matches in\
    \ call to instance method 'insert'\n            result.insert(decimal, x)\n  \
    \                 ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpulo6l2t9.swift:31:20: error: no exact matches in call\
    \ to instance method 'insert'\n            result.insert(x, decimal)\n       \
    \            ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    \n    var sortedArr = arr\n    \n    if arr.count < 2 {\n  \
    \      return sortedArr\n    }\n    \n    var oneCount = 0\n    var tenCount =\
    \ 0\n    var hundredCount = 0\n    var thousandCount = 0\n    var tenThousandCount\
    \ = 0\n    \n    for i in 0..<arr.count {\n        let one = arr[i] & 1\n    \
    \    if one == 1 {\n            oneCount += 1\n        }\n        \n        let\
    \ ten = arr[i] >> 1\n        if ten == 1 {\n            tenCount += 1\n      \
    \  }\n        \n        let hundred = arr[i] >> 10\n        if hundred == 1 {\n\
    \            hundredCount += 1\n        }\n        \n        let thousand = arr[i]\
    \ >> 100\n        if thousand == 1 {\n            thousandCount += 1\n       \
    \ }\n        \n        let tenThousand = arr[i] >> 1000\n        if tenThousand\
    \ == 1 {\n            tenThousandCount += 1\n        }\n    }\n    \n    if oneCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if tenCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if hundredCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if thousandCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    if tenThousandCount\
    \ > 0 {\n        sortedArr = sortedArr.sorted()\n    }\n    \n    return sortedArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpqu22gx7k/tmpqu22gx7k.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3382dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad337fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad337fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad337fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqu22gx7k                        0x00005593773186c4 <unavailable> + 5828

    5    libc.so.6                          0x00002ad3384c7460 __libc_start_main +
    245

    6    tmpqu22gx7k                        0x00005593773182a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for v in arr {\n        if v == 0\
    \ {\n            continue\n        }\n        var i = 0\n        var j = 0\n \
    \       while i < len(result) && j < len(arr) {\n            if result[i] == arr[j]\
    \ {\n                i += 1\n                j += 1\n            } else {\n  \
    \              if result[i] > arr[j] {\n                    result.insert(i, arr[j])\n\
    \                    i += 1\n                } else {\n                    j +=\
    \ 1\n                }\n            }\n        }\n        if i < len(result) {\n\
    \            result.insert(i, v)\n        } else {\n            result.append(v)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgkipkkug.swift:17:19: error: cannot find 'len' in scope\n     \
    \   while i < len(result) && j < len(arr) {\n                  ^~~\n/tmp/tmpgkipkkug.swift:17:38:\
    \ error: cannot find 'len' in scope\n        while i < len(result) && j < len(arr)\
    \ {\n                                     ^~~\n/tmp/tmpgkipkkug.swift:23:28: error:\
    \ no exact matches in call to instance method 'insert'\n                    result.insert(i,\
    \ arr[j])\n                           ^\nSwift.Array:11:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpgkipkkug.swift:30:16: error: cannot find\
    \ 'len' in scope\n        if i < len(result) {\n               ^~~\n/tmp/tmpgkipkkug.swift:31:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(i,\
    \ v)\n                   ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n\
    \    for num in arr {\n        if num == 0 {\n            zeros.append(num)\n\
    \        } else {\n            ones.append(num)\n        }\n    }\n    for num\
    \ in ones {\n        if zeros.contains(num) {\n            zeros.remove(num)\n\
    \        } else {\n            result.append(num)\n        }\n    }\n    for num\
    \ in zeros {\n        if ones.contains(num) {\n            ones.remove(num)\n\
    \        } else {\n            result.append(num)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp756_mgr2.swift:22:19: error: no exact matches in call to instance\
    \ method 'remove'\n            zeros.remove(num)\n                  ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmp756_mgr2.swift:29:18: error: no exact matches\
    \ in call to instance method 'remove'\n            ones.remove(num)\n        \
    \         ^\nSwift.Array:10:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(at:)')\n    @inlinable public mutating func remove(at index: Int)\
    \ -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    \n    var result = [Int]()\n    var count = [Int]()\n    for\
    \ num in arr {\n        if num == 0 {\n            continue\n        }\n     \
    \   if let index = count.index(of: num) {\n            result[index] = num\n \
    \           count[index] += 1\n        } else {\n            result.append(num)\n\
    \            count.append(1)\n        }\n    }\n    \n    return result.sorted(by:\
    \ { $0 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_cftxcpe/tmp_cftxcpe.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4aad8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4aaa85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4aaa85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4aaa847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cftxcpe                        0x00005638a6622734 <unavailable> + 5940

    5    libc.so.6                          0x00002ae4aaf7a460 __libc_start_main +
    245

    6    tmp_cftxcpe                        0x00005638a6622319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 != 0 }\n    let decimals = arr.filter{\
    \ $0 == 0 }\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmphowaa9d3/tmphowaa9d3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5cf758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5cf44fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5cf44f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5cf44e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphowaa9d3                        0x0000559da63215a4 <unavailable> + 5540

    5    libc.so.6                          0x00002ba5cf944460 __libc_start_main +
    245

    6    tmphowaa9d3                        0x0000559da6321189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{$0}.count\n    let decimal = arr.filter{$0\
    \ > 0}.count\n    if ones == decimal == 0 {\n        return arr\n    }\n    if\
    \ ones > decimal {\n        return arr.sorted{$0 > $1}\n    }\n    return arr.sorted{$0\
    \ < $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpf7e6c9nt.swift:10:27: error: cannot convert value of type 'Int'\
    \ to closure result type 'Bool'\n    let ones = arr.filter{$0}.count\n       \
    \                   ^~\n/tmp/tmpf7e6c9nt.swift:12:13: error: adjacent operators\
    \ are in non-associative precedence group 'ComparisonPrecedence'\n    if ones\
    \ == decimal == 0 {\n            ^          ~~\n/tmp/tmpf7e6c9nt.swift:12:24:\
    \ error: binary operator '==' cannot be applied to operands of type 'Bool' and\
    \ 'Int'\n    if ones == decimal == 0 {\n       ~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpf7e6c9nt.swift:12:24:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Bool, Bool), (Int, Int)\n    if ones == decimal == 0 {\n                  \
    \     ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for x in arr\
    \ {\n        if x == 1 {\n            oneCount++\n        } else {\n         \
    \   if oneCount > 0 {\n                result.sort()\n                oneCount\
    \ = 0\n            }\n            result.append(x)\n        }\n    }\n    if oneCount\
    \ > 0 {\n        result.sort()\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8p1m4qs5.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    \n    var sorted = [Int]()\n    \n    for element in arr {\n\
    \        let ones = Int(log2(element))\n        \n        if ones < 0 {\n    \
    \        ones = -ones\n        }\n        \n        sorted.append(element >> ones)\n\
    \    }\n    \n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp971_6_un.swift:14:24: error: cannot find 'log2' in scope\n    \
    \    let ones = Int(log2(element))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = [0]\n    var decimal =\
    \ [0]\n    for i in arr {\n        ones = append(ones, 0)\n        decimal = append(decimal,\
    \ 0)\n        for _ in 0..<8 {\n            if i & 1 == 1 {\n                ones\
    \ = append(ones, 1)\n                decimal = append(decimal, ones)\n       \
    \     } else {\n                ones = append(ones, 0)\n                decimal\
    \ = append(decimal, 0)\n            }\n            i >>= 1\n        }\n    }\n\
    \    for i in 0..<8 {\n        if ones[i] == 0 {\n            result.append(i)\n\
    \        }\n    }\n    for i in 0..<8 {\n        if decimal[i] != 0 {\n      \
    \      result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmph9d1pt6l.swift:14:16: error: cannot find 'append' in scope\n  \
    \      ones = append(ones, 0)\n               ^~~~~~\n/tmp/tmph9d1pt6l.swift:15:19:\
    \ error: cannot find 'append' in scope\n        decimal = append(decimal, 0)\n\
    \                  ^~~~~~\n/tmp/tmph9d1pt6l.swift:18:24: error: cannot find 'append'\
    \ in scope\n                ones = append(ones, 1)\n                       ^~~~~~\n\
    /tmp/tmph9d1pt6l.swift:19:27: error: cannot find 'append' in scope\n         \
    \       decimal = append(decimal, ones)\n                          ^~~~~~\n/tmp/tmph9d1pt6l.swift:21:24:\
    \ error: cannot find 'append' in scope\n                ones = append(ones, 0)\n\
    \                       ^~~~~~\n/tmp/tmph9d1pt6l.swift:22:27: error: cannot find\
    \ 'append' in scope\n                decimal = append(decimal, 0)\n          \
    \                ^~~~~~\n/tmp/tmph9d1pt6l.swift:24:15: error: left side of mutating\
    \ operator isn't mutable: 'i' is a 'let' constant\n            i >>= 1\n     \
    \       ~ ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 > 0 }\n    let decimals = arr.filter{\
    \ $0 == 0 }\n    let sorted = ones\n        .sorted(by: { $0.compare(ones[$0.index($0)])\
    \ == .orderedAscending })\n        .sorted(by: { $0.compare(decimals[$0.index($0)])\
    \ == .orderedAscending })\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpfhyc1bew.swift:13:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n      \
    \  .sorted(by: { $0.compare(ones[$0.index($0)]) == .orderedAscending })\n    \
    \                ^\n/tmp/tmpfhyc1bew.swift:13:26: error: value of type 'Int' has\
    \ no member 'compare'\n        .sorted(by: { $0.compare(ones[$0.index($0)]) ==\
    \ .orderedAscending })\n                      ~~ ^~~~~~~\n/tmp/tmpfhyc1bew.swift:13:42:\
    \ error: value of type 'Int' has no member 'index'\n        .sorted(by: { $0.compare(ones[$0.index($0)])\
    \ == .orderedAscending })\n                                      ~~ ^~~~~\n/tmp/tmpfhyc1bew.swift:14:21:\
    \ error: contextual closure type '(Int, Int) throws -> Bool' expects 2 arguments,\
    \ but 1 was used in closure body\n        .sorted(by: { $0.compare(decimals[$0.index($0)])\
    \ == .orderedAscending })\n                    ^\n/tmp/tmpfhyc1bew.swift:14:26:\
    \ error: value of type 'Int' has no member 'compare'\n        .sorted(by: { $0.compare(decimals[$0.index($0)])\
    \ == .orderedAscending })\n                      ~~ ^~~~~~~\n/tmp/tmpfhyc1bew.swift:14:46:\
    \ error: value of type 'Int' has no member 'index'\n        .sorted(by: { $0.compare(decimals[$0.index($0)])\
    \ == .orderedAscending })\n                                          ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            sorted.append(num)\n\
    \        }\n    }\n    if ones == 0 {\n        return sorted\n    }\n    var decimal\
    \ = ones\n    var decimalIndex = 0\n    var decimalValue = 0\n    var decimalValueIndex\
    \ = 0\n    var decimalValueIndex2 = 0\n    for num in arr {\n        if num ==\
    \ 1 {\n            ones += 1\n        } else {\n            decimalValue += num\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimalValueIndex += num\n        }\n  \
    \  }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n   \
    \     } else {\n            decimalValueIndex2 += num\n        }\n    }\n    for\
    \ num in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n\
    \            decimalValue -= num\n        }\n    }\n    for num in arr {\n   \
    \     if num == 1 {\n            ones += 1\n        } else {\n            decimalValueIndex\
    \ -= num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimalValueIndex2 -= num\n\
    \        }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimalValue *= num\n        }\n    }\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimalValueIndex *= num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           decimalValueIndex2 *= num\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimalValue\
    \ /= num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n        } else {\n            decimalValueIndex /= num\n \
    \       }\n    }\n    for num in arr {\n        if num == 1 {\n            ones\
    \ += 1\n        } else {\n            decimalValueIndex2 /= num\n        }\n \
    \   }\n    for num in arr {\n        if num == 1 {\n            ones += 1\n  \
    \      } else {\n            decimalValue %= num\n        }\n    }\n    for num\
    \ in arr {\n        if num == 1 {\n            ones += 1\n        } else {\n \
    \           decimalValueIndex %= num\n        }\n    }\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            decimalValueIndex2\
    \ %= num\n        }\n    }\n    for num in arr {\n        if num == 1 {\n    \
    \        ones += 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpdkg8bj6m.swift:157:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpdkg8bj6m.swift:132:20:\
    \ note: to match this opening '{'\n    for num in arr {\n                   ^\n\
    /tmp/tmpdkg8bj6m.swift:157:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\n            \
    \                                                   ^\n/tmp/tmpdkg8bj6m.swift:9:38:\
    \ note: to match this opening '{'\nfunc sort_array(arr: [Int]) -> [Int] {\n  \
    \                                   ^\n/tmp/tmpdkg8bj6m.swift:138:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpdkg8bj6m.swift:22:9:\
    \ warning: initialization of variable 'decimal' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var decimal = ones\n    ~~~~^~~~~~~\n\
    \    _\n/tmp/tmpdkg8bj6m.swift:23:9: warning: initialization of variable 'decimalIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var decimalIndex = 0\n    ~~~~^~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted: [Int] = []\n    var ones: [Int] = []\n    var dec:\
    \ [Int] = []\n    for i in arr {\n        if i == 1 {\n            ones.append(i)\n\
    \        } else {\n            dec.append(i)\n        }\n    }\n    sorted = dec.sorted()\n\
    \    sorted = sorted.append(ones).sorted()\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpiymzuxwb.swift:21:21: error: no exact matches in call to instance\
    \ method 'append'\n    sorted = sorted.append(ones).sorted()\n               \
    \     ^\n/tmp/tmpiymzuxwb.swift:21:21: note: found candidate with type '(__owned\
    \ [Int]) -> ()'\n    sorted = sorted.append(ones).sorted()\n                 \
    \   ^\n/tmp/tmpiymzuxwb.swift:21:34: error: value of tuple type '()' has no member\
    \ 'sorted'\n    sorted = sorted.append(ones).sorted()\n             ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    for num in arr {\n        if num != 1 {\n            result.insert(i,\
    \ num)\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkr0wd726.swift:20:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(i, num)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for el in arr {\n\
    \        if el == 1 {\n            ones += 1\n        } else {\n            result\
    \ += [ones]\n            ones = 1\n        }\n    }\n    result += [ones]\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmplb1uqx2m/tmplb1uqx2m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1948ac1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19487b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19487b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19487b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb1uqx2m                        0x0000564e14f27604 <unavailable> + 5636

    5    libc.so.6                          0x00002b1948cad460 __libc_start_main +
    245

    6    tmplb1uqx2m                        0x0000564e14f271e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{$0 != 0}\n    let zeros = arr.filter{$0\
    \ == 0}\n    let onesCount = ones.count\n    let zerosCount = zeros.count\n  \
    \  if onesCount == zerosCount {\n        return arr\n    }\n    if onesCount >\
    \ zerosCount {\n        let sortedArray = zeros\n        sortedArray.sortInPlace()\n\
    \        return sortedArray\n    }\n    let sortedArray = ones\n    sortedArray.sortInPlace()\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpzgubx5n4.swift:19:21: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        sortedArray.sortInPlace()\n        ~~~~~~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmpzgubx5n4.swift:23:17: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \    sortedArray.sortInPlace()\n    ~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.append(num)\n            }\n        }\n    } else {\n    \
    \    for num in arr {\n            if num == 1 {\n                result.append(decimalCount)\n\
    \            }\n            decimalCount -= num\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp87034s3g.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for i in arr {\n        if i == 1 {\n            ones += 1\n        } else\
    \ {\n            decimal += pow(2, ones)\n        }\n        result.append(i)\n\
    \    }\n    if ones > 0 {\n        decimal += pow(2, ones)\n    }\n    result.sort(by:\
    \ {\n        decimal.compare($0, $1.decimal) == .orderedAscending\n    })\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxcruhcqe.swift:17:24: error: cannot find 'pow' in scope\n     \
    \       decimal += pow(2, ones)\n                       ^~~\n/tmp/tmpxcruhcqe.swift:22:20:\
    \ error: cannot find 'pow' in scope\n        decimal += pow(2, ones)\n       \
    \            ^~~\n/tmp/tmpxcruhcqe.swift:25:17: error: value of type 'Int' has\
    \ no member 'compare'\n        decimal.compare($0, $1.decimal) == .orderedAscending\n\
    \        ~~~~~~~ ^~~~~~~\n/tmp/tmpxcruhcqe.swift:25:32: error: value of type 'Int'\
    \ has no member 'decimal'\n        decimal.compare($0, $1.decimal) == .orderedAscending\n\
    \                            ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     sorted.append(num)\n        }\n    }\n    if oneCount > 0 {\n        sorted.sort()\n\
    \    } else {\n        sorted = arr\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpsazd6fn1.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.insert(result.count - oneCount,\
    \ num)\n                oneCount = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu_70u5f0.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpu_70u5f0.swift:17:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count - oneCount, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpu_70u5f0.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = arr\n    for i in 0..<arr.count {\n        if arr[i]\
    \ == 0 {\n            swap(&result[i], &result[i+1])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpt9hxpa6l.swift:13:18: error: overlapping accesses to 'result',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&result[i], &result[i+1])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            result.swapAt(i, i+1)\n/tmp/tmpt9hxpa6l.swift:13:30: note: conflicting\
    \ access is here\n            swap(&result[i], &result[i+1])\n               \
    \              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        if num == 1 {\n            ones += 1\n        }\
    \ else {\n            decimal += num\n        }\n    }\n    if ones > 0 {\n  \
    \      result = sort_array(arr)\n    }\n    if ones == 0 {\n        result.sort()\n\
    \    } else {\n        result.sort({ $0.decimalValue > $1.decimalValue })\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxud1ttbs.swift:21:29: error: missing argument label 'arr:' in call\n\
    \        result = sort_array(arr)\n                            ^\n           \
    \                 arr: \n/tmp/tmpxud1ttbs.swift:26:21: error: missing argument\
    \ label 'by:' in call\n        result.sort({ $0.decimalValue > $1.decimalValue\
    \ })\n                    ^\n                    by: \n/tmp/tmpxud1ttbs.swift:26:26:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        result.sort({\
    \ $0.decimalValue > $1.decimalValue })\n                      ~~ ^~~~~~~~~~~~\n\
    /tmp/tmpxud1ttbs.swift:26:44: error: value of type 'Int' has no member 'decimalValue'\n\
    \        result.sort({ $0.decimalValue > $1.decimalValue })\n                \
    \                        ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element * 2\n        }\n    }\n    if\
    \ ones > 0 {\n        result.sort()\n    } else {\n        result.sort(by: {$0.decimalValue\
    \ < $1.decimalValue})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpez64x3yx.swift:23:29: error: value of type 'Int' has no member\
    \ 'decimalValue'\n        result.sort(by: {$0.decimalValue < $1.decimalValue})\n\
    \                         ~~ ^~~~~~~~~~~~\n/tmp/tmpez64x3yx.swift:23:47: error:\
    \ value of type 'Int' has no member 'decimalValue'\n        result.sort(by: {$0.decimalValue\
    \ < $1.decimalValue})\n                                           ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{$0 > 0}\n    let decimals = arr.filter{$0\
    \ == 0}\n    let sorted = ones\n        .sorted()\n        .reversed()\n     \
    \   .map {\n            let index = Int($0) / Int(ones.count)\n            return\
    \ decimals[index] * ones.count + $0 - index * ones.count\n        }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b08ed1dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08eced6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b08eced6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b08eced613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b08eced5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b08eccd5e83 <unavailable> + 188035

    6    tmpo_nmwkcf                        0x00005615980eb819 <unavailable> + 10265

    7    tmpo_nmwkcf                        0x00005615980ebee4 <unavailable> + 12004

    8    libswiftCore.so                    0x00002b08ecebe820 Collection.map<A>(_:)
    + 426

    9    tmpo_nmwkcf                        0x00005615980eb52d <unavailable> + 9517

    10   tmpo_nmwkcf                        0x00005615980ea864 <unavailable> + 6244

    11   libc.so.6                          0x00002b08ed3cb460 __libc_start_main +
    245

    12   tmpo_nmwkcf                        0x00005615980ea539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n     \
    \   if ones == 0 {\n            result[i] = arr[i]\n        } else {\n       \
    \     result[i] = arr[i].trailingZeroBitCount > 0 ? arr[i].trailingZeroBitCount\
    \ : arr[i].trailingZeroBitCount.trailingZeroBitCount\n        }\n    }\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp782k3_9w/tmp782k3_9w.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b547f1f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b547eeefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b547eeef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b547eeee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp782k3_9w                        0x000055b0ba8c9784 <unavailable> + 6020

    5    libc.so.6                          0x00002b547f3e4460 __libc_start_main +
    245

    6    tmp782k3_9w                        0x000055b0ba8c9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var\
    \ k = arr.count\n    while i < k {\n        if arr[i] > arr[j] {\n           \
    \ result.append(arr[j])\n            j += 1\n        } else {\n            result.append(arr[i])\n\
    \            i += 1\n        }\n    }\n    result.append(arr[j])\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe4vyjaq8/tmpe4vyjaq8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba713f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba713c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba713c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba713c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4vyjaq8                        0x000055a6dfc80544 <unavailable> + 5444

    5    libc.so.6                          0x00002ba714150460 __libc_start_main +
    245

    6    tmpe4vyjaq8                        0x000055a6dfc80129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for element in arr {\n        if element == 1 {\n            ones += 1\n\
    \        } else {\n            decimal += element / 2\n        }\n    }\n    for\
    \ element in arr {\n        if element == 1 {\n            result += [element]\n\
    \        } else {\n            result += [element - decimal]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpaksptb43/tmpaksptb43.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02efa5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02ef754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02ef754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02ef7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaksptb43                        0x0000559f73c9d694 <unavailable> + 5780

    5    libc.so.6                          0x00002b02efc49460 __libc_start_main +
    245

    6    tmpaksptb43                        0x0000559f73c9d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    var dec = 0\n\
    \    for num in arr {\n        oneCount += num != 0\n        dec += num\n    }\n\
    \    if oneCount > 0 {\n        sorted = sorted.sorted { $0 < $1 }\n    }\n  \
    \  if oneCount == 0 {\n        sorted = sorted.sorted { $0 > $1 }\n    }\n   \
    \ if dec > 0 {\n        sorted = sorted.sorted { $0 < $1 }\n    }\n    if dec\
    \ == 0 {\n        sorted = sorted.sorted { $0 > $1 }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpcor077u9.swift:14:25: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        oneCount += num != 0\n            \
    \            ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let bin = binary(arr[i])\n        let index =\
    \ bin.index(of: \"1\")!\n        result[i] = arr[i]\n        result[index] = arr[i]\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpozmg0mom.swift:12:19: error: cannot find 'binary' in scope\n  \
    \      let bin = binary(arr[i])\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = arr\n    var ones = 0\n    for x in arr {\n   \
    \     if x == 1 {\n            ones += 1\n        } else {\n            if ones\
    \ > 0 {\n                ones = 0\n                let tmp = result\n        \
    \        result = tmp\n                result.append(x)\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpk91aqv33/tmpk91aqv33.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e762e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e75fd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e75fd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e75fd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk91aqv33                        0x0000560bc78715a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b2e764cd460 __libc_start_main +
    245

    6    tmpk91aqv33                        0x0000560bc7871189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        ones += (num & 1)\n        decimal += num\n   \
    \ }\n    if ones == 0 {\n        result = arr\n    } else {\n        result =\
    \ arr.sorted()\n    }\n    if decimal > 0 {\n        result = result.sorted()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpj7odqxpi/tmpj7odqxpi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbb59bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbb56b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbb56b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbb56b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj7odqxpi                        0x0000555c65bd6654 <unavailable> + 5716

    5    libc.so.6                          0x00002adbb5ba6460 __libc_start_main +
    245

    6    tmpj7odqxpi                        0x0000555c65bd6239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = [Int]()\n    var zeros\
    \ = [Int]()\n    for x in arr {\n        if x == 1 {\n            ones.append(x)\n\
    \        } else {\n            zeros.append(x)\n        }\n    }\n    ones = sort_array(ones)\n\
    \    zeros = sort_array(zeros)\n    for x in ones {\n        result.append(x)\n\
    \    }\n    for x in zeros {\n        result.append(x)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpltltqmrh.swift:20:23: error: missing argument label 'arr:' in call\n\
    \    ones = sort_array(ones)\n                      ^\n                      arr:\
    \ \n/tmp/tmpltltqmrh.swift:21:24: error: missing argument label 'arr:' in call\n\
    \    zeros = sort_array(zeros)\n                       ^\n                   \
    \    arr: \n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    guard arr.count > 0 else { return arr }\n    let ones = arr.filter\
    \ { $0 == 1 }\n    let decimals = arr.filter { $0 > 1 }\n    return decimals.sorted\
    \ { $0 < $1 }\n        .sorted { $0.compare($1) == .orderedAscending }\n     \
    \   .sorted { $0.compare($1) == .orderedAscending }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp01xet0v7.swift:14:22: error: value of type 'Int' has no member\
    \ 'compare'\n        .sorted { $0.compare($1) == .orderedAscending }\n       \
    \           ~~ ^~~~~~~\n/tmp/tmp01xet0v7.swift:15:22: error: value of type 'Int'\
    \ has no member 'compare'\n        .sorted { $0.compare($1) == .orderedAscending\
    \ }\n                  ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { $0.isOne($1) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp_wme1zt7.swift:10:28: error: value of type 'Int' has no member\
    \ 'isOne'\n    return arr.sorted { $0.isOne($1) }\n                        ~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sortedArr = arr\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        sortedArr = arr.sorted()\n    }\n    return sortedArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkh9cpqss.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var ones = 0\n    for v in arr {\n\
    \        if v == 1 {\n            ones += 1\n        } else {\n            sorted.append(v)\n\
    \        }\n    }\n    if ones == 0 {\n        return sorted\n    }\n    var decimal\
    \ = ones\n    var decimalIndex = 0\n    var decimalValue = 0\n    var decimalValueIndex\
    \ = 0\n    for v in arr {\n        if v == 1 {\n            decimalValue += v\n\
    \            decimalValueIndex += 1\n        } else {\n            decimalValue\
    \ -= v\n            decimalValueIndex += 1\n        }\n        if decimalValue\
    \ == 0 {\n            decimalIndex += 1\n            decimalValue = 0\n      \
    \  }\n    }\n    var decimalValue = decimalValue / decimalIndex\n    var decimalValueIndex\
    \ = decimalValueIndex / decimalIndex\n    var decimalIndex = 0\n    for v in arr\
    \ {\n        if v == 1 {\n            decimalValue += v\n            decimalValueIndex\
    \ += 1\n        } else {\n            decimalValue -= v\n            decimalValueIndex\
    \ += 1\n        }\n        if decimalValue == 0 {\n            decimalIndex +=\
    \ 1\n            decimalValue = 0\n        }\n    }\n    var decimalValue = decimalValue\
    \ / decimalIndex\n    var decimalValueIndex = decimalValueIndex / decimalIndex\n\
    \    for v in arr {\n        if v == 1 {\n            sorted.append(v)\n     \
    \   } else {\n            sorted.append(decimalValue)\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpz571vzrl.swift:39:9: error: invalid redeclaration of 'decimalValue'\n\
    \    var decimalValue = decimalValue / decimalIndex\n        ^\n/tmp/tmpz571vzrl.swift:24:9:\
    \ note: 'decimalValue' previously declared here\n    var decimalValue = 0\n  \
    \      ^\n/tmp/tmpz571vzrl.swift:40:9: error: invalid redeclaration of 'decimalValueIndex'\n\
    \    var decimalValueIndex = decimalValueIndex / decimalIndex\n        ^\n/tmp/tmpz571vzrl.swift:25:9:\
    \ note: 'decimalValueIndex' previously declared here\n    var decimalValueIndex\
    \ = 0\n        ^\n/tmp/tmpz571vzrl.swift:41:9: error: invalid redeclaration of\
    \ 'decimalIndex'\n    var decimalIndex = 0\n        ^\n/tmp/tmpz571vzrl.swift:23:9:\
    \ note: 'decimalIndex' previously declared here\n    var decimalIndex = 0\n  \
    \      ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { $0.isOdd && !$1.isOdd }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgtsu4iam.swift:10:28: error: value of type 'Int' has no member\
    \ 'isOdd'\n    return arr.sorted { $0.isOdd && !$1.isOdd }\n                 \
    \       ~~ ^~~~~\n/tmp/tmpgtsu4iam.swift:10:41: error: value of type 'Int' has\
    \ no member 'isOdd'\n    return arr.sorted { $0.isOdd && !$1.isOdd }\n       \
    \                              ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        oneCount += Int(num) == 1\n        decimalCount\
    \ += Int(num) * Int(num)\n    }\n    if oneCount > decimalCount {\n        sorted\
    \ = arr\n    } else {\n        sorted = arr.sorted()\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpd06np1fb.swift:14:30: error: cannot convert value of type 'Bool'\
    \ to expected argument type 'Int'\n        oneCount += Int(num) == 1\n       \
    \                      ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = [0]\n    var zeros = [0]\n\
    \    for x in arr {\n        if x == 1 {\n            ones = append(ones, 1)\n\
    \        } else {\n            zeros = append(zeros, 0)\n        }\n    }\n  \
    \  ones = append(ones, 0)\n    zeros = append(zeros, 0)\n    for x in ones {\n\
    \        for y in zeros {\n            if x == y {\n                result.append(x)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp1jap4q3c.swift:15:20: error: cannot find 'append' in scope\n  \
    \          ones = append(ones, 1)\n                   ^~~~~~\n/tmp/tmp1jap4q3c.swift:17:21:\
    \ error: cannot find 'append' in scope\n            zeros = append(zeros, 0)\n\
    \                    ^~~~~~\n/tmp/tmp1jap4q3c.swift:20:12: error: cannot find\
    \ 'append' in scope\n    ones = append(ones, 0)\n           ^~~~~~\n/tmp/tmp1jap4q3c.swift:21:13:\
    \ error: cannot find 'append' in scope\n    zeros = append(zeros, 0)\n       \
    \     ^~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var index = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            result.append(index)\n        }\n    \
    \    index++\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmph0tf1o6m.swift:16:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var count = 0\n    for k in arr {\n        if k == 1 {\n        \
    \    result.append(k)\n            count += 1\n        } else {\n            if\
    \ count > 0 {\n                result.append(count)\n                count = 0\n\
    \            }\n            result.append(k)\n        }\n    }\n    if count >\
    \ 0 {\n        result.append(count)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: Exception
  stderr: 'tmpa4oe5cnu/tmpa4oe5cnu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd13427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd1311eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd1311e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd1311d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4oe5cnu                        0x0000558455c19604 <unavailable> + 5636

    5    libc.so.6                          0x00002abd13613460 __libc_start_main +
    245

    6    tmpa4oe5cnu                        0x0000558455c191e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let ones = arr[i].binCount()\n        if ones\
    \ > 0 {\n            result[i] = arr[i]\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpbczuww8w.swift:12:27: error: value of type 'Int' has no member\
    \ 'binCount'\n        let ones = arr[i].binCount()\n                   ~~~~~~\
    \ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var ones = [Int]()\n    var decimals\
    \ = [Int]()\n    var decimalsSorted = [Int]()\n    var decimalsSortedIndex = [Int]()\n\
    \    var decimalsSortedIndexIndex = [Int]()\n    var decimalsSortedIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndex = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndex = [Int]()\n\
    \    var decimalsSortedIndexIndexIndexIndexIndexIndexIndex = [Int]()\n    var\
    \ decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndex = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmplodqb6.swift:30:9: error: invalid redeclaration of 'decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpmplodqb6.swift:29:9: note: 'decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\
    \ previously declared here\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpmplodqb6.swift:33:9: error: invalid redeclaration\
    \ of 'decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpmplodqb6.swift:32:9: note: 'decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\
    \ previously declared here\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpmplodqb6.swift:34:9: error: invalid redeclaration\
    \ of 'decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpmplodqb6.swift:32:9: note: 'decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\
    \ previously declared here\n    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpmplodqb6.swift:35:9: error: invalid redeclaration\
    \ of 'decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var decimalsSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [I"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones > 0 {\n                result.append((ones - 1) * 10 + num)\n         \
    \       ones = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0rk2ch7i.swift:20:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(result.count, num)\n        \
    \               ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.insert(result.count - oneCount,\
    \ num)\n                oneCount = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpu_70u5f0.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpu_70u5f0.swift:17:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count - oneCount, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpu_70u5f0.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in arr {\n        var count\
    \ = 0\n        for y in x {\n            if y == 1 {\n                count +=\
    \ 1\n            }\n        }\n        if count == 0 {\n            result.append(x)\n\
    \        } else {\n            var decimal = count / 2\n            var remainder\
    \ = count % 2\n            if remainder == 0 {\n                result.append(decimal)\n\
    \            } else {\n                result.append(decimal * 10 + remainder)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmppy854ed7.swift:13:18: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n        for y in x {\n                 ^\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{ $0 != 0 }\n    let decimals = arr.filter{\
    \ $0 == 0 }\n    \n    let sortedOnes = ones.sorted()\n    let sortedDecimals\
    \ = decimals.sorted()\n    \n    return sortedOnes + sortedDecimals\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpcmvqbsku/tmpcmvqbsku.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66d4acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66d47c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66d47c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66d47c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmvqbsku                        0x000055ad0fe705a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b66d4cb9460 __libc_start_main +
    245

    6    tmpcmvqbsku                        0x000055ad0fe70189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            oneCount++\n        } else\
    \ {\n            result.insert(element, oneCount)\n            oneCount = 0\n\
    \        }\n    }\n    if oneCount > 0 {\n        result.insert(element, oneCount)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvdxek5yh.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpvdxek5yh.swift:16:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(element,\
    \ oneCount)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n/tmp/tmpvdxek5yh.swift:21:23: error: cannot find\
    \ 'element' in scope\n        result.insert(element, oneCount)\n             \
    \         ^~~~~~~\n/tmp/tmpvdxek5yh.swift:21:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(element, oneCount)\n    \
    \           ^\n/tmp/tmpvdxek5yh.swift:21:16: note: found candidate with type '(__owned\
    \ Int, Int) -> ()'\n        result.insert(element, oneCount)\n               ^\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var ones = 0\n    var decimal = 0\n\
    \    for num in arr {\n        ones = num.trailingZeroBitCount()\n        decimal\
    \ = num.decimalValue()\n        if ones > 0 {\n            sorted = sorted + [decimal]\n\
    \        } else {\n            sorted = sorted + [ones]\n        }\n    }\n  \
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmplcli87sz.swift:14:20: error: cannot call value of non-function\
    \ type 'Int'\n        ones = num.trailingZeroBitCount()\n                   ^\
    \                   ~~\n                                       \n/tmp/tmplcli87sz.swift:15:23:\
    \ error: value of type 'Int' has no member 'decimalValue'\n        decimal = num.decimalValue()\n\
    \                  ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for element\
    \ in arr {\n        if element == 1 {\n            oneCount++\n        } else\
    \ {\n            if oneCount > 0 {\n                result.append((oneCount -\
    \ 1) * 10 + element)\n                oneCount = 0\n            } else {\n   \
    \             result.insert(element, at: 0)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpncsupj_f.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\n\
    \                oneCount = 0\n            } else {\n                result.insert(result.end(),\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqpf3sg6b.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpqpf3sg6b.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.end(), num)\n                       ^\n/tmp/tmpqpf3sg6b.swift:20:24:\
    \ note: found candidate with type '(__owned Int, Int) -> ()'\n               \
    \ result.insert(result.end(), num)\n                       ^\n/tmp/tmpqpf3sg6b.swift:20:38:\
    \ error: value of type '[Int]' has no member 'end'\n                result.insert(result.end(),\
    \ num)\n                              ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sortedArr = arr\n    \n    for i in 0..<arr.count {\n  \
    \      let ones = arr[i].trailingZeroBitCount\n        \n        if ones > 0 {\n\
    \            sortedArr = sortedArr.sorted(by: {$0.trailingZeroBitCount > $1.trailingZeroBitCount})\n\
    \        }\n        \n        if ones < 0 {\n            sortedArr = sortedArr.sorted(by:\
    \ {$0.trailingZeroBitCount < $1.trailingZeroBitCount})\n        }\n    }\n   \
    \ \n    return sortedArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv6l23ywb/tmpv6l23ywb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b05500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b051f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b051f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b051f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6l23ywb                        0x000055ab459fb694 <unavailable> + 5780

    5    libc.so.6                          0x00002b1b056ec460 __libc_start_main +
    245

    6    tmpv6l23ywb                        0x000055ab459fb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let len = arr.count\n    var result = [Int]()\n    var i = 0\n\
    \    var j = 0\n    var k = 0\n    var temp = 0\n    var count = 0\n    while\
    \ i < len {\n        j = i\n        while j < len {\n            k = j\n     \
    \       while k < len {\n                if arr[k] == 1 {\n                  \
    \  count += 1\n                } else {\n                    count = 0\n     \
    \           }\n                temp = arr[k]\n                arr[k] = arr[j]\n\
    \                arr[j] = temp\n                k += 1\n            }\n      \
    \      j += 1\n        }\n        result.insert(arr[i], at: i)\n        i += 1\n\
    \    }\n    if count > 0 {\n        result.insert(arr[i], at: i)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3wihyw0k.swift:28:20: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n                arr[k] = arr[j]\n                ~~~^\n\
    /tmp/tmp3wihyw0k.swift:29:20: error: cannot assign through subscript: 'arr' is\
    \ a 'let' constant\n                arr[j] = temp\n                ~~~^\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    for num in arr {\n        if num == 0 {\n            result.append(i)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpnfwew6d3/tmpnfwew6d3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b857b847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b857b53eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b857b53e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b857b53d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfwew6d3                        0x000055773b1bd604 <unavailable> + 5636

    5    libc.so.6                          0x00002b857ba33460 __libc_start_main +
    245

    6    tmpnfwew6d3                        0x000055773b1bd1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var count = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            sorted.append(num)\n            count\
    \ += 1\n        } else {\n            if count > 0 {\n                sorted.append(count)\n\
    \                count = 0\n            }\n            sorted.append(num)\n  \
    \      }\n    }\n    if count > 0 {\n        sorted.append(count)\n    }\n   \
    \ return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpc7a69_rz/tmpc7a69_rz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c94416c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c9410db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c9410d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c9410c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7a69_rz                        0x0000564ece672604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0c94602460 __libc_start_main +
    245

    6    tmpc7a69_rz                        0x0000564ece6721e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    \n    var result = Array(repeating: 0, count: arr.count)\n \
    \   \n    for i in 0..<arr.count {\n        let bin = String(format: \"%b\", arr[i])\n\
    \        let count = bin.characters.filter({ $0 == \"1\" }).count\n        result[i]\
    \ = Int(bin.characters.filter({ $0 == \"1\" }).count) / Int(bin.characters.count)\n\
    \    }\n    \n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpgx7to38u.swift:14:25: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let bin = String(format:\
    \ \"%b\", arr[i])\n                        ^~~~~~~\n                         repeating\
    \     count: \n"
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    var decimalCount\
    \ = 0\n    for num in arr {\n        if num == 1 {\n            oneCount++\n \
    \       } else {\n            decimalCount += num\n        }\n    }\n    if oneCount\
    \ > decimalCount {\n        for num in arr {\n            if num == 1 {\n    \
    \            result.insert(result.count-1, num)\n            }\n        }\n  \
    \  } else {\n        for num in arr {\n            if num == 1 {\n           \
    \     result.insert(result.count, num)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8whv7etr.swift:15:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmp8whv7etr.swift:23:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count-1, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmp8whv7etr.swift:29:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\n\
    \                oneCount = 0\n            } else {\n                result.insert(result.count,\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmph3r3s9kj.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmph3r3s9kj.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.count, num)\n                       ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var ones = 0\n    for num in arr {\n\
    \        if num == 1 {\n            ones += 1\n        } else {\n            if\
    \ ones > 0 {\n                result.append((ones - 1) * 10)\n            }\n\
    \            ones = 1\n            result.append(num)\n        }\n    }\n    if\
    \ ones > 0 {\n        result.append((ones - 1) * 10)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpd6roddzx/tmpd6roddzx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9683f06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9683bfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9683bfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9683bfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6roddzx                        0x000056260ac47604 <unavailable> + 5636

    5    libc.so.6                          0x00002b96840f2460 __libc_start_main +
    245

    6    tmpd6roddzx                        0x000056260ac471e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for num in arr {\n\
    \        if num == 1 {\n            result.append(i)\n        }\n        i +=\
    \ 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4sotu4gb/tmp4sotu4gb.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb4476c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb416db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb416d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb416c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sotu4gb                        0x0000559078058724 <unavailable> + 5924

    5    libc.so.6                          0x00002aafb4662460 __libc_start_main +
    245

    6    tmp4sotu4gb                        0x0000559078058309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.append((oneCount - 1) * 10 + num)\n\
    \                oneCount = 0\n            } else {\n                result.insert(result.end(),\
    \ num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqpf3sg6b.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpqpf3sg6b.swift:20:24:\
    \ error: no exact matches in call to instance method 'insert'\n              \
    \  result.insert(result.end(), num)\n                       ^\n/tmp/tmpqpf3sg6b.swift:20:24:\
    \ note: found candidate with type '(__owned Int, Int) -> ()'\n               \
    \ result.insert(result.end(), num)\n                       ^\n/tmp/tmpqpf3sg6b.swift:20:38:\
    \ error: value of type '[Int]' has no member 'end'\n                result.insert(result.end(),\
    \ num)\n                              ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = Array(repeating: 0, count: arr.count)\n    for\
    \ i in 0..<arr.count {\n        let ones = arr[i].trailingZeroBitCount\n     \
    \   if ones > 0 {\n            result[i] = arr[i]\n        } else {\n        \
    \    result[i] = arr[i] * 10 + arr[i].trailingZeroBitCount\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp01zvsjed/tmp01zvsjed.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32ccfebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32ccce2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32ccce2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32ccce17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01zvsjed                        0x0000560c07c8e784 <unavailable> + 6020

    5    libc.so.6                          0x00002b32cd1d7460 __libc_start_main +
    245

    6    tmp01zvsjed                        0x0000560c07c8e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpe9qb6ty6/tmpe9qb6ty6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b494f6e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b494f3e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b494f3e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494f3df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qb6ty6                        0x000055ab175a6494 <unavailable> + 5268

    5    libc.so.6                          0x00002b494f8d5460 __libc_start_main +
    245

    6    tmpe9qb6ty6                        0x000055ab175a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659824882
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let ones = arr.filter{$0 > 0}\n    let decimals = arr.filter{$0\
    \ == 0}\n    let sortedOnes = ones.sorted()\n    let sortedDecimals = decimals.sorted()\n\
    \    return sortedOnes + sortedDecimals\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp8pt4pz3o/tmp8pt4pz3o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c5b0fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c5adf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c5adf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c5adf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pt4pz3o                        0x000055b5d31345a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b6c5b2e8460 __libc_start_main +
    245

    6    tmp8pt4pz3o                        0x000055b5d3134189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                result.sort()\n                oneCount\
    \ = 0\n            }\n            result.append(num)\n        }\n    }\n    if\
    \ oneCount > 0 {\n        result.sort()\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9j2gwzet.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n"
  stdout: ''
  timestamp: 1659824882
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    guard arr.count > 0 else { return arr }\n    var result = [Int]()\n\
    \    var oneCount = 0\n    var decimalCount = 0\n    for i in arr {\n        if\
    \ i == 1 {\n            oneCount++\n        } else {\n            decimalCount\
    \ += Int(pow(2.0, Double(decimalCount)))\n        }\n    }\n    if oneCount >\
    \ decimalCount {\n        for i in arr {\n            if i == 1 {\n          \
    \      result.append(i)\n            }\n        }\n    } else {\n        for i\
    \ in arr {\n            if i == 1 {\n                result.append(decimalCount)\n\
    \            }\n            decimalCount += Int(pow(2.0, Double(decimalCount)))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpwdmc4zqz.swift:16:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpwdmc4zqz.swift:18:33:\
    \ error: cannot find 'pow' in scope\n            decimalCount += Int(pow(2.0,\
    \ Double(decimalCount)))\n                                ^~~\n/tmp/tmpwdmc4zqz.swift:32:33:\
    \ error: cannot find 'pow' in scope\n            decimalCount += Int(pow(2.0,\
    \ Double(decimalCount)))\n                                ^~~\n"
  stdout: ''
  timestamp: 1659824884
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = [Int]()\n    var oneCount = 0\n    for num in arr\
    \ {\n        if num == 1 {\n            oneCount++\n        } else {\n       \
    \     if oneCount > 0 {\n                sorted = append(sorted, oneCount)\n \
    \               oneCount = 0\n            }\n            sorted = append(sorted,\
    \ num)\n        }\n    }\n    if oneCount > 0 {\n        sorted = append(sorted,\
    \ oneCount)\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvb8jwit8.swift:14:21: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            oneCount++\n                    ^~\n/tmp/tmpvb8jwit8.swift:17:26:\
    \ error: cannot find 'append' in scope\n                sorted = append(sorted,\
    \ oneCount)\n                         ^~~~~~\n/tmp/tmpvb8jwit8.swift:20:22: error:\
    \ cannot find 'append' in scope\n            sorted = append(sorted, num)\n  \
    \                   ^~~~~~\n/tmp/tmpvb8jwit8.swift:24:18: error: cannot find 'append'\
    \ in scope\n        sorted = append(sorted, oneCount)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1659824884
