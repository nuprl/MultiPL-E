name: HumanEval_105_by_length
language: swift
prompt: "\n/// Given an array of integers, sort the integers that are between 1 and\
  \ 9 inclusive,\n/// reverse the resulting array, and then replace each digit by\
  \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr = [2, 1, 1,\
  \ 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n/// -> reverse\
  \ arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\", \"Four\", \"\
  Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return\
  \ an empty array:\n/// arr = []\n/// return []\n/// If the array has any strange\
  \ number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr -> [-1, 1, 55]\n///\
  \ -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc by_length(arr: [Int])\
  \ -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3])\
  \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
  ])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
  \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
  , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\",\
  \ \"Four\"])"
completions: ["    guard arr.count > 0 else { return [] }\n    let sortedArr = arr.sorted()\n\
    \    let reversedArr = reverseArray(sortedArr)\n    let resultArr = reversedArr.map\
    \ { $0.description.localizedStandardForm() }\n    return resultArr", "    var\
    \ result = [String]()\n    if arr.isEmpty {\n        return result\n    }\n  \
    \  let min = arr[0]\n    let max = arr[0]\n    for i in arr {\n        if i <\
    \ min {\n            min = i\n        } else if i > max {\n            max = i\n\
    \        }\n    }\n    if min == max {\n        return result\n    }\n    let\
    \ minStr = String(min)\n    let maxStr = String(max)\n    for i in arr {\n   \
    \     if i < min {\n            result.append(minStr)\n        } else if i > max\
    \ {\n            result.append(maxStr)\n        } else {\n            result.append(String(i\
    \ - min))\n        }\n    }\n    return result", "    var result = [String]()\n\
    \    var len = arr.count\n    if len == 0 {\n        return result\n    }\n  \
    \  if len == 1 {\n        if arr[0] == 1 {\n            return [\"One\"]\n   \
    \     }\n        return arr\n    }\n    var min = 1\n    var max = 9\n    var\
    \ min_index = 0\n    var max_index = 0\n    for index in 0..<len {\n        if\
    \ arr[index] < min {\n            min = arr[index]\n            min_index = index\n\
    \        }\n        if arr[index] > max {\n            max = arr[index]\n    \
    \        max_index = index\n        }\n    }\n    if max == min {\n        return\
    \ arr\n    }\n    var min_ind = min_index\n    var max_ind = max_index\n    for\
    \ index in min_index..<max_index {\n        let digit = arr[index]\n        let\
    \ name = String(digit)\n        if digit == 1 {\n            result.append(name)\n\
    \        } else {\n            result.append(name.reversed())\n        }\n   \
    \ }\n    return result", "    var result = [String]()\n    if arr.isEmpty {\n\
    \        return result\n    }\n    let minLength = min(arr.count, 9)\n    for\
    \ i in minLength...9 {\n        let index = arr.index(of: i)\n        let value\
    \ = arr[index]\n        if value < 1 {\n            continue\n        }\n    \
    \    let name = String(value)\n        result.append(name)\n    }\n    return\
    \ result", "    guard !arr.isEmpty else { return [] }\n    var result = [String]()\n\
    \    var index = 0\n    var last = 0\n    var current = 0\n    while index < arr.count\
    \ {\n        current = arr[index]\n        if current > last {\n            result.append(String(arr[last]))\n\
    \            last = current\n        } else {\n            result.append(String(current))\n\
    \        }\n        index += 1\n    }\n    result.append(String(arr[last]))\n\
    \    return result", "    var result = [String]()\n    if arr.isEmpty {\n    \
    \    return result\n    }\n    let min = arr[0]\n    let max = arr[0]\n    for\
    \ i in arr {\n        if i < min {\n            min = i\n        }\n        if\
    \ i > max {\n            max = i\n        }\n    }\n    let range = (max - min)\
    \ + 1\n    for i in arr {\n        let index = i - min\n        if index < range\
    \ {\n            result.append(String(index))\n        } else {\n            let\
    \ index = range - index - 1\n            result.append(String(index))\n      \
    \  }\n    }\n    return result", "    if arr.isEmpty {\n        return []\n  \
    \  }\n    var result = [String]()\n    var i = 0\n    var j = 0\n    var k = arr.count\n\
    \    while i < k {\n        if arr[i] < 1 || arr[i] > 9 {\n            i += 1\n\
    \            continue\n        }\n        j = i\n        while j < k {\n     \
    \       if arr[j] < 1 || arr[j] > 9 {\n                j += 1\n              \
    \  continue\n            }\n            if arr[j] == arr[i] {\n              \
    \  i += 1\n                j += 1\n                continue\n            }\n \
    \           if arr[j] > arr[i] {\n                result.insert(String(arr[i]),\
    \ at: j)\n                i += 1\n                j += 1\n                continue\n\
    \            }\n            if arr[j] < arr[i] {\n                result.insert(String(arr[j]),\
    \ at: i)\n                j += 1\n                i += 1\n                continue\n\
    \            }\n        }\n    }\n    return result", "    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in arr {\n        if i < min {\n            min\
    \ = i\n        } else if i > max {\n            max = i\n        }\n    }\n  \
    \  let minLen = min.distance(to: max)\n    for i in arr {\n        let len = i.distance(to:\
    \ max)\n        if len < minLen {\n            minLen = len\n        }\n    }\n\
    \    for i in arr {\n        let len = i.distance(to: max)\n        if len ==\
    \ minLen {\n            result.append(String(format: \"%@\", i))\n        }\n\
    \    }\n    return result", "    var result = [String]()\n    var i = 0\n    for\
    \ n in arr {\n        if n < 10 {\n            result.append(String(format: \"\
    %d\\\"\", n))\n        } else {\n            result.append(String(format: \"%d\\\
    \"\", n - 10))\n        }\n    }\n    \n    for n in arr {\n        if n < 10\
    \ {\n            result.append(String(format: \"%d\\\"\", n))\n        } else\
    \ {\n            result.append(String(format: \"%d\\\"\", n - 10))\n        }\n\
    \    }\n    \n    return result.reverse()", "    if arr.isEmpty {\n        return\
    \ []\n    }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    var result = [String]()\n    for i in 0..<reversed.count {\n        let index\
    \ = reversed[i]\n        if index >= 1 && index <= 9 {\n            result.append(String(index))\n\
    \        }\n    }\n    return result", "    guard arr.count > 0 else { return\
    \ [] }\n    let min = min(arr)\n    let max = max(arr)\n    var result = [String]()\n\
    \    for n in arr {\n        if n < min || n > max {\n            continue\n \
    \       }\n        let index = n - min\n        result.append(names[index])\n\
    \    }\n    return result", "    guard arr.count > 0 else { return [] }\n    let\
    \ one = arr[0]\n    let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n\
    \    let five = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let\
    \ eight = arr[7]\n    let nine = arr[8]\n    let ten = arr[9]\n    let eleven\
    \ = arr[10]\n    let twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen\
    \ = arr[13]\n    let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen\
    \ = arr[16]\n    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty\
    \ = arr[19]\n    let thirty = arr[20]\n    let fourty = arr[21]\n    let fifty\
    \ = arr[22]\n    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty\
    \ = arr[25]\n    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand\
    \ = arr[28]\n    let million = arr[29]\n    let billion = arr[30]\n    let trillion\
    \ = arr[31]\n    let quadrillion = arr[32]\n    let quintillion = arr[33]\n  \
    \  let sextillion = arr[34]\n    let septillion = arr[35]\n    let octillion =\
    \ arr[36]\n    let nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion\
    \ = arr[39]\n    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n\
    \    let quattuordecillion = arr[42]\n    let quindecillion = arr[43]\n    let\
    \ sexdecillion = arr[44]\n    let septendecillion = arr[45]\n    let octodecillion\
    \ = arr[46]\n    let novemdecillion = arr[47]\n    let vigintillion = arr[48]\n\
    \    let unvigintillion = arr[49]\n    let duovigintillion = arr[50]\n    let\
    \ trevigintillion = arr[51]\n    let quattuorvigintillion = arr[52]\n    let quinvigintillion\
    \ = arr[53]\n    let sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n\
    \    let octovigintillion = arr[56]", "    if arr.isEmpty {\n        return []\n\
    \    }\n    let sorted = arr.sorted()\n    let reversed = sorted.reversed()\n\
    \    let reversedString = reversed.map { String($0) }\n    let ones = reversedString.filter{\
    \ $0 == \"1\" }\n    let twos = reversedString.filter{ $0 == \"2\" }\n    let\
    \ threes = reversedString.filter{ $0 == \"3\" }\n    let fours = reversedString.filter{\
    \ $0 == \"4\" }\n    let fives = reversedString.filter{ $0 == \"5\" }\n    let\
    \ sixes = reversedString.filter{ $0 == \"6\" }\n    let sevens = reversedString.filter{\
    \ $0 == \"7\" }\n    let eights = reversedString.filter{ $0 == \"8\" }\n    let\
    \ nines = reversedString.filter{ $0 == \"9\" }\n    return ones.map { \"One\"\
    \ }\n    + twos.map { \"Two\" }\n    + threes.map { \"Three\" }\n    + fours.map\
    \ { \"Four\" }\n    + fives.map { \"Five\" }\n    + sixes.map { \"Six\" }\n  \
    \  + sevens.map { \"Seven\" }\n    + eights.map { \"Eight\" }\n    + nines.map\
    \ { \"Nine\" }", "    if arr.isEmpty {\n        return []\n    }\n    let sortedArr\
    \ = arr.sorted()\n    let reverseArr = sortedArr.reversed()\n    let oneToNine\
    \ = reverseArr.map { String($0) }\n    let oneToNineReversed = oneToNine.reversed()\n\
    \    let oneToNineReversedString = oneToNineReversed.map { String($0) }\n    let\
    \ oneToNineReversedStringArray = oneToNineReversedString.map { Int($0) }\n   \
    \ let oneToNineReversedStringArraySorted = oneToNineReversedStringArray.sorted()\n\
    \    let oneToNineReversedStringArraySortedString = oneToNineReversedStringArraySorted.map\
    \ { String($0) }\n    return oneToNineReversedStringArraySortedString", "    var\
    \ result = [String]()\n    \n    if arr.isEmpty {\n        return result\n   \
    \ }\n    \n    let min = min(arr)\n    let max = max(arr)\n    \n    for i in\
    \ arr {\n        if i >= min && i <= max {\n            result.append(names[i])\n\
    \        }\n    }\n    \n    return result", "    guard arr.count > 0 else { return\
    \ [] }\n    let len = arr.count\n    var result = [String]()\n    var index =\
    \ 0\n    while index < len {\n        let value = arr[index]\n        let index\
    \ = index + 1\n        if value < 1 || value > 9 {\n            continue\n   \
    \     }\n        let index = index - 1\n        let value = value - 10\n     \
    \   let index = index - 1\n        let value = value - 1\n        let index =\
    \ index - 1\n        let value = value - 1\n        let index = index - 1\n  \
    \      let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1\n\
    \        let index = index - 1\n        let value = value - 1\n        let index\
    \ = index - 1\n        let value = value - 1\n        let index = index - 1\n\
    \        let value = value - 1\n        let index = index - 1\n        let value\
    \ = value - 1\n        let index = index - 1\n        let value = value - 1",
  "    guard arr.count > 0 else { return [] }\n    let min = arr.min()!\n    let max\
    \ = arr.max()!\n    var result = [String]()\n    for n in arr {\n        if n\
    \ > min && n < max {\n            result.append(name(n))\n        }\n    }\n \
    \   return result", "    guard arr.count > 0 else { return [] }\n    let sortedArr\
    \ = arr.sorted(by: { $0 < $1 })\n    let reverseArr = sortedArr.reversed()\n \
    \   var result = [String]()\n    for n in reverseArr {\n        let index = sortedArr.index(of:\
    \ n)\n        result.append(String(sortedArr.prefix(index)))\n    }\n    return\
    \ result", "    var result = [String]()\n    if arr.isEmpty {\n        return\
    \ result\n    }\n    let min = 1\n    let max = 9\n    var min_index = 0\n   \
    \ var max_index = 0\n    var min_value = arr[min_index]\n    var max_value = arr[max_index]\n\
    \    for index in 0..<arr.count {\n        if arr[index] < min_value {\n     \
    \       min_value = arr[index]\n            min_index = index\n        }\n   \
    \     if arr[index] > max_value {\n            max_value = arr[index]\n      \
    \      max_index = index\n        }\n    }\n    if min_value == max_value {\n\
    \        result.append(\"One\")\n    } else {\n        var temp = min_value\n\
    \        var temp_min = min_value\n        var temp_max = max_value\n        while\
    \ temp_min <= temp_max {\n            if temp_min < temp_max {\n             \
    \   let index = temp_min + (temp_max - temp_min)\n                result.append(names[index])\n\
    \                temp_min = temp_min + 1\n                temp_max = temp_max\
    \ - 1\n            }\n            temp = temp + 1\n        }\n    }\n    return\
    \ result", "    var result = [String]()\n    \n    if arr.isEmpty {\n        return\
    \ result\n    }\n    \n    let min = min(arr)\n    let max = max(arr)\n    \n\
    \    if min == max {\n        return [\"One\"]\n    }\n    \n    let ones = arr.filter{\
    \ $0 == 1 }\n    let tens = arr.filter{ $0 == 10 }\n    let hundreds = arr.filter{\
    \ $0 == 100 }\n    \n    if ones.isEmpty {\n        return [\"One\"]\n    }\n\
    \    \n    if tens.isEmpty {\n        return [\"Ten\"]\n    }\n    \n    if hundreds.isEmpty\
    \ {\n        return [\"Hundred\"]\n    }\n    \n    let tensCount = tens.count\n\
    \    let hundredsCount = hundreds.count\n    \n    if tensCount > 1 {\n      \
    \  result.append(\"Ten\")\n    }\n    \n    if hundredsCount > 1 {\n        result.append(\"\
    Hundred\")\n    }\n    \n    if tensCount > 1 {\n        result.append(\"One\"\
    )\n    }\n    \n    if tensCount > 1 {\n        result.append(\"Ten\")\n    }\n\
    \    \n    if hundredsCount > 1 {\n        result.append(\"Hundred\")\n    }\n\
    \    \n    if tensCount > 1 {\n        result.append(\"One\")\n    }\n    \n \
    \   if tensCount > 1 {\n        result.append(\"Ten\")\n    }\n    \n    if hundredsCount\
    \ > 1 {\n        result.append(\"Hundred\")\n    }\n    \n    if tensCount > 1\
    \ {\n        result.append(\"One\")\n    }\n    \n    if tensCount > 1 {\n   \
    \     result.append(\"Ten\")\n    }\n    \n    if hundredsCount > 1 {\n      \
    \  result.append(\"Hundred\")\n    }\n    \n    if tensCount > 1 {\n        result.append(\"\
    One\")\n    }\n    \n    if tensCount > 1 {\n        result.append(\"Ten\")\n\
    \    }\n    \n    if hundredsCount > 1 {\n        result.append(\"Hundred\")\n\
    \    }\n    \n    if tensCount > 1 {\n        result.append(\"One\")\n    }\n\
    \    \n    if tensCount > 1 {\n        result.append(\"Ten\")\n    }\n    \n \
    \   if hundredsCount > 1 {\n        result.append(\"Hundred\")\n    }\n    \n\
    \    if tensCount > 1 {\n        result.append(\"One\")\n    }\n    \n    if tensCount\
    \ > 1 {\n        result.append(\"Ten\")\n    }\n    \n    if hundredsCount > 1\
    \ {\n        result.append(\"Hundred\")\n    }\n    \n    if tensCount > 1 {\n\
    \        result.append(\"One\")\n    }\n    \n"]
stop_tokens:
- "\n}"
