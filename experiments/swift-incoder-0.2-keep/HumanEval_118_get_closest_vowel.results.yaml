language: swift
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    if word == \"\" {\n        return \"\"\n    }\n   \
    \ var vowels: [String] = []\n    for char in word.unicodeScalars {\n        if\
    \ char.value > 0x41 && char.value < 0x5A {\n            vowels.append(char.value)\n\
    \        }\n    }\n    if vowels.count < 2 {\n        return \"\"\n    }\n   \
    \ var vowelIndex = 0\n    var vowelCount = 0\n    for char in word.unicodeScalars\
    \ {\n        if char.value > 0x41 && char.value < 0x5A {\n            if vowels[vowelIndex]\
    \ == char.value {\n                vowelIndex++\n                vowelCount++\n\
    \            }\n        }\n    }\n    if vowelCount < 2 {\n        return \"\"\
    \n    }\n    if vowelIndex == 0 {\n        return \"\"\n    }\n    if vowelIndex\
    \ == 1 {\n        return vowels[vowelIndex-1]\n    }\n    if vowelIndex == 2 {\n\
    \        return vowels[vowelIndex-2]\n    }\n    if vowelIndex == 3 {\n      \
    \  return vowels[vowelIndex-3]\n    }\n    if vowelIndex == 4 {\n        return\
    \ vowels[vowelIndex-4]\n    }\n    if vowelIndex == 5 {\n        return vowels[vowelIndex-5]\n\
    \    }\n    if vowelIndex == 6 {\n        return vowels[vowelIndex-6]\n    }\n\
    \    if vowelIndex == 7 {\n        return vowels[vowelIndex-7]\n    }\n    if\
    \ vowelIndex == 8 {\n        return vowels[vowelIndex-8]\n    }\n    if vowelIndex\
    \ == 9 {\n        return vowels[vowelIndex-9]\n    }\n    if vowelIndex == 10\
    \ {\n        return vowels[vowelIndex-10]\n    }\n    if vowelIndex == 11 {\n\
    \        return vowels[vowelIndex-11]\n    }\n    if vowelIndex == 12 {\n    \
    \    return vowels[vowelIndex-12]\n    }\n    if vowelIndex == 13 {\n        return\
    \ vowels[vowelIndex-13]\n    }\n    if vowelIndex == 14 {\n        return vowels[vowelIndex-14]\n\
    \    }\n    if vowelIndex == 15 {\n        return vowels[vowelIndex-15]\n    }\n\
    \    if vowelIndex == 16 {\n        return vowels[vowelIndex-16]\n    }\n    if\
    \ vowelIndex == 17 {\n        return vowels[vowelIndex-17]\n    }\n    if vowelIndex\
    \ == 18 {\n        return vowels[vowelIndex-18]\n    }\n    if vowelIndex == 19\
    \ {\n        return vowels[vowelIndex-19]\n    }\n    if vowelIndex == 20 {\n\
    \        return vowels[vowelIndex-20]\n    }\n    if vowelIndex == 21 {\n    \
    \    return vowels[vowelIndex-21]\n    }\n    if vowelIndex == 22 {\n        return\
    \ vowels[vowelIndex-22]\n    }\n    if vowelIndex == 23 {\n        return \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmps9gvh_oh.swift:136:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmps9gvh_oh.swift:12:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmps9gvh_oh.swift:19:32: error: cannot convert\
    \ value of type 'UInt32' to expected argument type 'String'\n            vowels.append(char.value)\n\
    \                               ^\n/tmp/tmps9gvh_oh.swift:29:35: error: binary\
    \ operator '==' cannot be applied to operands of type 'String' and 'UInt32'\n\
    \            if vowels[vowelIndex] == char.value {\n               ~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~\n/tmp/tmps9gvh_oh.swift:29:35: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (String, String), (UInt32, UInt32)\n\
    \            if vowels[vowelIndex] == char.value {\n                         \
    \         ^\n/tmp/tmps9gvh_oh.swift:30:27: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n                vowelIndex++\n                \
    \          ^~\n/tmp/tmps9gvh_oh.swift:31:27: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n                vowelCount++\n             \
    \             ^~\n/tmp/tmps9gvh_oh.swift:108:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmps9gvh_oh.swift:112:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = 1\n    var vowelsIndex\
    \ = 0\n    \n    for index in word.characters.reverse() {\n        if vowelsCount\
    \ > vowels.count {\n            vowelsIndex = word.characters.count - 1\n    \
    \        break\n        }\n        \n        if vowelsIndex == 0 {\n         \
    \   if vowels[index] == word[index] {\n                vowelsCount += 1\n    \
    \        } else {\n                vowelsIndex -= 1\n            }\n        }\
    \ else {\n            if vowels[index] == word[index] {\n                vowelsCount\
    \ += 1\n                vowelsIndex -= 1\n            } else {\n             \
    \   vowelsIndex -= 1\n            }\n        }\n    }\n    \n    return vowels[vowelsIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphkjql3gc.swift:23:34: error: value of type 'String' has no member\
    \ 'reverse'\n    for index in word.characters.reverse() {\n                 ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for index\
    \ in word.characters.reverse() {\n        if index == \" \" {\n            vowelIndex\
    \ += 1\n            continue\n        }\n        if index == \"a\" || index ==\
    \ \"e\" || index == \"i\" || index == \"o\" || index == \"u\" {\n            vowelIndex\
    \ = word.characters.reverse().index(index, offsetBy: vowelIndex) + 1\n       \
    \     vowel = String(word.characters.reverse()[vowelIndex])\n            break\n\
    \        }\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9v5cp7zi.swift:15:34: error: value of type 'String' has no member\
    \ 'reverse'\n    for index in word.characters.reverse() {\n                 ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndexEnd = vowelsIndex\
    \ + vowelsCount\n    var vowelsIndexStart = vowelsIndex - vowelsCount\n    var\
    \ vowelsIndexEnd2 = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart2 =\
    \ vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd3 = vowelsIndexEnd + vowelsCount\n\
    \    var vowelsIndexStart3 = vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd4\
    \ = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart4 = vowelsIndexStart\
    \ - vowelsCount\n    var vowelsIndexEnd5 = vowelsIndexEnd + vowelsCount\n    var\
    \ vowelsIndexStart5 = vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd6\
    \ = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart6 = vowelsIndexStart\
    \ - vowelsCount\n    var vowelsIndexEnd7 = vowelsIndexEnd + vowelsCount\n    var\
    \ vowelsIndexStart7 = vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd8\
    \ = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart8 = vowelsIndexStart\
    \ - vowelsCount\n    var vowelsIndexEnd9 = vowelsIndexEnd + vowelsCount\n    var\
    \ vowelsIndexStart9 = vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd10\
    \ = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart10 = vowelsIndexStart\
    \ - vowelsCount\n    var vowelsIndexEnd11 = vowelsIndexEnd + vowelsCount\n   \
    \ var vowelsIndexStart11 = vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd12\
    \ = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart12 = vowelsIndexStart\
    \ - vowelsCount\n    var vowelsIndexEnd13 = vowelsIndexEnd + vowelsCount\n   \
    \ var vowelsIndexStart13 = vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd14\
    \ = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart14 = vowelsIndexStart\
    \ - vowelsCount\n    var vowelsIndexEnd15 = vowelsIndexEnd + vowelsCount\n   \
    \ var vowelsIndexStart15 = vowelsIndexStart - vowelsCount\n    var vowelsIndexEnd16\
    \ = vowelsIndexEnd + vowelsCount\n    var vowelsIndexStart16 = vowelsIndexStart\
    \ - vowelsCount\n    var vowelsIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmjmmkqgu.swift:48:9: error: type annotation missing in pattern\n\
    \    var vowelsIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [String: Int]()\n    for vowel in vowels {\n \
    \       vowelsCount[vowel] = word.characters.filter({ $0 == vowel }).count\n \
    \   }\n    \n    var closestVowel = \"\"\n    var closestVowelCount = 0\n    for\
    \ vowel in vowels {\n        if vowelsCount[vowel] < closestVowelCount {\n   \
    \         closestVowel = vowel\n            closestVowelCount = vowelsCount[vowel]\n\
    \        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprr7jbjf8.swift:16:58: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'String'\n      \
    \  vowelsCount[vowel] = word.characters.filter({ $0 == vowel }).count\n      \
    \                                                ~~ ^  ~~~~~\n/tmp/tmprr7jbjf8.swift:16:58:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        vowelsCount[vowel] = word.characters.filter({\
    \ $0 == vowel }).count\n                                                     \
    \    ^\n/tmp/tmprr7jbjf8.swift:22:23: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        if vowelsCount[vowel] < closestVowelCount\
    \ {\n                      ^\n/tmp/tmprr7jbjf8.swift:22:23: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        if\
    \ vowelsCount[vowel] < closestVowelCount {\n                      ^\n        \
    \                      ?? <#default value#>\n/tmp/tmprr7jbjf8.swift:22:23: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        if vowelsCount[vowel] < closestVowelCount {\n                      ^\n\
    \                             !\n/tmp/tmprr7jbjf8.swift:24:44: error: value of\
    \ optional type 'Int?' must be unwrapped to a value of type 'Int'\n          \
    \  closestVowelCount = vowelsCount[vowel]\n                                  \
    \         ^\n/tmp/tmprr7jbjf8.swift:24:44: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n            closestVowelCount\
    \ = vowelsCount[vowel]\n                                           ^\n       \
    \                                            ?? <#default value#>\n/tmp/tmprr7jbjf8.swift:24:44:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            closestVowelCount = vowelsCount[vowel]\n                \
    \                           ^\n                                              \
    \    !\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexEnd = vowels.count -\
    \ 1\n    var vowelIndexStart = vowels.count - 1\n    var vowelIndexStart2 = vowels.count\
    \ - 1\n    var vowelIndexEnd2 = vowels.count - 1\n    var vowelIndexStart3 = vowels.count\
    \ - 1\n    var vowelIndexEnd3 = vowels.count - 1\n    var vowelIndexStart4 = vowels.count\
    \ - 1\n    var vowelIndexEnd4 = vowels.count - 1\n    var vowelIndexStart5 = vowels.count\
    \ - 1\n    var vowelIndexEnd5 = vowels.count - 1\n    var vowelIndexStart6 = vowels.count\
    \ - 1\n    var vowelIndexEnd6 = vowels.count - 1\n    var vowelIndexStart7 = vowels.count\
    \ - 1\n    var vowelIndexEnd7 = vowels.count - 1\n    var vowelIndexStart8 = vowels.count\
    \ - 1\n    var vowelIndexEnd8 = vowels.count - 1\n    var vowelIndexStart9 = vowels.count\
    \ - 1\n    var vowelIndexEnd9 = vowels.count - 1\n    var vowelIndexStart10 =\
    \ vowels.count - 1\n    var vowelIndexEnd10 = vowels.count - 1\n    var vowelIndexStart11\
    \ = vowels.count - 1\n    var vowelIndexEnd11 = vowels.count - 1\n    var vowelIndexStart12\
    \ = vowels.count - 1\n    var vowelIndexEnd12 = vowels.count - 1\n    var vowelIndexStart13\
    \ = vowels.count - 1\n    var vowelIndexEnd13 = vowels.count - 1\n    var vowelIndexStart14\
    \ = vowels.count - 1\n    var vowelIndexEnd14 = vowels.count - 1\n    var vowelIndexStart15\
    \ = vowels.count - 1\n    var vowelIndexEnd15 = vowels.count - 1\n    var vowelIndexStart16\
    \ = vowels.count - 1\n    var vowelIndexEnd16 = vowels.count - 1\n    var vowelIndexStart17\
    \ = vowels.count - 1\n    var vowelIndexEnd17 = vowels.count - 1\n    var vowelIndexStart18\
    \ = vowels.count - 1\n    var vowelIndexEnd18 = vowels.count - 1\n    var vowelIndexStart19\
    \ = vowels.count - 1\n    var vowelIndexEnd19 = vowels.count - 1\n    var vowelIndexStart20\
    \ = vowels.count - 1\n    var vowelIndexEnd20 = vowels.count - 1\n    var vowelIndexStart21\
    \ = vowels.count - 1\n    var vowelIndexEnd21 = vowels.count - 1\n    var vowelIndexStart22\
    \ = vowels.count - 1\n    var vowelIndexEnd22 = vowels.count - 1\n    var vowelIndexStart23\
    \ = vowels.count - 1\n    var vowelIndexEnd23 = vowels.count - 1\n    var vowelIndexStart24\
    \ = vowels.count \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpj1z67onx.swift:13:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = \"aeiouAEIOU\"\n    ~~~\
    \ ^\n    let\n/tmp/tmpj1z67onx.swift:14:9: warning: initialization of variable\
    \ 'vowelsCount' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpj1z67onx.swift:15:9:\
    \ warning: initialization of variable 'vowelIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpj1z67onx.swift:16:9: warning: initialization of variable 'vowelIndexEnd'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndexEnd = vowels.count - 1\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpj1z67onx.swift:17:9:\
    \ warning: initialization of variable 'vowelIndexStart' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelIndexStart = vowels.count\
    \ - 1\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpj1z67onx.swift:18:9: warning: initialization\
    \ of variable 'vowelIndexStart2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndexStart2 = vowels.count - 1\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpj1z67onx.swift:19:9: warning: initialization of variable 'vowelIndexEnd2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndexEnd2 = vowels.count - 1\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpj1z67onx.swift:20:9:\
    \ warning: initialization of variable 'vowelIndexStart3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelIndexStart3 =\
    \ vowels.count - 1\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpj1z67onx.swift:21:9:\
    \ warning: initialization of variable 'vowelIndexEnd3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelIndexEnd3 = vowels.count\
    \ - 1\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpj1z67onx.swift:22:9: warning: initialization\
    \ of variable 'vowelIndexStart4' was never used; consider "
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    let vowelsCount = vowels.count\n   \
    \ let vowelsIndex = word.characters.reversed().enumerate().map { (index, char)\
    \ in\n        if let index = vowels.index(of: char) {\n            return index\n\
    \        }\n        return vowelsCount + 1\n    }.min()\n    return vowels[vowelsIndex].lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpve3jmcxb.swift:13:24: error: cannot find 'vowels' in scope\n  \
    \  guard let vowels = vowels.characters.map(String.init) else {\n            \
    \           ^~~~~~\n/tmp/tmpve3jmcxb.swift:17:50: error: reference to member 'enumerate'\
    \ cannot be resolved without a contextual type\n    let vowelsIndex = word.characters.reversed().enumerate().map\
    \ { (index, char) in\n                                                 ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndexEnd = word.count\n    var vowelIndexStart = 0\n    var vowelIndexStartEnd\
    \ = word.count\n    var vowelIndexStartEnd2 = word.count\n    var vowelIndexStartEnd3\
    \ = word.count\n    var vowelIndexStartEnd4 = word.count\n    var vowelIndexStartEnd5\
    \ = word.count\n    var vowelIndexStartEnd6 = word.count\n    var vowelIndexStartEnd7\
    \ = word.count\n    var vowelIndexStartEnd8 = word.count\n    var vowelIndexStartEnd9\
    \ = word.count\n    var vowelIndexStartEnd10 = word.count\n    var vowelIndexStartEnd11\
    \ = word.count\n    var vowelIndexStartEnd12 = word.count\n    var vowelIndexStartEnd13\
    \ = word.count\n    var vowelIndexStartEnd14 = word.count\n    var vowelIndexStartEnd15\
    \ = word.count\n    var vowelIndexStartEnd16 = word.count\n    var vowelIndexStartEnd17\
    \ = word.count\n    var vowelIndexStartEnd18 = word.count\n    var vowelIndexStartEnd19\
    \ = word.count\n    var vowelIndexStartEnd20 = word.count\n    var vowelIndexStartEnd21\
    \ = word.count\n    var vowelIndexStartEnd22 = word.count\n    var vowelIndexStartEnd23\
    \ = word.count\n    var vowelIndexStartEnd24 = word.count\n    var vowelIndexStartEnd25\
    \ = word.count\n    var vowelIndexStartEnd26 = word.count\n    var vowelIndexStartEnd27\
    \ = word.count\n    var vowelIndexStartEnd28 = word.count\n    var vowelIndexStartEnd29\
    \ = word.count\n    var vowelIndexStartEnd30 = word.count\n    var vowelIndexStartEnd31\
    \ = word.count\n    var vowelIndexStartEnd32 = word.count\n    var vowelIndexStartEnd33\
    \ = word.count\n    var vowelIndexStartEnd34 = word.count\n    var vowelIndexStartEnd35\
    \ = word.count\n    var vowelIndexStartEnd36 = word.count\n    var vowelIndexStartEnd37\
    \ = word.count\n    var vowelIndexStartEnd38 = word.count\n    var vowelIndexStartEnd39\
    \ = word.count\n    var vowelIndexStartEnd40 = word.count\n    var vowelIndexStartEnd41\
    \ = word.count\n    var vowelIndexStartEnd42 = word.count\n    var vowelIndexStartEnd43\
    \ = word.count\n    var vowelIndexStartEnd44 = word.count\n    var vowelIndexStartEnd45\
    \ = word.count\n    var vowelIndexStartEnd46 = word.count\n    var vowelIndexStartEnd47\
    \ = word.count\n    var vowelIndexStartEnd48 = word.count\n    var vowelIndexStartEnd49\
    \ = word.count\n    var vowelIndexStartEnd50 = \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2k1r63t2.swift:66:31: error: expected initial value after '='\n\
    \    var vowelIndexStartEnd50 = \n                              ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var consonantIndex\
    \ = 0\n    var consonant = \"\"\n    var vowelCount = 0\n    var consonantCount\
    \ = 0\n    \n    for index in 0..<word.count {\n        if word[index] == \"a\"\
    \ || word[index] == \"e\" || word[index] == \"i\" || word[index] == \"o\" || word[index]\
    \ == \"u\" {\n            vowelCount += 1\n            if vowelIndex == 0 {\n\
    \                vowelIndex = index\n                vowel = word[index]\n   \
    \         }\n        }\n        if word[index] == \"b\" || word[index] == \"c\"\
    \ || word[index] == \"d\" || word[index] == \"f\" || word[index] == \"g\" || word[index]\
    \ == \"h\" || word[index] == \"j\" || word[index] == \"k\" || word[index] == \"\
    l\" || word[index] == \"m\" || word[index] == \"n\" || word[index] == \"p\" ||\
    \ word[index] == \"q\" || word[index] == \"r\" || word[index] == \"s\" || word[index]\
    \ == \"t\" || word[index] == \"v\" || word[index] == \"w\" || word[index] == \"\
    x\" || word[index] == \"y\" || word[index] == \"z\" {\n            consonantCount\
    \ += 1\n            if consonantIndex == 0 {\n                consonantIndex =\
    \ index\n                consonant = word[index]\n            }\n        }\n \
    \   }\n    if vowelCount > consonantCount {\n        return vowel\n    } else\
    \ {\n        return consonant\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpflsnl6vr.swift:21:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if word[index]\
    \ == \"a\" || word[index] == \"e\" || word[index] == \"i\" || word[index] == \"\
    o\" || word[index] == \"u\" {\n           ^~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpflsnl6vr.swift:21:34: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if word[index] == \"a\" || word[index] == \"e\" || word[index]\
    \ == \"i\" || word[index] == \"o\" || word[index] == \"u\" {\n               \
    \                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpflsnl6vr.swift:21:56: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if word[index] == \"a\" || word[index] == \"e\" || word[index] == \"\
    i\" || word[index] == \"o\" || word[index] == \"u\" {\n                      \
    \                                 ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpflsnl6vr.swift:21:78: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if word[index] == \"a\" || word[index] == \"e\" || word[index] == \"\
    i\" || word[index] == \"o\" || word[index] == \"u\" {\n                      \
    \                                                       ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpflsnl6vr.swift:21:100:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if word[index] == \"a\" || word[index]\
    \ == \"e\" || word[index] == \"i\" || word"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    \n    for char in word.characters {\n\
    \        if vowels.contains(char) {\n            vowelIndex = vowels.firstIndex(of:\
    \ char)!\n            break\n        }\n    }\n    \n    if vowelIndex == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndex2 = vowelIndex - 1\n    \n\
    \    for char in word.characters {\n        if vowels.contains(char) {\n     \
    \       vowelIndex2 = vowels.firstIndex(of: char)!\n            break\n      \
    \  }\n    }\n    \n    if vowelIndex2 == 0 {\n        return \"\"\n    }\n   \
    \ \n    var vowelIndex3 = vowelIndex2 - 1\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelIndex3 = vowels.firstIndex(of:\
    \ char)!\n            break\n        }\n    }\n    \n    if vowelIndex3 == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndex4 = vowelIndex3 - 1\n   \
    \ \n    for char in word.characters {\n        if vowels.contains(char) {\n  \
    \          vowelIndex4 = vowels.firstIndex(of: char)!\n            break\n   \
    \     }\n    }\n    \n    if vowelIndex4 == 0 {\n        return \"\"\n    }\n\
    \    \n    var vowelIndex5 = vowelIndex4 - 1\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelIndex5 = vowels.firstIndex(of:\
    \ char)!\n            break\n        }\n    }\n    \n    if vowelIndex5 == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndex6 = vowelIndex5 - 1\n   \
    \ \n    for char in word.characters {\n        if vowels.contains(char) {\n  \
    \          vowelIndex6 = vowels.firstIndex(of: char)!\n            break\n   \
    \     }\n    }\n    \n    if vowelIndex6 == 0 {\n        return \"\"\n    }\n\
    \    \n    var vowelIndex7 = vowelIndex6 - 1\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelIndex7 = vowels.firstIndex(of:\
    \ char)!\n            break\n        }\n    }\n    \n    if vowelIndex7 == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndex8 = vowelIndex7 - 1\n   \
    \ \n    for char in word.characters {\n        if vowels.contains(char) {\n  \
    \          vowelIndex8 = vowels.firstIndex(of: char)!\n            break\n   \
    \     }\n    }\n    \n    if vowelIndex8 == 0 {\n        return \"\"\n    }\n\
    \    \n    var vowelIndex9 = vowelIndex8 - 1\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelIndex9 = vowels.firstIndex(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl5ksi1jy.swift:125:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpl5ksi1jy.swift:152:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpl5ksi1jy.swift:122:33: note: to match this\
    \ opening '{'\n    for char in word.characters {\n                           \
    \     ^\n/tmp/tmpl5ksi1jy.swift:152:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpl5ksi1jy.swift:12:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmpl5ksi1jy.swift:18:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpl5ksi1jy.swift:19:28: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n        if vowels.contains(char)\
    \ {\n                           ^\n/tmp/tmpl5ksi1jy.swift:20:48: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       vowelIndex = vowels.firstIndex(of: char)!\n                          \
    \                     ^\n/tmp/tmpl5ksi1jy.swift:31:22: error: 'characters' is\
    \ unavailable: Please use String directly\n    for char in word.characters {\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl5ksi1jy.swift:32:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(char) {\n   \
    \                        ^\n/tmp/tmpl5ksi1jy.swift:33:49: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            vowelIndex2\
    \ = vowels.firstIndex(of: char)!\n             "
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  var vowelIndex = 0\n    \n    for index in word.characters.reverse() {\n  \
    \      if vowelsCount > 0 {\n            if vowelIndex == 0 {\n              \
    \  if index == vowels[vowelIndex] {\n                    vowelIndex += 1\n   \
    \                 vowelsCount -= 1\n                }\n            } else {\n\
    \                if index == vowels[vowelIndex] {\n                    vowelIndex\
    \ += 1\n                    vowelsCount -= 1\n                } else {\n     \
    \               vowelIndex = 0\n                }\n            }\n        } else\
    \ {\n            if index == vowels[vowelIndex] {\n                vowelIndex\
    \ += 1\n            }\n        }\n    }\n    \n    if vowelIndex == 0 {\n    \
    \    return \"\"\n    }\n    \n    return vowels[vowelIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpcljajg5r.swift:24:34: error: value of type 'String' has no member\
    \ 'reverse'\n    for index in word.characters.reverse() {\n                 ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelsCount = 1\n    var vowelsIndex = 0\n   \
    \ var vowelsIndex2 = 0\n    var vowelsIndex3 = 0\n    var vowelsIndex4 = 0\n \
    \   var vowelsIndex5 = 0\n    var vowelsIndex6 = 0\n    var vowelsIndex7 = 0\n\
    \    var vowelsIndex8 = 0\n    var vowelsIndex9 = 0\n    var vowelsIndex10 = 0\n\
    \    var vowelsIndex11 = 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13 =\
    \ 0\n    var vowelsIndex14 = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16\
    \ = 0\n    var vowelsIndex17 = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19\
    \ = 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22\
    \ = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25\
    \ = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28\
    \ = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31\
    \ = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34\
    \ = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37\
    \ = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40\
    \ = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43\
    \ = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46\
    \ = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49\
    \ = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52\
    \ = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55\
    \ = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58\
    \ = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61\
    \ = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64\
    \ = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67\
    \ = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69 = 0\n    var vowelsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpfy9rriy6.swift:85:9: error: type annotation missing in pattern\n\
    \    var vowelsIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    \n    for char in word.characters\
    \ {\n        if char.unicodeScalars.filter({ $0.isVowel }).count > 0 {\n     \
    \       vowels.append(char.unicodeScalars.filter({ $0.isVowel }).first!.value)\n\
    \        }\n    }\n    \n    if vowels.count > 0 {\n        return vowels.sorted().first!\n\
    \    } else {\n        return \"\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp73dzbfyi.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp73dzbfyi.swift:16:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isVowel'\n        if char.unicodeScalars.filter({\
    \ $0.isVowel }).count > 0 {\n                                        ~~ ^~~~~~~\n\
    /tmp/tmp73dzbfyi.swift:17:77: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isVowel }).first!.value)\n                                              \
    \                              ^\n/tmp/tmp73dzbfyi.swift:17:59: error: value of\
    \ type 'Unicode.Scalar' has no member 'isVowel'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isVowel }).first!.value)\n                                              \
    \         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndexEnd = word.count\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1rky3f6i.swift:17:9: error: invalid redeclaration of 'vowelIndexEnd'\n\
    \    var vowelIndexEnd = 0\n        ^\n/tmp/tmp1rky3f6i.swift:15:9: note: 'vowelIndexEnd'\
    \ previously declared here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1rky3f6i.swift:18:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1rky3f6i.swift:16:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1rky3f6i.swift:19:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1rky3f6i.swift:15:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1rky3f6i.swift:20:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1rky3f6i.swift:16:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1rky3f6i.swift:21:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1rky3f6i.swift:15:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1rky3f6i.swift:22:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1rky3f6i.swift:16:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1rky3f6i.swift:23:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1rky3f6i.swift:15:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1rky3f6i.swift:24:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1rky3f6i.swift:16:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1rky3f6i.swift:25:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1rky3f6i.swift:15:9: note: 'vowelIndexEnd' previously decla"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for char\
    \ in word.characters {\n        if char.unicodeScalars.count == 1 && char.unicodeScalars.first\
    \ == 0xE000 {\n            vowelIndex += 1\n            if vowelIndex == 2 {\n\
    \                vowel = char.unicodeScalars.first!\n            }\n        }\n\
    \    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpy1kgucn9.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpy1kgucn9.swift:16:72:\
    \ error: type '((Unicode.Scalar) throws -> Bool) throws -> Unicode.Scalar?' cannot\
    \ conform to 'BinaryInteger'\n        if char.unicodeScalars.count == 1 && char.unicodeScalars.first\
    \ == 0xE000 {\n                                                              \
    \         ^\n/tmp/tmpy1kgucn9.swift:16:72: note: only concrete types such as structs,\
    \ enums and classes can conform to protocols\n        if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == 0xE000 {\n                            \
    \                                           ^\n/tmp/tmpy1kgucn9.swift:16:72: note:\
    \ required by referencing operator function '==' on 'BinaryInteger' where 'Self'\
    \ = '((Unicode.Scalar) throws -> Bool) throws -> Unicode.Scalar?'\n        if\
    \ char.unicodeScalars.count == 1 && char.unicodeScalars.first == 0xE000 {\n  \
    \                                                                     ^\n/tmp/tmpy1kgucn9.swift:19:50:\
    \ error: cannot assign value of type 'Unicode.Scalar' to type 'String'\n     \
    \           vowel = char.unicodeScalars.first!\n                        ~~~~~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelIndex2 = vowelsCount\
    \ - 1\n    var vowelIndex3 = vowelsCount - 2\n    var vowelIndex4 = vowelsCount\
    \ - 3\n    var vowelIndex5 = vowelsCount - 4\n    var vowelIndex6 = vowelsCount\
    \ - 5\n    var vowelIndex7 = vowelsCount - 6\n    var vowelIndex8 = vowelsCount\
    \ - 7\n    var vowelIndex9 = vowelsCount - 8\n    var vowelIndex10 = vowelsCount\
    \ - 9\n    var vowelIndex11 = vowelsCount - 10\n    var vowelIndex12 = vowelsCount\
    \ - 11\n    var vowelIndex13 = vowelsCount - 12\n    var vowelIndex14 = vowelsCount\
    \ - 13\n    var vowelIndex15 = vowelsCount - 14\n    var vowelIndex16 = vowelsCount\
    \ - 15\n    var vowelIndex17 = vowelsCount - 16\n    var vowelIndex18 = vowelsCount\
    \ - 17\n    var vowelIndex19 = vowelsCount - 18\n    var vowelIndex20 = vowelsCount\
    \ - 19\n    var vowelIndex21 = vowelsCount - 20\n    var vowelIndex22 = vowelsCount\
    \ - 21\n    var vowelIndex23 = vowelsCount - 22\n    var vowelIndex24 = vowelsCount\
    \ - 23\n    var vowelIndex25 = vowelsCount - 24\n    var vowelIndex26 = vowelsCount\
    \ - 25\n    var vowelIndex27 = vowelsCount - 26\n    var vowelIndex28 = vowelsCount\
    \ - 27\n    var vowelIndex29 = vowelsCount - 28\n    var vowelIndex30 = vowelsCount\
    \ - 29\n    var vowelIndex31 = vowelsCount - 30\n    var vowelIndex32 = vowelsCount\
    \ - 31\n    var vowelIndex33 = vowelsCount - 32\n    var vowelIndex34 = vowelsCount\
    \ - 33\n    var vowelIndex35 = vowelsCount - 34\n    var vowelIndex36 = vowelsCount\
    \ - 35\n    var vowelIndex37 = vowelsCount - 36\n    var vowelIndex38 = vowelsCount\
    \ - 37\n    var vowelIndex39 = vowelsCount - 38\n    var vowelIndex40 = vowelsCount\
    \ - 39\n    var vowelIndex41 = vowelsCount - 40\n    var vowelIndex42 = vowelsCount\
    \ - 41\n    var vowelIndex43 = vowelsCount - 42\n    var vowelIndex44 = vowelsCount\
    \ - 43\n    var vowelIndex45 = vowelsCount - 44\n    var vowelIndex46 = vowelsCount\
    \ - 45\n    var vowelIndex47 = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpln4z0ae8.swift:61:23: error: expected initial value after '='\n\
    \    var vowelIndex47 = \n                      ^\n/tmp/tmpln4z0ae8.swift:14:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = vowels.characters.count\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndexEnd = vowelsCount\
    \ - 1\n    var vowelsIndexStart = vowelsCount - 1\n    var vowelsIndexStartEnd\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd2 = vowelsCount - 1\n    var vowelsIndexStartEnd3\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd4 = vowelsCount - 1\n    var vowelsIndexStartEnd5\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd6 = vowelsCount - 1\n    var vowelsIndexStartEnd7\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd8 = vowelsCount - 1\n    var vowelsIndexStartEnd9\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd10 = vowelsCount - 1\n    var\
    \ vowelsIndexStartEnd11 = vowelsCount - 1\n    var vowelsIndexStartEnd12 = vowelsCount\
    \ - 1\n    var vowelsIndexStartEnd13 = vowelsCount - 1\n    var vowelsIndexStartEnd14\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd15 = vowelsCount - 1\n    var\
    \ vowelsIndexStartEnd16 = vowelsCount - 1\n    var vowelsIndexStartEnd17 = vowelsCount\
    \ - 1\n    var vowelsIndexStartEnd18 = vowelsCount - 1\n    var vowelsIndexStartEnd19\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd20 = vowelsCount - 1\n    var\
    \ vowelsIndexStartEnd21 = vowelsCount - 1\n    var vowelsIndexStartEnd22 = vowelsCount\
    \ - 1\n    var vowelsIndexStartEnd23 = vowelsCount - 1\n    var vowelsIndexStartEnd24\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd25 = vowelsCount - 1\n    var\
    \ vowelsIndexStartEnd26 = vowelsCount - 1\n    var vowelsIndexStartEnd27 = vowelsCount\
    \ - 1\n    var vowelsIndexStartEnd28 = vowelsCount - 1\n    var vowelsIndexStartEnd29\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd30 = vowelsCount - 1\n    var\
    \ vowelsIndexStartEnd31 = vowelsCount - 1\n    var vowelsIndexStartEnd32 = vowelsCount\
    \ - 1\n    var vowelsIndexStartEnd33 = vowelsCount - 1\n    var vowelsIndexStartEnd34\
    \ = vowelsCount - 1\n    var vowelsIndexStartEnd35 = vowelsCount - 1\n    var\
    \ vowelsIndexStartEnd36 = vowelsCount - 1\n    var vowelsIndexStartEnd37 = vowelsCount\
    \ - 1\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmproqiviru.swift:13:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = \"aeiouAEIOU\"\n    ~~~\
    \ ^\n    let\n/tmp/tmproqiviru.swift:14:9: warning: variable 'vowelsCount' was\
    \ never mutated; consider changing to 'let' constant\n    var vowelsCount = vowels.count\n\
    \    ~~~ ^\n    let\n/tmp/tmproqiviru.swift:15:9: warning: initialization of variable\
    \ 'vowelsIndex' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmproqiviru.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndexEnd' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndexEnd = vowelsCount\
    \ - 1\n    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmproqiviru.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndexStart' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndexStart = vowelsCount - 1\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmproqiviru.swift:18:9: warning: initialization of variable 'vowelsIndexStartEnd'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndexStartEnd = vowelsCount - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~\n \
    \   _\n/tmp/tmproqiviru.swift:19:9: warning: initialization of variable 'vowelsIndexStartEnd2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndexStartEnd2 = vowelsCount - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmproqiviru.swift:20:9: warning: initialization of variable 'vowelsIndexStartEnd3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndexStartEnd3 = vowelsCount - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmproqiviru.swift:21:9: warning: initialization of variable 'vowelsIndexStartEnd4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndexStartEnd4 = vowelsCount - 1\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmproqiviru.swift:22:9: warning: initialization of variable 'vowelsIndexStartEnd5'\
    \ was n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexCount = 0\n    var vowelIndexCountMax\
    \ = vowels.count - 1\n    var vowelIndexCountMin = vowels.count + 1\n    var vowelIndexCountMaxMin\
    \ = vowels.count * 2\n    var vowelIndexCountMinMax = vowels.count * 3\n    var\
    \ vowelIndexCountMinMaxMin = vowels.count * 4\n    var vowelIndexCountMinMaxMinMax\
    \ = vowels.count * 5\n    var vowelIndexCountMinMaxMinMaxMin = vowels.count *\
    \ 6\n    var vowelIndexCountMinMaxMinMaxMinMax = vowels.count * 7\n    var vowelIndexCountMinMaxMinMaxMinMaxMin\
    \ = vowels.count * 8\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMax = vowels.count\
    \ * 9\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMin = vowels.count * 10\n\
    \    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count * 11\n \
    \   var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count * 12\n  \
    \  var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowels.count * 13\n\
    \    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count *\
    \ 14\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count\
    \ * 15\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowels.count\
    \ * 16\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count\
    \ * 17\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count\
    \ * 18\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin =\
    \ vowels.count * 19\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowels.count * 20\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowels.count * 21\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowels.count * 22\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpynlsc76b.swift:29:9: error: invalid redeclaration of 'vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMax'\n\
    \    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count * 12\n \
    \       ^\n/tmp/tmpynlsc76b.swift:28:9: note: 'vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMax'\
    \ previously declared here\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowels.count * 11\n        ^\n/tmp/tmpynlsc76b.swift:32:9: error: invalid\
    \ redeclaration of 'vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\n   \
    \ var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count * 15\n\
    \        ^\n/tmp/tmpynlsc76b.swift:31:9: note: 'vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\
    \ previously declared here\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowels.count * 14\n        ^\n/tmp/tmpynlsc76b.swift:35:9: error: invalid\
    \ redeclaration of 'vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\n\
    \    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowels.count\
    \ * 18\n        ^\n/tmp/tmpynlsc76b.swift:34:9: note: 'vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\
    \ previously declared here\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowels.count * 17\n        ^\n/tmp/tmpynlsc76b.swift:40:9: error: type annotation\
    \ missing in pattern\n    var vowelIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpdi_ckyda.swift:104:1: error: missing return in global function
    expected to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    if word == \"\" {\n        return \"\"\n    }\n   \
    \ var vowels = [String]()\n    vowels.append(\"a\")\n    vowels.append(\"e\")\n\
    \    vowels.append(\"i\")\n    vowels.append(\"o\")\n    vowels.append(\"u\")\n\
    \    vowels.append(\"A\")\n    vowels.append(\"E\")\n    vowels.append(\"I\")\n\
    \    vowels.append(\"O\")\n    vowels.append(\"U\")\n    \n    var vowelsCount\
    \ = 1\n    var vowelsIndex = 0\n    var vowelsIndex2 = 1\n    var vowelsIndex3\
    \ = 2\n    var vowelsIndex4 = 3\n    var vowelsIndex5 = 4\n    var vowelsIndex6\
    \ = 5\n    var vowelsIndex7 = 6\n    var vowelsIndex8 = 7\n    var vowelsIndex9\
    \ = 8\n    var vowelsIndex10 = 9\n    var vowelsIndex11 = 10\n    var vowelsIndex12\
    \ = 11\n    var vowelsIndex13 = 12\n    var vowelsIndex14 = 13\n    var vowelsIndex15\
    \ = 14\n    var vowelsIndex16 = 15\n    var vowelsIndex17 = 16\n    var vowelsIndex18\
    \ = 17\n    var vowelsIndex19 = 18\n    var vowelsIndex20 = 19\n    var vowelsIndex21\
    \ = 20\n    var vowelsIndex22 = 21\n    var vowelsIndex23 = 22\n    var vowelsIndex24\
    \ = 23\n    var vowelsIndex25 = 24\n    var vowelsIndex26 = 25\n    var vowelsIndex27\
    \ = 26\n    var vowelsIndex28 = 27\n    var vowelsIndex29 = 28\n    var vowelsIndex30\
    \ = 29\n    var vowelsIndex31 = 30\n    var vowelsIndex32 = 31\n    var vowelsIndex33\
    \ = 32\n    var vowelsIndex34 = 33\n    var vowelsIndex35 = 34\n    var vowelsIndex36\
    \ = 35\n    var vowelsIndex37 = 36\n    var vowelsIndex38 = 37\n    var vowelsIndex39\
    \ = 38\n    var vowelsIndex40 = 39\n    var vowelsIndex41 = 40\n    var vowelsIndex42\
    \ = 41\n    var vowelsIndex43 = 42\n    var vowelsIndex44 = 43\n    var vowelsIndex45\
    \ = 44\n    var vowelsIndex46 = 45\n    var vowelsIndex47 = 46\n    var vowelsIndex48\
    \ = 47\n    var vowelsIndex49 = 48\n    var vowelsIndex50 = 49\n    var vowelsIndex51\
    \ = 50\n    var vowelsIndex52 = 51\n    var vowelsIndex53 = 52\n    var vowelsIndex54\
    \ = 53\n    var vowelsIndex55 = 54\n    var vowelsIndex56 = 55\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_nsl7fnv.swift:28:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = 1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp_nsl7fnv.swift:29:9:\
    \ warning: initialization of variable 'vowelsIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp_nsl7fnv.swift:30:9: warning: initialization of variable 'vowelsIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex2 = 1\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_nsl7fnv.swift:31:9:\
    \ warning: initialization of variable 'vowelsIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex3 = 2\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_nsl7fnv.swift:32:9: warning: initialization\
    \ of variable 'vowelsIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex4 = 3\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmp_nsl7fnv.swift:33:9: warning: initialization of variable 'vowelsIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex5 = 4\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_nsl7fnv.swift:34:9:\
    \ warning: initialization of variable 'vowelsIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex6 = 5\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_nsl7fnv.swift:35:9: warning: initialization\
    \ of variable 'vowelsIndex7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex7 = 6\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmp_nsl7fnv.swift:36:9: warning: initialization of variable 'vowelsIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex8 = 7\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp_nsl7fnv.swift:37:9:\
    \ warning: initialization of variable 'vowelsIndex9' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex9 = 8\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = vowelsIndex\n\
    \    var vowelsIndex3 = vowelsIndex\n    var vowelsIndex4 = vowelsIndex\n    var\
    \ vowelsIndex5 = vowelsIndex\n    var vowelsIndex6 = vowelsIndex\n    var vowelsIndex7\
    \ = vowelsIndex\n    var vowelsIndex8 = vowelsIndex\n    var vowelsIndex9 = vowelsIndex\n\
    \    var vowelsIndex10 = vowelsIndex\n    var vowelsIndex11 = vowelsIndex\n  \
    \  var vowelsIndex12 = vowelsIndex\n    var vowelsIndex13 = vowelsIndex\n    var\
    \ vowelsIndex14 = vowelsIndex\n    var vowelsIndex15 = vowelsIndex\n    var vowelsIndex16\
    \ = vowelsIndex\n    var vowelsIndex17 = vowelsIndex\n    var vowelsIndex18 =\
    \ vowelsIndex\n    var vowelsIndex19 = vowelsIndex\n    var vowelsIndex20 = vowelsIndex\n\
    \    var vowelsIndex21 = vowelsIndex\n    var vowelsIndex22 = vowelsIndex\n  \
    \  var vowelsIndex23 = vowelsIndex\n    var vowelsIndex24 = vowelsIndex\n    var\
    \ vowelsIndex25 = vowelsIndex\n    var vowelsIndex26 = vowelsIndex\n    var vowelsIndex27\
    \ = vowelsIndex\n    var vowelsIndex28 = vowelsIndex\n    var vowelsIndex29 =\
    \ vowelsIndex\n    var vowelsIndex30 = vowelsIndex\n    var vowelsIndex31 = vowelsIndex\n\
    \    var vowelsIndex32 = vowelsIndex\n    var vowelsIndex33 = vowelsIndex\n  \
    \  var vowelsIndex34 = vowelsIndex\n    var vowelsIndex35 = vowelsIndex\n    var\
    \ vowelsIndex36 = vowelsIndex\n    var vowelsIndex37 = vowelsIndex\n    var vowelsIndex38\
    \ = vowelsIndex\n    var vowelsIndex39 = vowelsIndex\n    var vowelsIndex40 =\
    \ vowelsIndex\n    var vowelsIndex41 = vowelsIndex\n    var vowelsIndex42 = vowelsIndex\n\
    \    var vowelsIndex43 = vowelsIndex\n    var vowelsIndex44 = vowelsIndex\n  \
    \  var vowelsIndex45 = vowelsIndex\n    var vowelsIndex46 = vowelsIndex\n    var\
    \ vowelsIndex47 = vowelsIndex\n    var vowelsIndex48 = vowelsIndex\n    var vowelsIndex49\
    \ = vowelsIndex\n    var vowelsIndex50 = vowelsIndex\n    var vowelsIndex51 =\
    \ vowelsIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprvojhj30.swift:13:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = \"aeiouAEIOU\"\n    ~~~\
    \ ^\n    let\n/tmp/tmprvojhj30.swift:14:9: warning: initialization of variable\
    \ 'vowelsCount' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:15:9:\
    \ warning: variable 'vowelsIndex' was never mutated; consider changing to 'let'\
    \ constant\n    var vowelsIndex = 0\n    ~~~ ^\n    let\n/tmp/tmprvojhj30.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex2 = vowelsIndex\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex3 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmprvojhj30.swift:18:9: warning: initialization of variable 'vowelsIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex4 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:19:9:\
    \ warning: initialization of variable 'vowelsIndex5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex5 = vowelsIndex\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:20:9: warning: initialization\
    \ of variable 'vowelsIndex6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex6 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmprvojhj30.swift:21:9: warning: initialization of variable 'vowelsIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex7 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:22:9:\
    \ warning: initialization of variable 'vowelsIndex8' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex8 = vowelsIndex\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojh"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.count > 0 {\n            if char.unicodeScalars.last!.value\
    \ == 0xE001 {\n                vowels.append(char.unicodeScalars.first!.value)\n\
    \            }\n        }\n    }\n    return vowels.first\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4k730yn_.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4k730yn_.swift:17:58:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \                vowels.append(char.unicodeScalars.first!.value)\n           \
    \                                              ^\n/tmp/tmp4k730yn_.swift:21:19:\
    \ error: value of optional type 'String?' must be unwrapped to a value of type\
    \ 'String'\n    return vowels.first\n                  ^\n/tmp/tmp4k730yn_.swift:21:19:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    return vowels.first\n                  ^\n                      \
    \  ?? <#default value#>\n/tmp/tmp4k730yn_.swift:21:19: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    return vowels.first\n\
    \                  ^\n                       !\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount2: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount3: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount4: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount5: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount6: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount7: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount8: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount9: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount10: [Int] = [0, 1, 2, 3, 4]\n   \
    \ var vowelsIndexCount11: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount12:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount13: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount14: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount15:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount16: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount17: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount18:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount19: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount20: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount21:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount22: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount23: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount24:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount25: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount26: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount27:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount28: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount29: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount30:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount31: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount32: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount33:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount34: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount35: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount36:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount37: [\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxrz390rs.swift:52:30: error: expected element type\n    var vowelsIndexCount37:\
    \ [\n                             ^\n                              <#type#>\n\
    /tmp/tmpxrz390rs.swift:52:30: error: expected ']' in array type\n    var vowelsIndexCount37:\
    \ [\n                             ^\n/tmp/tmpxrz390rs.swift:52:29: note: to match\
    \ this opening '['\n    var vowelsIndexCount37: [\n                          \
    \  ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"AEIOUaeiou\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexEnd = word.count - 1\n\
    \    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmponh6aytw.swift:97:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmponh6aytw.swift:18:9: error: invalid redeclaration of 'vowelIndexEnd'\n\
    \    var vowelIndexEnd = 0\n        ^\n/tmp/tmponh6aytw.swift:16:9: note: 'vowelIndexEnd'\
    \ previously declared here\n    var vowelIndexEnd = word.count - 1\n        ^\n\
    /tmp/tmponh6aytw.swift:19:9: error: invalid redeclaration of 'vowelIndexStart'\n\
    \    var vowelIndexStart = 0\n        ^\n/tmp/tmponh6aytw.swift:17:9: note: 'vowelIndexStart'\
    \ previously declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmponh6aytw.swift:20:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmponh6aytw.swift:16:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count - 1\n        ^\n/tmp/tmponh6aytw.swift:21:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmponh6aytw.swift:17:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmponh6aytw.swift:22:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmponh6aytw.swift:16:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count - 1\n        ^\n/tmp/tmponh6aytw.swift:23:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmponh6aytw.swift:17:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmponh6aytw.swift:24:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmponh6aytw.swift:16:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count - 1\n        ^\n/tmp/tmponh6aytw.swift:25:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmponh6aytw.swift:17:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmponh6aytw.swift:26:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelInd"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var vowelCount\
    \ = 0\n    var consonantIndex = 0\n    var consonant = \"\"\n    var consonantCount\
    \ = 0\n    for char in word {\n        if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\" {\n            vowelCount += 1\n\
    \            if vowelIndex == 0 {\n                vowel = char\n            \
    \    vowelIndex = vowelCount\n            } else {\n                if vowelIndex\
    \ == vowelCount {\n                    vowel = char\n                    vowelIndex\
    \ = vowelCount\n                } else {\n                    if vowelIndex >\
    \ vowelCount {\n                        vowel = char\n                       \
    \ vowelIndex = vowelCount\n                    }\n                }\n        \
    \    }\n        } else {\n            consonantCount += 1\n            if consonantIndex\
    \ == 0 {\n                consonant = char\n                consonantIndex = consonantCount\n\
    \            } else {\n                if consonantIndex == consonantCount {\n\
    \                    consonant = char\n                    consonantIndex = consonantCount\n\
    \                } else {\n                    if consonantIndex > consonantCount\
    \ {\n                        consonant = char\n                        consonantIndex\
    \ = consonantCount\n                    }\n                }\n            }\n\
    \        }\n    }\n    if vowelIndex == 0 {\n        return \"\"\n    }\n    if\
    \ vowelIndex == vowelCount {\n        return vowel\n    }\n    if consonantIndex\
    \ == 0 {\n        return vowel\n    }\n    if consonantIndex == consonantCount\
    \ {\n        return vowel\n    }\n    if vowelIndex > consonantIndex {\n     \
    \   return vowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpftraxhpz.swift:23:25: error: cannot assign value of type 'Character'\
    \ to type 'String'\n                vowel = char\n                        ^~~~\n\
    /tmp/tmpftraxhpz.swift:27:29: error: cannot assign value of type 'Character' to\
    \ type 'String'\n                    vowel = char\n                          \
    \  ^~~~\n/tmp/tmpftraxhpz.swift:31:33: error: cannot assign value of type 'Character'\
    \ to type 'String'\n                        vowel = char\n                   \
    \             ^~~~\n/tmp/tmpftraxhpz.swift:39:29: error: cannot assign value of\
    \ type 'Character' to type 'String'\n                consonant = char\n      \
    \                      ^~~~\n/tmp/tmpftraxhpz.swift:43:33: error: cannot assign\
    \ value of type 'Character' to type 'String'\n                    consonant =\
    \ char\n                                ^~~~\n/tmp/tmpftraxhpz.swift:47:37: error:\
    \ cannot assign value of type 'Character' to type 'String'\n                 \
    \       consonant = char\n                                    ^~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    \n    var vowelIndex:\
    \ Int = 0\n    var vowelsCountIndex: Int = 0\n    \n    var vowelsCountIndex2:\
    \ Int = 0\n    \n    var vowelsCountIndex3: Int = 0\n    \n    var vowelsCountIndex4:\
    \ Int = 0\n    \n    var vowelsCountIndex5: Int = 0\n    \n    var vowelsCountIndex6:\
    \ Int = 0\n    \n    var vowelsCountIndex7: Int = 0\n    \n    var vowelsCountIndex8:\
    \ Int = 0\n    \n    var vowelsCountIndex9: Int = 0\n    \n    var vowelsCountIndex10:\
    \ Int = 0\n    \n    var vowelsCountIndex11: Int = 0\n    \n    var vowelsCountIndex12:\
    \ Int = 0\n    \n    var vowelsCountIndex13: Int = 0\n    \n    var vowelsCountIndex14:\
    \ Int = 0\n    \n    var vowelsCountIndex15: Int = 0\n    \n    var vowelsCountIndex16:\
    \ Int = 0\n    \n    var vowelsCountIndex17: Int = 0\n    \n    var vowelsCountIndex18:\
    \ Int = 0\n    \n    var vowelsCountIndex19: Int = 0\n    \n    var vowelsCountIndex20:\
    \ Int = 0\n    \n    var vowelsCountIndex21: Int = 0\n    \n    var vowelsCountIndex22:\
    \ Int = 0\n    \n    var vowelsCountIndex23: Int = 0\n    \n    var vowelsCountIndex24:\
    \ Int = 0\n    \n    var vowelsCountIndex25: Int = 0\n    \n    var vowelsCountIndex26:\
    \ Int = 0\n    \n    var vowelsCountIndex27: Int = 0\n    \n    var vowelsCountIndex28:\
    \ Int = 0\n    \n    var vowelsCountIndex29: Int = 0\n    \n    var vowelsCountIndex30:\
    \ Int = 0\n    \n    var vowelsCountIndex31: Int = 0\n    \n    var vowelsCountIndex32:\
    \ Int = 0\n    \n    var vowelsCountIndex33: Int = 0\n    \n    var vowelsCountIndex34:\
    \ Int = 0\n    \n    var vowelsCountIndex35: Int = 0\n    \n    var vowelsCountIndex36:\
    \ Int = 0\n    \n    var vowelsCountIndex37: Int = 0\n    \n    var vowelsCountIndex38:\
    \ Int = 0\n    \n    var vowelsCountIndex39: Int = 0\n    \n    var vowelsCountIndex40:\
    \ Int = 0\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpn2z0nqg9.swift:14:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpn2z0nqg9.swift:15:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpn2z0nqg9.swift:17:9: warning: variable 'vowelIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex: Int =\
    \ 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpn2z0nqg9.swift:18:9: warning: variable\
    \ 'vowelsCountIndex' was never used; consider replacing with '_' or removing it\n\
    \    var vowelsCountIndex: Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmpn2z0nqg9.swift:20:9:\
    \ warning: variable 'vowelsCountIndex2' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex2: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpn2z0nqg9.swift:22:9: warning: variable 'vowelsCountIndex3'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpn2z0nqg9.swift:24:9:\
    \ warning: variable 'vowelsCountIndex4' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex4: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpn2z0nqg9.swift:26:9: warning: variable 'vowelsCountIndex5'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpn2z0nqg9.swift:28:9:\
    \ warning: variable 'vowelsCountIndex6' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex6: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpn2z0nqg9.swift:30:9: warning: variable 'vowelsCountIndex7'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex7:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpn2z0nqg9.swift:32:9:\
    \ warning: variable 'vowelsCountIndex8' was never used; consider replacing with\
    \ '"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word.characters\
    \ {\n        if letter.isUppercase {\n            vowels.append(letter)\n    \
    \    }\n    }\n    vowels.reverse()\n    var vowelIndex: Int = 0\n    var vowelIndex2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4: Int = 0\n    var\
    \ vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelIndex7: Int\
    \ = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int = 0\n    var vowelIndex10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12: Int = 0\n    var\
    \ vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var vowelIndex15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17: Int = 0\n    var\
    \ vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var vowelIndex20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22: Int = 0\n    var\
    \ vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var vowelIndex25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27: Int = 0\n    var\
    \ vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var vowelIndex30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32: Int = 0\n    var\
    \ vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var vowelIndex35:\
    \ Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37: Int = 0\n    var\
    \ vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var vowelIndex40:\
    \ Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42: Int = 0\n    var\
    \ vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var vowelIndex45:\
    \ Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47: Int = 0\n    var\
    \ vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var vowelIndex50:\
    \ Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52: Int = 0\n    var\
    \ vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var vowelIndex55:\
    \ Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57: Int = 0\n    var\
    \ vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var vowelIndex60:\
    \ Int = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpj9j2ii7o.swift:80:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpj9j2ii7o.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpj9j2ii7o.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word {\n\
    \        if letter == \"a\" || letter == \"e\" || letter == \"i\" || letter ==\
    \ \"o\" || letter == \"u\" {\n            vowels.append(letter)\n        }\n \
    \   }\n    if vowels.count > 0 {\n        return vowels[vowels.count - 1]\n  \
    \  }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_3xgrl6r.swift:16:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            vowels.append(letter)\n    \
    \                      ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndex2 = vowels.count\n    \n    var vowelIndex3 = word.count\n\
    \    \n    var vowelIndex4 = word.count\n    \n    var vowelIndex5 = word.count\n\
    \    \n    var vowelIndex6 = word.count\n    \n    var vowelIndex7 = word.count\n\
    \    \n    var vowelIndex8 = word.count\n    \n    var vowelIndex9 = word.count\n\
    \    \n    var vowelIndex10 = word.count\n    \n    var vowelIndex11 = word.count\n\
    \    \n    var vowelIndex12 = word.count\n    \n    var vowelIndex13 = word.count\n\
    \    \n    var vowelIndex14 = word.count\n    \n    var vowelIndex15 = word.count\n\
    \    \n    var vowelIndex16 = word.count\n    \n    var vowelIndex17 = word.count\n\
    \    \n    var vowelIndex18 = word.count\n    \n    var vowelIndex19 = word.count\n\
    \    \n    var vowelIndex20 = word.count\n    \n    var vowelIndex21 = word.count\n\
    \    \n    var vowelIndex22 = word.count\n    \n    var vowelIndex23 = word.count\n\
    \    \n    var vowelIndex24 = word.count\n    \n    var vowelIndex25 = word.count\n\
    \    \n    var vowelIndex26 = word.count\n    \n    var vowelIndex27 = word.count\n\
    \    \n    var vowelIndex28 = word.count\n    \n    var vowelIndex29 = word.count\n\
    \    \n    var vowelIndex30 = word.count\n    \n    var vowelIndex31 = word.count\n\
    \    \n    var vowelIndex32 = word.count\n    \n    var vowelIndex33 = word.count\n\
    \    \n    var vowelIndex34 = word.count\n    \n    var vowelIndex35 = word.count\n\
    \    \n    var vowelIndex36 = word.count\n    \n    var vowelIndex37 = word.count\n\
    \    \n    var vowelIndex38 = word.count\n    \n    var vowelIndex39 = word.count\n\
    \    \n    var vowelIndex40 = word.count\n    \n    var vowelIndex41 = word.count\n\
    \    \n    var vowelIndex42 = word.count\n    \n    var vowelIndex43 = word.count\n\
    \    \n    var vowelIndex44 = word.count\n    \n    var vowelIndex45 = word.count\n\
    \    \n    var vowelIndex46 = word.count\n    \n    var vowelIndex47 = word.count\n\
    \    \n    var vowelIndex48 = word.count\n    \n    var vowelIndex49 = word.count\n\
    \    \n    var vowelIndex50 = word.count\n    \n    var vowelIndex51 = word.count\n\
    \    \n    var vowelIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpx45n1o8d.swift:117:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexEnd = word.count\n \
    \   var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1yc__c9l.swift:18:9: error: invalid redeclaration of 'vowelIndexEnd'\n\
    \    var vowelIndexEnd = 0\n        ^\n/tmp/tmp1yc__c9l.swift:16:9: note: 'vowelIndexEnd'\
    \ previously declared here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1yc__c9l.swift:19:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1yc__c9l.swift:17:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1yc__c9l.swift:20:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1yc__c9l.swift:16:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1yc__c9l.swift:21:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1yc__c9l.swift:17:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1yc__c9l.swift:22:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1yc__c9l.swift:16:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1yc__c9l.swift:23:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1yc__c9l.swift:17:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1yc__c9l.swift:24:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1yc__c9l.swift:16:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp1yc__c9l.swift:25:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmp1yc__c9l.swift:17:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmp1yc__c9l.swift:26:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmp1yc__c9l.swift:16:9: note: 'vowelIndexEnd' previously decla"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [Character] = []\n    for char in word.unicodeScalars\
    \ {\n        if let _ = char.value > 0x41 && char.value < 0x5A {\n           \
    \ vowels.append(char)\n        }\n    }\n    if vowels.isEmpty {\n        return\
    \ \"\"\n    }\n    var vowelIndex: Int = 0\n    var vowelIndex2: Int = 0\n   \
    \ var vowelIndex3: Int = 0\n    var vowelIndex4: Int = 0\n    var vowelIndex5:\
    \ Int = 0\n    var vowelIndex6: Int = 0\n    var vowelIndex7: Int = 0\n    var\
    \ vowelIndex8: Int = 0\n    var vowelIndex9: Int = 0\n    var vowelIndex10: Int\
    \ = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12: Int = 0\n    var vowelIndex13:\
    \ Int = 0\n    var vowelIndex14: Int = 0\n    var vowelIndex15: Int = 0\n    var\
    \ vowelIndex16: Int = 0\n    var vowelIndex17: Int = 0\n    var vowelIndex18:\
    \ Int = 0\n    var vowelIndex19: Int = 0\n    var vowelIndex20: Int = 0\n    var\
    \ vowelIndex21: Int = 0\n    var vowelIndex22: Int = 0\n    var vowelIndex23:\
    \ Int = 0\n    var vowelIndex24: Int = 0\n    var vowelIndex25: Int = 0\n    var\
    \ vowelIndex26: Int = 0\n    var vowelIndex27: Int = 0\n    var vowelIndex28:\
    \ Int = 0\n    var vowelIndex29: Int = 0\n    var vowelIndex30: Int = 0\n    var\
    \ vowelIndex31: Int = 0\n    var vowelIndex32: Int = 0\n    var vowelIndex33:\
    \ Int = 0\n    var vowelIndex34: Int = 0\n    var vowelIndex35: Int = 0\n    var\
    \ vowelIndex36: Int = 0\n    var vowelIndex37: Int = 0\n    var vowelIndex38:\
    \ Int = 0\n    var vowelIndex39: Int = 0\n    var vowelIndex40: Int = 0\n    var\
    \ vowelIndex41: Int = 0\n    var vowelIndex42: Int = 0\n    var vowelIndex43:\
    \ Int = 0\n    var vowelIndex44: Int = 0\n    var vowelIndex45: Int = 0\n    var\
    \ vowelIndex46: Int = 0\n    var vowelIndex47: Int = 0\n    var vowelIndex48:\
    \ Int = 0\n    var vowelIndex49: Int = 0\n    var vowelIndex50: Int = 0\n    var\
    \ vowelIndex51: Int = 0\n    var vowelIndex52: Int = 0\n    var vowelIndex53:\
    \ Int = 0\n    var vowelIndex54: Int = 0\n    var vowelIndex55: Int = 0\n    var\
    \ vowelIndex56: Int = 0\n    var vowelIndex57: Int = 0\n    var vowelIndex58:\
    \ Int = 0\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpus83ga2o.swift:16:20: error: no exact matches in call to instance\
    \ method 'append'\n            vowels.append(char)\n                   ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpus83ga2o.swift:16:20: note: found\
    \ candidate with type '(__owned Unicode.Scalar) -> ()'\n            vowels.append(char)\n\
    \                   ^\n/tmp/tmpus83ga2o.swift:15:12: error: initializer for conditional\
    \ binding must have Optional type, not 'Bool'\n        if let _ = char.value >\
    \ 0x41 && char.value < 0x5A {\n           ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpus83ga2o.swift:80:9: error: type annotation missing in pattern\n    var\
    \ vowel\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray\
    \ = vowels.characters\n    \n    var vowelsCount = word.characters.count\n   \
    \ \n    var vowelIndex = 0\n    \n    var vowelFound = false\n    \n    var closestVowel\
    \ = \"\"\n    \n    for vowelIndex in 0..<vowelsCount {\n        \n        if\
    \ vowelsArray.contains(word.characters[vowelIndex]) {\n            \n        \
    \    vowelFound = true\n            \n            if vowelIndex == vowelsCount\
    \ - 1 {\n                \n                closestVowel = word.characters[vowelIndex]\n\
    \                \n            } else {\n                \n                closestVowel\
    \ = word.characters[vowelIndex+1]\n                \n            }\n         \
    \   \n            break\n            \n        }\n        \n    }\n    \n    if\
    \ vowelFound == false {\n        \n        return \"\"\n        \n    }\n    \n\
    \    return closestVowel\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphhikyr6k.swift:15:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphhikyr6k.swift:17:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphhikyr6k.swift:27:33: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowelsArray.contains(word.characters[vowelIndex])\
    \ {\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmphhikyr6k.swift:27:38:\
    \ error: 'characters' is unavailable: Please use String directly\n        if vowelsArray.contains(word.characters[vowelIndex])\
    \ {\n                                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmphhikyr6k.swift:33:47: error: cannot assign\
    \ value of type 'Character' to type 'String'\n                closestVowel = word.characters[vowelIndex]\n\
    \                               ~~~~~~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmphhikyr6k.swift:37:47:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      closestVowel = word.characters[vowelIndex+1]\n                        \
    \       ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = 0\n    var vowelsIndex3\
    \ = 0\n    var vowelsIndex4 = 0\n    var vowelsIndex5 = 0\n    var vowelsIndex6\
    \ = 0\n    var vowelsIndex7 = 0\n    var vowelsIndex8 = 0\n    var vowelsIndex9\
    \ = 0\n    var vowelsIndex10 = 0\n    var vowelsIndex11 = 0\n    var vowelsIndex12\
    \ = 0\n    var vowelsIndex13 = 0\n    var vowelsIndex14 = 0\n    var vowelsIndex15\
    \ = 0\n    var vowelsIndex16 = 0\n    var vowelsIndex17 = 0\n    var vowelsIndex18\
    \ = 0\n    var vowelsIndex19 = 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21\
    \ = 0\n    var vowelsIndex22 = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24\
    \ = 0\n    var vowelsIndex25 = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27\
    \ = 0\n    var vowelsIndex28 = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30\
    \ = 0\n    var vowelsIndex31 = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33\
    \ = 0\n    var vowelsIndex34 = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36\
    \ = 0\n    var vowelsIndex37 = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39\
    \ = 0\n    var vowelsIndex40 = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42\
    \ = 0\n    var vowelsIndex43 = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45\
    \ = 0\n    var vowelsIndex46 = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48\
    \ = 0\n    var vowelsIndex49 = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51\
    \ = 0\n    var vowelsIndex52 = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54\
    \ = 0\n    var vowelsIndex55 = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57\
    \ = 0\n    var vowelsIndex58 = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60\
    \ = 0\n    var vowelsIndex61 = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63\
    \ = 0\n    var vowelsIndex64 = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66\
    \ = 0\n    var vowelsIndex67 = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69\
    \ = 0\n    var vowelsIndex70 = 0\n    var vowelsIndex71\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2524jq7x.swift:85:9: error: type annotation missing in pattern\n\
    \    var vowelsIndex71\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map({ String($0)\
    \ }),\n        let vowelsCount = vowels.count,\n        let vowelsCount = vowelsCount.isMultiple(of:\
    \ 2) else {\n            return \"\"\n    }\n    \n    let vowelsCount = vowels.count\n\
    \    \n    let vowelsCount2 = vowelsCount * 2\n    \n    var index = 0\n    var\
    \ minDistance = vowelsCount2\n    \n    while index < word.characters.count {\n\
    \        let char = word.characters[index]\n        let index = word.index(char,\
    \ offsetBy: 1)\n        \n        if vowels.contains(char) {\n            let\
    \ distance = vowelsCount - index\n            if distance < minDistance {\n  \
    \              minDistance = distance\n            }\n        }\n        \n  \
    \      index += 1\n    }\n    \n    return minDistance == vowelsCount2 ? \"\"\
    \ : vowels[minDistance]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpk8avpmej.swift:13:24: error: cannot find 'vowels' in scope\n  \
    \  guard let vowels = vowels.characters.map({ String($0) }),\n               \
    \        ^~~~~~\n/tmp/tmpk8avpmej.swift:26:24: error: 'characters' is unavailable:\
    \ Please use String directly\n    while index < word.characters.count {\n    \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpk8avpmej.swift:27:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpk8avpmej.swift:27:25:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = word.characters[index]\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpk8avpmej.swift:28:32: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String.Index'\n       \
    \ let index = word.index(char, offsetBy: 1)\n                               ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for char\
    \ in word.characters {\n        if char == \"a\" || char == \"e\" || char == \"\
    i\" || char == \"o\" || char == \"u\" {\n            vowelIndex = word.characters.index(of:\
    \ char)\n            vowel = char\n        }\n    }\n    if vowelIndex == word.characters.count\
    \ - 1 {\n        return \"\"\n    }\n    if vowelIndex == 0 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 2 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 3 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 4 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 5 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 6 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 7 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 8 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 9 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 10 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 11 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 12 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 13 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 14 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 15 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 16 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 17 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 18 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 19 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 20 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 21 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 22 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 23 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 24 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 25 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 26 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 27 {\n        return\
    \ vowel\n    }\n    if vowelIndex == word.characters.count - 28 {\n        return\
    \ vowel\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpli97s2lm.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpli97s2lm.swift:17:42:\
    \ error: cannot assign value of type 'String.Index?' to type 'Int'\n         \
    \   vowelIndex = word.characters.index(of: char)\n                         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n\
    /tmp/tmpli97s2lm.swift:18:21: error: cannot assign value of type 'Character' to\
    \ type 'String'\n            vowel = char\n                    ^~~~\n/tmp/tmpli97s2lm.swift:21:27:\
    \ error: 'characters' is unavailable: Please use String directly\n    if vowelIndex\
    \ == word.characters.count - 1 {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpli97s2lm.swift:27:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    if vowelIndex == word.characters.count\
    \ - 2 {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpli97s2lm.swift:30:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    if vowelIndex == word.characters.count - 3 {\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpli97s2lm.swift:33:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    if vowelIndex == word.characters.count - 4 {\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpli97s2lm.swift:36:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    if vowelIndex == word.characters.count - 5 {\n\
    \                          ^~~~~~~~~~\nS"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = -1\n    var vowelIndex3 = -1\n    var vowelIndex4 = -1\n\
    \    var vowelIndex5 = -1\n    var vowelIndex6 = -1\n    var vowelIndex7 = -1\n\
    \    var vowelIndex8 = -1\n    var vowelIndex9 = -1\n    var vowelIndex10 = -1\n\
    \    var vowelIndex11 = -1\n    var vowelIndex12 = -1\n    var vowelIndex13 =\
    \ -1\n    var vowelIndex14 = -1\n    var vowelIndex15 = -1\n    var vowelIndex16\
    \ = -1\n    var vowelIndex17 = -1\n    var vowelIndex18 = -1\n    var vowelIndex19\
    \ = -1\n    var vowelIndex20 = -1\n    var vowelIndex21 = -1\n    var vowelIndex22\
    \ = -1\n    var vowelIndex23 = -1\n    var vowelIndex24 = -1\n    var vowelIndex25\
    \ = -1\n    var vowelIndex26 = -1\n    var vowelIndex27 = -1\n    var vowelIndex28\
    \ = -1\n    var vowelIndex29 = -1\n    var vowelIndex30 = -1\n    var vowelIndex31\
    \ = -1\n    var vowelIndex32 = -1\n    var vowelIndex33 = -1\n    var vowelIndex34\
    \ = -1\n    var vowelIndex35 = -1\n    var vowelIndex36 = -1\n    var vowelIndex37\
    \ = -1\n    var vowelIndex38 = -1\n    var vowelIndex39 = -1\n    var vowelIndex40\
    \ = -1\n    var vowelIndex41 = -1\n    var vowelIndex42 = -1\n    var vowelIndex43\
    \ = -1\n    var vowelIndex44 = -1\n    var vowelIndex45 = -1\n    var vowelIndex46\
    \ = -1\n    var vowelIndex47 = -1\n    var vowelIndex48 = -1\n    var vowelIndex49\
    \ = -1\n    var vowelIndex50 = -1\n    var vowelIndex51 = -1\n    var vowelIndex52\
    \ = -1\n    var vowelIndex53 = -1\n    var vowelIndex54 = -1\n    var vowelIndex55\
    \ = -1\n    var vowelIndex56 = -1\n    var vowelIndex57 = -1\n    var vowelIndex58\
    \ = -1\n    var vowelIndex59 = -1\n    var vowelIndex60 = -1\n    var vowelIndex61\
    \ = -1\n    var vowelIndex62 = -1\n    var vowelIndex63 = -1\n    var vowelIndex64\
    \ = -1\n    var vowelIndex65 = -1\n    var vowelIndex66 = -1\n    var vowelIndex67\
    \ = -1\n    var vowelIndex68 = -1\n    var vowelIndex69 = -1\n    var vowelIndex70\
    \ = -1\n    var vowelIndex71 = -1\n    var vowelIndex72 = -1\n    var vowelIndex73\
    \ = -1\n    var vowelIndex74 = -1\n    var vowelIndex75 = -1\n    var vowelIndex76\
    \ = -1\n    var vowelIndex77 = -1\n    var vowelIndex78 = -1\n    var vowelIndex79\
    \ = -1\n    var vowelIndex80 = -1\n    var vowelIndex81 = -1\n    var vowelIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjt21j_4t.swift:95:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = vowels.count\n    var vowelIndex3 = vowels.count\n    var\
    \ vowelIndex4 = vowels.count\n    var vowelIndex5 = vowels.count\n    var vowelIndex6\
    \ = vowels.count\n    var vowelIndex7 = vowels.count\n    var vowelIndex8 = vowels.count\n\
    \    var vowelIndex9 = vowels.count\n    var vowelIndex10 = vowels.count\n   \
    \ var vowelIndex11 = vowels.count\n    var vowelIndex12 = vowels.count\n    var\
    \ vowelIndex13 = vowels.count\n    var vowelIndex14 = vowels.count\n    var vowelIndex15\
    \ = vowels.count\n    var vowelIndex16 = vowels.count\n    var vowelIndex17 =\
    \ vowels.count\n    var vowelIndex18 = vowels.count\n    var vowelIndex19 = vowels.count\n\
    \    var vowelIndex20 = vowels.count\n    var vowelIndex21 = vowels.count\n  \
    \  var vowelIndex22 = vowels.count\n    var vowelIndex23 = vowels.count\n    var\
    \ vowelIndex24 = vowels.count\n    var vowelIndex25 = vowels.count\n    var vowelIndex26\
    \ = vowels.count\n    var vowelIndex27 = vowels.count\n    var vowelIndex28 =\
    \ vowels.count\n    var vowelIndex29 = vowels.count\n    var vowelIndex30 = vowels.count\n\
    \    var vowelIndex31 = vowels.count\n    var vowelIndex32 = vowels.count\n  \
    \  var vowelIndex33 = vowels.count\n    var vowelIndex34 = vowels.count\n    var\
    \ vowelIndex35 = vowels.count\n    var vowelIndex36 = vowels.count\n    var vowelIndex37\
    \ = vowels.count\n    var vowelIndex38 = vowels.count\n    var vowelIndex39 =\
    \ vowels.count\n    var vowelIndex40 = vowels.count\n    var vowelIndex41 = vowels.count\n\
    \    var vowelIndex42 = vowels.count\n    var vowelIndex43 = vowels.count\n  \
    \  var vowelIndex44 = vowels.count\n    var vowelIndex45 = vowels.count\n    var\
    \ vowelIndex46 = vowels.count\n    var vowelIndex47 = vowels.count\n    var vowelIndex48\
    \ = vowels.count\n    var vowelIndex49 = vowels.count\n    var vowelIndex50 =\
    \ vowels.count\n    var vowelIndex51 = vowels.count\n    var vowelIndex52 = vowels.count\n\
    \    var vowelIndex53 = vowels.count\n    var vowelIndex54 = vowels.count\n  \
    \  var vowelIndex55 = vowels.count\n    var vowelIndex56 = vowels.count\n    var\
    \ vowelIndex57 = vowels.count\n    var vowelIndex58\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpgbh6errw.swift:71:9: error: type annotation missing in pattern\n\
    \    var vowelIndex58\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  var vowelIndex = 0\n    var vowelIndex2 = vowelIndex\n    \n    var vowelIndex3\
    \ = vowelIndex\n    \n    var vowelIndex4 = vowelIndex\n    \n    var vowelIndex5\
    \ = vowelIndex\n    \n    var vowelIndex6 = vowelIndex\n    \n    var vowelIndex7\
    \ = vowelIndex\n    \n    var vowelIndex8 = vowelIndex\n    \n    var vowelIndex9\
    \ = vowelIndex\n    \n    var vowelIndex10 = vowelIndex\n    \n    var vowelIndex11\
    \ = vowelIndex\n    \n    var vowelIndex12 = vowelIndex\n    \n    var vowelIndex13\
    \ = vowelIndex\n    \n    var vowelIndex14 = vowelIndex\n    \n    var vowelIndex15\
    \ = vowelIndex\n    \n    var vowelIndex16 = vowelIndex\n    \n    var vowelIndex17\
    \ = vowelIndex\n    \n    var vowelIndex18 = vowelIndex\n    \n    var vowelIndex19\
    \ = vowelIndex\n    \n    var vowelIndex20 = vowelIndex\n    \n    var vowelIndex21\
    \ = vowelIndex\n    \n    var vowelIndex22 = vowelIndex\n    \n    var vowelIndex23\
    \ = vowelIndex\n    \n    var vowelIndex24 = vowelIndex\n    \n    var vowelIndex25\
    \ = vowelIndex\n    \n    var vowelIndex26 = vowelIndex\n    \n    var vowelIndex27\
    \ = vowelIndex\n    \n    var vowelIndex28 = vowelIndex\n    \n    var vowelIndex29\
    \ = vowelIndex\n    \n    var vowelIndex30 = vowelIndex\n    \n    var vowelIndex31\
    \ = vowelIndex\n    \n    var vowelIndex32 = vowelIndex\n    \n    var vowelIndex33\
    \ = vowelIndex\n    \n    var vowelIndex34 = vowelIndex\n    \n    var vowelIndex35\
    \ = vowelIndex\n    \n    var vowelIndex36 = vowelIndex\n    \n    var vowelIndex37\
    \ = vowelIndex\n    \n    var vowelIndex38 = vowelIndex\n    \n    var vowelIndex39\
    \ = vowelIndex\n    \n    var vowelIndex40 = vowelIndex\n    \n    var vowelIndex41\
    \ = vowelIndex\n    \n    var vowelIndex42 = vowelIndex\n    \n    var vowelIndex43\
    \ = vowelIndex\n    \n    var vowelIndex44 = vowelIndex\n    \n    var vowelIndex45\
    \ = vowelIndex\n    \n    var vowelIndex46 = vowelIndex\n    \n    var vowelIndex47\
    \ = vowelIndex\n    \n    var vowelIndex48 = vowelIndex\n    \n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyhx8nl12.swift:20:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpyhx8nl12.swift:22:9:\
    \ warning: variable 'vowelIndex' was never mutated; consider changing to 'let'\
    \ constant\n    var vowelIndex = 0\n    ~~~ ^\n    let\n/tmp/tmpyhx8nl12.swift:23:9:\
    \ warning: initialization of variable 'vowelIndex2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex2 = vowelIndex\n  \
    \  ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpyhx8nl12.swift:25:9: warning: initialization\
    \ of variable 'vowelIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex3 = vowelIndex\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpyhx8nl12.swift:27:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = vowelIndex\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpyhx8nl12.swift:29:9:\
    \ warning: initialization of variable 'vowelIndex5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex5 = vowelIndex\n  \
    \  ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpyhx8nl12.swift:31:9: warning: initialization\
    \ of variable 'vowelIndex6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex6 = vowelIndex\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpyhx8nl12.swift:33:9: warning: initialization of variable 'vowelIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex7 = vowelIndex\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpyhx8nl12.swift:35:9:\
    \ warning: initialization of variable 'vowelIndex8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex8 = vowelIndex\n  \
    \  ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpyhx8nl12.swift:37:9: warning: initialization\
    \ of variable 'vowelIndex9' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex9 = vowelIndex\n    ~~~~^~~~~~~~~"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexEnd = word.count - 1\n\
    \    var vowelIndexStart = word.count - 1\n    var vowelIndexStart2 = word.count\
    \ - 1\n    var vowelIndexEnd2 = word.count - 1\n    var vowelIndexStart3 = word.count\
    \ - 1\n    var vowelIndexEnd3 = word.count - 1\n    var vowelIndexStart4 = word.count\
    \ - 1\n    var vowelIndexEnd4 = word.count - 1\n    var vowelIndexStart5 = word.count\
    \ - 1\n    var vowelIndexEnd5 = word.count - 1\n    var vowelIndexStart6 = word.count\
    \ - 1\n    var vowelIndexEnd6 = word.count - 1\n    var vowelIndexStart7 = word.count\
    \ - 1\n    var vowelIndexEnd7 = word.count - 1\n    var vowelIndexStart8 = word.count\
    \ - 1\n    var vowelIndexEnd8 = word.count - 1\n    var vowelIndexStart9 = word.count\
    \ - 1\n    var vowelIndexEnd9 = word.count - 1\n    var vowelIndexStart10 = word.count\
    \ - 1\n    var vowelIndexEnd10 = word.count - 1\n    var vowelIndexStart11 = word.count\
    \ - 1\n    var vowelIndexEnd11 = word.count - 1\n    var vowelIndexStart12 = word.count\
    \ - 1\n    var vowelIndexEnd12 = word.count - 1\n    var vowelIndexStart13 = word.count\
    \ - 1\n    var vowelIndexEnd13 = word.count - 1\n    var vowelIndexStart14 = word.count\
    \ - 1\n    var vowelIndexEnd14 = word.count - 1\n    var vowelIndexStart15 = word.count\
    \ - 1\n    var vowelIndexEnd15 = word.count - 1\n    var vowelIndexStart16 = word.count\
    \ - 1\n    var vowelIndexEnd16 = word.count - 1\n    var vowelIndexStart17 = word.count\
    \ - 1\n    var vowelIndexEnd17 = word.count - 1\n    var vowelIndexStart18 = word.count\
    \ - 1\n    var vowelIndexEnd18 = word.count - 1\n    var vowelIndexStart19 = word.count\
    \ - 1\n    var vowelIndexEnd19 = word.count - 1\n    var vowelIndexStart20 = word.count\
    \ - 1\n    var vowelIndexEnd20 = word.count - 1\n    var vowelIndexStart21 = word.count\
    \ - 1\n    var vowelIndexEnd21 = word.count - 1\n    var vowelIndexStart22 = word.count\
    \ - 1\n    var vowelIndexEnd22 = word.count - 1\n    var vowelIndexStart23 = word.count\
    \ - 1\n    var vowelIndexEnd23 = word.count - 1\n    var vowelIndexStart24 = word.count\
    \ - 1\n    var vowelIndexEnd24 = word.count - 1\n    var vowelIndexStart25 = word.count\
    \ - 1\n    var vowelIndexEnd25 = word.count - 1\n    var vowelIndexStart26 = word.count\
    \ - 1\n    var vowelIndexEnd26\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4lctfukt.swift:67:9: error: type annotation missing in pattern\n\
    \    var vowelIndexEnd26\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n \
    \   var vowelIndex5 = 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n  \
    \  var vowelIndex8 = 0\n    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n  \
    \  var vowelIndex11 = 0\n    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n\
    \    var vowelIndex14 = 0\n    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n\
    \    var vowelIndex17 = 0\n    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n\
    \    var vowelIndex20 = 0\n    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n\
    \    var vowelIndex23 = 0\n    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n\
    \    var vowelIndex26 = 0\n    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n\
    \    var vowelIndex29 = 0\n    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n\
    \    var vowelIndex32 = 0\n    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n\
    \    var vowelIndex35 = 0\n    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n\
    \    var vowelIndex38 = 0\n    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n\
    \    var vowelIndex41 = 0\n    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n\
    \    var vowelIndex44 = 0\n    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n\
    \    var vowelIndex47 = 0\n    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n\
    \    var vowelIndex50 = 0\n    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n\
    \    var vowelIndex53 = 0\n    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n\
    \    var vowelIndex56 = 0\n    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n\
    \    var vowelIndex59 = 0\n    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n\
    \    var vowelIndex62 = 0\n    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n\
    \    var vowelIndex65 = 0\n    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n\
    \    var vowelIndex68 = 0\n    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n\
    \    var vowelIndex71 = 0\n    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n\
    \    var vowelIndex74 = 0\n    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n\
    \    var vowelIndex77 = 0\n    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n\
    \    var vowelIndex80 = 0\n    var vowelIndex81 = 0\n    var vowelIndex82 = 0\n\
    \    var vowelIndex83 = 0\n    var vowelIndex84 = 0\n    var vowelIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7vk7oj1_.swift:98:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqi71husc.swift:76:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var vowelsCount = [String: Int]()\n    \n    for char in\
    \ word.characters {\n        if vowels.contains(char) {\n            vowelsCount[char]\
    \ = vowelsCount[char]! + 1\n        }\n    }\n    \n    var closestVowel: String\
    \ = \"\"\n    var closestVowelCount: Int = vowelsCount[\"u\"]!\n    \n    for\
    \ char in word.characters {\n        if vowelsCount[char]! < closestVowelCount\
    \ {\n            closestVowel = char\n            closestVowelCount = vowelsCount[char]!\n\
    \        }\n    }\n    \n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpg34sqvy_.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpg34sqvy_.swift:18:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpg34sqvy_.swift:19:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowelsCount[char] = vowelsCount[char]! + 1\n                    \
    \    ^\n/tmp/tmpg34sqvy_.swift:19:45: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            vowelsCount[char] = vowelsCount[char]!\
    \ + 1\n                                            ^\n/tmp/tmpg34sqvy_.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpg34sqvy_.swift:27:24: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        if vowelsCount[char]!\
    \ < closestVowelCount {\n                       ^\n/tmp/tmpg34sqvy_.swift:28:28:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  closestVowel = char\n                           ^~~~\n/tmp/tmpg34sqvy_.swift:29:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            closestVowelCount = vowelsCount[char]!\n                        \
    \                    ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels.first!)\n    if vowelIndex == -1 { return \"\" }\n    var vowelsCountFromRight\
    \ = word.characters.reverse().firstIndex(of: vowels.last!)\n    if vowelsCountFromRight\
    \ == -1 { return \"\" }\n    if vowelIndex < vowelsCountFromRight {\n        return\
    \ vowels[vowelIndex].lowercased()\n    }\n    return vowels[vowelsCountFromRight].lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpu61_akj8.swift:15:38: error: value of type 'String' has no member\
    \ 'reverse'\n    var vowelIndex = word.characters.reverse().firstIndex(of: vowels.first!)\n\
    \                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpu61_akj8.swift:17:48: error:\
    \ value of type 'String' has no member 'reverse'\n    var vowelsCountFromRight\
    \ = word.characters.reverse().firstIndex(of: vowels.last!)\n                 \
    \              ~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels.first!)\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount > 1 {\n        return \"\"\n    }\n    \n\
    \    let vowelIndex = word.characters.reverse().firstIndex(of: vowels.last!)\n\
    \    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels.last!)\n\
    \    \n    if vowelIndex == 0 {\n        return \"\"\n    }\n    \n    return\
    \ word.substring(from: vowelIndex + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_gr_a5pu.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_gr_a5pu.swift:22:38: error: value of type 'String'\
    \ has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels.first!)\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_gr_a5pu.swift:24:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n                  \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_gr_a5pu.swift:24:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n        ^\n/tmp/tmp_gr_a5pu.swift:16:9: note:\
    \ 'vowelsCount' previously declared here\n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n        ^\n/tmp/tmp_gr_a5pu.swift:30:38: error:\
    \ value of type 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels.last!)\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_gr_a5pu.swift:32:38:\
    \ error: value of type 'String' has no member 'reverse'\n    let vowelIndex =\
    \ word.characters.reverse().firstIndex(of: vowels.first!)\n                  \
    \   ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_gr_a5pu.swift:38:38: error: value of type\
    \ 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels.last!)\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_gr_a5pu.swift:44:17:\
    \ error: value of type 'String' has no member 'substring'\n    return word.substring(from:\
    \ vowelIndex + 1)\n           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    if word.characters.count < 2 {\n        return \"\"\
    \n    }\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount = vowels.characters.count\n\
    \    var vowelsIndex = 0\n    var vowelsIndex2 = vowelsIndex\n    var vowelsIndex3\
    \ = vowelsIndex\n    var vowelsIndex4 = vowelsIndex\n    var vowelsIndex5 = vowelsIndex\n\
    \    var vowelsIndex6 = vowelsIndex\n    var vowelsIndex7 = vowelsIndex\n    var\
    \ vowelsIndex8 = vowelsIndex\n    var vowelsIndex9 = vowelsIndex\n    var vowelsIndex10\
    \ = vowelsIndex\n    var vowelsIndex11 = vowelsIndex\n    var vowelsIndex12 =\
    \ vowelsIndex\n    var vowelsIndex13 = vowelsIndex\n    var vowelsIndex14 = vowelsIndex\n\
    \    var vowelsIndex15 = vowelsIndex\n    var vowelsIndex16 = vowelsIndex\n  \
    \  var vowelsIndex17 = vowelsIndex\n    var vowelsIndex18 = vowelsIndex\n    var\
    \ vowelsIndex19 = vowelsIndex\n    var vowelsIndex20 = vowelsIndex\n    var vowelsIndex21\
    \ = vowelsIndex\n    var vowelsIndex22 = vowelsIndex\n    var vowelsIndex23 =\
    \ vowelsIndex\n    var vowelsIndex24 = vowelsIndex\n    var vowelsIndex25 = vowelsIndex\n\
    \    var vowelsIndex26 = vowelsIndex\n    var vowelsIndex27 = vowelsIndex\n  \
    \  var vowelsIndex28 = vowelsIndex\n    var vowelsIndex29 = vowelsIndex\n    var\
    \ vowelsIndex30 = vowelsIndex\n    var vowelsIndex31 = vowelsIndex\n    var vowelsIndex32\
    \ = vowelsIndex\n    var vowelsIndex33 = vowelsIndex\n    var vowelsIndex34 =\
    \ vowelsIndex\n    var vowelsIndex35 = vowelsIndex\n    var vowelsIndex36 = vowelsIndex\n\
    \    var vowelsIndex37 = vowelsIndex\n    var vowelsIndex38 = vowelsIndex\n  \
    \  var vowelsIndex39 = vowelsIndex\n    var vowelsIndex40 = vowelsIndex\n    var\
    \ vowelsIndex41 = vowelsIndex\n    var vowelsIndex42 = vowelsIndex\n    var vowelsIndex43\
    \ = vowelsIndex\n    var vowelsIndex44 = vowelsIndex\n    var vowelsIndex45 =\
    \ vowelsIndex\n    var vowelsIndex46 = vowelsIndex\n    var vowelsIndex47 = vowelsIndex\n\
    \    var vowelsIndex48 = vowelsIndex\n    var vowelsIndex49 = vowelsIndex\n  \
    \  var vowelsIndex50 = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl44wzry8.swift:67:24: error: expected initial value after '='\n\
    \    var vowelsIndex50 = \n                       ^\n/tmp/tmpl44wzry8.swift:13:13:\
    \ error: 'characters' is unavailable: Please use String directly\n    if word.characters.count\
    \ < 2 {\n            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl44wzry8.swift:17:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    \n    var vowelsCount = 0\n    \n    for char in word {\n\
    \        if vowels.contains(char) {\n            vowelsCount += 1\n        }\n\
    \    }\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n  \
    \  var vowelsCountFromRight = 0\n    \n    for char in word {\n        if vowels.contains(char)\
    \ {\n            vowelsCountFromRight += 1\n        }\n    }\n    \n    if vowelsCountFromRight\
    \ == 0 {\n        return \"\"\n    }\n    \n    var vowelsCountFromRightFromRight\
    \ = 0\n    \n    for char in word {\n        if vowels.contains(char) {\n    \
    \        vowelsCountFromRightFromRight += 1\n        }\n    }\n    \n    if vowelsCountFromRightFromRight\
    \ == 0 {\n        return \"\"\n    }\n    \n    var vowelsCountFromRightFromRightFromRight\
    \ = 0\n    \n    for char in word {\n        if vowels.contains(char) {\n    \
    \        vowelsCountFromRightFromRightFromRight += 1\n        }\n    }\n    \n\
    \    if vowelsCountFromRightFromRightFromRight == 0 {\n        return \"\"\n \
    \   }\n    \n    var vowelsCountFromRightFromRightFromRightFromRight = 0\n   \
    \ \n    for char in word {\n        if vowels.contains(char) {\n            vowelsCountFromRightFromRightFromRightFromRight\
    \ += 1\n        }\n    }\n    \n    if vowelsCountFromRightFromRightFromRightFromRight\
    \ == 0 {\n        return \"\"\n    }\n    \n    var vowelsCountFromRightFromRightFromRightFromRightFromRight\
    \ = 0\n    \n    for char in word {\n        if vowels.contains(char) {\n    \
    \        vowelsCountFromRightFromRightFromRightFromRightFromRight += 1\n     \
    \   }\n    }\n    \n    if vowelsCountFromRightFromRightFromRightFromRightFromRight\
    \ == 0 {\n        return \"\"\n    }\n    \n    var vowelsCountFromRightFromRightFromRightFromRightFromRightFromRight\
    \ = 0\n    \n    for char in word {\n        if vowels.contains(char) {\n    \
    \        vowelsCountFromRightFromRightFromRightFromRightFromRightFromRight +=\
    \ 1\n        }\n    }\n    \n    if vowelsCountFromRightFromRightFromRightFromRightFromRightFromRight\
    \ == 0 {\n        return \"\"\n    }\n    \n    var vowelsCountFromRightFromRightFromRightFromRightFromRightFromRight\
    \ = 0\n    \n    for char in word {\n        if vowels.contains(char) {\n    \
    \        vowelsCountFromRightFromRightFromRightFromRight\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyqy5qvy3.swift:132:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpyqy5qvy3.swift:102:22: note: to match this\
    \ opening '{'\n    for char in word {\n                     ^\n/tmp/tmpyqy5qvy3.swift:132:48:\
    \ error: expected '}' at end of brace statement\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")\n                                               ^\n/tmp/tmpyqy5qvy3.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpyqy5qvy3.swift:19:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpyqy5qvy3.swift:31:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpyqy5qvy3.swift:43:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpyqy5qvy3.swift:55:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpyqy5qvy3.swift:67:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpyqy5qvy3.swift:79:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpyqy5qvy3.swift:91:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpyqy5qvy3.swift:100:9:\
    \ error: invalid redeclaration of 'vowelsCountFromRightFromRightFromRightFromRightFromRightFromRight'\n\
    \    var vowelsCountFromRightFromRightFromRightFromRightFromRig"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelCount = 0\n    var vowelString = \"\"\n    for char in word.characters\
    \ {\n        if vowelIndex == vowelsCount {\n            vowelIndex = 0\n    \
    \    }\n        if vowels[vowelIndex] == char {\n            vowelCount++\n  \
    \          if vowelCount > vowelsCount {\n                vowelIndex++\n     \
    \           vowelCount = 0\n            }\n        } else {\n            vowelIndex++\n\
    \            vowelCount = 0\n        }\n    }\n    if vowelIndex == vowelsCount\
    \ {\n        return \"\"\n    }\n    return vowels[vowelIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp65g1_d82.swift:19:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp65g1_d82.swift:23:31:\
    \ error: binary operator '==' cannot be applied to operands of type 'String' and\
    \ 'Character'\n        if vowels[vowelIndex] == char {\n           ~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~\n/tmp/tmp65g1_d82.swift:23:31: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Character, Character), (String, String)\n\
    \        if vowels[vowelIndex] == char {\n                              ^\n/tmp/tmp65g1_d82.swift:24:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelCount++\n                      ^~\n/tmp/tmp65g1_d82.swift:26:27: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n                vowelIndex++\n\
    \                          ^~\n/tmp/tmp65g1_d82.swift:30:23: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            vowelIndex++\n   \
    \                   ^~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelsCountCount = [Int]()\n\
    \    var vowelsCountCountCount = [Int]()\n    var vowelsCountCountCountCount =\
    \ [Int]()\n    var vowelsCountCountCountCountCount = [Int]()\n    var vowelsCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCount = [Int]()\n   \
    \ var vowelsCountCountCountCountCountCountCountCount = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qeoqxu5.swift:34:9: error: invalid redeclaration of 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\n\
    \    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n        ^\n/tmp/tmp9qeoqxu5.swift:33:9: note: 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\
    \ previously declared here\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n        ^\n/tmp/tmp9qeoqxu5.swift:36:9: error: invalid redeclaration\
    \ of 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\n\
    \    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n        ^\n/tmp/tmp9qeoqxu5.swift:35:9: note: 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\
    \ previously declared here\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [Int]()\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map({ $0.lowercased()\
    \ }) else {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0.lowercased()) }).count\n    \n    if vowelsCount == 0 {\n\
    \        return \"\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6lv07i_0.swift:13:24: error: cannot find 'vowels' in scope\n  \
    \  guard let vowels = vowels.characters.map({ $0.lowercased() }) else {\n    \
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSum: Int = 0\n    var vowelsCountSumMax:\
    \ Int = vowelsCountMax\n    var vowelsCountSumMin: Int = vowelsCountMin - 1\n\
    \    var vowelsCountSumMaxIndex: Int = vowelsCountSumMax\n    var vowelsCountSumMinIndex:\
    \ Int = vowelsCountSumMin\n    var vowelsCountSumSum: Int = vowelsCountSumMaxIndex\n\
    \    var vowelsCountSumSumMax: Int = vowelsCountSumMaxIndex\n    var vowelsCountSumSumMin:\
    \ Int = vowelsCountSumMinIndex\n    var vowelsCountSumSumMaxIndex: Int = vowelsCountSumSumMax\n\
    \    var vowelsCountSumSumMinIndex: Int = vowelsCountSumSumMin\n    var vowelsCountSumSumSum:\
    \ Int = vowelsCountSumSumMaxIndex\n    var vowelsCountSumSumSumMax: Int = vowelsCountSumSumMaxIndex\n\
    \    var vowelsCountSumSumSumMin: Int = vowelsCountSumSumMinIndex\n    var vowelsCountSumSumSumMaxIndex:\
    \ Int = vowelsCountSumSumSumMax\n    var vowelsCountSumSumSumMinIndex: Int = vowelsCountSumSumSumMin\n\
    \    var vowelsCountSumSumSumSum: Int = vowelsCountSumSumSumMaxIndex\n    var\
    \ vowelsCountSumSumSumSumMax: Int = vowelsCountSumSumSumMaxIndex\n    var vowelsCountSumSumSumSumMin:\
    \ Int = vowelsCountSumSumSumMinIndex\n    var vowelsCountSumSumSumSumMaxIndex:\
    \ Int = vowelsCountSumSumSumSumMax\n    var vowelsCountSumSumSumSumMinIndex: Int\
    \ = vowelsCountSumSumSumSumMin\n    var vowelsCountSumSumSumSumSum: Int = vowelsCountSumSumSumSumMaxIndex\n\
    \    var vowelsCountSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumMaxIndex\n\
    \    var vowelsCountSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumMinIndex\n\
    \    var vowelsCountSumSumSumSumSumMaxIndex: Int = vowelsCountSumSumSumSumSumMax\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3ryyjozl.swift:42:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp3ryyjozl.swift:13:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels: [String] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    ~~~ ^\n    let\n/tmp/tmp3ryyjozl.swift:14:9: warning:\
    \ variable 'vowelsCount' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n    \
    \    _\n/tmp/tmp3ryyjozl.swift:15:9: warning: variable 'vowelsCountIndex' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsCountIndex:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmp3ryyjozl.swift:16:9: warning:\
    \ variable 'vowelsCountMax' was never mutated; consider changing to 'let' constant\n\
    \    var vowelsCountMax: Int = vowels.count\n    ~~~ ^\n    let\n/tmp/tmp3ryyjozl.swift:17:9:\
    \ warning: variable 'vowelsCountMin' was never mutated; consider changing to 'let'\
    \ constant\n    var vowelsCountMin: Int = vowels.count - 1\n    ~~~ ^\n    let\n\
    /tmp/tmp3ryyjozl.swift:18:9: warning: variable 'vowelsCountSum' was never used;\
    \ consider replacing with '_' or removing it\n    var vowelsCountSum: Int = 0\n\
    \        ^~~~~~~~~~~~~~\n        _\n/tmp/tmp3ryyjozl.swift:19:9: warning: variable\
    \ 'vowelsCountSumMax' was never mutated; consider changing to 'let' constant\n\
    \    var vowelsCountSumMax: Int = vowelsCountMax\n    ~~~ ^\n    let\n/tmp/tmp3ryyjozl.swift:20:9:\
    \ warning: variable 'vowelsCountSumMin' was never mutated; consider changing to\
    \ 'let' constant\n    var vowelsCountSumMin: Int = vowelsCountMin - 1\n    ~~~\
    \ ^\n    let\n/tmp/tmp3ryyjozl.swift:21:9: warning: variable 'vowelsCountSumMaxIndex'\
    \ was never mutated; consider changing to 'let' constant\n    var vowelsCountSumMaxIndex:\
    \ Int = vowelsCountSumMax\n    ~~~ ^\n    let\n/tmp/tmp3ryyjozl.swift:22:9: warning:\
    \ variable 'vowelsCountSumMinIndex' was never mutated; consider changing to 'let'\
    \ constant\n    var vowelsCountSumMinIndex: Int = vowelsCountSumMin\n    ~~~ ^\n\
    \    let\n/tmp/tmp3ryyjozl.swift:23:9: warning: variable 'vowelsCountSumSum' was\
    \ n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqi71husc.swift:76:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelIndex = 0\n \
    \   var vowelIndex2 = -1\n    var vowelIndex3 = -1\n    var vowelIndex4 = -1\n\
    \    var vowelIndex5 = -1\n    var vowelIndex6 = -1\n    var vowelIndex7 = -1\n\
    \    var vowelIndex8 = -1\n    var vowelIndex9 = -1\n    var vowelIndex10 = -1\n\
    \    var vowelIndex11 = -1\n    var vowelIndex12 = -1\n    var vowelIndex13 =\
    \ -1\n    var vowelIndex14 = -1\n    var vowelIndex15 = -1\n    var vowelIndex16\
    \ = -1\n    var vowelIndex17 = -1\n    var vowelIndex18 = -1\n    var vowelIndex19\
    \ = -1\n    var vowelIndex20 = -1\n    var vowelIndex21 = -1\n    var vowelIndex22\
    \ = -1\n    var vowelIndex23 = -1\n    var vowelIndex24 = -1\n    var vowelIndex25\
    \ = -1\n    var vowelIndex26 = -1\n    var vowelIndex27 = -1\n    var vowelIndex28\
    \ = -1\n    var vowelIndex29 = -1\n    var vowelIndex30 = -1\n    var vowelIndex31\
    \ = -1\n    var vowelIndex32 = -1\n    var vowelIndex33 = -1\n    var vowelIndex34\
    \ = -1\n    var vowelIndex35 = -1\n    var vowelIndex36 = -1\n    var vowelIndex37\
    \ = -1\n    var vowelIndex38 = -1\n    var vowelIndex39 = -1\n    var vowelIndex40\
    \ = -1\n    var vowelIndex41 = -1\n    var vowelIndex42 = -1\n    var vowelIndex43\
    \ = -1\n    var vowelIndex44 = -1\n    var vowelIndex45 = -1\n    var vowelIndex46\
    \ = -1\n    var vowelIndex47 = -1\n    var vowelIndex48 = -1\n    var vowelIndex49\
    \ = -1\n    var vowelIndex50 = -1\n    var vowelIndex51 = -1\n    var vowelIndex52\
    \ = -1\n    var vowelIndex53 = -1\n    var vowelIndex54 = -1\n    var vowelIndex55\
    \ = -1\n    var vowelIndex56 = -1\n    var vowelIndex57 = -1\n    var vowelIndex58\
    \ = -1\n    var vowelIndex59 = -1\n    var vowelIndex60 = -1\n    var vowelIndex61\
    \ = -1\n    var vowelIndex62 = -1\n    var vowelIndex63 = -1\n    var vowelIndex64\
    \ = -1\n    var vowelIndex65 = -1\n    var vowelIndex66 = -1\n    var vowelIndex67\
    \ = -1\n    var vowelIndex68 = -1\n    var vowelIndex69 = -1\n    var vowelIndex70\
    \ = -1\n    var vowelIndex71 = -1\n    var vowelIndex72 = -1\n    var vowelIndex73\
    \ = -1\n    var vowelIndex74 = -1\n    var vowelIndex75 = -1\n    var vowelIndex76\
    \ = -1\n    var vowelIndex77 = -1\n    var vowelIndex78 = -1\n    var vowelIndex79\
    \ = -1\n    var vowelIndex80 = -1\n    var vowelIndex81 = -1\n    var vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpo6i44xx9.swift:95:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  var vowelIndex = 0\n    var vowelIndex2 = 0\n    \n    var vowelFound = false\n\
    \    \n    var vowelFound2 = false\n    \n    for char in word.characters {\n\
    \        if vowelIndex == 0 {\n            if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" {\n                vowelFound\
    \ = true\n                vowelIndex++\n            }\n        } else {\n    \
    \        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" ||\
    \ char == \"u\" {\n                vowelFound = true\n                vowelIndex++\n\
    \            } else {\n                if char == \" \" {\n                  \
    \  vowelFound = false\n                } else {\n                    if vowelIndex\
    \ == vowelsCount {\n                        vowelFound = false\n             \
    \       } else {\n                        if vowelIndex2 == 0 {\n            \
    \                if char == \"a\" || char == \"e\" || char == \"i\" || char ==\
    \ \"o\" || char == \"u\" {\n                                vowelFound2 = true\n\
    \                                vowelIndex2++\n                            }\n\
    \                        } else {\n                            if char == \"a\"\
    \ || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n    \
    \                            vowelFound2 = true\n                            \
    \    vowelIndex2++\n                            } else {\n                   \
    \             if char == \" \" {\n                                    vowelFound2\
    \ = false\n                                } else {\n                        \
    \            if vowelIndex2 == vowelsCount {\n                               \
    \         vowelFound2 = false\n                                    } else {\n\
    \                                        if vowelIndex == vowelsCount {\n    \
    \                                        vowelFound2 = false\n               \
    \                         } else {\n                                         \
    \   if vowelIndex2 == vowelsCount {\n                                        \
    \        vowelFound2 = false\n                                            } else\
    \ {\n                                                if vowelIndex == vowelsCount\
    \ {\n                                                    vowelFound2 = false\n\
    \                                                } else {\n                  \
    \                                  if vowelIndex2 == vowelsCount {\n         \
    \                                               vowelFound2 = false\n        \
    \                                            }\n                             \
    \                   }\n                                            }\n       \
    \                                 }\n                                    }\n \
    \                               }\n                            }\n           \
    \             }\n                    }\n                }\n            }\n   \
    \     }\n    }\n    \n    if vowelFound == true && vowelFound2 == true {\n   \
    \     return vowels[vowelIndex]\n    } else {\n        return \"\"\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpp538nvih.swift:29:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpp538nvih.swift:33:27:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      vowelIndex++\n                          ^~\n/tmp/tmpp538nvih.swift:38:27:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      vowelIndex++\n                          ^~\n/tmp/tmpp538nvih.swift:49:44:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \                      vowelIndex2++\n                                       \
    \    ^~\n/tmp/tmpp538nvih.swift:54:44: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                                vowelIndex2++\n      \
    \                                     ^~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for char\
    \ in word.characters {\n        if char.unicodeScalars.contains(.vowel) {\n  \
    \          vowelIndex = word.characters.index(of: char)\n            vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n            break\n        }\n    }\n    return vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0gn_05dm.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp0gn_05dm.swift:16:42:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n                                        ~^~~~~\n/tmp/tmp0gn_05dm.swift:17:42:\
    \ error: cannot assign value of type 'String.Index?' to type 'Int'\n         \
    \   vowelIndex = word.characters.index(of: char)\n                         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n\
    /tmp/tmp0gn_05dm.swift:18:78: error: extraneous argument label 'of:' in call\n\
    \            vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n                                                     \
    \                        ^~~~~\n                                             \
    \                                 \n/tmp/tmp0gn_05dm.swift:18:44: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \       vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n                                           ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for index\
    \ in word.characters.reverse() {\n        if index == word.characters.last {\n\
    \            return vowel\n        }\n        if index == word.characters.first\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.first\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.first\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == word.characters.last\
    \ {\n            return vowel\n        }\n        if word.characters.last == \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpu62slhlo.swift:116:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpu62slhlo.swift:143:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpu62slhlo.swift:12:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmpu62slhlo.swift:15:34: error: value of type\
    \ 'String' has no member 'reverse'\n    for index in word.characters.reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpu62slhlo.swift:119:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.filter({ $0.isVowel }).count > 0 {\n     \
    \       vowels.append(char.unicodeScalars.filter({ $0.isVowel }).last!.value)\n\
    \        }\n    }\n    if vowels.count > 0 {\n        return vowels.sorted(by:\
    \ { $0.unicodeScalars.filter({ $0.isVowel }).count > $1.unicodeScalars.filter({\
    \ $0.isVowel }).count }).last!.value\n    }\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphc73fpqy.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmphc73fpqy.swift:15:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isVowel'\n        if char.unicodeScalars.filter({\
    \ $0.isVowel }).count > 0 {\n                                        ~~ ^~~~~~~\n\
    /tmp/tmphc73fpqy.swift:16:76: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isVowel }).last!.value)\n                                               \
    \                            ^\n/tmp/tmphc73fpqy.swift:16:59: error: value of\
    \ type 'Unicode.Scalar' has no member 'isVowel'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isVowel }).last!.value)\n                                               \
    \        ~~ ^~~~~~~\n/tmp/tmphc73fpqy.swift:20:66: error: value of type 'Unicode.Scalar'\
    \ has no member 'isVowel'\n        return vowels.sorted(by: { $0.unicodeScalars.filter({\
    \ $0.isVowel }).count > $1.unicodeScalars.filter({ $0.isVowel }).count }).last!.value\n\
    \                                                              ~~ ^~~~~~~\n/tmp/tmphc73fpqy.swift:20:115:\
    \ error: value of type 'Unicode.Scalar' has no member 'isVowel'\n        return\
    \ vowels.sorted(by: { $0.unicodeScalars.filter({ $0.isVowel }).count > $1.unicodeScalars.filter({\
    \ $0.isVowel }).count }).last!.value\n                                       \
    \                                                                        ~~ ^~~~~~~\n\
    /tmp/tmphc73fpqy.swift:20:141: error: value of type 'String' has no member 'value'\n\
    \        return vowels.sorted(by: { $0.unicodeScalars.filter({ $0.isVowel }).count\
    \ > $1.unicodeScalars.filter({ $0.isVowel }).count }).last!.value\n          \
    \     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    if word == \"\" {\n        return \"\"\n    }\n   \
    \ var vowelIndex = 0\n    var vowel = \"\"\n    var vowelCount = 0\n    for index\
    \ in 0..<word.count {\n        if word[index].isUppercase {\n            vowelIndex\
    \ += 1\n        }\n        if word[index].isLowercase {\n            vowelIndex\
    \ += 1\n        }\n        if word[index].isVowel {\n            vowelCount +=\
    \ 1\n        }\n        if vowelIndex == 2 {\n            vowel = word[index]\n\
    \            vowelIndex = 0\n        }\n    }\n    if vowelCount > 0 {\n     \
    \   return vowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpg7q5ffj3.swift:20:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if word[index].isUppercase\
    \ {\n           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpg7q5ffj3.swift:23:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if word[index].isLowercase {\n           ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpg7q5ffj3.swift:26:24:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if word[index].isVowel\
    \ {\n           ~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpg7q5ffj3.swift:30:25: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            vowel = word[index]\n\
    \                    ~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelsCountFromRight = 0\n    var vowelsCountFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeft = 0\n    var vowelsCountFromLeftFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromRight\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_9btq2bq.swift:21:9: error: invalid redeclaration of 'vowelsCountFromRightFromLeftFromRight'\n\
    \    var vowelsCountFromRightFromLeftFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:19:9:\
    \ note: 'vowelsCountFromRightFromLeftFromRight' previously declared here\n   \
    \ var vowelsCountFromRightFromLeftFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:22:9:\
    \ error: invalid redeclaration of 'vowelsCountFromLeftFromRightFromRight'\n  \
    \  var vowelsCountFromLeftFromRightFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:20:9:\
    \ note: 'vowelsCountFromLeftFromRightFromRight' previously declared here\n   \
    \ var vowelsCountFromLeftFromRightFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:23:9:\
    \ error: invalid redeclaration of 'vowelsCountFromRightFromLeftFromRight'\n  \
    \  var vowelsCountFromRightFromLeftFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:19:9:\
    \ note: 'vowelsCountFromRightFromLeftFromRight' previously declared here\n   \
    \ var vowelsCountFromRightFromLeftFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:24:9:\
    \ error: invalid redeclaration of 'vowelsCountFromLeftFromRightFromRight'\n  \
    \  var vowelsCountFromLeftFromRightFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:20:9:\
    \ note: 'vowelsCountFromLeftFromRightFromRight' previously declared here\n   \
    \ var vowelsCountFromLeftFromRightFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:25:9:\
    \ error: invalid redeclaration of 'vowelsCountFromRightFromLeftFromRight'\n  \
    \  var vowelsCountFromRightFromLeftFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:19:9:\
    \ note: 'vowelsCountFromRightFromLeftFromRight' previously declared here\n   \
    \ var vowelsCountFromRightFromLeftFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:26:9:\
    \ error: invalid redeclaration of 'vowelsCountFromLeftFromRightFromRight'\n  \
    \  var vowelsCountFromLeftFromRightFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:20:9:\
    \ note: 'vowelsCountFromLeftFromRightFromRight' previously declared here\n   \
    \ var vowelsCountFromLeftFromRightFromRight = 0\n        ^\n/tmp/tmp_9btq2bq.swift:27:9:\
    \ error: invalid redeclaration of 'vowelsCountFromRightFromLeftFromRight'\n  \
    \  var vowelsCountFr"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowelIndex = 0\n    var vowel = \"\"\n  \
    \  \n    for char in word.characters {\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n            vowelIndex = word.characters.index(of: char)\n            vowel\
    \ = String(word.characters[vowelIndex..<word.characters.index(of: char, offsetBy:\
    \ 1)])\n        }\n    }\n    \n    return vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzh_8ydpv.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpzh_8ydpv.swift:18:42:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n                                        ~^~~~~\n/tmp/tmpzh_8ydpv.swift:19:42:\
    \ error: cannot assign value of type 'String.Index?' to type 'Int'\n         \
    \   vowelIndex = word.characters.index(of: char)\n                         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n\
    /tmp/tmpzh_8ydpv.swift:20:78: error: extraneous argument label 'of:' in call\n\
    \            vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n                                                     \
    \                        ^~~~~\n                                             \
    \                                 \n/tmp/tmpzh_8ydpv.swift:20:44: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \       vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n                                           ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelIndexEnd = vowels.characters.count\
    \ - 1\n    var vowelIndexStart = vowels.characters.count - 1\n    var vowelIndexEnd2\
    \ = vowels.characters.count - 1\n    var vowelIndexStart2 = vowels.characters.count\
    \ - 1\n    var vowelIndexEnd3 = vowels.characters.count - 1\n    var vowelIndexStart3\
    \ = vowels.characters.count - 1\n    var vowelIndexEnd4 = vowels.characters.count\
    \ - 1\n    var vowelIndexStart4 = vowels.characters.count - 1\n    var vowelIndexEnd5\
    \ = vowels.characters.count - 1\n    var vowelIndexStart5 = vowels.characters.count\
    \ - 1\n    var vowelIndexEnd6 = vowels.characters.count - 1\n    var vowelIndexStart6\
    \ = vowels.characters.count - 1\n    var vowelIndexEnd7 = vowels.characters.count\
    \ - 1\n    var vowelIndexStart7 = vowels.characters.count - 1\n    var vowelIndexEnd8\
    \ = vowels.characters.count - 1\n    var vowelIndexStart8 = vowels.characters.count\
    \ - 1\n    var vowelIndexEnd9 = vowels.characters.count - 1\n    var vowelIndexStart9\
    \ = vowels.characters.count - 1\n    var vowelIndexEnd10 = vowels.characters.count\
    \ - 1\n    var vowelIndexStart10 = vowels.characters.count - 1\n    var vowelIndexEnd11\
    \ = vowels.characters.count - 1\n    var vowelIndexStart11 = vowels.characters.count\
    \ - 1\n    var vowelIndexEnd12 = vowels.characters.count - 1\n    var vowelIndexStart12\
    \ = vowels.characters.count - 1\n    var vowelIndexEnd13 = vowels.characters.count\
    \ - 1\n    var vowelIndexStart13 = vowels.characters.count - 1\n    var vowelIndexEnd14\
    \ = vowels.characters.count - 1\n    var vowelIndexStart14 = vowels.characters.count\
    \ - 1\n    var vowelIndexEnd15 = vowels.characters.count - 1\n    var vowelIndexStart15\
    \ = vowels.characters.count - 1\n    var vowelIndexEnd16 = vowels.characters.count\
    \ - 1\n    var vowelIndexStart16 = vowels.characters.count - 1\n    var vowelIndexEnd17\
    \ = vowels.characters.count - 1\n    var vowelIndexStart17 = vowels.characters.count\
    \ - 1\n    var vowelIndexEnd18 = vowels.characters.count - 1\n    var vowelIndexStart18\
    \ = vowels.characters.count - 1\n    var vowelIndexEnd19 = vowels.characters.count\
    \ - 1\n    var vowelIndexStart19 = vowels.characters.count - 1\n    var vowelIndexEnd20\
    \ = vowels.characters.count - 1\n    var vowelIndexStart20 = vowels.characters.count\
    \ - 1\n    var vowelIndexEnd21 = vowels.characters.count - 1\n    var vowelIndexStart21\
    \ = vowels.characters.count - 1\n    var vowelIndexEnd22 = vowels.characters.count\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\"\
    ) == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpr_18gvnw.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpr_18gvnw.swift:16:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndexEnd = vowels.characters.count - 1\n \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr_18gvnw.swift:17:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexStart = vowels.characters.count\
    \ - 1\n                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr_18gvnw.swift:18:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexEnd2 = vowels.characters.count\
    \ - 1\n                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr_18gvnw.swift:19:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexStart2 = vowels.characters.count\
    \ - 1\n                                  ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpr_18gvnw.swift:20:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var vowelIndexEnd3 = vowels.characters.count\
    \ - 1\n                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr_18gvnw.swift:21:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexStart3 = vowels.characters.count\
    \ - 1\n    "
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax -\
    \ 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8yphm5xn.swift:47:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8yphm5xn.swift:20:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmp8yphm5xn.swift:18:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmp8yphm5xn.swift:21:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmp8yphm5xn.swift:19:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmp8yphm5xn.swift:22:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmp8yphm5xn.swift:18:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmp8yphm5xn.swift:23:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmp8yphm5xn.swift:19:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmp8yphm5xn.swift:24:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmp8yphm5xn.swift:18:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmp8yphm5xn.swift:25:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmp8yphm5xn.swift:19:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmp8yphm5xn.swift:26:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmp8yphm5xn.swift:18:9:\
    \ note: 'vowelsCountMaxIndex' previously decl"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowelsCountIndex61\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5r5gp6oh.swift:76:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex61\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.unicodeScalars\
    \ {\n        if char.value > 0x41 && char.value < 0x5A {\n            vowels.append(char.value)\n\
    \        }\n    }\n    if vowels.count < 2 {\n        return \"\"\n    }\n   \
    \ var vowelsSet = Set<String>(vowels)\n    var vowelsSetReversed = Set<String>(vowels.reversed())\n\
    \    var vowelsSetCount = vowelsSet.count\n    var vowelsSetReversedCount = vowelsSetReversed.count\n\
    \    if vowelsSetCount > vowelsSetReversedCount {\n        return \"\"\n    }\n\
    \    var vowelsSetMin = vowelsSet.min()\n    var vowelsSetMax = vowelsSet.max()\n\
    \    if vowelsSetMin == vowelsSetMax {\n        return \"\"\n    }\n    var vowelsSetMinReversed\
    \ = vowelsSetReversed.min()\n    var vowelsSetMaxReversed = vowelsSetReversed.max()\n\
    \    if vowelsSetMinReversed == vowelsSetMaxReversed {\n        return \"\"\n\
    \    }\n    var vowelsSetMinReversedCount = vowelsSetReversedCount.min()\n   \
    \ var vowelsSetMaxReversedCount = vowelsSetReversedCount.max()\n    if vowelsSetMinReversedCount\
    \ > vowelsSetMaxReversedCount {\n        return \"\"\n    }\n    var vowelsSetMinReversedMin\
    \ = vowelsSetReversedMin.min()\n    var vowelsSetMaxReversedMin = vowelsSetReversedMin.max()\n\
    \    if vowelsSetMinReversedMin == vowelsSetMaxReversedMin {\n        return \"\
    \"\n    }\n    var vowelsSetMinReversedMax = vowelsSetReversedMax.min()\n    var\
    \ vowelsSetMaxReversedMax = vowelsSetReversedMax.max()\n    if vowelsSetMinReversedMax\
    \ == vowelsSetMaxReversedMax {\n        return \"\"\n    }\n    var vowelsSetMinReversedMaxCount\
    \ = vowelsSetReversedMaxCount.min()\n    var vowelsSetMaxReversedMaxCount = vowelsSetReversedMaxCount.max()\n\
    \    if vowelsSetMinReversedMaxCount > vowelsSetMaxReversedMaxCount {\n      \
    \  return \"\"\n    }\n    var vowelsSetMinReversedMaxMin = vowelsSetReversedMaxMin.min()\n\
    \    var vowelsSetMaxReversedMaxMin = vowelsSetReversedMaxMin.max()\n    if vowelsSetMinReversedMaxMin\
    \ == vowelsSetMaxReversedMaxMin {\n        return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpk6dq4_4f.swift:90:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpk6dq4_4f.swift:12:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmpk6dq4_4f.swift:16:32: error: cannot convert\
    \ value of type 'UInt32' to expected argument type 'String'\n            vowels.append(char.value)\n\
    \                               ^\n/tmp/tmpk6dq4_4f.swift:39:60: error: cannot\
    \ call value of non-function type 'Int'\n    var vowelsSetMinReversedCount = vowelsSetReversedCount.min()\n\
    \                                                           ^  ~~\n          \
    \                                                    \n/tmp/tmpk6dq4_4f.swift:39:37:\
    \ error: static member 'min' cannot be used on instance of type 'Int'\n    var\
    \ vowelsSetMinReversedCount = vowelsSetReversedCount.min()\n                 \
    \                   ^~~~~~~~~~~~~~~~~~~~~~\n                                 \
    \   Int\n/tmp/tmpk6dq4_4f.swift:40:37: error: static member 'max' cannot be used\
    \ on instance of type 'Int'\n    var vowelsSetMaxReversedCount = vowelsSetReversedCount.max()\n\
    \                                    ^~~~~~~~~~~~~~~~~~~~~~\n                \
    \                    Int\n/tmp/tmpk6dq4_4f.swift:40:60: error: cannot call value\
    \ of non-function type 'Int'\n    var vowelsSetMaxReversedCount = vowelsSetReversedCount.max()\n\
    \                                                           ^  ~~\n          \
    \                                                    \n/tmp/tmpk6dq4_4f.swift:44:35:\
    \ error: cannot find 'vowelsSetReversedMin' in scope\n    var vowelsSetMinReversedMin\
    \ = vowelsSetReversedMin.min()\n                                  ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpk6dq4_4f.swift:45:35: error: cannot find 'vowelsSetReversedMin' in scope\n\
    \    var vowelsSetMaxReversedMin = vowelsSetReversedMin.max()\n              \
    \                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk6dq4_4f.swift:49:35: error:\
    \ cannot find 'vowelsSetReverse"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = 0\n    var vowelsIndex3\
    \ = 0\n    var vowelsIndex4 = 0\n    var vowelsIndex5 = 0\n    var vowelsIndex6\
    \ = 0\n    var vowelsIndex7 = 0\n    var vowelsIndex8 = 0\n    var vowelsIndex9\
    \ = 0\n    var vowelsIndex10 = 0\n    var vowelsIndex11 = 0\n    var vowelsIndex12\
    \ = 0\n    var vowelsIndex13 = 0\n    var vowelsIndex14 = 0\n    var vowelsIndex15\
    \ = 0\n    var vowelsIndex16 = 0\n    var vowelsIndex17 = 0\n    var vowelsIndex18\
    \ = 0\n    var vowelsIndex19 = 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21\
    \ = 0\n    var vowelsIndex22 = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24\
    \ = 0\n    var vowelsIndex25 = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27\
    \ = 0\n    var vowelsIndex28 = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30\
    \ = 0\n    var vowelsIndex31 = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33\
    \ = 0\n    var vowelsIndex34 = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36\
    \ = 0\n    var vowelsIndex37 = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39\
    \ = 0\n    var vowelsIndex40 = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42\
    \ = 0\n    var vowelsIndex43 = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45\
    \ = 0\n    var vowelsIndex46 = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48\
    \ = 0\n    var vowelsIndex49 = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51\
    \ = 0\n    var vowelsIndex52 = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54\
    \ = 0\n    var vowelsIndex55 = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57\
    \ = 0\n    var vowelsIndex58 = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60\
    \ = 0\n    var vowelsIndex61 = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63\
    \ = 0\n    var vowelsIndex64 = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66\
    \ = 0\n    var vowelsIndex67 = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69\
    \ = 0\n    var vowelsIndex70 = 0\n    var vowelsIndex71\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2524jq7x.swift:85:9: error: type annotation missing in pattern\n\
    \    var vowelsIndex71\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    \n    for char in word.characters {\n        if vowels.contains(String(char))\
    \ {\n            vowelIndex = vowels.firstIndex(of: String(char))!\n         \
    \   break\n        }\n    }\n    \n    if vowelIndex == 0 {\n        return \"\
    \"\n    }\n    \n    let vowelIndex = vowelIndex - 1\n    \n    var charIndex\
    \ = 0\n    \n    for char in word.characters {\n        if charIndex == vowelIndex\
    \ {\n            return String(char)\n        }\n        charIndex = charIndex\
    \ + 1\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3ye72y7a.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp3ye72y7a.swift:20:61:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \  vowelIndex = vowels.firstIndex(of: String(char))!\n                       \
    \  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmp3ye72y7a.swift:20:48: error:\
    \ cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n            vowelIndex = vowels.firstIndex(of: String(char))!\n\
    \                                               ^\n/tmp/tmp3ye72y7a.swift:29:9:\
    \ error: invalid redeclaration of 'vowelIndex'\n    let vowelIndex = vowelIndex\
    \ - 1\n        ^\n/tmp/tmp3ye72y7a.swift:16:9: note: 'vowelIndex' previously declared\
    \ here\n    var vowelIndex = 0\n        ^\n/tmp/tmp3ye72y7a.swift:33:22: error:\
    \ 'characters' is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    let vowelsSet = vowels.characters\n    let vowelsSetCount\
    \ = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n   \
    \ let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSetCount = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n\
    \    let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSetCount = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n\
    \    let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSetCount = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n\
    \    let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSetCount = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n\
    \    let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSetCount = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n\
    \    let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSetCount = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n\
    \    let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSetCount = vowelsSet.count\n    let vowelsSetCount = vowelsSet.characters.count\n\
    \    let vowelsSet = vowels.characters\n    let vowelsSetCount = vowelsSet.count\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n    let vowelsSet = vowels.characters\n\
    \    let vowelsSet\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ryo5gp8.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7ryo5gp8.swift:15:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsSet = vowels.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp7ryo5gp8.swift:17:36: error: 'characters' is unavailable: Please use String\
    \ directly\n    let vowelsSetCount = vowelsSet.characters.count\n            \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp7ryo5gp8.swift:17:9: error: invalid redeclaration of 'vowelsSetCount'\n\
    \    let vowelsSetCount = vowelsSet.characters.count\n        ^\n/tmp/tmp7ryo5gp8.swift:16:9:\
    \ note: 'vowelsSetCount' previously declared here\n    let vowelsSetCount = vowelsSet.count\n\
    \        ^\n/tmp/tmp7ryo5gp8.swift:18:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsSet = vowels.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7ryo5gp8.swift:18:9: error: invalid redeclaration of 'vowelsSet'\n\
    \    let vowelsSet = vowels.characters\n        ^\n/tmp/tmp7ryo5gp8.swift:15:9:\
    \ note: 'vowelsSet' previously declared here\n    let vowelsSet = vowels.characters\n\
    \        ^\n/tmp/tmp7ryo5gp8.swift:21:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsSet = vowels.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7ryo5gp8.swift"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"]\n    var vowelsCount = vowels.count\n    var vowelsIndex =\
    \ 0\n    var vowelsIndex2 = 0\n    var vowelsIndex3 = 0\n    var vowelsIndex4\
    \ = 0\n    var vowelsIndex5 = 0\n    var vowelsIndex6 = 0\n    var vowelsIndex7\
    \ = 0\n    var vowelsIndex8 = 0\n    var vowelsIndex9 = 0\n    var vowelsIndex10\
    \ = 0\n    var vowelsIndex11 = 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13\
    \ = 0\n    var vowelsIndex14 = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16\
    \ = 0\n    var vowelsIndex17 = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19\
    \ = 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22\
    \ = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25\
    \ = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28\
    \ = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31\
    \ = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34\
    \ = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37\
    \ = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40\
    \ = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43\
    \ = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46\
    \ = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49\
    \ = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52\
    \ = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55\
    \ = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58\
    \ = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61\
    \ = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64\
    \ = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67\
    \ = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69 = 0\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpegfm3hvf.swift:85:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpegfm3hvf.swift:15:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpegfm3hvf.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpegfm3hvf.swift:17:9: warning: initialization of variable 'vowelsIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex2 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpegfm3hvf.swift:18:9:\
    \ warning: initialization of variable 'vowelsIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex3 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpegfm3hvf.swift:19:9: warning: initialization\
    \ of variable 'vowelsIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpegfm3hvf.swift:20:9: warning: initialization of variable 'vowelsIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex5 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpegfm3hvf.swift:21:9:\
    \ warning: initialization of variable 'vowelsIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex6 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpegfm3hvf.swift:22:9: warning: initialization\
    \ of variable 'vowelsIndex7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex7 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpegfm3hvf.swift:23:9: warning: initialization of variable 'vowelsIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex8 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpegfm3hvf.swift:24:9:\
    \ warning: initialization of variable 'vowelsIndex9' was never used; consider\
    \ replacing with assignm"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var result:\
    \ String = \"\"\n    \n    for char in word.characters {\n        if vowels.contains(String(char))\
    \ {\n            result = String(char)\n            break\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplt9qdvnd.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"A\")\n    vowels.append(\"E\")\n\
    \    vowels.append(\"I\")\n    vowels.append(\"O\")\n    vowels.append(\"U\")\n\
    \    \n    var vowelsCount = vowels.count\n    \n    var vowelIndex = 0\n    var\
    \ vowelCount = 0\n    var vowel = String()\n    \n    for char in word {\n   \
    \     if vowelIndex == vowelsCount {\n            vowelIndex = 0\n           \
    \ vowelCount = 0\n        }\n        \n        if vowels[vowelIndex] == char {\n\
    \            vowelCount += 1\n            if vowelCount == vowelsCount {\n   \
    \             vowelIndex += 1\n                vowelCount = 0\n            }\n\
    \        } else {\n            vowelCount = 0\n        }\n    }\n    \n    if\
    \ vowelIndex == vowelsCount {\n        return \"\"\n    }\n    \n    return vowels[vowelIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmps3fq60_d.swift:37:31: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n        if vowels[vowelIndex]\
    \ == char {\n           ~~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmps3fq60_d.swift:37:31:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if vowels[vowelIndex] == char\
    \ {\n                              ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var consonantIndex\
    \ = 0\n    var consonant = \"\"\n    var vowelCount = 0\n    var consonantCount\
    \ = 0\n    \n    for index in 0..<word.count {\n        if word[index] == \"a\"\
    \ {\n            vowelIndex += 1\n            vowelCount += 1\n        }\n   \
    \     else if word[index] == \"e\" {\n            vowelIndex += 1\n          \
    \  vowelCount += 1\n        }\n        else if word[index] == \"i\" {\n      \
    \      vowelIndex += 1\n            vowelCount += 1\n        }\n        else if\
    \ word[index] == \"o\" {\n            vowelIndex += 1\n            vowelCount\
    \ += 1\n        }\n        else if word[index] == \"u\" {\n            vowelIndex\
    \ += 1\n            vowelCount += 1\n        }\n        else if word[index] ==\
    \ \"A\" {\n            consonantIndex += 1\n            consonantCount += 1\n\
    \        }\n        else if word[index] == \"E\" {\n            consonantIndex\
    \ += 1\n            consonantCount += 1\n        }\n        else if word[index]\
    \ == \"I\" {\n            consonantIndex += 1\n            consonantCount += 1\n\
    \        }\n        else if word[index] == \"O\" {\n            consonantIndex\
    \ += 1\n            consonantCount += 1\n        }\n        else if word[index]\
    \ == \"U\" {\n            consonantIndex += 1\n            consonantCount += 1\n\
    \        }\n    }\n    \n    if vowelCount > 0 {\n        vowel = String(word.suffix(vowelIndex))\n\
    \    }\n    \n    if consonantCount > 0 {\n        consonant = String(word.suffix(consonantIndex))\n\
    \    }\n    \n    if vowelIndex == word.count {\n        return vowel\n    }\n\
    \    \n    if consonantIndex == word.count {\n        return consonant\n    }\n\
    \    \n    if vowelIndex < consonantIndex {\n        return vowel\n    }\n   \
    \ \n    return consonant\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqsgn2nwx.swift:21:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if word[index]\
    \ == \"a\" {\n           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpqsgn2nwx.swift:25:17: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        else if word[index] == \"e\" {\n                ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqsgn2nwx.swift:29:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        else if word[index] == \"i\" {\n      \
    \          ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpqsgn2nwx.swift:33:17: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        else\
    \ if word[index] == \"o\" {\n                ^~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpqsgn2nwx.swift:37:17: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        else if word[index] == \"u\" {\n                ^~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqsgn2nwx.swift:41:17:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        else if word[index] == \"A\" {\n      \
    \          ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Charact"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var vowelCount\
    \ = 0\n    var consonantIndex = 0\n    var consonant = \"\"\n    var consonantCount\
    \ = 0\n    var consonantCount2 = 0\n    var consonantCount3 = 0\n    var consonantCount4\
    \ = 0\n    var consonantCount5 = 0\n    var consonantCount6 = 0\n    var consonantCount7\
    \ = 0\n    var consonantCount8 = 0\n    var consonantCount9 = 0\n    var consonantCount10\
    \ = 0\n    var consonantCount11 = 0\n    var consonantCount12 = 0\n    var consonantCount13\
    \ = 0\n    var consonantCount14 = 0\n    var consonantCount15 = 0\n    var consonantCount16\
    \ = 0\n    var consonantCount17 = 0\n    var consonantCount18 = 0\n    var consonantCount19\
    \ = 0\n    var consonantCount20 = 0\n    var consonantCount21 = 0\n    var consonantCount22\
    \ = 0\n    var consonantCount23 = 0\n    var consonantCount24 = 0\n    var consonantCount25\
    \ = 0\n    var consonantCount26 = 0\n    var consonantCount27 = 0\n    var consonantCount28\
    \ = 0\n    var consonantCount29 = 0\n    var consonantCount30 = 0\n    var consonantCount31\
    \ = 0\n    var consonantCount32 = 0\n    var consonantCount33 = 0\n    var consonantCount34\
    \ = 0\n    var consonantCount35 = 0\n    var consonantCount36 = 0\n    var consonantCount37\
    \ = 0\n    var consonantCount38 = 0\n    var consonantCount39 = 0\n    var consonantCount40\
    \ = 0\n    var consonantCount41 = 0\n    var consonantCount42 = 0\n    var consonantCount43\
    \ = 0\n    var consonantCount44 = 0\n    var consonantCount45 = 0\n    var consonantCount46\
    \ = 0\n    var consonantCount47 = 0\n    var consonantCount48 = 0\n    var consonantCount49\
    \ = 0\n    var consonantCount50 = 0\n    var consonantCount51 = 0\n    var consonantCount52\
    \ = 0\n    var consonantCount53 = 0\n    var consonantCount54 = 0\n    var consonantCount55\
    \ = 0\n    var consonantCount56 = 0\n    var consonantCount57 = 0\n    var consonantCount58\
    \ = 0\n    var consonantCount59 = 0\n    var consonantCount60 = 0\n    var consonantCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpsmfz0y0r.swift:78:9: error: type annotation missing in pattern\n\
    \    var consonantCount\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0,\
    \ \"o\": 0, \"u\": 0]\n    var vowelsCountReverse: [String: Int] = [\"a\": 0,\
    \ \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverse: [String: Int] = [\"a\": 0, \"e\": 0, \"i\"\
    : 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverse: [String:\
    \ Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverse: [String: Int] = [\"a\"\
    : 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverse: [String: Int]\
    \ = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp685nazyc.swift:31:147: error: unterminated string literal\n   \
    \ var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"\n                        \
    \                                                                            \
    \                                              ^\n/tmp/tmp685nazyc.swift:21:9:\
    \ error: invalid redeclaration of 'vowelsCountReverseReverseReverseReverseReverseReverse'\n\
    \    var vowelsCountReverseReverseReverseReverseReverseReverse: [String: Int]\
    \ = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n        ^\n/tmp/tmp685nazyc.swift:20:9:\
    \ note: 'vowelsCountReverseReverseReverseReverseReverseReverse' previously declared\
    \ here\n    var vowelsCountReverseReverseReverseReverseReverseReverse: [String:\
    \ Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n        ^\n/tmp/tmp685nazyc.swift:25:9:\
    \ error: invalid redeclaration of 'vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse'\n\
    \    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n       \
    \ ^\n/tmp/tmp685nazyc.swift:24:9: note: 'vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse'\
    \ previously declared here\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n       \
    \ ^\n/tmp/tmp685nazyc.swift:28:9: error: invalid redeclaration of 'vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse'\n\
    \    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n       \
    \ ^\n/tmp/tmp685nazyc.swift:26:9: note: 'vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse'\
    \ previously declared here\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n       \
    \ ^\n/tmp/tmp685"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = vowelsIndex +\
    \ 1\n    var vowelsIndex3 = vowelsIndex + 2\n    var vowelsIndex4 = vowelsIndex\
    \ + 3\n    var vowelsIndex5 = vowelsIndex + 4\n    var vowelsIndex6 = vowelsIndex\
    \ + 5\n    var vowelsIndex7 = vowelsIndex + 6\n    var vowelsIndex8 = vowelsIndex\
    \ + 7\n    var vowelsIndex9 = vowelsIndex + 8\n    var vowelsIndex10 = vowelsIndex\
    \ + 9\n    var vowelsIndex11 = vowelsIndex + 10\n    var vowelsIndex12 = vowelsIndex\
    \ + 11\n    var vowelsIndex13 = vowelsIndex + 12\n    var vowelsIndex14 = vowelsIndex\
    \ + 13\n    var vowelsIndex15 = vowelsIndex + 14\n    var vowelsIndex16 = vowelsIndex\
    \ + 15\n    var vowelsIndex17 = vowelsIndex + 16\n    var vowelsIndex18 = vowelsIndex\
    \ + 17\n    var vowelsIndex19 = vowelsIndex + 18\n    var vowelsIndex20 = vowelsIndex\
    \ + 19\n    var vowelsIndex21 = vowelsIndex + 20\n    var vowelsIndex22 = vowelsIndex\
    \ + 21\n    var vowelsIndex23 = vowelsIndex + 22\n    var vowelsIndex24 = vowelsIndex\
    \ + 23\n    var vowelsIndex25 = vowelsIndex + 24\n    var vowelsIndex26 = vowelsIndex\
    \ + 25\n    var vowelsIndex27 = vowelsIndex + 26\n    var vowelsIndex28 = vowelsIndex\
    \ + 27\n    var vowelsIndex29 = vowelsIndex + 28\n    var vowelsIndex30 = vowelsIndex\
    \ + 29\n    var vowelsIndex31 = vowelsIndex + 30\n    var vowelsIndex32 = vowelsIndex\
    \ + 31\n    var vowelsIndex33 = vowelsIndex + 32\n    var vowelsIndex34 = vowelsIndex\
    \ + 33\n    var vowelsIndex35 = vowelsIndex + 34\n    var vowelsIndex36 = vowelsIndex\
    \ + 35\n    var vowelsIndex37 = vowelsIndex + 36\n    var vowelsIndex38 = vowelsIndex\
    \ + 37\n    var vowelsIndex39 = vowelsIndex + 38\n    var vowelsIndex40 = vowelsIndex\
    \ + 39\n    var vowelsIndex41 = vowelsIndex + 40\n    var vowelsIndex42 = vowelsIndex\
    \ + 41\n    var vowelsIndex43 = vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9krrnfdv.swift:13:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = \"aeiouAEIOU\"\n    ~~~\
    \ ^\n    let\n/tmp/tmp9krrnfdv.swift:14:9: warning: initialization of variable\
    \ 'vowelsCount' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp9krrnfdv.swift:15:9:\
    \ warning: variable 'vowelsIndex' was never mutated; consider changing to 'let'\
    \ constant\n    var vowelsIndex = 0\n    ~~~ ^\n    let\n/tmp/tmp9krrnfdv.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex2 = vowelsIndex\
    \ + 1\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp9krrnfdv.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex3 = vowelsIndex + 2\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmp9krrnfdv.swift:18:9: warning: initialization of variable 'vowelsIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex4 = vowelsIndex + 3\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp9krrnfdv.swift:19:9:\
    \ warning: initialization of variable 'vowelsIndex5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex5 = vowelsIndex\
    \ + 4\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp9krrnfdv.swift:20:9: warning: initialization\
    \ of variable 'vowelsIndex6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex6 = vowelsIndex + 5\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmp9krrnfdv.swift:21:9: warning: initialization of variable 'vowelsIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex7 = vowelsIndex + 6\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp9krrnfdv.swift:22:9:\
    \ warning: initialization of variable 'vowelsIndex8' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex8 = vowelsIndex\
    \ + 7\n    ~~~~^~~~"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelsIndex = 0\n    var vowelsIndex2\
    \ = 0\n    var vowelsIndex3 = 0\n    var vowelsIndex4 = 0\n    var vowelsIndex5\
    \ = 0\n    var vowelsIndex6 = 0\n    var vowelsIndex7 = 0\n    var vowelsIndex8\
    \ = 0\n    var vowelsIndex9 = 0\n    var vowelsIndex10 = 0\n    var vowelsIndex11\
    \ = 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13 = 0\n    var vowelsIndex14\
    \ = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16 = 0\n    var vowelsIndex17\
    \ = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19 = 0\n    var vowelsIndex20\
    \ = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22 = 0\n    var vowelsIndex23\
    \ = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25 = 0\n    var vowelsIndex26\
    \ = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28 = 0\n    var vowelsIndex29\
    \ = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31 = 0\n    var vowelsIndex32\
    \ = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34 = 0\n    var vowelsIndex35\
    \ = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37 = 0\n    var vowelsIndex38\
    \ = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40 = 0\n    var vowelsIndex41\
    \ = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43 = 0\n    var vowelsIndex44\
    \ = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46 = 0\n    var vowelsIndex47\
    \ = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49 = 0\n    var vowelsIndex50\
    \ = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52 = 0\n    var vowelsIndex53\
    \ = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55 = 0\n    var vowelsIndex56\
    \ = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58 = 0\n    var vowelsIndex59\
    \ = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61 = 0\n    var vowelsIndex62\
    \ = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64 = 0\n    var vowelsIndex65\
    \ = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67 = 0\n    var vowelsIndex68\
    \ = 0\n    var vowelsIndex69 = 0\n    var vowelsIndex70 = 0\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnib3c4ra.swift:85:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpnib3c4ra.swift:13:9: warning: variable 'vowels' was never used; consider\
    \ replacing with '_' or removing it\n    var vowels: [String] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpnib3c4ra.swift:14:9:\
    \ warning: initialization of variable 'vowelsCount' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsCount = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpnib3c4ra.swift:15:9: warning: initialization of variable 'vowelsIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpnib3c4ra.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex2 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpnib3c4ra.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex3 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpnib3c4ra.swift:18:9: warning: initialization of variable 'vowelsIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpnib3c4ra.swift:19:9:\
    \ warning: initialization of variable 'vowelsIndex5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex5 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpnib3c4ra.swift:20:9: warning: initialization\
    \ of variable 'vowelsIndex6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex6 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpnib3c4ra.swift:21:9: warning: initialization of variable 'vowelsIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex7 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpnib3c4ra.swift:22:9:\
    \ warning: initialization of variable 'vowelsIndex8' was never used; consider\
    \ replacing with assignment to '_' or removing "
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = vowels.startIndex\n    var vowelIndexEnd\
    \ = vowels.endIndex\n    var vowelIndexStart = vowels.startIndex\n    var vowelIndexEnd2\
    \ = vowels.endIndex\n    var vowelIndexStart2 = vowels.startIndex\n    var vowelIndexEnd3\
    \ = vowels.endIndex\n    var vowelIndexStart3 = vowels.startIndex\n    var vowelIndexEnd4\
    \ = vowels.endIndex\n    var vowelIndexStart4 = vowels.startIndex\n    var vowelIndexEnd5\
    \ = vowels.endIndex\n    var vowelIndexStart5 = vowels.startIndex\n    var vowelIndexEnd6\
    \ = vowels.endIndex\n    var vowelIndexStart6 = vowels.startIndex\n    var vowelIndexEnd7\
    \ = vowels.endIndex\n    var vowelIndexStart7 = vowels.startIndex\n    var vowelIndexEnd8\
    \ = vowels.endIndex\n    var vowelIndexStart8 = vowels.startIndex\n    var vowelIndexEnd9\
    \ = vowels.endIndex\n    var vowelIndexStart9 = vowels.startIndex\n    var vowelIndexEnd10\
    \ = vowels.endIndex\n    var vowelIndexStart10 = vowels.startIndex\n    var vowelIndexEnd11\
    \ = vowels.endIndex\n    var vowelIndexStart11 = vowels.startIndex\n    var vowelIndexEnd12\
    \ = vowels.endIndex\n    var vowelIndexStart12 = vowels.startIndex\n    var vowelIndexEnd13\
    \ = vowels.endIndex\n    var vowelIndexStart13 = vowels.startIndex\n    var vowelIndexEnd14\
    \ = vowels.endIndex\n    var vowelIndexStart14 = vowels.startIndex\n    var vowelIndexEnd15\
    \ = vowels.endIndex\n    var vowelIndexStart15 = vowels.startIndex\n    var vowelIndexEnd16\
    \ = vowels.endIndex\n    var vowelIndexStart16 = vowels.startIndex\n    var vowelIndexEnd17\
    \ = vowels.endIndex\n    var vowelIndexStart17 = vowels.startIndex\n    var vowelIndexEnd18\
    \ = vowels.endIndex\n    var vowelIndexStart18 = vowels.startIndex\n    var vowelIndexEnd19\
    \ = vowels.endIndex\n    var vowelIndexStart19 = vowels.startIndex\n    var vowelIndexEnd20\
    \ = vowels.endIndex\n    var vowelIndexStart20 = vowels.startIndex\n    var vowelIndexEnd21\
    \ = vowels.endIndex\n    var vowelIndexStart21 = vowels.startIndex\n    var vowelIndexEnd22\
    \ = vowels.endIndex\n    var vowelIndexStart22 = vowels.startIndex\n    var vowelIndexEnd23\
    \ = vowels.endIndex\n    var vowelIndexStart23 = vowels.startIndex\n    var vowelIndexEnd24\
    \ = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\"\
    ) == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9jtdum0m.swift:62:26: error: expected initial value after '='\n\
    \    var vowelIndexEnd24 = \n                         ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.contains(.vowel) {\n            vowels.append(char.unicodeScalars.first!)\n\
    \        }\n    }\n    if vowels.isEmpty {\n        return \"\"\n    }\n    var\
    \ vowelIndex = vowels.count - 1\n    var vowel = vowels[vowelIndex]\n    if vowelIndex\
    \ == 0 {\n        return vowel\n    }\n    if vowelIndex == vowels.count - 1 {\n\
    \        return vowel\n    }\n    if vowelIndex == vowels.count - 2 {\n      \
    \  return vowel\n    }\n    if vowelIndex == vowels.count - 3 {\n        return\
    \ vowel\n    }\n    if vowelIndex == vowels.count - 4 {\n        return vowel\n\
    \    }\n    if vowelIndex == vowels.count - 5 {\n        return vowel\n    }\n\
    \    if vowelIndex == vowels.count - 6 {\n        return vowel\n    }\n    if\
    \ vowelIndex == vowels.count - 7 {\n        return vowel\n    }\n    if vowelIndex\
    \ == vowels.count - 8 {\n        return vowel\n    }\n    if vowelIndex == vowels.count\
    \ - 9 {\n        return vowel\n    }\n    if vowelIndex == vowels.count - 10 {\n\
    \        return vowel\n    }\n    if vowelIndex == vowels.count - 11 {\n     \
    \   return vowel\n    }\n    if vowelIndex == vowels.count - 12 {\n        return\
    \ vowel\n    }\n    if vowelIndex == vowels.count - 13 {\n        return vowel\n\
    \    }\n    if vowelIndex == vowels.count - 14 {\n        return vowel\n    }\n\
    \    if vowelIndex == vowels.count - 15 {\n        return vowel\n    }\n    if\
    \ vowelIndex == vowels.count - 16 {\n        return vowel\n    }\n    if vowelIndex\
    \ == vowels.count - 17 {\n        return vowel\n    }\n    if vowelIndex == vowels.count\
    \ - 18 {\n        return vowel\n    }\n    if vowelIndex == vowels.count - 19\
    \ {\n        return vowel\n    }\n    if vowelIndex == vowels.count - 20 {\n \
    \       return vowel\n    }\n    if vowelIndex == vowels.count - 21 {\n      \
    \  return vowel\n    }\n    if vowelIndex == vowels.count - 22 {\n        return\
    \ vowel\n    }\n    if vowelIndex == vowels.count - 23 {\n        return vowel\n\
    \    }\n    if vowelIndex == vowels.count - 24 {\n        return vowel\n    }\n\
    \    if vowelIndex == vowels.count - 25 {\n        return vowel\n    }\n    if\
    \ vowelIndex == vowels.count - 26 {\n        return vowel\n    }\n    if vowelIndex\
    \ == vowels.count - 27 {\n        return vowel\n    }\n    if vowelIndex == vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp86302wdl.swift:108:27: error: expected '{' after 'if' condition\n\
    \    if vowelIndex == vowel\n                          ^\n/tmp/tmp86302wdl.swift:14:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp86302wdl.swift:15:42: error: type 'Unicode.Scalar'\
    \ has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel) {\n \
    \                                       ~^~~~~\n/tmp/tmp86302wdl.swift:16:20:\
    \ error: no exact matches in call to instance method 'append'\n            vowels.append(char.unicodeScalars.first!)\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'String' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'String' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Self.Element)\n                 \
    \                   ^\n/tmp/tmp86302wdl.swift:16:20: note: found candidate with\
    \ type '(__owned Unicode.Scalar) -> ()'\n            vowels.append(char.unicodeScalars.first!)\n\
    \                   ^\n/tmp/tmp86302wdl.swift:108:19: error: binary operator '=='\
    \ cannot be applied to operands of type 'Int' and 'String'\n    if vowelIndex\
    \ == vowel\n       ~~~~~~~~~~ ^  ~~~~~\n/tmp/tmp86302wdl.swift:108:19: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Int, Int), (String,\
    \ String)\n    if vowelIndex == vowel\n                  ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [String: Int]()\n    var vowelsCountCount = [String:\
    \ Int]()\n    var vowelsCountCountCount = [String: Int]()\n    var vowelsCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCount = [String: Int]()\n\
    \    var vowelsCountCountCountCountCountCount = [String: Int]()\n    var vowelsCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCount =\
    \ [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpk1zy2six.swift:37:1: error: expected value in dictionary literal\n\
    }\n^\n/tmp/tmpk1zy2six.swift:33:9: error: invalid redeclaration of 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\n\
    \    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n        ^\n/tmp/tmpk1zy2six.swift:32:9: note: 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\
    \ previously declared here\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n        ^\n/tmp/tmpk1zy2six.swift:35:9: error: invalid redeclaration\
    \ of 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\n\
    \    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n        ^\n/tmp/tmpk1zy2six.swift:34:9: note: 'vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount'\
    \ previously declared here\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: Int]()\n        ^\n/tmp/tmpk1zy2six.swift:36:123: error: type 'String.Type'\
    \ cannot conform to 'Hashable'\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: \n                                                              \
    \                                                            ^\n/tmp/tmpk1zy2six.swift:36:123:\
    \ note: only concrete types such as structs, enums and classes can conform to\
    \ protocols\n    var vowelsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = [String: \n                                                              \
    \                                                            ^\n/tmp/tmpk1zy2six.swift:36:"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelIndex = 0\n    var vowelCount = 0\n    var\
    \ vowelIndex2 = 0\n    var vowelCount2 = 0\n    var vowelIndex3 = 0\n    var vowelCount3\
    \ = 0\n    var vowelIndex4 = 0\n    var vowelCount4 = 0\n    var vowelIndex5 =\
    \ 0\n    var vowelCount5 = 0\n    var vowelIndex6 = 0\n    var vowelCount6 = 0\n\
    \    var vowelIndex7 = 0\n    var vowelCount7 = 0\n    var vowelIndex8 = 0\n \
    \   var vowelCount8 = 0\n    var vowelIndex9 = 0\n    var vowelCount9 = 0\n  \
    \  var vowelIndex10 = 0\n    var vowelCount10 = 0\n    var vowelIndex11 = 0\n\
    \    var vowelCount11 = 0\n    var vowelIndex12 = 0\n    var vowelCount12 = 0\n\
    \    var vowelIndex13 = 0\n    var vowelCount13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelCount14 = 0\n    var vowelIndex15 = 0\n    var vowelCount15 = 0\n\
    \    var vowelIndex16 = 0\n    var vowelCount16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelCount17 = 0\n    var vowelIndex18 = 0\n    var vowelCount18 = 0\n\
    \    var vowelIndex19 = 0\n    var vowelCount19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelCount20 = 0\n    var vowelIndex21 = 0\n    var vowelCount21 = 0\n\
    \    var vowelIndex22 = 0\n    var vowelCount22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelCount23 = 0\n    var vowelIndex24 = 0\n    var vowelCount24 = 0\n\
    \    var vowelIndex25 = 0\n    var vowelCount25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelCount26 = 0\n    var vowelIndex27 = 0\n    var vowelCount27 = 0\n\
    \    var vowelIndex28 = 0\n    var vowelCount28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelCount29 = 0\n    var vowelIndex30 = 0\n    var vowelCount30 = 0\n\
    \    var vowelIndex31 = 0\n    var vowelCount31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelCount32 = 0\n    var vowelIndex33 = 0\n    var vowelCount33 = 0\n\
    \    var vowelIndex34 = 0\n    var vowelCount34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelCount35 = 0\n    var vowelIndex36 = 0\n    var vowelCount36 = 0\n\
    \    var vowelIndex37 = 0\n    var vowelCount37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelCount38 = 0\n    var vowelIndex39 = 0\n    var vowelCount39 = 0\n\
    \    var vowelIndex40 = 0\n    var vowelCount40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelCount41 = 0\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplft3l1j9.swift:97:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelIndex = 0\n \
    \   var consonantIndex = 0\n    var consonantIndex2 = 1\n    var consonantIndex3\
    \ = 2\n    var consonantIndex4 = 3\n    var consonantIndex5 = 4\n    var consonantIndex6\
    \ = 5\n    var consonantIndex7 = 6\n    var consonantIndex8 = 7\n    var consonantIndex9\
    \ = 8\n    var consonantIndex10 = 9\n    var consonantIndex11 = 10\n    var consonantIndex12\
    \ = 11\n    var consonantIndex13 = 12\n    var consonantIndex14 = 13\n    var\
    \ consonantIndex15 = 14\n    var consonantIndex16 = 15\n    var consonantIndex17\
    \ = 16\n    var consonantIndex18 = 17\n    var consonantIndex19 = 18\n    var\
    \ consonantIndex20 = 19\n    var consonantIndex21 = 20\n    var consonantIndex22\
    \ = 21\n    var consonantIndex23 = 22\n    var consonantIndex24 = 23\n    var\
    \ consonantIndex25 = 24\n    var consonantIndex26 = 25\n    var consonantIndex27\
    \ = 26\n    var consonantIndex28 = 27\n    var consonantIndex29 = 28\n    var\
    \ consonantIndex30 = 29\n    var consonantIndex31 = 30\n    var consonantIndex32\
    \ = 31\n    var consonantIndex33 = 32\n    var consonantIndex34 = 33\n    var\
    \ consonantIndex35 = 34\n    var consonantIndex36 = 35\n    var consonantIndex37\
    \ = 36\n    var consonantIndex38 = 37\n    var consonantIndex39 = 38\n    var\
    \ consonantIndex40 = 39\n    var consonantIndex41 = 40\n    var consonantIndex42\
    \ = 41\n    var consonantIndex43 = 42\n    var consonantIndex44 = 43\n    var\
    \ consonantIndex45 = 44\n    var consonantIndex46 = 45\n    var consonantIndex47\
    \ = 46\n    var consonantIndex48 = 47\n    var consonantIndex49 = 48\n    var\
    \ consonantIndex50 = 49\n    var consonantIndex51 = 50\n    var consonantIndex52\
    \ = 51\n    var consonantIndex53 = 52\n    var consonantIndex54 = 53\n    var\
    \ consonantIndex55 = 54\n    var consonantIndex56 = 55\n    var consonantIndex57\
    \ = 56\n    var consonantIndex58 = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp00se8hzk.swift:72:27: error: expected initial value after '='\n\
    \    var consonantIndex58 = \n                          ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount2: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount3: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount4: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount5: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount6: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount7: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount8: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount9: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount10: [Int] = [0, 1, 2, 3, 4]\n   \
    \ var vowelsIndexCount11: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount12:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount13: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount14: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount15:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount16: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount17: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount18:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount19: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount20: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount21:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount22: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount23: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount24:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount25: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount26: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount27:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount28: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount29: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount30:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount31: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount32: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount33:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount34: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount35: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount36:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount37: [\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxrz390rs.swift:52:30: error: expected element type\n    var vowelsIndexCount37:\
    \ [\n                             ^\n                              <#type#>\n\
    /tmp/tmpxrz390rs.swift:52:30: error: expected ']' in array type\n    var vowelsIndexCount37:\
    \ [\n                             ^\n/tmp/tmpxrz390rs.swift:52:29: note: to match\
    \ this opening '['\n    var vowelsIndexCount37: [\n                          \
    \  ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelIndex2\
    \ = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 =\
    \ 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n\
    \    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n\
    \    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    \    var vowelIndex81 = 0\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjhcx_pe2.swift:96:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelsIndex = [Int]()\n    var\
    \ vowelsIndexCount = [Int]()\n    var vowelsIndexCountMax = 0\n    var vowelsIndexCountMin\
    \ = 0\n    var vowelsIndexCountMaxIndex = 0\n    var vowelsIndexCountMinIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndexCountMinIndexIndex\
    \ = 0\n    var vowelsIndexCountMaxIndexIndex = 0\n    var vowelsIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpd7eklvqe.swift:23:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex = 0\n        ^\n/tmp/tmpd7eklvqe.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowelsIndexCountMaxIndexIndex\
    \ = 0\n        ^\n/tmp/tmpd7eklvqe.swift:24:9: error: invalid redeclaration of\
    \ 'vowelsIndexCountMinIndexIndex'\n    var vowelsIndexCountMinIndexIndex = 0\n\
    \        ^\n/tmp/tmpd7eklvqe.swift:22:9: note: 'vowelsIndexCountMinIndexIndex'\
    \ previously declared here\n    var vowelsIndexCountMinIndexIndex = 0\n      \
    \  ^\n/tmp/tmpd7eklvqe.swift:25:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex = 0\n        ^\n/tmp/tmpd7eklvqe.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowelsIndexCountMaxIndexIndex\
    \ = 0\n        ^\n/tmp/tmpd7eklvqe.swift:26:9: error: invalid redeclaration of\
    \ 'vowelsIndexCountMinIndexIndex'\n    var vowelsIndexCountMinIndexIndex = 0\n\
    \        ^\n/tmp/tmpd7eklvqe.swift:22:9: note: 'vowelsIndexCountMinIndexIndex'\
    \ previously declared here\n    var vowelsIndexCountMinIndexIndex = 0\n      \
    \  ^\n/tmp/tmpd7eklvqe.swift:27:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex = 0\n        ^\n/tmp/tmpd7eklvqe.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowelsIndexCountMaxIndexIndex\
    \ = 0\n        ^\n/tmp/tmpd7eklvqe.swift:28:9: error: invalid redeclaration of\
    \ 'vowelsIndexCountMinIndexIndex'\n    var vowelsIndexCountMinIndexIndex = 0\n\
    \        ^\n/tmp/tmpd7eklvqe.swift:22:9: note: 'vowelsIndexCountMinIndexIndex'\
    \ previously declared here\n    var vowelsIndexCountMinIndexIndex = 0\n      \
    \  ^\n/tmp/tmpd7eklvqe.swift:29:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex = 0\n        ^\n/tmp/tmpd7eklvqe.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowelsIndexCountMaxIndexIndex\
    \ = 0\n        ^\n/tmp/tmpd7eklvqe.swift:30"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowel:\
    \ String = String()\n    var consonantIndex: Int = 0\n    var consonant: String\
    \ = String()\n    var consonantCount: Int = 0\n    var consonantIndex2: Int =\
    \ 0\n    var consonant2: String = String()\n    var consonantCount2: Int = 0\n\
    \    var consonantIndex3: Int = 0\n    var consonant3: String = String()\n   \
    \ var consonantCount3: Int = 0\n    var consonantIndex4: Int = 0\n    var consonant4:\
    \ String = String()\n    var consonantCount4: Int = 0\n    var consonantIndex5:\
    \ Int = 0\n    var consonant5: String = String()\n    var consonantCount5: Int\
    \ = 0\n    var consonantIndex6: Int = 0\n    var consonant6: String = String()\n\
    \    var consonantCount6: Int = 0\n    var consonantIndex7: Int = 0\n    var consonant7:\
    \ String = String()\n    var consonantCount7: Int = 0\n    var consonantIndex8:\
    \ Int = 0\n    var consonant8: String = String()\n    var consonantCount8: Int\
    \ = 0\n    var consonantIndex9: Int = 0\n    var consonant9: String = String()\n\
    \    var consonantCount9: Int = 0\n    var consonantIndex10: Int = 0\n    var\
    \ consonant10: String = String()\n    var consonantCount10: Int = 0\n    var consonantIndex11:\
    \ Int = 0\n    var consonant11: String = String()\n    var consonantCount11: Int\
    \ = 0\n    var consonantIndex12: Int = 0\n    var consonant12: String = String()\n\
    \    var consonantCount12: Int = 0\n    var consonantIndex13: Int = 0\n    var\
    \ consonant13: String = String()\n    var consonantCount13: Int = 0\n    var consonantIndex14:\
    \ Int = 0\n    var consonant14: String = String()\n    var consonantCount14: Int\
    \ = 0\n    var consonantIndex15: Int = 0\n    var consonant15: String = String()\n\
    \    var consonantCount15: Int = 0\n    var consonantIndex16: Int = 0\n    var\
    \ consonant16: String = String()\n    var consonantCount16: Int = 0\n    var consonantIndex17:\
    \ Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphw0qhyka.swift:13:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmphw0qhyka.swift:14:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmphw0qhyka.swift:15:9: warning: variable 'vowelIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex: Int = 0\n        ^~~~~~~~~~\n\
    \        _\n/tmp/tmphw0qhyka.swift:16:9: warning: variable 'vowel' was never used;\
    \ consider replacing with '_' or removing it\n    var vowel: String = String()\n\
    \        ^~~~~\n        _\n/tmp/tmphw0qhyka.swift:17:9: warning: variable 'consonantIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var consonantIndex:\
    \ Int = 0\n        ^~~~~~~~~~~~~~\n        _\n/tmp/tmphw0qhyka.swift:18:9: warning:\
    \ variable 'consonant' was never used; consider replacing with '_' or removing\
    \ it\n    var consonant: String = String()\n        ^~~~~~~~~\n        _\n/tmp/tmphw0qhyka.swift:19:9:\
    \ warning: variable 'consonantCount' was never used; consider replacing with '_'\
    \ or removing it\n    var consonantCount: Int = 0\n        ^~~~~~~~~~~~~~\n  \
    \      _\n/tmp/tmphw0qhyka.swift:20:9: warning: variable 'consonantIndex2' was\
    \ never used; consider replacing with '_' or removing it\n    var consonantIndex2:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmphw0qhyka.swift:21:9: warning:\
    \ variable 'consonant2' was never used; consider replacing with '_' or removing\
    \ it\n    var consonant2: String = String()\n        ^~~~~~~~~~\n        _\n/tmp/tmphw0qhyka.swift:22:9:\
    \ warning: variable 'consonantCount2' was never used; consider replacing with\
    \ '_' or removing it\n    var consonantCount2: Int = 0\n        ^~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmphw0qhyka.swift:23:9: warning: variable 'consonantIndex3' was\
    \ never used; consider replacing with '_' or removing it\n    var consonantIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmphw0"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelCount = 0\n  \
    \  var vowelIndex2 = vowels.characters.count\n    var vowelCount2 = 0\n    var\
    \ vowelIndex3 = vowels.characters.count\n    var vowelCount3 = 0\n    var vowelIndex4\
    \ = vowels.characters.count\n    var vowelCount4 = 0\n    var vowelIndex5 = vowels.characters.count\n\
    \    var vowelCount5 = 0\n    var vowelIndex6 = vowels.characters.count\n    var\
    \ vowelCount6 = 0\n    var vowelIndex7 = vowels.characters.count\n    var vowelCount7\
    \ = 0\n    var vowelIndex8 = vowels.characters.count\n    var vowelCount8 = 0\n\
    \    var vowelIndex9 = vowels.characters.count\n    var vowelCount9 = 0\n    var\
    \ vowelIndex10 = vowels.characters.count\n    var vowelCount10 = 0\n    var vowelIndex11\
    \ = vowels.characters.count\n    var vowelCount11 = 0\n    var vowelIndex12 =\
    \ vowels.characters.count\n    var vowelCount12 = 0\n    var vowelIndex13 = vowels.characters.count\n\
    \    var vowelCount13 = 0\n    var vowelIndex14 = vowels.characters.count\n  \
    \  var vowelCount14 = 0\n    var vowelIndex15 = vowels.characters.count\n    var\
    \ vowelCount15 = 0\n    var vowelIndex16 = vowels.characters.count\n    var vowelCount16\
    \ = 0\n    var vowelIndex17 = vowels.characters.count\n    var vowelCount17 =\
    \ 0\n    var vowelIndex18 = vowels.characters.count\n    var vowelCount18 = 0\n\
    \    var vowelIndex19 = vowels.characters.count\n    var vowelCount19 = 0\n  \
    \  var vowelIndex20 = vowels.characters.count\n    var vowelCount20 = 0\n    var\
    \ vowelIndex21 = vowels.characters.count\n    var vowelCount21 = 0\n    var vowelIndex22\
    \ = vowels.characters.count\n    var vowelCount22 = 0\n    var vowelIndex23 =\
    \ vowels.characters.count\n    var vowelCount23 = 0\n    var vowelIndex24 = vowels.characters.count\n\
    \    var vowelCount24 = 0\n    var vowelIndex25 = vowels.characters.count\n  \
    \  var vowelCount25 = 0\n    var vowelIndex26 = vowels.characters.count\n    var\
    \ vowelCount26 = 0\n    var vowelIndex27 = vowels.characters.count\n    var vowelCount27\
    \ = 0\n    var vowelIndex28 = vowels.characters.count\n    var vowelCount28 =\
    \ 0\n    var vowelIndex29 = vowels.characters.count\n    var vowelCount29 = 0\n\
    \    var vowelIndex30 = vowels.characters.count\n    var vowelCount30 = 0\n  \
    \  var vowelIndex31 = vowels.characters.count\n    var vowelCount31 = 0\n    var\
    \ vowelIndex32 = vowels.characters.count\n    var vowelCount32\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1g9fpvjc.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1g9fpvjc.swift:17:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1g9fpvjc.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1g9fpvjc.swift:21:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1g9fpvjc.swift:23:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1g9fpvjc.swift:25:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1g9fpvjc.swift:27:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'c"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var vowelCount\
    \ = 0\n    for char in word {\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n            vowelCount += 1\n            if vowelIndex == 0 {\n         \
    \       vowelIndex = word.unicodeScalars.firstIndex(of: .vowel)!\n           \
    \ }\n            if vowelIndex == word.unicodeScalars.count - 1 {\n          \
    \      vowelIndex = word.unicodeScalars.lastIndex(of: .vowel)!\n            }\n\
    \        } else {\n            vowelIndex += 1\n        }\n    }\n    if vowelCount\
    \ > 0 {\n        vowel = String(word.unicodeScalars[vowelIndex..<vowelIndex +\
    \ vowelCount])\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3w5i0dat.swift:17:42: error: type 'Unicode.Scalar' has no member\
    \ 'vowel'\n        if char.unicodeScalars.contains(.vowel) {\n               \
    \                         ~^~~~~\n/tmp/tmp3w5i0dat.swift:20:72: error: cannot\
    \ assign value of type 'String.UnicodeScalarView.Index' (aka 'String.Index') to\
    \ type 'Int'\n                vowelIndex = word.unicodeScalars.firstIndex(of:\
    \ .vowel)!\n                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    /tmp/tmp3w5i0dat.swift:20:66: error: type 'Unicode.Scalar' has no member 'vowel'\n\
    \                vowelIndex = word.unicodeScalars.firstIndex(of: .vowel)!\n  \
    \                                                              ~^~~~~\n/tmp/tmp3w5i0dat.swift:23:71:\
    \ error: cannot assign value of type 'String.UnicodeScalarView.Index' (aka 'String.Index')\
    \ to type 'Int'\n                vowelIndex = word.unicodeScalars.lastIndex(of:\
    \ .vowel)!\n                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    /tmp/tmp3w5i0dat.swift:23:65: error: type 'Unicode.Scalar' has no member 'vowel'\n\
    \                vowelIndex = word.unicodeScalars.lastIndex(of: .vowel)!\n   \
    \                                                            ~^~~~~\n/tmp/tmp3w5i0dat.swift:30:43:\
    \ error: subscript 'subscript(_:)' requires the types 'String.UnicodeScalarView.Index'\
    \ (aka 'String.Index') and 'Int' be equivalent\n        vowel = String(word.unicodeScalars[vowelIndex..<vowelIndex\
    \ + vowelCount])\n                                          ^\nSwift.Collection:2:23:\
    \ note: where 'Self.Index' = 'String.UnicodeScalarView.Index' (aka 'String.Index'),\
    \ 'R.Bound' = 'Int'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    var vowelsCount = 0\n    var vowelsCount2 = 0\n\
    \    var vowelsCount3 = 0\n    var vowelsCount4 = 0\n    var vowelsCount5 = 0\n\
    \    var vowelsCount6 = 0\n    var vowelsCount7 = 0\n    var vowelsCount8 = 0\n\
    \    var vowelsCount9 = 0\n    var vowelsCount10 = 0\n    var vowelsCount11 =\
    \ 0\n    var vowelsCount12 = 0\n    var vowelsCount13 = 0\n    var vowelsCount14\
    \ = 0\n    var vowelsCount15 = 0\n    var vowelsCount16 = 0\n    var vowelsCount17\
    \ = 0\n    var vowelsCount18 = 0\n    var vowelsCount19 = 0\n    var vowelsCount20\
    \ = 0\n    var vowelsCount21 = 0\n    var vowelsCount22 = 0\n    var vowelsCount23\
    \ = 0\n    var vowelsCount24 = 0\n    var vowelsCount25 = 0\n    var vowelsCount26\
    \ = 0\n    var vowelsCount27 = 0\n    var vowelsCount28 = 0\n    var vowelsCount29\
    \ = 0\n    var vowelsCount30 = 0\n    var vowelsCount31 = 0\n    var vowelsCount32\
    \ = 0\n    var vowelsCount33 = 0\n    var vowelsCount34 = 0\n    var vowelsCount35\
    \ = 0\n    var vowelsCount36 = 0\n    var vowelsCount37 = 0\n    var vowelsCount38\
    \ = 0\n    var vowelsCount39 = 0\n    var vowelsCount40 = 0\n    var vowelsCount41\
    \ = 0\n    var vowelsCount42 = 0\n    var vowelsCount43 = 0\n    var vowelsCount44\
    \ = 0\n    var vowelsCount45 = 0\n    var vowelsCount46 = 0\n    var vowelsCount47\
    \ = 0\n    var vowelsCount48 = 0\n    var vowelsCount49 = 0\n    var vowelsCount50\
    \ = 0\n    var vowelsCount51 = 0\n    var vowelsCount52 = 0\n    var vowelsCount53\
    \ = 0\n    var vowelsCount54 = 0\n    var vowelsCount55 = 0\n    var vowelsCount56\
    \ = 0\n    var vowelsCount57 = 0\n    var vowelsCount58 = 0\n    var vowelsCount59\
    \ = 0\n    var vowelsCount60 = 0\n    var vowelsCount61 = 0\n    var vowelsCount62\
    \ = 0\n    var vowelsCount63 = 0\n    var vowelsCount64 = 0\n    var vowelsCount65\
    \ = 0\n    var vowelsCount66 = 0\n    var vowelsCount67 = 0\n    var vowelsCount68\
    \ = 0\n    var vowelsCount69 = 0\n    var vowelsCount70 = 0\n    var vowelsCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpofsdkauj.swift:85:9: error: type annotation missing in pattern\n\
    \    var vowelsCount\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSum: Int = 0\n    var vowelsCountSumIndex:\
    \ Int = 0\n    var vowelsCountSumMax: Int = vowels.count - 1\n    var vowelsCountSumMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSumSum: Int = 0\n    var vowelsCountSumSumIndex:\
    \ Int = 0\n    var vowelsCountSumSumMax: Int = vowels.count - 1\n    var vowelsCountSumSumMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSumSumSum: Int = 0\n    var vowelsCountSumSumSumIndex:\
    \ Int = 0\n    var vowelsCountSumSumSumMax: Int = vowels.count - 1\n    var vowelsCountSumSumSumMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumIndex:\
    \ Int = 0\n    var vowelsCountSumSumSumSumMax: Int = vowels.count - 1\n    var\
    \ vowelsCountSumSumSumSumMin: Int = vowels.count - 1\n    var vowelsCountSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumIndex: Int = 0\n    var vowelsCountSumSumSumSumSumMax:\
    \ Int = vowels.count - 1\n    var vowelsCountSumSumSumSumSumMin: Int = vowels.count\
    \ - 1\n    var vowelsCountSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumIndex:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumMax: Int = vowels.count - 1\n\
    \    var vowelsCountSumSumSumSumSumSumMin: Int = vowels.count - 1\n    var vowelsCountSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumIndex: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumMax:\
    \ Int = vowels.count - 1\n    var vowelsCountSumSumSumSumSumSumSumMin: Int = vowels.count\
    \ - 1\n    var vowelsCountSumSumSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumIndex:\
    \ Int = 0\n    var vowelsCountSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppy4dobqm.swift:48:9: error: type annotation missing in pattern\n\
    \    var vowelsCountSum\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = Set<Character>()\n    vowels.insert(\"\
    a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"i\")\n    vowels.insert(\"\
    o\")\n    vowels.insert(\"u\")\n    vowels.insert(\"A\")\n    vowels.insert(\"\
    E\")\n    vowels.insert(\"I\")\n    vowels.insert(\"O\")\n    vowels.insert(\"\
    U\")\n    \n    var vowelsCount = vowels.count\n    var vowelsIndex = 0\n    var\
    \ vowelsIndex2 = vowelsIndex\n    \n    var consonants = Set<Character>()\n  \
    \  consonants.insert(\"b\")\n    consonants.insert(\"c\")\n    consonants.insert(\"\
    d\")\n    consonants.insert(\"f\")\n    consonants.insert(\"g\")\n    consonants.insert(\"\
    h\")\n    consonants.insert(\"j\")\n    consonants.insert(\"k\")\n    consonants.insert(\"\
    l\")\n    consonants.insert(\"m\")\n    consonants.insert(\"n\")\n    consonants.insert(\"\
    p\")\n    consonants.insert(\"q\")\n    consonants.insert(\"r\")\n    consonants.insert(\"\
    s\")\n    consonants.insert(\"t\")\n    consonants.insert(\"v\")\n    consonants.insert(\"\
    w\")\n    consonants.insert(\"x\")\n    consonants.insert(\"z\")\n    \n    var\
    \ consonantsCount = consonants.count\n    var consonantsIndex = 0\n    var consonantsIndex2\
    \ = consonantsIndex\n    \n    var vowelsIndex2 = 0\n    \n    var vowelsIndex3\
    \ = 0\n    \n    var vowelsIndex4 = 0\n    \n    var vowelsIndex5 = 0\n    \n\
    \    var vowelsIndex6 = 0\n    \n    var vowelsIndex7 = 0\n    \n    var vowelsIndex8\
    \ = 0\n    \n    var vowelsIndex9 = 0\n    \n    var vowelsIndex10 = 0\n    \n\
    \    var vowelsIndex11 = 0\n    \n    var vowelsIndex12 = 0\n    \n    var vowelsIndex13\
    \ = 0\n    \n    var vowelsIndex14 = 0\n    \n    var vowelsIndex15 = 0\n    \n\
    \    var vowelsIndex16 = 0\n    \n    var vowelsIndex17 = 0\n    \n    var vowelsIndex18\
    \ = 0\n    \n    var vowelsIndex19 = 0\n    \n    var vowelsIndex20 = 0\n    \n\
    \    var vowelsIndex21 = 0\n    \n    var vowelsIndex22 = 0\n    \n    var vowelsIndex23\
    \ = 0\n    \n    var vowelsIndex24 = 0\n    \n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyxds935d.swift:55:9: error: invalid redeclaration of 'vowelsIndex2'\n\
    \    var vowelsIndex2 = 0\n        ^\n/tmp/tmpyxds935d.swift:27:9: note: 'vowelsIndex2'\
    \ previously declared here\n    var vowelsIndex2 = vowelsIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.contains(.vowel) {\n            vowels.append(char)\n\
    \        }\n    }\n    if vowels.isEmpty {\n        return \"\"\n    }\n    if\
    \ vowels.count > 1 {\n        return \"\"\n    }\n    let vowel = vowels[0]\n\
    \    let index = word.characters.index(of: vowel)\n    let start = index! + vowel.unicodeScalars.count\
    \ - 1\n    let end = word.characters.index(of: vowel, in: start!..<word.characters.count)\n\
    \    return word.substring(from: start!, to: end!)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl9_kl3md.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpl9_kl3md.swift:15:42:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n                                        ~^~~~~\n/tmp/tmpl9_kl3md.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(char)\n                          ^\n/tmp/tmpl9_kl3md.swift:26:43:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n    let index = word.characters.index(of: vowel)\n      \
    \                                    ^\n/tmp/tmpl9_kl3md.swift:28:58: error: extra\
    \ argument 'in' in call\n    let end = word.characters.index(of: vowel, in: start!..<word.characters.count)\n\
    \                                   ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpl9_kl3md.swift:29:17: error: value of type 'String' has no member 'substring'\n\
    \    return word.substring(from: start!, to: end!)\n           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSum: Int = 0\n    var vowelsCountSumMax:\
    \ Int = vowelsCountMax\n    var vowelsCountSumMin: Int = vowelsCountMin - 1\n\
    \    var vowelsCountSumMaxIndex: Int = 0\n    var vowelsCountSumMinIndex: Int\
    \ = 0\n    var vowelsCountSumSum: Int = 0\n    var vowelsCountSumSumMax: Int =\
    \ vowelsCountSumMax\n    var vowelsCountSumSumMin: Int = vowelsCountSumMin - 1\n\
    \    var vowelsCountSumSumMaxIndex: Int = 0\n    var vowelsCountSumSumMinIndex:\
    \ Int = 0\n    var vowelsCountSumSumSum: Int = 0\n    var vowelsCountSumSumSumMax:\
    \ Int = vowelsCountSumSumMax\n    var vowelsCountSumSumSumMin: Int = vowelsCountSumSumMin\
    \ - 1\n    var vowelsCountSumSumSumMaxIndex: Int = 0\n    var vowelsCountSumSumSumMinIndex:\
    \ Int = 0\n    var vowelsCountSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumMax\n    var vowelsCountSumSumSumSumMin: Int = vowelsCountSumSumSumMin\
    \ - 1\n    var vowelsCountSumSumSumSumMaxIndex: Int = 0\n    var vowelsCountSumSumSumSumMinIndex:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumSumMax\n    var vowelsCountSumSumSumSumSumMin: Int\
    \ = vowelsCountSumSumSumSumMin - 1\n    var vowelsCountSumSumSumSumSumMaxIndex:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumMinIndex: Int = 0\n    var vowelsCountSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumSumMax\n\
    \    var vowelsCountSumSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumSumMin\
    \ - 1\n    var vowelsCountSumSumSumSumSumSumMaxIndex: Int = 0\n    var vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpu8a9yftf.swift:47:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelsCount = 0\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex = 0\n    var vowelsCount = vowels.count\n\
    \    var vowelIndex = 0\n    var vowelsCount = vowels.count\n    var vowelIndex\
    \ = 0\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptkax8_ms.swift:16:9: error: invalid redeclaration of 'vowelsCount'\n\
    \    var vowelsCount = vowels.count\n        ^\n/tmp/tmptkax8_ms.swift:14:9: note:\
    \ 'vowelsCount' previously declared here\n    var vowelsCount = 0\n        ^\n\
    /tmp/tmptkax8_ms.swift:17:9: error: invalid redeclaration of 'vowelIndex'\n  \
    \  var vowelIndex = 0\n        ^\n/tmp/tmptkax8_ms.swift:15:9: note: 'vowelIndex'\
    \ previously declared here\n    var vowelIndex = 0\n        ^\n/tmp/tmptkax8_ms.swift:18:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = vowels.count\n\
    \        ^\n/tmp/tmptkax8_ms.swift:14:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = 0\n        ^\n/tmp/tmptkax8_ms.swift:19:9: error:\
    \ invalid redeclaration of 'vowelIndex'\n    var vowelIndex = 0\n        ^\n/tmp/tmptkax8_ms.swift:15:9:\
    \ note: 'vowelIndex' previously declared here\n    var vowelIndex = 0\n      \
    \  ^\n/tmp/tmptkax8_ms.swift:20:9: error: invalid redeclaration of 'vowelsCount'\n\
    \    var vowelsCount = vowels.count\n        ^\n/tmp/tmptkax8_ms.swift:14:9: note:\
    \ 'vowelsCount' previously declared here\n    var vowelsCount = 0\n        ^\n\
    /tmp/tmptkax8_ms.swift:21:9: error: invalid redeclaration of 'vowelIndex'\n  \
    \  var vowelIndex = 0\n        ^\n/tmp/tmptkax8_ms.swift:15:9: note: 'vowelIndex'\
    \ previously declared here\n    var vowelIndex = 0\n        ^\n/tmp/tmptkax8_ms.swift:22:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = vowels.count\n\
    \        ^\n/tmp/tmptkax8_ms.swift:14:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = 0\n        ^\n/tmp/tmptkax8_ms.swift:23:9: error:\
    \ invalid redeclaration of 'vowelIndex'\n    var vowelIndex = 0\n        ^\n/tmp/tmptkax8_ms.swift:15:9:\
    \ note: 'vowelIndex' previously declared here\n    var vowelIndex = 0\n      \
    \  ^\n/tmp/tmptkax8_ms.swift:24:9: error: invalid redeclaration of 'vowelsCount'\n\
    \    var vowelsCount = vowels.count\n        ^\n/tmp/tmptkax8_ms.swift:14:9: note:\
    \ 'vowelsCount' previously declared here\n    var vowelsCount = 0\n        ^\n\
    /tmp/tmptkax8_ms.swift:25:9: error: invalid redeclaratio"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndexEnd = word.count\n    \n    while vowelIndex < vowelIndexEnd\
    \ {\n        \n        let vowel = vowels[vowelIndex]\n        \n        if word.hasPrefix(vowel)\
    \ {\n            vowelIndexEnd = word.index(vowel, offsetBy: 1)\n        }\n \
    \       \n        if word.hasSuffix(vowel) {\n            vowelIndexEnd = word.index(vowel,\
    \ offsetBy: -1)\n        }\n        \n        vowelIndex += 1\n    }\n    \n \
    \   return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmph8bfhlnv.swift:21:21: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let vowel\
    \ = vowels[vowelIndex]\n                    ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmph8bfhlnv.swift:23:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if word.hasPrefix(vowel) {\n                          ^\n/tmp/tmph8bfhlnv.swift:24:40:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            vowelIndexEnd = word.index(vowel, offsetBy: 1)\n                \
    \                       ^\n/tmp/tmph8bfhlnv.swift:24:34: error: cannot assign\
    \ value of type 'String.Index' to type 'Int'\n            vowelIndexEnd = word.index(vowel,\
    \ offsetBy: 1)\n                            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph8bfhlnv.swift:27:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if word.hasSuffix(vowel) {\n                          ^\n/tmp/tmph8bfhlnv.swift:28:40:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \            vowelIndexEnd = word.index(vowel, offsetBy: -1)\n               \
    \                        ^\n/tmp/tmph8bfhlnv.swift:28:34: error: cannot assign\
    \ value of type 'String.Index' to type 'Int'\n            vowelIndexEnd = word.index(vowel,\
    \ offsetBy: -1)\n                            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var lastConsonantIndex\
    \ = 0\n    var lastConsonant = \"\"\n    var lastVowelIndex = 0\n    var lastVowel\
    \ = \"\"\n    var lastVowelIndex2 = 0\n    var lastVowel2 = \"\"\n    var lastVowelIndex3\
    \ = 0\n    var lastVowel3 = \"\"\n    var lastVowelIndex4 = 0\n    var lastVowel4\
    \ = \"\"\n    var lastVowelIndex5 = 0\n    var lastVowel5 = \"\"\n    var lastVowelIndex6\
    \ = 0\n    var lastVowel6 = \"\"\n    var lastVowelIndex7 = 0\n    var lastVowel7\
    \ = \"\"\n    var lastVowelIndex8 = 0\n    var lastVowel8 = \"\"\n    var lastVowelIndex9\
    \ = 0\n    var lastVowel9 = \"\"\n    var lastVowelIndex10 = 0\n    var lastVowel10\
    \ = \"\"\n    var lastVowelIndex11 = 0\n    var lastVowel11 = \"\"\n    var lastVowelIndex12\
    \ = 0\n    var lastVowel12 = \"\"\n    var lastVowelIndex13 = 0\n    var lastVowel13\
    \ = \"\"\n    var lastVowelIndex14 = 0\n    var lastVowel14 = \"\"\n    var lastVowelIndex15\
    \ = 0\n    var lastVowel15 = \"\"\n    var lastVowelIndex16 = 0\n    var lastVowel16\
    \ = \"\"\n    var lastVowelIndex17 = 0\n    var lastVowel17 = \"\"\n    var lastVowelIndex18\
    \ = 0\n    var lastVowel18 = \"\"\n    var lastVowelIndex19 = 0\n    var lastVowel19\
    \ = \"\"\n    var lastVowelIndex20 = 0\n    var lastVowel20 = \"\"\n    var lastVowelIndex21\
    \ = 0\n    var lastVowel21 = \"\"\n    var lastVowel22 = \"\"\n    var lastVowel22\
    \ = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23\
    \ = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23\
    \ = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23\
    \ = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23\
    \ = \"\"\n    var lastVowel23 = \"\"\n    var lastVowel23 = \"\"\n    var lastV\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6bhdy45n.swift:60:9: error: invalid redeclaration of 'lastVowel22'\n\
    \    var lastVowel22 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:59:9: note: 'lastVowel22'\
    \ previously declared here\n    var lastVowel22 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:62:9:\
    \ error: invalid redeclaration of 'lastVowel23'\n    var lastVowel23 = \"\"\n\
    \        ^\n/tmp/tmp6bhdy45n.swift:61:9: note: 'lastVowel23' previously declared\
    \ here\n    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:63:9: error:\
    \ invalid redeclaration of 'lastVowel23'\n    var lastVowel23 = \"\"\n       \
    \ ^\n/tmp/tmp6bhdy45n.swift:61:9: note: 'lastVowel23' previously declared here\n\
    \    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:64:9: error: invalid\
    \ redeclaration of 'lastVowel23'\n    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:61:9:\
    \ note: 'lastVowel23' previously declared here\n    var lastVowel23 = \"\"\n \
    \       ^\n/tmp/tmp6bhdy45n.swift:65:9: error: invalid redeclaration of 'lastVowel23'\n\
    \    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:61:9: note: 'lastVowel23'\
    \ previously declared here\n    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:66:9:\
    \ error: invalid redeclaration of 'lastVowel23'\n    var lastVowel23 = \"\"\n\
    \        ^\n/tmp/tmp6bhdy45n.swift:61:9: note: 'lastVowel23' previously declared\
    \ here\n    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:67:9: error:\
    \ invalid redeclaration of 'lastVowel23'\n    var lastVowel23 = \"\"\n       \
    \ ^\n/tmp/tmp6bhdy45n.swift:61:9: note: 'lastVowel23' previously declared here\n\
    \    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:68:9: error: invalid\
    \ redeclaration of 'lastVowel23'\n    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:61:9:\
    \ note: 'lastVowel23' previously declared here\n    var lastVowel23 = \"\"\n \
    \       ^\n/tmp/tmp6bhdy45n.swift:69:9: error: invalid redeclaration of 'lastVowel23'\n\
    \    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:61:9: note: 'lastVowel23'\
    \ previously declared here\n    var lastVowel23 = \"\"\n        ^\n/tmp/tmp6bhdy45n.swift:70:9:\
    \ error: invalid redeclaration of 'lastVowel23'\n  "
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex = 0\n\
    \    var consonantIndex = 0\n    var consonantIndex2 = 1\n    var consonantIndex3\
    \ = 2\n    var consonantIndex4 = 3\n    var consonantIndex5 = 4\n    var consonantIndex6\
    \ = 5\n    var consonantIndex7 = 6\n    var consonantIndex8 = 7\n    var consonantIndex9\
    \ = 8\n    var consonantIndex10 = 9\n    var consonantIndex11 = 10\n    var consonantIndex12\
    \ = 11\n    var consonantIndex13 = 12\n    var consonantIndex14 = 13\n    var\
    \ consonantIndex15 = 14\n    var consonantIndex16 = 15\n    var consonantIndex17\
    \ = 16\n    var consonantIndex18 = 17\n    var consonantIndex19 = 18\n    var\
    \ consonantIndex20 = 19\n    var consonantIndex21 = 20\n    var consonantIndex22\
    \ = 21\n    var consonantIndex23 = 22\n    var consonantIndex24 = 23\n    var\
    \ consonantIndex25 = 24\n    var consonantIndex26 = 25\n    var consonantIndex27\
    \ = 26\n    var consonantIndex28 = 27\n    var consonantIndex29 = 28\n    var\
    \ consonantIndex30 = 29\n    var consonantIndex31 = 30\n    var consonantIndex32\
    \ = 31\n    var consonantIndex33 = 32\n    var consonantIndex34 = 33\n    var\
    \ consonantIndex35 = 34\n    var consonantIndex36 = 35\n    var consonantIndex37\
    \ = 36\n    var consonantIndex38 = 37\n    var consonantIndex39 = 38\n    var\
    \ consonantIndex40 = 39\n    var consonantIndex41 = 40\n    var consonantIndex42\
    \ = 41\n    var consonantIndex43 = 42\n    var consonantIndex44 = 43\n    var\
    \ consonantIndex45 = 44\n    var consonantIndex46 = 45\n    var consonantIndex47\
    \ = 46\n    var consonantIndex48 = 47\n    var consonantIndex49 = 48\n    var\
    \ consonantIndex50 = 49\n    var consonantIndex51 = 50\n    var consonantIndex52\
    \ = 51\n    var consonantIndex53 = 52\n    var consonantIndex54 = 53\n    var\
    \ consonantIndex55 = 54\n    var consonantIndex56 = 55\n    var consonantIndex57\
    \ = 56\n    var consonantIndex58 = 57\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpfyei9xaq.swift:13:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = []\n\
    \        ^~~~~~\n        _\n/tmp/tmpfyei9xaq.swift:14:9: warning: initialization\
    \ of variable 'vowelIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpfyei9xaq.swift:15:9:\
    \ warning: initialization of variable 'consonantIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var consonantIndex = 0\n\
    \    ~~~~^~~~~~~~~~~~~~\n    _\n/tmp/tmpfyei9xaq.swift:16:9: warning: initialization\
    \ of variable 'consonantIndex2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var consonantIndex2 = 1\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpfyei9xaq.swift:17:9: warning: initialization of variable 'consonantIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var consonantIndex3 = 2\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpfyei9xaq.swift:18:9:\
    \ warning: initialization of variable 'consonantIndex4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var consonantIndex4 = 3\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpfyei9xaq.swift:19:9: warning: initialization\
    \ of variable 'consonantIndex5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var consonantIndex5 = 4\n    ~~~~^~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpfyei9xaq.swift:20:9: warning: initialization of variable 'consonantIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var consonantIndex6 = 5\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpfyei9xaq.swift:21:9:\
    \ warning: initialization of variable 'consonantIndex7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var consonantIndex7 = 6\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpfyei9xaq.swift:22:9: warning: initialization\
    \ of variable 'consonantIndex8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var consonantIndex8 = 7\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelsCount = [Int]()\n\
    \    var vowelsCountSorted = [Int]()\n    var vowelsCountSortedReverse = [Int]()\n\
    \    var vowelsCountSortedReverseSorted = [Int]()\n    var vowelsCountSortedReverseSortedIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndex = [Int]()\n    var\
    \ vowelsCountSortedReverseSortedIndexIndexIndex = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndex =\
    \ [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl746v00g.swift:25:9: error: invalid redeclaration of 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndex = [Int]()\n\
    \        ^\n/tmp/tmpl746v00g.swift:24:9: note: 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndex'\
    \ previously declared here\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpl746v00g.swift:29:9: error: invalid redeclaration\
    \ of 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpl746v00g.swift:28:9: note: 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\
    \ previously declared here\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpl746v00g.swift:31:9: error: invalid redeclaration\
    \ of 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpl746v00g.swift:30:9: note: 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\
    \ previously declared here\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpl746v00g.swift:34:9: error: invalid redeclaration\
    \ of 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\n\
    \    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmpl746v00g.swift:33:9: note: 'vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex'\
    \ previously declared here\n    var vowelsCountSortedReverseSortedIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [Int]()\n        ^\n/tmp/tmp"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelsIndex: Int = 0\n    var\
    \ vowelsIndex2: Int = 0\n    var vowelsIndex3: Int = 0\n    var vowelsIndex4:\
    \ Int = 0\n    var vowelsIndex5: Int = 0\n    var vowelsIndex6: Int = 0\n    var\
    \ vowelsIndex7: Int = 0\n    var vowelsIndex8: Int = 0\n    var vowelsIndex9:\
    \ Int = 0\n    var vowelsIndex10: Int = 0\n    var vowelsIndex11: Int = 0\n  \
    \  var vowelsIndex12: Int = 0\n    var vowelsIndex13: Int = 0\n    var vowelsIndex14:\
    \ Int = 0\n    var vowelsIndex15: Int = 0\n    var vowelsIndex16: Int = 0\n  \
    \  var vowelsIndex17: Int = 0\n    var vowelsIndex18: Int = 0\n    var vowelsIndex19:\
    \ Int = 0\n    var vowelsIndex20: Int = 0\n    var vowelsIndex21: Int = 0\n  \
    \  var vowelsIndex22: Int = 0\n    var vowelsIndex23: Int = 0\n    var vowelsIndex24:\
    \ Int = 0\n    var vowelsIndex25: Int = 0\n    var vowelsIndex26: Int = 0\n  \
    \  var vowelsIndex27: Int = 0\n    var vowelsIndex28: Int = 0\n    var vowelsIndex29:\
    \ Int = 0\n    var vowelsIndex30: Int = 0\n    var vowelsIndex31: Int = 0\n  \
    \  var vowelsIndex32: Int = 0\n    var vowelsIndex33: Int = 0\n    var vowelsIndex34:\
    \ Int = 0\n    var vowelsIndex35: Int = 0\n    var vowelsIndex36: Int = 0\n  \
    \  var vowelsIndex37: Int = 0\n    var vowelsIndex38: Int = 0\n    var vowelsIndex39:\
    \ Int = 0\n    var vowelsIndex40: Int = 0\n    var vowelsIndex41: Int = 0\n  \
    \  var vowelsIndex42: Int = 0\n    var vowelsIndex43: Int = 0\n    var vowelsIndex44:\
    \ Int = 0\n    var vowelsIndex45: Int = 0\n    var vowelsIndex46: Int = 0\n  \
    \  var vowelsIndex47: Int = 0\n    var vowelsIndex48: Int = 0\n    var vowelsIndex49:\
    \ Int = 0\n    var vowelsIndex50: Int = 0\n    var vowelsIndex51: Int = 0\n  \
    \  var vowelsIndex52: Int = 0\n    var vowelsIndex53: Int = 0\n    var vowelsIndex54:\
    \ Int = 0\n    var vowelsIndex55: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxqzm1g5p.swift:13:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpxqzm1g5p.swift:14:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpxqzm1g5p.swift:15:9: warning: variable 'vowelsIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelsIndex: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpxqzm1g5p.swift:16:9: warning: variable 'vowelsIndex2' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsIndex2:\
    \ Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpxqzm1g5p.swift:17:9: warning:\
    \ variable 'vowelsIndex3' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex3: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpxqzm1g5p.swift:18:9:\
    \ warning: variable 'vowelsIndex4' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex4: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmpxqzm1g5p.swift:19:9: warning: variable 'vowelsIndex5' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex5: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpxqzm1g5p.swift:20:9: warning:\
    \ variable 'vowelsIndex6' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex6: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpxqzm1g5p.swift:21:9:\
    \ warning: variable 'vowelsIndex7' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex7: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmpxqzm1g5p.swift:22:9: warning: variable 'vowelsIndex8' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex8: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpxqzm1g5p.swift:23:9: warning:\
    \ variable 'vowelsIndex9' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex9: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpxqzm1g5p.swift:24:9:\
    \ warning: var"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.sorted(),\n  \
    \      let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = vowels.count,\n        let vowelsCount = vowels.count,\n\
    \        let vowelsCount = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpaasngu5w.swift:76:26: error: expected expression after '=' in conditional\
    \ binding\n        let vowelsCount = \n                         ^\n/tmp/tmpaasngu5w.swift:76:26:\
    \ error: expected 'else' after 'guard' condition\n        let vowelsCount = \n\
    \                         ^\n/tmp/tmpaasngu5w.swift:13:24: error: cannot find\
    \ 'vowels' in scope\n    guard let vowels = vowels.characters.sorted(),\n    \
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelsCountFromRight = 0\n    var vowelsCountFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeft = 0\n    var vowelsCountFromLeftFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeft = 0\n    var vowelsCountFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRight = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeft = 0\n   \
    \ var vowelsCountFromLeftFromRightFromLeftFromRightFromLeft = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromLeft\
    \ = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromLeft =\
    \ 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromLeftFromRight\
    \ = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromLeft\
    \ = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRight\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRight\
    \ = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRight\
    \ = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpi5ulazro.swift:38:9: error: invalid redeclaration of 'vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft'\n\
    \    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n        ^\n/tmp/tmpi5ulazro.swift:36:9: note: 'vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft'\
    \ previously declared here\n    var vowelsCountFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\
    \ = 0\n        ^\n/tmp/tmpi5ulazro.swift:39:9: error: type annotation missing\
    \ in pattern\n    var vowelsCountFromRightFromLeftFromLeftFromRightFromLeftFromRightFromLeftFromRightFromLeft\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount > 0 {\n        let vowelIndex\
    \ = vowels.firstIndex(of: word.characters.last!)\n        let vowel = vowels[vowelIndex!]\n\
    \        return vowel\n    } else {\n        return \"\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpeyt40crm.swift:13:24: error: cannot find 'vowels' in scope\n  \
    \  guard let vowels = vowels.characters.map(String.init) else {\n            \
    \           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    \n    for char in word.unicodeScalars\
    \ {\n        if char.value > 0x41 && char.value < 0x5A {\n            vowels.append(char.value)\n\
    \        }\n    }\n    \n    if vowels.count > 0 {\n        return vowels.sorted().first!\n\
    \    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyh3paexs.swift:17:32: error: cannot convert value of type 'UInt32'\
    \ to expected argument type 'String'\n            vowels.append(char.value)\n\
    \                               ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [Character] = []\n    for letter in word.unicodeScalars\
    \ {\n        if letter.isUppercase {\n            vowels.append(letter)\n    \
    \    } else if letter.isLowercase {\n            vowels.append(letter)\n     \
    \   }\n    }\n    vowels.sortInPlace()\n    if vowels.first == vowels.last {\n\
    \        return \"\"\n    }\n    if vowels.first == vowels.last {\n        return\
    \ vowels.first\n    }\n    if vowels.first == vowels.last {\n        return vowels.last\n\
    \    }\n    if vowels.first == vowels.last {\n        return vowels.first\n  \
    \  }\n    if vowels.first == vowels.last {\n        return vowels.last\n    }\n\
    \    if vowels.first == vowels.last {\n        return vowels.first\n    }\n  \
    \  if vowels.first == vowels.last {\n        return vowels.last\n    }\n    if\
    \ vowels.first == vowels.last {\n        return vowels.first\n    }\n    if vowels.first\
    \ == vowels.last {\n        return vowels.last\n    }\n    if vowels.first ==\
    \ vowels.last {\n        return vowels.first\n    }\n    if vowels.first == vowels.last\
    \ {\n        return vowels.last\n    }\n    if vowels.first == vowels.last {\n\
    \        return vowels.first\n    }\n    if vowels.first == vowels.last {\n  \
    \      return vowels.last\n    }\n    if vowels.first == vowels.last {\n     \
    \   return vowels.first\n    }\n    if vowels.first == vowels.last {\n       \
    \ return vowels.last\n    }\n    if vowels.first == vowels.last {\n        return\
    \ vowels.first\n    }\n    if vowels.first == vowels.last {\n        return vowels.last\n\
    \    }\n    if vowels.first == vowels.last {\n        return vowels.first\n  \
    \  }\n    if vowels.first == vowels.last {\n        return vowels.last\n    }\n\
    \    if vowels.first == vowels.last {\n        return vowels.first\n    }\n  \
    \  if vowels.first == vowels.last {\n        return vowels.last\n    }\n    if\
    \ vowels.first == vowels.last {\n        return vowels.first\n    }\n    if vowels.first\
    \ == vowels.last {\n        return vowels.last\n    }\n    if vowels.first ==\
    \ vowels.last {\n        return vowels.first\n    }\n    if vowels.first == vowels.last\
    \ {\n        return vowels.last\n    }\n    if vowels.first == vowels.last {\n\
    \        return vowels.first\n    }\n    if vowels.first == vowels.last {\n  \
    \      return vowels.last\n    }\n    if \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9_vbvqtj.swift:103:7: error: expected expression, var, or let in\
    \ 'if' condition\n    if \n      ^\n/tmp/tmp9_vbvqtj.swift:15:19: error: value\
    \ of type 'Unicode.Scalar' has no member 'isUppercase'\n        if letter.isUppercase\
    \ {\n           ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9_vbvqtj.swift:16:20: error: no exact\
    \ matches in call to instance method 'append'\n            vowels.append(letter)\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Self.Element)\n          \
    \                          ^\n/tmp/tmp9_vbvqtj.swift:16:20: note: found candidate\
    \ with type '(__owned Unicode.Scalar) -> ()'\n            vowels.append(letter)\n\
    \                   ^\n/tmp/tmp9_vbvqtj.swift:17:26: error: value of type 'Unicode.Scalar'\
    \ has no member 'isLowercase'\n        } else if letter.isLowercase {\n      \
    \            ~~~~~~ ^~~~~~~~~~~\n/tmp/tmp9_vbvqtj.swift:18:20: error: no exact\
    \ matches in call to instance method 'append'\n            vowels.append(letter)\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Self.Element)\n          \
    \                          ^\n/tmp/tmp9_vbvqtj.swift:18:20: note: found candidate\
    \ with type '(__owned Unicode.Scalar) -> ()'\n            vowels.append(letter)\n\
    \                   ^\n/tmp/tmp9_vbvqtj.swift:21:12: error: value of type '[Character]'\
    \ has no member 'sortInPlace'"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex: Int\
    \ = 0\n    var vowelIndexEnd: Int = 0\n    var vowelIndexStart: Int = 0\n    var\
    \ vowelIndexStartEnd: Int = 0\n    var vowelIndexEndStart: Int = 0\n    var vowelIndexStartEndEnd:\
    \ Int = 0\n    var vowelIndexEndStartEnd: Int = 0\n    var vowelIndexStartEndStartEnd:\
    \ Int = 0\n    var vowelIndexStartEndStartEndEnd: Int = 0\n    var vowelIndexEndStartEndStartEnd:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEnd: Int = 0\n    var vowelIndexStartEndStartEndStartEndEnd:\
    \ Int = 0\n    var vowelIndexEndStartEndStartEndStartEndEnd: Int = 0\n    var\
    \ vowelIndexStartEndStartEndStartEndStartEndEnd: Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEnd:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStart: Int\
    \ = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartStartEndStart: Int\
    \ = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartStartEndStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartStartEndStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartStartEndStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartStartEndStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStartStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStartStartStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStartStartStartStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStartStartStartStartStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStartStartStartStartStartStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStartStartStartStartStartStartStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStartStartStartStartStartStartStartStartStartStartStartStart:\
    \ Int = 0\n    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStart\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplnuvt_gl.swift:42:9: error: type annotation missing in pattern\n\
    \    var vowelIndexStartEndStartEndStartEndStartEndStartEndStartEndStart\n   \
    \     ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var consonantIndex\
    \ = 0\n    var consonant = \"\"\n    for index in 0..<word.count {\n        if\
    \ word[index].isUppercase {\n            vowelIndex = index\n            break\n\
    \        }\n    }\n    for index in 0..<word.count {\n        if word[index].isLowercase\
    \ {\n            consonantIndex = index\n            break\n        }\n    }\n\
    \    if vowelIndex < consonantIndex {\n        vowel = word[vowelIndex]\n    }\
    \ else {\n        vowel = word[consonantIndex]\n    }\n    for index in (vowelIndex\
    \ + 1)..<word.count {\n        if word[index].isUppercase {\n            vowel\
    \ = word[index]\n            break\n        }\n    }\n    for index in (consonantIndex\
    \ + 1)..<word.count {\n        if word[index].isLowercase {\n            vowel\
    \ = word[index]\n            break\n        }\n    }\n    return vowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdfsg6spg.swift:18:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if word[index].isUppercase\
    \ {\n           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpdfsg6spg.swift:24:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if word[index].isLowercase {\n           ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdfsg6spg.swift:30:21:\
    \ error: cannot assign value of type 'Character' to type 'String'\n        vowel\
    \ = word[vowelIndex]\n                ~~~~^~~~~~~~~~~~\n/tmp/tmpdfsg6spg.swift:32:21:\
    \ error: cannot assign value of type 'Character' to type 'String'\n        vowel\
    \ = word[consonantIndex]\n                ~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpdfsg6spg.swift:35:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if word[index].isUppercase {\n        \
    \   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpdfsg6spg.swift:36:25: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            vowel = word[index]\n            \
    \        ~~~~^~~~~~~\n/tmp/tmpdfsg6spg.swift:41:12: error: 'subscript(_:)' is\
    \ unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if word[index].isLowercase {\n           ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdfsg6spg.swift:42:25:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  vowel = word[index]\n                    ~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for index\
    \ in word.characters.reverse() {\n        if index == \" \" {\n            vowelIndex\
    \ = 0\n            continue\n        }\n        if index == \"a\" || index ==\
    \ \"e\" || index == \"i\" || index == \"o\" || index == \"u\" {\n            vowelIndex\
    \ = word.characters.count - index\n            break\n        }\n    }\n    if\
    \ vowelIndex == 0 {\n        return \"\"\n    }\n    if vowelIndex < word.characters.count\
    \ {\n        vowel = word.characters[vowelIndex + 1]\n    }\n    return vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpps60gvdv.swift:15:34: error: value of type 'String' has no member\
    \ 'reverse'\n    for index in word.characters.reverse() {\n                 ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpps60gvdv.swift:28:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    if vowelIndex < word.characters.count {\n         \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpps60gvdv.swift:29:32: error: cannot assign value of type 'Character'\
    \ to type 'String'\n        vowel = word.characters[vowelIndex + 1]\n        \
    \        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount2: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount3: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount4: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount5: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount6: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount7: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCount8: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount9: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount10: [Int] = [0, 1, 2, 3, 4]\n   \
    \ var vowelsIndexCount11: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount12:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount13: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount14: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount15:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount16: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount17: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount18:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount19: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount20: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount21:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount22: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount23: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount24:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount25: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount26: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount27:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount28: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount29: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount30:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount31: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount32: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount33:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount34: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsIndexCount35: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount36:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndexCount37: [\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxrz390rs.swift:52:30: error: expected element type\n    var vowelsIndexCount37:\
    \ [\n                             ^\n                              <#type#>\n\
    /tmp/tmpxrz390rs.swift:52:30: error: expected ']' in array type\n    var vowelsIndexCount37:\
    \ [\n                             ^\n/tmp/tmpxrz390rs.swift:52:29: note: to match\
    \ this opening '['\n    var vowelsIndexCount37: [\n                          \
    \  ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelsCount = 0\n\
    \    var vowelIndex = 0\n    var vowelIndex2 = 0\n    var vowelIndex3 = 0\n  \
    \  var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var vowelIndex6 = 0\n   \
    \ var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9 = 0\n    var\
    \ vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12 = 0\n    var\
    \ vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15 = 0\n    var\
    \ vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18 = 0\n    var\
    \ vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21 = 0\n    var\
    \ vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24 = 0\n    var\
    \ vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27 = 0\n    var\
    \ vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30 = 0\n    var\
    \ vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33 = 0\n    var\
    \ vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36 = 0\n    var\
    \ vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39 = 0\n    var\
    \ vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42 = 0\n    var\
    \ vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45 = 0\n    var\
    \ vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48 = 0\n    var\
    \ vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51 = 0\n    var\
    \ vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54 = 0\n    var\
    \ vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57 = 0\n    var\
    \ vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60 = 0\n    var\
    \ vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63 = 0\n    var\
    \ vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66 = 0\n    var\
    \ vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69 = 0\n    var\
    \ vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72 = 0\n    var\
    \ vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75 = 0\n    var\
    \ vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78 = 0\n    var\
    \ vowelIndex79 = 0\n    var vowelIndex80 = 0\n    var vowelIndex81 = 0\n    var\
    \ vowelIndex82 = 0\n    var vowelIndex83 = 0\n    var vowelIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpcjdr4gqj.swift:98:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for char\
    \ in word.characters {\n        if char.unicodeScalars.count > 0 {\n         \
    \   if char.unicodeScalars.contains(.vowel) {\n                vowelIndex = word.characters.index(of:\
    \ char)\n                vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n                break\n            }\n        }\n    }\n\
    \    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpeloj32sb.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpeloj32sb.swift:17:46:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n            if char.unicodeScalars.contains(.vowel)\
    \ {\n                                            ~^~~~~\n/tmp/tmpeloj32sb.swift:18:46:\
    \ error: cannot assign value of type 'String.Index?' to type 'Int'\n         \
    \       vowelIndex = word.characters.index(of: char)\n                       \
    \      ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/tmp/tmpeloj32sb.swift:19:82: error: extraneous\
    \ argument label 'of:' in call\n                vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n                                                     \
    \                            ^~~~~\n                                         \
    \                                         \n/tmp/tmpeloj32sb.swift:19:48: error:\
    \ cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \                vowel = String(word.characters[vowelIndex..<word.characters.index(of:\
    \ char, offsetBy: 1)])\n                                               ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.count > 0 {\n            if char.unicodeScalars.last!.value\
    \ == 0xE001 {\n                vowels.append(char.unicodeScalars.last!.value)\n\
    \            }\n        }\n    }\n    if vowels.count > 0 {\n        return vowels.sorted().first!\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp80g3e_ad.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp80g3e_ad.swift:17:57:\
    \ error: cannot convert value of type 'UInt32' to expected argument type 'String'\n\
    \                vowels.append(char.unicodeScalars.last!.value)\n            \
    \                                            ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [Character] = []\n    for char in word.unicodeScalars\
    \ {\n        if char.value > 0x41 && char.value < 0x7A {\n            vowels.append(char)\n\
    \        }\n    }\n    vowels.reverse()\n    var result: String = \"\"\n    for\
    \ char in vowels {\n        if word.unicodeScalars.contains(char) {\n        \
    \    if word.unicodeScalars.index(char) == word.unicodeScalars.count - 1 {\n \
    \               result = char\n            } else {\n                result =\
    \ word.unicodeScalars[word.unicodeScalars.index(char) + 1]\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyqeqzm02.swift:16:20: error: no exact matches in call to instance\
    \ method 'append'\n            vowels.append(char)\n                   ^\nSwift.Array:6:37:\
    \ note: candidate expects value of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Element)\n \
    \                                   ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpyqeqzm02.swift:16:20: note: found\
    \ candidate with type '(__owned Unicode.Scalar) -> ()'\n            vowels.append(char)\n\
    \                   ^\n/tmp/tmpyqeqzm02.swift:22:41: error: cannot convert value\
    \ of type 'Character' to expected argument type 'Unicode.Scalar'\n        if word.unicodeScalars.contains(char)\
    \ {\n                                        ^\n/tmp/tmpyqeqzm02.swift:23:36:\
    \ error: no exact matches in call to instance method 'index'\n            if word.unicodeScalars.index(char)\
    \ == word.unicodeScalars.count - 1 {\n                                   ^\n/tmp/tmpyqeqzm02.swift:23:36:\
    \ note: found candidate with type '(String.UnicodeScalarView.Index) -> String.UnicodeScalarView.Index'\
    \ (aka '(String.Index) -> String.Index')\n            if word.unicodeScalars.index(char)\
    \ == word.unicodeScalars.count - 1 {\n                                   ^\n/tmp/tmpyqeqzm02.swift:23:36:\
    \ note: found candidate with type '(String.UnicodeScalarView.Index) -> String.UnicodeScalarView.Index'\
    \ (aka '(String.Index) -> String.Index')\n            if word.unicodeScalars.index(char)\
    \ == word.unicodeScalars.count - 1 {\n                                   ^\n/tmp/tmpyqeqzm02.swift:23:48:\
    \ error: referencing operator function '==' on 'BinaryInteger' requires that 'String.UnicodeScalarView.Index'\
    \ (aka 'String.Index') conform to 'BinaryInteger'\n            if word.unicodeScalars.index(char)\
    \ == word.unicodeScalars.count - 1 {\n                          "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcorergr.swift:107:54: error: expected member name following '.'\n\
    \    let vowelsCount = word.characters.filter({ vowels.\n                    \
    \                                 ^\n/tmp/tmpwcorergr.swift:111:1: error: expected\
    \ ')' in expression list\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n^\n/tmp/tmpwcorergr.swift:107:45: note: to match this opening '('\n\
    \    let vowelsCount = word.characters.filter({ vowels.\n                    \
    \                        ^\n/tmp/tmpwcorergr.swift:135:48: error: expected '}'\
    \ at end of brace statement\nassert(get_closest_vowel(word: \"Above\") == \"o\"\
    )\n                                               ^\n/tmp/tmpwcorergr.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpwcorergr.swift:13:24:\
    \ error: cannot find 'vowels' in scope\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n                       ^~~~~~\n/tmp/tmpwcorergr.swift:111:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelsCount = 1\n    var vowelsCount2 = 1\n  \
    \  var vowelsCount3 = 1\n    var vowelsCount4 = 1\n    var vowelsCount5 = 1\n\
    \    var vowelsCount6 = 1\n    var vowelsCount7 = 1\n    var vowelsCount8 = 1\n\
    \    var vowelsCount9 = 1\n    var vowelsCount10 = 1\n    var vowelsCount11 =\
    \ 1\n    var vowelsCount12 = 1\n    var vowelsCount13 = 1\n    var vowelsCount14\
    \ = 1\n    var vowelsCount15 = 1\n    var vowelsCount16 = 1\n    var vowelsCount17\
    \ = 1\n    var vowelsCount18 = 1\n    var vowelsCount19 = 1\n    var vowelsCount20\
    \ = 1\n    var vowelsCount21 = 1\n    var vowelsCount22 = 1\n    var vowelsCount23\
    \ = 1\n    var vowelsCount24 = 1\n    var vowelsCount25 = 1\n    var vowelsCount26\
    \ = 1\n    var vowelsCount27 = 1\n    var vowelsCount28 = 1\n    var vowelsCount29\
    \ = 1\n    var vowelsCount30 = 1\n    var vowelsCount31 = 1\n    var vowelsCount32\
    \ = 1\n    var vowelsCount33 = 1\n    var vowelsCount34 = 1\n    var vowelsCount35\
    \ = 1\n    var vowelsCount36 = 1\n    var vowelsCount37 = 1\n    var vowelsCount38\
    \ = 1\n    var vowelsCount39 = 1\n    var vowelsCount40 = 1\n    var vowelsCount41\
    \ = 1\n    var vowelsCount42 = 1\n    var vowelsCount43 = 1\n    var vowelsCount44\
    \ = 1\n    var vowelsCount45 = 1\n    var vowelsCount46 = 1\n    var vowelsCount47\
    \ = 1\n    var vowelsCount48 = 1\n    var vowelsCount49 = 1\n    var vowelsCount50\
    \ = 1\n    var vowelsCount51 = 1\n    var vowelsCount52 = 1\n    var vowelsCount53\
    \ = 1\n    var vowelsCount54 = 1\n    var vowelsCount55 = 1\n    var vowelsCount56\
    \ = 1\n    var vowelsCount57 = 1\n    var vowelsCount58 = 1\n    var vowelsCount59\
    \ = 1\n    var vowelsCount60 = 1\n    var vowelsCount61 = 1\n    var vowelsCount62\
    \ = 1\n    var vowelsCount63 = 1\n    var vowelsCount64 = 1\n    var vowelsCount65\
    \ = 1\n    var vowelsCount66 = 1\n    var vowelsCount67 = 1\n    var vowelsCount68\
    \ = 1\n    var vowelsCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpsbum_3bu.swift:83:9: error: type annotation missing in pattern\n\
    \    var vowelsCount\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var vowelsCount: [Int] = [0]\n    \n    for char in word\
    \ {\n        if vowels.contains(char) {\n            vowelsCount[0]++\n      \
    \  }\n    }\n    \n    for char in word {\n        if vowels.contains(char) {\n\
    \            vowelsCount[1]++\n        }\n    }\n    \n    if vowelsCount[0] >\
    \ vowelsCount[1] {\n        return \"\"\n    }\n    \n    var closestVowel = \"\
    \"\n    var closestDistance = vowelsCount[0]\n    \n    for char in word {\n \
    \       if vowels.contains(char) {\n            let distance = vowelsCount[0]\
    \ - vowelsCount[1]\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = char\n       \
    \     }\n        }\n    }\n    \n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpb_tibqdr.swift:18:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(char) {\n   \
    \                        ^\n/tmp/tmpb_tibqdr.swift:19:27: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            vowelsCount[0]++\n        \
    \                  ^~\n/tmp/tmpb_tibqdr.swift:24:28: error: cannot convert value\
    \ of type 'Character' to expected argument type 'String'\n        if vowels.contains(char)\
    \ {\n                           ^\n/tmp/tmpb_tibqdr.swift:25:27: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            vowelsCount[1]++\n\
    \                          ^~\n/tmp/tmpb_tibqdr.swift:37:28: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        if vowels.contains(char)\
    \ {\n                           ^\n/tmp/tmpb_tibqdr.swift:41:32: error: cannot\
    \ assign value of type 'Character' to type 'String'\n                closestVowel\
    \ = char\n                               ^~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelIndex = 0\n    var vowelIndex2\
    \ = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 =\
    \ 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n\
    \    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n\
    \    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    \    var vowelIndex81 = 0\n    var vowelIndex82 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzn9bx1wh.swift:13:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpzn9bx1wh.swift:14:9:\
    \ warning: initialization of variable 'vowelsCount' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsCount = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzn9bx1wh.swift:15:9: warning: initialization of variable 'vowelIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpzn9bx1wh.swift:16:9:\
    \ warning: initialization of variable 'vowelIndex2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzn9bx1wh.swift:17:9: warning: initialization of variable 'vowelIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzn9bx1wh.swift:18:9:\
    \ warning: initialization of variable 'vowelIndex4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzn9bx1wh.swift:19:9: warning: initialization of variable 'vowelIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzn9bx1wh.swift:20:9:\
    \ warning: initialization of variable 'vowelIndex6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzn9bx1wh.swift:21:9: warning: initialization of variable 'vowelIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzn9bx1wh.swift:22:9:\
    \ warning: initialization of variable 'vowelIndex8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzn9bx1wh.swift:23:9: warning: in"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels = Set<Character>()\n    vowels.insert(\"\
    a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"i\")\n    vowels.insert(\"\
    o\")\n    vowels.insert(\"u\")\n    \n    var vowelsCount = vowels.count\n   \
    \ \n    var vowelsIndex = 0\n    \n    var lastConsonantIndex = word.characters.count\
    \ - 1\n    \n    var lastConsonantChar = word.characters[lastConsonantIndex]\n\
    \    \n    var lastConsonantCharIndex = word.characters.index(lastConsonantChar)\n\
    \    \n    while vowelsIndex < vowelsCount {\n        \n        var currentCharIndex\
    \ = word.characters.index(lastConsonantChar, vowelsIndex + 1)\n        \n    \
    \    if currentCharIndex == lastConsonantCharIndex {\n            \n         \
    \   var currentChar = lastConsonantChar\n            \n            if currentCharIndex\
    \ == 0 {\n                \n                currentChar = word.characters[0]\n\
    \                \n            }\n            \n            if currentCharIndex\
    \ == word.characters.count - 1 {\n                \n                currentChar\
    \ = word.characters[word.characters.count - 1]\n                \n           \
    \ }\n            \n            if vowels.contains(currentChar) {\n           \
    \     \n                return currentChar\n                \n            }\n\
    \            \n        }\n        \n        vowelsIndex += 1\n        \n    }\n\
    \    \n    return \"\"\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2xex_46y.swift:25:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var lastConsonantIndex = word.characters.count - 1\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2xex_46y.swift:27:29: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var lastConsonantChar\
    \ = word.characters[lastConsonantIndex]\n                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xex_46y.swift:27:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    var lastConsonantChar\
    \ = word.characters[lastConsonantIndex]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2xex_46y.swift:29:56:\
    \ error: missing argument label 'of:' in call\n    var lastConsonantCharIndex\
    \ = word.characters.index(lastConsonantChar)\n                               \
    \                        ^\n                                                 \
    \      of: \n/tmp/tmp2xex_46y.swift:33:48: error: no exact matches in call to\
    \ instance method 'index'\n        var currentCharIndex = word.characters.index(lastConsonantChar,\
    \ vowelsIndex + 1)\n                                               ^\n/tmp/tmp2xex_46y.swift:33:48:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        var currentCharIndex = word.characters.index(lastConsonantChar,\
    \ vowelsIndex + 1)\n                                               ^\n/tmp/tmp2xex_46y.swift:33:48:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        var currentCharIndex = word.characters.index(lastConsonantChar,\
    \ vowelsIndex + 1)\n                                         "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex = 0\n\
    \    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEndStart\
    \ = 0\n    var vowelIndexStartEnd = 0\n    var vowelIndexStartEndEnd = 0\n   \
    \ var vowelIndexStartEndStart = 0\n    var vowelIndexStartEndEndStart = 0\n  \
    \  var vowelIndexStartEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart = 0\n    var\
    \ vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndStart = 0\n   \
    \ var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n    var\
    \ vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n    var\
    \ vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n    var\
    \ vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndStart = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n    var vowelIndexStartEndEndEnd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwxfk4gpt.swift:29:9: error: invalid redeclaration of 'vowelIndexStartEndEndEndEndEndEndEndEndEndStart'\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndStart = 0\n        ^\n/tmp/tmpwxfk4gpt.swift:28:9:\
    \ note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndStart' previously declared\
    \ here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndStart = 0\n        ^\n\
    /tmp/tmpwxfk4gpt.swift:31:9: error: invalid redeclaration of 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart'\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart = 0\n        ^\n/tmp/tmpwxfk4gpt.swift:30:9:\
    \ note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart' previously declared\
    \ here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart = 0\n     \
    \   ^\n/tmp/tmpwxfk4gpt.swift:32:9: error: invalid redeclaration of 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart'\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart = 0\n        ^\n/tmp/tmpwxfk4gpt.swift:30:9:\
    \ note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart' previously declared\
    \ here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndStart = 0\n     \
    \   ^\n/tmp/tmpwxfk4gpt.swift:34:9: error: invalid redeclaration of 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndStart'\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndStart = 0\n        ^\n\
    /tmp/tmpwxfk4gpt.swift:33:9: note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndStart'\
    \ previously declared here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n        ^\n/tmp/tmpwxfk4gpt.swift:36:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart'\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n        ^\n/tmp/tmpwxfk4gpt.swift:35:9: note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart'\
    \ previously declared here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart\
    \ = 0\n        ^\n/tmp/tmpwxfk4gpt.swift:37:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndStart'\n    var vowelIndexStartEndEndEndEndEndE"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex2: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex3: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex4:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex5: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex6: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex7:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex8: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex9: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex10:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex11: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex12: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex13:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex14: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex15: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex16:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex17: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex18: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex19:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex20: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex21: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex22:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex23: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex24: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex25:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex26: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex27: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex28:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex29: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex30: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex31:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex32: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex33: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex34:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex35: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex36: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex37:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvvz9rul4.swift:52:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    for char in word {\n        if vowels.contains(char)\
    \ {\n            vowelsCount[vowels.indexOf(char)]++\n        }\n    }\n    if\
    \ vowelsCount.contains(0) {\n        return \"\"\n    }\n    var minVowel = vowels.first!\n\
    \    var minVowelCount = 0\n    for char in vowels {\n        if vowelsCount[vowels.indexOf(char)]\
    \ == minVowelCount {\n            minVowel = char\n            minVowelCount =\
    \ vowelsCount[vowels.indexOf(char)]\n        }\n    }\n    return minVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf0fhehri.swift:16:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(char) {\n   \
    \                        ^\n/tmp/tmpf0fhehri.swift:17:46: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            vowelsCount[vowels.indexOf(char)]++\n\
    \                                             ^~\n/tmp/tmpf0fhehri.swift:17:32:\
    \ error: value of type '[String]' has no member 'indexOf'\n            vowelsCount[vowels.indexOf(char)]++\n\
    \                        ~~~~~~ ^~~~~~~\n/tmp/tmpf0fhehri.swift:26:31: error:\
    \ value of type '[String]' has no member 'indexOf'\n        if vowelsCount[vowels.indexOf(char)]\
    \ == minVowelCount {\n                       ~~~~~~ ^~~~~~~\n/tmp/tmpf0fhehri.swift:28:48:\
    \ error: value of type '[String]' has no member 'indexOf'\n            minVowelCount\
    \ = vowelsCount[vowels.indexOf(char)]\n                                      \
    \  ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelFound = false\n    var closestVowel = \"\"\n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelFound = true\n     \
    \       vowelIndex = word.characters.index(of: char)!\n        }\n    }\n    if\
    \ vowelFound {\n        for char in word.characters {\n            if vowels.contains(char)\
    \ {\n                if char == word.characters.last! {\n                    closestVowel\
    \ = vowels[vowelIndex - 1]\n                } else {\n                    closestVowel\
    \ = vowels[vowelIndex + 1]\n                }\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpya2cc2_e.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpya2cc2_e.swift:20:57:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \  vowelIndex = word.characters.index(of: char)!\n                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    /tmp/tmpya2cc2_e.swift:24:26: error: 'characters' is unavailable: Please use String\
    \ directly\n        for char in word.characters {\n                         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpya2cc2_e.swift:26:33:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     if char == word.characters.last! {\n                                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpya2cc2_e.swift:27:42:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \          closestVowel = vowels[vowelIndex - 1]\n                           \
    \        ~~~~~~^~~~~~~~~~~~~~~~\n/tmp/tmpya2cc2_e.swift:29:42: error: cannot assign\
    \ value of type 'Character' to type 'String'\n                    closestVowel\
    \ = vowels[vowelIndex + 1]\n                                   ~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsIndex:\
    \ Int = 0\n    var vowelsCountIndex: Int = 0\n    var vowelsCountIndex2: Int =\
    \ 0\n    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4: Int = 0\n\
    \    var vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int = 0\n    var\
    \ vowelsCountIndex7: Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9:\
    \ Int = 0\n    var vowelsCountIndex10: Int = 0\n    var vowelsCountIndex11: Int\
    \ = 0\n    var vowelsCountIndex12: Int = 0\n    var vowelsCountIndex13: Int =\
    \ 0\n    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15: Int = 0\n\
    \    var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int = 0\n  \
    \  var vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int = 0\n    var\
    \ vowelsCountIndex20: Int = 0\n    var vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22:\
    \ Int = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelsCountIndex24: Int\
    \ = 0\n    var vowelsCountIndex25: Int = 0\n    var vowelsCountIndex26: Int =\
    \ 0\n    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28: Int = 0\n\
    \    var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int = 0\n  \
    \  var vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int = 0\n    var\
    \ vowelsCountIndex33: Int = 0\n    var vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35:\
    \ Int = 0\n    var vowelsCountIndex36: Int = 0\n    var vowelsCountIndex37: Int\
    \ = 0\n    var vowelsCountIndex38: Int = 0\n    var vowelsCountIndex39: Int =\
    \ 0\n    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41: Int = 0\n\
    \    var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int = 0\n  \
    \  var vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int = 0\n    var\
    \ vowelsCountIndex46: Int = 0\n    var vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48:\
    \ Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzw4wqm0p.swift:13:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpzw4wqm0p.swift:14:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpzw4wqm0p.swift:15:9: warning: variable 'vowelIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex: Int = 0\n        ^~~~~~~~~~\n\
    \        _\n/tmp/tmpzw4wqm0p.swift:16:9: warning: variable 'vowelsIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpzw4wqm0p.swift:17:9: warning: variable\
    \ 'vowelsCountIndex' was never used; consider replacing with '_' or removing it\n\
    \    var vowelsCountIndex: Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmpzw4wqm0p.swift:18:9:\
    \ warning: variable 'vowelsCountIndex2' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex2: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpzw4wqm0p.swift:19:9: warning: variable 'vowelsCountIndex3'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpzw4wqm0p.swift:20:9:\
    \ warning: variable 'vowelsCountIndex4' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex4: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpzw4wqm0p.swift:21:9: warning: variable 'vowelsCountIndex5'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpzw4wqm0p.swift:22:9:\
    \ warning: variable 'vowelsCountIndex6' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex6: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpzw4wqm0p.swift:23:9: warning: variable 'vowelsCountIndex7'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCo"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelIndex = 0\n    var vowelCount = 0\n    var\
    \ vowelString = \"\"\n    for letter in word {\n        if vowelIndex == 0 {\n\
    \            if letter == \"a\" || letter == \"e\" || letter == \"i\" || letter\
    \ == \"o\" || letter == \"u\" {\n                vowelIndex++\n              \
    \  vowelCount++\n            }\n        } else {\n            if letter == word[vowelIndex]\
    \ {\n                vowelIndex++\n                vowelCount++\n            }\
    \ else {\n                if vowelCount > 0 {\n                    vowelString\
    \ = vowels[vowelIndex - vowelCount]\n                    vowelCount = 0\n    \
    \            }\n                vowelIndex = 0\n                vowelCount = 0\n\
    \            }\n        }\n    }\n    if vowelCount > 0 {\n        vowelString\
    \ = vowels[vowelIndex - vowelCount]\n    }\n    return vowelString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppl91k2hq.swift:21:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                vowelIndex++\n                       \
    \   ^~\n/tmp/tmppl91k2hq.swift:22:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                vowelCount++\n                       \
    \   ^~\n/tmp/tmppl91k2hq.swift:25:26: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if letter\
    \ == word[vowelIndex] {\n                         ^~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppl91k2hq.swift:26:27:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      vowelIndex++\n                          ^~\n/tmp/tmppl91k2hq.swift:27:27:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      vowelCount++\n                          ^~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  if vowelsCount == 0 {\n        return \"\"\n    }\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndex2 = vowelsCount - 1\n    \n    var vowelIndex3 = vowelsCount\
    \ - 2\n    \n    var vowelIndex4 = vowelsCount - 3\n    \n    var vowelIndex5\
    \ = vowelsCount - 4\n    \n    var vowelIndex6 = vowelsCount - 5\n    \n    var\
    \ vowelIndex7 = vowelsCount - 6\n    \n    var vowelIndex8 = vowelsCount - 7\n\
    \    \n    var vowelIndex9 = vowelsCount - 8\n    \n    var vowelIndex10 = vowelsCount\
    \ - 9\n    \n    var vowelIndex11 = vowelsCount - 10\n    \n    var vowelIndex12\
    \ = vowelsCount - 11\n    \n    var vowelIndex13 = vowelsCount - 12\n    \n  \
    \  var vowelIndex14 = vowelsCount - 13\n    \n    var vowelIndex15 = vowelsCount\
    \ - 14\n    \n    var vowelIndex16 = vowelsCount - 15\n    \n    var vowelIndex17\
    \ = vowelsCount - 16\n    \n    var vowelIndex18 = vowelsCount - 17\n    \n  \
    \  var vowelIndex19 = vowelsCount - 18\n    \n    var vowelIndex20 = vowelsCount\
    \ - 19\n    \n    var vowelIndex21 = vowelsCount - 20\n    \n    var vowelIndex22\
    \ = vowelsCount - 21\n    \n    var vowelIndex23 = vowelsCount - 22\n    \n  \
    \  var vowelIndex24 = vowelsCount - 23\n    \n    var vowelIndex25 = vowelsCount\
    \ - 24\n    \n    var vowelIndex26 = vowelsCount - 25\n    \n    var vowelIndex27\
    \ = vowelsCount - 26\n    \n    var vowelIndex28 = vowelsCount - 27\n    \n  \
    \  var vowelIndex29 = vowelsCount - 28\n    \n    var vowelIndex30 = vowelsCount\
    \ - 29\n    \n    var vowelIndex31 = vowelsCount - 30\n    \n    var vowelIndex32\
    \ = vowelsCount - 31\n    \n    var vowelIndex33 = vowelsCount - 32\n    \n  \
    \  var vowelIndex34 = vowelsCount - 33\n    \n    var vowelIndex35 = vowelsCount\
    \ - 34\n    \n    var vowelIndex36 = vowelsCount - 35\n    \n    var vowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnblopx64.swift:97:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    guard let vowelsCount = vowels.count\
    \ else {\n        return \"\"\n    }\n    guard let vowelsCount2 = vowels.count\
    \ - 1 else { return \"\" }\n    guard let vowelsCount3 = vowels.count - 2 else\
    \ { return \"\" }\n    guard let vowelsCount4 = vowels.count - 3 else { return\
    \ \"\" }\n    guard let vowelsCount5 = vowels.count - 4 else { return \"\" }\n\
    \    guard let vowelsCount6 = vowels.count - 5 else { return \"\" }\n    guard\
    \ let vowelsCount7 = vowels.count - 6 else { return \"\" }\n    guard let vowelsCount8\
    \ = vowels.count - 7 else { return \"\" }\n    guard let vowelsCount9 = vowels.count\
    \ - 8 else { return \"\" }\n    guard let vowelsCount10 = vowels.count - 9 else\
    \ { return \"\" }\n    guard let vowelsCount11 = vowels.count - 10 else { return\
    \ \"\" }\n    guard let vowelsCount12 = vowels.count - 11 else { return \"\" }\n\
    \    guard let vowelsCount13 = vowels.count - 12 else { return \"\" }\n    guard\
    \ let vowelsCount14 = vowels.count - 13 else { return \"\" }\n    guard let vowelsCount15\
    \ = vowels.count - 14 else { return \"\" }\n    guard let vowelsCount16 = vowels.count\
    \ - 15 else { return \"\" }\n    guard let vowelsCount17 = vowels.count - 16 else\
    \ { return \"\" }\n    guard let vowelsCount18 = vowels.count - 17 else { return\
    \ \"\" }\n    guard let vowelsCount19 = vowels.count - 18 else { return \"\" }\n\
    \    guard let vowelsCount20 = vowels.count - 19 else { return \"\" }\n    guard\
    \ let vowelsCount21 = vowels.count - 20 else { return \"\" }\n    guard let vowelsCount22\
    \ = vowels.count - 21 else { return \"\" }\n    guard let vowelsCount23 = vowels.count\
    \ - 22 else { return \"\" }\n    guard let vowelsCount24 = vowels.count - 23 else\
    \ { return \"\" }\n    guard let vowelsCount25 = vowels.count - 24 else { return\
    \ \"\" }\n    guard let vowelsCount26 = vowels.count - 25 else { return \"\" }\n\
    \    guard let vowelsCount27 = vowels.count - \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxkzd6wgd.swift:45:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpxkzd6wgd.swift:44:45: error: expected 'else' after 'guard' condition\n\
    \    guard let vowelsCount27 = vowels.count - \n                             \
    \               ^\n/tmp/tmpxkzd6wgd.swift:13:24: error: cannot find 'vowels' in\
    \ scope\n    guard let vowels = vowels.characters.map(String.init) else {\n  \
    \                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelsCount = 0\n\
    \    var vowelsIndex = 0\n    var vowelsIndex2 = 0\n    var vowelsIndex3 = 0\n\
    \    var vowelsIndex4 = 0\n    var vowelsIndex5 = 0\n    var vowelsIndex6 = 0\n\
    \    var vowelsIndex7 = 0\n    var vowelsIndex8 = 0\n    var vowelsIndex9 = 0\n\
    \    var vowelsIndex10 = 0\n    var vowelsIndex11 = 0\n    var vowelsIndex12 =\
    \ 0\n    var vowelsIndex13 = 0\n    var vowelsIndex14 = 0\n    var vowelsIndex15\
    \ = 0\n    var vowelsIndex16 = 0\n    var vowelsIndex17 = 0\n    var vowelsIndex18\
    \ = 0\n    var vowelsIndex19 = 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21\
    \ = 0\n    var vowelsIndex22 = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24\
    \ = 0\n    var vowelsIndex25 = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27\
    \ = 0\n    var vowelsIndex28 = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30\
    \ = 0\n    var vowelsIndex31 = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33\
    \ = 0\n    var vowelsIndex34 = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36\
    \ = 0\n    var vowelsIndex37 = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39\
    \ = 0\n    var vowelsIndex40 = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42\
    \ = 0\n    var vowelsIndex43 = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45\
    \ = 0\n    var vowelsIndex46 = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48\
    \ = 0\n    var vowelsIndex49 = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51\
    \ = 0\n    var vowelsIndex52 = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54\
    \ = 0\n    var vowelsIndex55 = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57\
    \ = 0\n    var vowelsIndex58 = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60\
    \ = 0\n    var vowelsIndex61 = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63\
    \ = 0\n    var vowelsIndex64 = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66\
    \ = 0\n    var vowelsIndex67 = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69\
    \ = 0\n    var vowelsIndex70 = 0\n    var vowelsIndex71 = 0\n    var vowelsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpekn0922w.swift:86:9: error: type annotation missing in pattern\n\
    \    var vowelsIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = Set<Character>()\n    vowels.insert(\"\
    a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"i\")\n    vowels.insert(\"\
    o\")\n    vowels.insert(\"u\")\n    vowels.insert(\"A\")\n    vowels.insert(\"\
    E\")\n    vowels.insert(\"I\")\n    vowels.insert(\"O\")\n    vowels.insert(\"\
    U\")\n    \n    var vowelsCount = vowels.count\n    \n    var vowelsIndex = 0\n\
    \    var vowelsCountIndex = 0\n    \n    var vowelsIndex2 = 0\n    var vowelsCountIndex2\
    \ = 0\n    \n    var vowelsIndex3 = 0\n    var vowelsCountIndex3 = 0\n    \n \
    \   var vowelsIndex4 = 0\n    var vowelsCountIndex4 = 0\n    \n    var vowelsIndex5\
    \ = 0\n    var vowelsCountIndex5 = 0\n    \n    var vowelsIndex6 = 0\n    var\
    \ vowelsCountIndex6 = 0\n    \n    var vowelsIndex7 = 0\n    var vowelsCountIndex7\
    \ = 0\n    \n    var vowelsIndex8 = 0\n    var vowelsCountIndex8 = 0\n    \n \
    \   var vowelsIndex9 = 0\n    var vowelsCountIndex9 = 0\n    \n    var vowelsIndex10\
    \ = 0\n    var vowelsCountIndex10 = 0\n    \n    var vowelsIndex11 = 0\n    var\
    \ vowelsCountIndex11 = 0\n    \n    var vowelsIndex12 = 0\n    var vowelsCountIndex12\
    \ = 0\n    \n    var vowelsIndex13 = 0\n    var vowelsCountIndex13 = 0\n    \n\
    \    var vowelsIndex14 = 0\n    var vowelsCountIndex14 = 0\n    \n    var vowelsIndex15\
    \ = 0\n    var vowelsCountIndex15 = 0\n    \n    var vowelsIndex16 = 0\n    var\
    \ vowelsCountIndex16 = 0\n    \n    var vowelsIndex17 = 0\n    var vowelsCountIndex17\
    \ = 0\n    \n    var vowelsIndex18 = 0\n    var vowelsCountIndex18 = 0\n    \n\
    \    var vowelsIndex19 = 0\n    var vowelsCountIndex19 = 0\n    \n    var vowelsIndex20\
    \ = 0\n    var vowelsCountIndex20 = 0\n    \n    var vowelsIndex21 = 0\n    var\
    \ vowelsCountIndex21 = 0\n    \n    var vowelsIndex22 = 0\n    var vowelsCountIndex22\
    \ = 0\n    \n    var vowelsIndex23 = 0\n    var vowelsCountIndex23 = 0\n    \n\
    \    var vowelsIndex24 = 0\n    var vowelsCountIndex24 = 0\n    \n    var vowelsIndex25\
    \ = 0\n    var vowelsCountIndex25 = 0\n    \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpbzcwzer3.swift:25:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpbzcwzer3.swift:27:9:\
    \ warning: initialization of variable 'vowelsIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpbzcwzer3.swift:28:9: warning: initialization of variable 'vowelsCountIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCountIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbzcwzer3.swift:30:9:\
    \ warning: initialization of variable 'vowelsIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex2 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpbzcwzer3.swift:31:9: warning: initialization\
    \ of variable 'vowelsCountIndex2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsCountIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpbzcwzer3.swift:33:9: warning: initialization of variable 'vowelsIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex3 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpbzcwzer3.swift:34:9:\
    \ warning: initialization of variable 'vowelsCountIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsCountIndex3 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbzcwzer3.swift:36:9: warning: initialization\
    \ of variable 'vowelsIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpbzcwzer3.swift:37:9: warning: initialization of variable 'vowelsCountIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCountIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpbzcwzer3.swift:39:9:\
    \ warning: initialization of variable 'vowelsIndex5' was never used; consider\
    \ replacing with assignment to '_' or "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex = 0\n\
    \    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEndStart\
    \ = 0\n    var vowelIndexStartEnd = 0\n    var vowelIndexStartEndStart = 0\n \
    \   var vowelIndexStartEndStartEnd = 0\n    var vowelIndexStartEndStartEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEnd = 0\n    var vowelIndexStartEndStartEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEnd = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEnd = 0\n    var\
    \ vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEnd\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpde0c676l.swift:38:9: error: invalid redeclaration of 'vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\n\
    \    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpde0c676l.swift:37:9: note: 'vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpde0c676l.swift:40:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\n\
    \    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpde0c676l.swift:39:9: note: 'vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpde0c676l.swift:41:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\n\
    \    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpde0c676l.swift:39:9: note: 'vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpde0c676l.swift:43:9: error: type annotation missing\
    \ in pattern\n    var vowelIndexStartEndStartEndEndEndEndEndEndEndEndEndEndEnd\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word.characters\
    \ {\n        if letter.isUppercase {\n            vowels.append(letter)\n    \
    \    } else if letter.isLowercase {\n            vowels.append(letter)\n     \
    \   } else {\n            vowels.append(letter)\n        }\n    }\n    var vowelIndex\
    \ = 0\n    var vowelIndexEnd = vowels.count - 1\n    var vowelIndexStart = vowels.count\
    \ - 1\n    var vowelIndexMiddle = vowels.count - 1\n    var vowelIndexMiddle2\
    \ = vowels.count - 1\n    var vowelIndexMiddle3 = vowels.count - 1\n    var vowelIndexMiddle4\
    \ = vowels.count - 1\n    var vowelIndexMiddle5 = vowels.count - 1\n    var vowelIndexMiddle6\
    \ = vowels.count - 1\n    var vowelIndexMiddle7 = vowels.count - 1\n    var vowelIndexMiddle8\
    \ = vowels.count - 1\n    var vowelIndexMiddle9 = vowels.count - 1\n    var vowelIndexMiddle10\
    \ = vowels.count - 1\n    var vowelIndexMiddle11 = vowels.count - 1\n    var vowelIndexMiddle12\
    \ = vowels.count - 1\n    var vowelIndexMiddle13 = vowels.count - 1\n    var vowelIndexMiddle14\
    \ = vowels.count - 1\n    var vowelIndexMiddle15 = vowels.count - 1\n    var vowelIndexMiddle16\
    \ = vowels.count - 1\n    var vowelIndexMiddle17 = vowels.count - 1\n    var vowelIndexMiddle18\
    \ = vowels.count - 1\n    var vowelIndexMiddle19 = vowels.count - 1\n    var vowelIndexMiddle20\
    \ = vowels.count - 1\n    var vowelIndexMiddle21 = vowels.count - 1\n    var vowelIndexMiddle22\
    \ = vowels.count - 1\n    var vowelIndexMiddle23 = vowels.count - 1\n    var vowelIndexMiddle24\
    \ = vowels.count - 1\n    var vowelIndexMiddle25 = vowels.count - 1\n    var vowelIndexMiddle26\
    \ = vowels.count - 1\n    var vowelIndexMiddle27 = vowels.count - 1\n    var vowelIndexMiddle28\
    \ = vowels.count - 1\n    var vowelIndexMiddle29 = vowels.count - 1\n    var vowelIndexMiddle30\
    \ = vowels.count - 1\n    var vowelIndexMiddle31 = vowels.count - 1\n    var vowelIndexMiddle32\
    \ = vowels.count - 1\n    var vowelIndexMiddle33 = vowels.count - 1\n    var vowelIndexMiddle34\
    \ = vowels.count - 1\n    var vowelIndexMiddle35 = vowels.count - 1\n    var vowelIndexMiddle36\
    \ = vowels.count - 1\n    var vowelIndexMiddle37 = vowels.count - 1\n    var vowelIndexMiddle38\
    \ = vowels.count - 1\n    var vowelIndexMiddle39 = vowels.count - 1\n    var vowelIndexMiddle40\
    \ = vowels.count - 1\n    var vowelIndexMiddle41 = vowels.\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1h2obxd_.swift:66:36: error: expected member name following '.'\n\
    \    var vowelIndexMiddle41 = vowels.\n                                   ^\n\
    /tmp/tmp1h2obxd_.swift:14:24: error: 'characters' is unavailable: Please use String\
    \ directly\n    for letter in word.characters {\n                       ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1h2obxd_.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n/tmp/tmp1h2obxd_.swift:18:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n/tmp/tmp1h2obxd_.swift:20:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmph_zt5fys.swift:13:24: error: use of local variable 'vowels' before\
    \ its declaration\n    guard let vowels = vowels.characters.map(String.init) else\
    \ {\n                       ^\n/tmp/tmph_zt5fys.swift:101:9: note: 'vowels' declared\
    \ here\n    let vowels\n        ^\n/tmp/tmph_zt5fys.swift:101:9: error: type annotation\
    \ missing in pattern\n    let vowels\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = word.count\n    var vowelIndex3 = word.count\n    var vowelIndex4\
    \ = word.count\n    var vowelIndex5 = word.count\n    var vowelIndex6 = word.count\n\
    \    var vowelIndex7 = word.count\n    var vowelIndex8 = word.count\n    var vowelIndex9\
    \ = word.count\n    var vowelIndex10 = word.count\n    var vowelIndex11 = word.count\n\
    \    var vowelIndex12 = word.count\n    var vowelIndex13 = word.count\n    var\
    \ vowelIndex14 = word.count\n    var vowelIndex15 = word.count\n    var vowelIndex16\
    \ = word.count\n    var vowelIndex17 = word.count\n    var vowelIndex18 = word.count\n\
    \    var vowelIndex19 = word.count\n    var vowelIndex20 = word.count\n    var\
    \ vowelIndex21 = word.count\n    var vowelIndex22 = word.count\n    var vowelIndex23\
    \ = word.count\n    var vowelIndex24 = word.count\n    var vowelIndex25 = word.count\n\
    \    var vowelIndex26 = word.count\n    var vowelIndex27 = word.count\n    var\
    \ vowelIndex28 = word.count\n    var vowelIndex29 = word.count\n    var vowelIndex30\
    \ = word.count\n    var vowelIndex31 = word.count\n    var vowelIndex32 = word.count\n\
    \    var vowelIndex33 = word.count\n    var vowelIndex34 = word.count\n    var\
    \ vowelIndex35 = word.count\n    var vowelIndex36 = word.count\n    var vowelIndex37\
    \ = word.count\n    var vowelIndex38 = word.count\n    var vowelIndex39 = word.count\n\
    \    var vowelIndex40 = word.count\n    var vowelIndex41 = word.count\n    var\
    \ vowelIndex42 = word.count\n    var vowelIndex43 = word.count\n    var vowelIndex44\
    \ = word.count\n    var vowelIndex45 = word.count\n    var vowelIndex46 = word.count\n\
    \    var vowelIndex47 = word.count\n    var vowelIndex48 = word.count\n    var\
    \ vowelIndex49 = word.count\n    var vowelIndex50 = word.count\n    var vowelIndex51\
    \ = word.count\n    var vowelIndex52 = word.count\n    var vowelIndex53 = word.count\n\
    \    var vowelIndex54 = word.count\n    var vowelIndex55 = word.count\n    var\
    \ vowelIndex56 = word.count\n    var vowelIndex57 = word.count\n    var vowelIndex58\
    \ = word.count\n    var vowelIndex59 = word.count\n    var vowelIndex60 = word.count\n\
    \    var vowelIndex61 = word.count\n    var vowelIndex62 = word.count\n    var\
    \ vowelIndex63 = word.count\n    var vowelIndex64 = word.count\n    var vowelIndex65\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxen08dyd.swift:78:9: error: type annotation missing in pattern\n\
    \    var vowelIndex65\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    if word == \"\" {\n        return \"\"\n    }\n   \
    \ var vowelIndex = 0\n    var vowel = \"\"\n    for index in word.characters.reverse()\
    \ {\n        if index == \" \" {\n            vowelIndex++\n            continue\n\
    \        }\n        if index == \"a\" || index == \"e\" || index == \"i\" || index\
    \ == \"o\" || index == \"u\" {\n            vowelIndex = word.characters.count\
    \ - 1\n            break\n        }\n    }\n    if vowelIndex == 0 {\n       \
    \ return \"\"\n    }\n    if vowelIndex == word.characters.count - 1 {\n     \
    \   vowelIndex--\n    }\n    for index in word.characters.reverse() {\n      \
    \  if index == \" \" {\n            vowelIndex++\n            continue\n     \
    \   }\n        if index == \"a\" || index == \"e\" || index == \"i\" || index\
    \ == \"o\" || index == \"u\" {\n            vowelIndex = word.characters.count\
    \ - 1\n            break\n        }\n    }\n    if vowelIndex == 0 {\n       \
    \ return \"\"\n    }\n    if vowelIndex == word.characters.count - 1 {\n     \
    \   vowelIndex--\n    }\n    for index in word.characters.reverse() {\n      \
    \  if index == \" \" {\n            vowelIndex++\n            continue\n     \
    \   }\n        if index == \"a\" || index == \"e\" || index == \"i\" || index\
    \ == \"o\" || index == \"u\" {\n            vowelIndex = word.characters.count\
    \ - 1\n            break\n        }\n    }\n    if vowelIndex == 0 {\n       \
    \ return \"\"\n    }\n    if vowelIndex == word.characters.count - 1 {\n     \
    \   vowelIndex--\n    }\n    for index in word.characters.reverse() {\n      \
    \  if index == \" \" {\n            vowelIndex++\n            continue\n     \
    \   }\n        if index == \"a\" || index == \"e\" || index == \"i\" || index\
    \ == \"o\" || index == \"u\" {\n            vowelIndex = word.characters.count\
    \ - 1\n            break\n        }\n    }\n    if vowelIndex == 0 {\n       \
    \ return \"\"\n    }\n    if vowelIndex == word.characters.count - 1 {\n     \
    \   vowelIndex--\n    }\n    for index in word.characters.reverse() {\n      \
    \  if index == \" \" {\n            vowelIndex++\n            continue\n     \
    \   }\n        if index == \"a\" || index == \"e\" || index == \"i\" || index\
    \ == \"o\" || index == \"u\" {\n            vowelIndex = word.characters.count\
    \ - 1\n            break\n        }\n    }\n    if vowelIndex == 0 {\n       \
    \ return \"\"\n    }\n    if vowelIndex == word.characters.count - 1 {\n     \
    \   vowelIndex--\n    }\n    for index in word.characters.reverse() {\n      \
    \  if index == \" \" {\n            vowelIndex++\n            continue\n     \
    \   }\n        if index == \"a\" || index == \"e\" || index == \"i\" || index\
    \ == \"o\" || index == \"u\" {\n            vowelIndex = word.characters.count\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\"\
    ) == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3uce59ww.swift:132:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmp3uce59ww.swift:98:44: note: to match this opening\
    \ '{'\n    for index in word.characters.reverse() {\n                        \
    \                   ^\n/tmp/tmp3uce59ww.swift:132:48: error: expected '}' at end\
    \ of brace statement\nassert(get_closest_vowel(word: \"Above\") == \"o\")\n  \
    \                                             ^\n/tmp/tmp3uce59ww.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmp3uce59ww.swift:18:34:\
    \ error: value of type 'String' has no member 'reverse'\n    for index in word.characters.reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp3uce59ww.swift:31:27: error:\
    \ 'characters' is unavailable: Please use String directly\n    if vowelIndex ==\
    \ word.characters.count - 1 {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3uce59ww.swift:32:19: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n        vowelIndex--\n       \
    \           ^~\n/tmp/tmp3uce59ww.swift:34:34: error: value of type 'String' has\
    \ no member 'reverse'\n    for index in word.characters.reverse() {\n        \
    \         ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp3uce59ww.swift:47:27: error: 'characters'\
    \ is unavailable: Please use String directly\n    if vowelIndex == word.characters.count\
    \ - 1 {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3uce59ww.swift:48:19: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n        vowelIndex--\n                  ^~\n\
    /tmp/tmp3uce59ww.swift:50:34: error: value of type 'String' has no member 'reverse'\n\
    \    for index in word.characters.reverse() {\n                 ~~~~~~~~~~~~~~~ "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelsCountIndex = 0\n    var\
    \ vowelsCountMax = 0\n    var vowelsCountMin = 0\n    var vowelsCountSum = 0\n\
    \    var vowelsCountSumMax = 0\n    var vowelsCountSumMin = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpd9zvhnyn.swift:23:9: error: invalid redeclaration of 'vowelsCountSumMaxIndex'\n\
    \    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:21:9: note:\
    \ 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:24:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:22:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:25:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:21:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:26:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:22:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:27:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:21:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:28:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:22:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:29:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:21:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:30:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmpd9zvhnyn.swift:22:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    v"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountIndex2: Int = 0\n    var vowelsCountIndex3: Int\
    \ = 0\n    var vowelsCountIndex4: Int = 0\n    var vowelsCountIndex5: Int = 0\n\
    \    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7: Int = 0\n    var\
    \ vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int = 0\n    var vowelsCountIndex10:\
    \ Int = 0\n    var vowelsCountIndex11: Int = 0\n    var vowelsCountIndex12: Int\
    \ = 0\n    var vowelsCountIndex13: Int = 0\n    var vowelsCountIndex14: Int =\
    \ 0\n    var vowelsCountIndex15: Int = 0\n    var vowelsCountIndex16: Int = 0\n\
    \    var vowelsCountIndex17: Int = 0\n    var vowelsCountIndex18: Int = 0\n  \
    \  var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20: Int = 0\n    var\
    \ vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int = 0\n    var vowelsCountIndex23:\
    \ Int = 0\n    var vowelsCountIndex24: Int = 0\n    var vowelsCountIndex25: Int\
    \ = 0\n    var vowelsCountIndex26: Int = 0\n    var vowelsCountIndex27: Int =\
    \ 0\n    var vowelsCountIndex28: Int = 0\n    var vowelsCountIndex29: Int = 0\n\
    \    var vowelsCountIndex30: Int = 0\n    var vowelsCountIndex31: Int = 0\n  \
    \  var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33: Int = 0\n    var\
    \ vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int = 0\n    var vowelsCountIndex36:\
    \ Int = 0\n    var vowelsCountIndex37: Int = 0\n    var vowelsCountIndex38: Int\
    \ = 0\n    var vowelsCountIndex39: Int = 0\n    var vowelsCountIndex40: Int =\
    \ 0\n    var vowelsCountIndex41: Int = 0\n    var vowelsCountIndex42: Int = 0\n\
    \    var vowelsCountIndex43: Int = 0\n    var vowelsCountIndex44: Int = 0\n  \
    \  var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46: Int = 0\n    var\
    \ vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int = 0\n    var vowelsCountIndex49:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpap9swp1e.swift:13:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpap9swp1e.swift:14:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpap9swp1e.swift:15:9: warning: variable 'vowelsCountIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmpap9swp1e.swift:16:9: warning:\
    \ variable 'vowelsCountIndex2' was never used; consider replacing with '_' or\
    \ removing it\n    var vowelsCountIndex2: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpap9swp1e.swift:17:9: warning: variable 'vowelsCountIndex3'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpap9swp1e.swift:18:9:\
    \ warning: variable 'vowelsCountIndex4' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex4: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpap9swp1e.swift:19:9: warning: variable 'vowelsCountIndex5'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpap9swp1e.swift:20:9:\
    \ warning: variable 'vowelsCountIndex6' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex6: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpap9swp1e.swift:21:9: warning: variable 'vowelsCountIndex7'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex7:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpap9swp1e.swift:22:9:\
    \ warning: variable 'vowelsCountIndex8' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex8: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpap9swp1e.swift:23:9: warning: variable 'vowelsCountIndex9'\
    \ was never used; cons"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    let vowelsCount = vowels.count\n   \
    \ let vowelsIndexes = vowels.enumerated().map { (index, element) -> Int in\n \
    \       return index\n    }\n    let vowelsIndexesCount = vowelsIndexes.count\n\
    \    let vowelsIndexesSorted = vowelsIndexes.sorted()\n    var vowelsIndexesSortedIndex\
    \ = vowelsIndexesSorted[0]\n    var vowelsIndexesSortedElement = vowelsIndexesSorted[1]\n\
    \    var vowelsIndexesSortedElementIndex = vowelsIndexesSorted[0]\n    var vowelsIndexesSortedElementValue\
    \ = vowelsIndexesSorted[1]\n    var vowelsIndexesSortedElementValueIndex = vowelsIndexesSorted[0]\n\
    \    var vowelsIndexesSortedElementValueValue = vowelsIndexesSorted[1]\n    var\
    \ vowelsIndexesSortedElementValueValueIndex = vowelsIndexesSorted[0]\n    var\
    \ vowelsIndexesSortedElementValueValueValue = vowelsIndexesSorted[1]\n    var\
    \ vowelsIndexesSortedElementValueValueValueIndex = vowelsIndexesSorted[0]\n  \
    \  var vowelsIndexesSortedElementValueValueValueValue = vowelsIndexesSorted[1]\n\
    \    var vowelsIndexesSortedElementValueValueValueIndex = 0\n    var vowelsIndexesSortedElementValueValueValueValue\
    \ = 0\n    var vowelsIndexesSortedElementValueValueValueValueIndex = 0\n    var\
    \ vowelsIndexesSortedElementValueValueValueValue = 0\n    var vowelsIndexesSortedElementValueValueValueValueIndex\
    \ = 0\n    var vowelsIndexesSortedElementValueValueValueValueValue = 0\n    var\
    \ vowelsIndexesSortedElementValueValueValueValueValueIndex = 0\n    var vowelsIndexesSortedElementValueValueValueValueValue\
    \ = 0\n    var vowelsIndexesSortedElementValueValueValueValueValueIndex = 0\n\
    \    var vowelsIndexesSortedElementValueValueValueValueValue = 0\n    var vowelsIndexesSortedElementValueValueValueValueValueIndex\
    \ = 0\n    var vowelsIndexesSortedElementValueValueValueValueValue = 0\n    var\
    \ vowelsIndexesSortedElementValueValueValueValueValueIndex = 0\n    var vowelsIndexesSortedElementValueValueValueValueValue\
    \ = 0\n    var vowelsIndexesSortedElementValueValueValueValueValueIndex = 0\n\
    \    var vowelsIndexesSortedElementValueValueValueValueValue = 0\n    var vowelsIndexesSortedElementValueValueValueValueValueIndex\
    \ = 0\n    var vowelsIndexesSortedElementValueValueValueValueValueValue = 0\n\
    \    var vowelsIndexesSortedElementValueValueValueValueValueValueIndex = 0\n \
    \   var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5hwvbr5d.swift:51:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp5hwvbr5d.swift:13:24: error: cannot find 'vowels' in scope\n    guard\
    \ let vowels = vowels.characters.map(String.init) else {\n                   \
    \    ^~~~~~\n/tmp/tmp5hwvbr5d.swift:35:9: error: invalid redeclaration of 'vowelsIndexesSortedElementValueValueValueValue'\n\
    \    var vowelsIndexesSortedElementValueValueValueValue = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:33:9:\
    \ note: 'vowelsIndexesSortedElementValueValueValueValue' previously declared here\n\
    \    var vowelsIndexesSortedElementValueValueValueValue = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:36:9:\
    \ error: invalid redeclaration of 'vowelsIndexesSortedElementValueValueValueValueIndex'\n\
    \    var vowelsIndexesSortedElementValueValueValueValueIndex = 0\n        ^\n\
    /tmp/tmp5hwvbr5d.swift:34:9: note: 'vowelsIndexesSortedElementValueValueValueValueIndex'\
    \ previously declared here\n    var vowelsIndexesSortedElementValueValueValueValueIndex\
    \ = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:39:9: error: invalid redeclaration of\
    \ 'vowelsIndexesSortedElementValueValueValueValueValue'\n    var vowelsIndexesSortedElementValueValueValueValueValue\
    \ = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:37:9: note: 'vowelsIndexesSortedElementValueValueValueValueValue'\
    \ previously declared here\n    var vowelsIndexesSortedElementValueValueValueValueValue\
    \ = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:40:9: error: invalid redeclaration of\
    \ 'vowelsIndexesSortedElementValueValueValueValueValueIndex'\n    var vowelsIndexesSortedElementValueValueValueValueValueIndex\
    \ = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:38:9: note: 'vowelsIndexesSortedElementValueValueValueValueValueIndex'\
    \ previously declared here\n    var vowelsIndexesSortedElementValueValueValueValueValueIndex\
    \ = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:41:9: error: invalid redeclaration of\
    \ 'vowelsIndexesSortedElementValueValueValueValueValue'\n    var vowelsIndexesSortedElementValueValueValueValueValue\
    \ = 0\n        ^\n/tmp/tmp5hwvbr5d.swift:37:9: note: 'vowelsIndexesSortedElementValueValueValueValueValue'\
    \ previously declared here\n    "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word {\n\
    \        if letter.isUpper() {\n            vowels.append(letter)\n        }\n\
    \    }\n    vowels.reverse()\n    for vowel in vowels {\n        if vowel.hasPrefix(\"\
    a\") {\n            return vowel\n        }\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjg9dixbc.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpjg9dixbc.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountMax: Int\
    \ = -1\n    var vowelsIndexCountMin: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndexCountMinIndexIndex: Int = 0\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n    var vowelsIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpedtm_8kj.swift:23:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex: Int = 0\n        ^\n/tmp/tmpedtm_8kj.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n        ^\n/tmp/tmpedtm_8kj.swift:24:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinIndexIndex'\n    var vowelsIndexCountMinIndexIndex: Int\
    \ = 0\n        ^\n/tmp/tmpedtm_8kj.swift:22:9: note: 'vowelsIndexCountMinIndexIndex'\
    \ previously declared here\n    var vowelsIndexCountMinIndexIndex: Int = 0\n \
    \       ^\n/tmp/tmpedtm_8kj.swift:25:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex: Int = 0\n        ^\n/tmp/tmpedtm_8kj.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n        ^\n/tmp/tmpedtm_8kj.swift:26:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinIndexIndex'\n    var vowelsIndexCountMinIndexIndex: Int\
    \ = 0\n        ^\n/tmp/tmpedtm_8kj.swift:22:9: note: 'vowelsIndexCountMinIndexIndex'\
    \ previously declared here\n    var vowelsIndexCountMinIndexIndex: Int = 0\n \
    \       ^\n/tmp/tmpedtm_8kj.swift:27:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex: Int = 0\n        ^\n/tmp/tmpedtm_8kj.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowelsIndexCountMaxIndexIndex:\
    \ Int = 0\n        ^\n/tmp/tmpedtm_8kj.swift:28:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinIndexIndex'\n    var vowelsIndexCountMinIndexIndex: Int\
    \ = 0\n        ^\n/tmp/tmpedtm_8kj.swift:22:9: note: 'vowelsIndexCountMinIndexIndex'\
    \ previously declared here\n    var vowelsIndexCountMinIndexIndex: Int = 0\n \
    \       ^\n/tmp/tmpedtm_8kj.swift:29:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndexIndex'\n\
    \    var vowelsIndexCountMaxIndexIndex: Int = 0\n        ^\n/tmp/tmpedtm_8kj.swift:21:9:\
    \ note: 'vowelsIndexCountMaxIndexIndex' previously declared here\n    var vowe"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountMax:\
    \ Int = vowels.count\n    var vowelsCountMin: Int = vowels.count - 1\n    var\
    \ vowelsCountSum: Int = 0\n    var vowelsCountSumMax: Int = 0\n    var vowelsCountSumMin:\
    \ Int = 0\n    var vowelsCountSumSum: Int = 0\n    var vowelsCountSumSumMax: Int\
    \ = 0\n    var vowelsCountSumSumMin: Int = 0\n    var vowelsCountSumSumSum: Int\
    \ = 0\n    var vowelsCountSumSumSumMax: Int = 0\n    var vowelsCountSumSumSumMin:\
    \ Int = 0\n    var vowelsCountSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumMax: Int = 0\n    var vowelsCountSumSumSumSumSumMin:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumMax: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumMin:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumSumMax: Int = 0\n    var\
    \ vowelsCountSumSumSumSumSumSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumSumMax: Int = 0\n    var\
    \ vowelsCountSumSumSumSumSumSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumSumMax: Int = 0\n    var\
    \ vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpagfesepo.swift:44:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumSum'\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumSum: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:41:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSumSum' previously declared here\n  \
    \  var vowelsCountSumSumSumSumSumSumSumSumSum: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:45:9:\
    \ error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumSumMax'\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumSumMax: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:42:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSumSumMax' previously declared here\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumSumMax: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:46:9:\
    \ error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumSumMin'\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumSumMin: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:43:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSumSumMin' previously declared here\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumSumMin: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:47:9:\
    \ error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumSum'\n \
    \   var vowelsCountSumSumSumSumSumSumSumSumSum: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:41:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSumSum' previously declared here\n  \
    \  var vowelsCountSumSumSumSumSumSumSumSumSum: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:48:9:\
    \ error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumSumMax'\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumSumMax: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:42:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSumSumMax' previously declared here\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumSumMax: Int = 0\n        ^\n/tmp/tmpagfesepo.swift:49:9:\
    \ error: type annotation missing in pattern\n    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelIndex = 0\n \
    \   for letter in word {\n        if letter == \"a\" || letter == \"e\" || letter\
    \ == \"i\" || letter == \"o\" || letter == \"u\" {\n            vowels.append(letter)\n\
    \        }\n    }\n    if vowels.count > 0 {\n        vowelIndex = vowels.count\
    \ - 1\n    }\n    if vowelIndex < 0 {\n        return \"\"\n    }\n    var vowelsCount\
    \ = vowels.count\n    var vowelIndex2 = vowelIndex\n    var vowelIndex3 = vowelIndex\n\
    \    var vowelIndex4 = vowelIndex\n    var vowelIndex5 = vowelIndex\n    var vowelIndex6\
    \ = vowelIndex\n    var vowelIndex7 = vowelIndex\n    var vowelIndex8 = vowelIndex\n\
    \    var vowelIndex9 = vowelIndex\n    var vowelIndex10 = vowelIndex\n    var\
    \ vowelIndex11 = vowelIndex\n    var vowelIndex12 = vowelIndex\n    var vowelIndex13\
    \ = vowelIndex\n    var vowelIndex14 = vowelIndex\n    var vowelIndex15 = vowelIndex\n\
    \    var vowelIndex16 = vowelIndex\n    var vowelIndex17 = vowelIndex\n    var\
    \ vowelIndex18 = vowelIndex\n    var vowelIndex19 = vowelIndex\n    var vowelIndex20\
    \ = vowelIndex\n    var vowelIndex21 = vowelIndex\n    var vowelIndex22 = vowelIndex\n\
    \    var vowelIndex23 = vowelIndex\n    var vowelIndex24 = vowelIndex\n    var\
    \ vowelIndex25 = vowelIndex\n    var vowelIndex26 = vowelIndex\n    var vowelIndex27\
    \ = vowelIndex\n    var vowelIndex28 = vowelIndex\n    var vowelIndex29 = vowelIndex\n\
    \    var vowelIndex30 = vowelIndex\n    var vowelIndex31 = vowelIndex\n    var\
    \ vowelIndex32 = vowelIndex\n    var vowelIndex33 = vowelIndex\n    var vowelIndex34\
    \ = vowelIndex\n    var vowelIndex35 = vowelIndex\n    var vowelIndex36 = vowelIndex\n\
    \    var vowelIndex37 = vowelIndex\n    var vowelIndex38 = vowelIndex\n    var\
    \ vowelIndex39 = vowelIndex\n    var vowelIndex40 = vowelIndex\n    var vowelIndex41\
    \ = vowelIndex\n    var vowelIndex42 = vowelIndex\n    var vowelIndex43 = vowelIndex\n\
    \    var vowelIndex44 = vowelIndex\n    var vowelIndex45 = vowelIndex\n    var\
    \ vowelIndex46 = vowelIndex\n    var vowelIndex47 = vowelIndex\n    var vowelIndex48\
    \ = vowelIndex\n    var vowelIndex49 = vowelIndex\n    var vowelIndex50 = vowelIndex\n\
    \    var vowelIndex51 = vowelIndex\n    var vowelIndex52 = vowelIndex\n    var\
    \ vowelIndex53 = vowelIndex\n    var vowelIndex54 = vowelIndex\n    var vowelIndex55\
    \ = vowelIndex\n    var vowelIndex5\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1u46yctf.swift:17:27: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            vowels.append(letter)\n    \
    \                      ^\n/tmp/tmp1u46yctf.swift:81:9: error: type annotation\
    \ missing in pattern\n    var vowelIndex5\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelsCountInWord = 0\n    var\
    \ vowelsCountInWordIndex = 0\n    var vowelsCountInWordLastIndex = 0\n    var\
    \ vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n    var vowelsCountInWordLastIndexIndex = 0\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0zocobsl.swift:20:9: error: invalid redeclaration of 'vowelsCountInWordLastIndexIndex'\n\
    \    var vowelsCountInWordLastIndexIndex = 0\n        ^\n/tmp/tmp0zocobsl.swift:19:9:\
    \ note: 'vowelsCountInWordLastIndexIndex' previously declared here\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n        ^\n/tmp/tmp0zocobsl.swift:21:9: error: invalid redeclaration of\
    \ 'vowelsCountInWordLastIndexIndex'\n    var vowelsCountInWordLastIndexIndex =\
    \ 0\n        ^\n/tmp/tmp0zocobsl.swift:19:9: note: 'vowelsCountInWordLastIndexIndex'\
    \ previously declared here\n    var vowelsCountInWordLastIndexIndex = 0\n    \
    \    ^\n/tmp/tmp0zocobsl.swift:22:9: error: invalid redeclaration of 'vowelsCountInWordLastIndexIndex'\n\
    \    var vowelsCountInWordLastIndexIndex = 0\n        ^\n/tmp/tmp0zocobsl.swift:19:9:\
    \ note: 'vowelsCountInWordLastIndexIndex' previously declared here\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n        ^\n/tmp/tmp0zocobsl.swift:23:9: error: invalid redeclaration of\
    \ 'vowelsCountInWordLastIndexIndex'\n    var vowelsCountInWordLastIndexIndex =\
    \ 0\n        ^\n/tmp/tmp0zocobsl.swift:19:9: note: 'vowelsCountInWordLastIndexIndex'\
    \ previously declared here\n    var vowelsCountInWordLastIndexIndex = 0\n    \
    \    ^\n/tmp/tmp0zocobsl.swift:24:9: error: invalid redeclaration of 'vowelsCountInWordLastIndexIndex'\n\
    \    var vowelsCountInWordLastIndexIndex = 0\n        ^\n/tmp/tmp0zocobsl.swift:19:9:\
    \ note: 'vowelsCountInWordLastIndexIndex' previously declared here\n    var vowelsCountInWordLastIndexIndex\
    \ = 0\n        ^\n/tmp/tmp0zocobsl.swift:25:9: error: invalid redeclaration of\
    \ 'vowelsCountInWordLastIndexIndex'\n    var vowelsCountInWordLastIndexIndex =\
    \ 0\n        ^\n/tmp/tmp0zocobsl.swift:19:9: note: 'vowelsCountInWordLastIndexIndex'\
    \ previously declared here\n    var vowelsCountInWordLastIndexIndex = 0\n    \
    \    ^\n/tmp/tmp0zocobsl.swift:26:9: error: invalid redeclaration of 'vowelsCountInWordLastIndexIndex'\n\
    \    var vowelsCountInWordLastIndexIndex = 0\n        ^\n/tmp/tmp0zocobsl.swift:19:9:\
    \ note: 'vowelsCountInWordLastIndexIndex' previously declared here\n    var vowelsCountInWo"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelsCountIndex: Int = 0\n    var vowelsCountIndex2: Int = 0\n\
    \    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4: Int = 0\n    var\
    \ vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7:\
    \ Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int\
    \ = 0\n    var vowelsCountIndex10: Int = 0\n    var vowelsCountIndex11: Int =\
    \ 0\n    var vowelsCountIndex12: Int = 0\n    var vowelsCountIndex13: Int = 0\n\
    \    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15: Int = 0\n  \
    \  var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int = 0\n    var\
    \ vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20:\
    \ Int = 0\n    var vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int\
    \ = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelsCountIndex24: Int =\
    \ 0\n    var vowelsCountIndex25: Int = 0\n    var vowelsCountIndex26: Int = 0\n\
    \    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28: Int = 0\n  \
    \  var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int = 0\n    var\
    \ vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33:\
    \ Int = 0\n    var vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int\
    \ = 0\n    var vowelsCountIndex36: Int = 0\n    var vowelsCountIndex37: Int =\
    \ 0\n    var vowelsCountIndex38: Int = 0\n    var vowelsCountIndex39: Int = 0\n\
    \    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41: Int = 0\n  \
    \  var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int = 0\n    var\
    \ vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46:\
    \ Int = 0\n    var vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppi9lcq25.swift:64:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndex2 = vowels.count\n \
    \   var vowelIndex3 = vowels.count\n    var vowelIndex4 = vowels.count\n    var\
    \ vowelIndex5 = vowels.count\n    var vowelIndex6 = vowels.count\n    var vowelIndex7\
    \ = vowels.count\n    var vowelIndex8 = vowels.count\n    var vowelIndex9 = vowels.count\n\
    \    var vowelIndex10 = vowels.count\n    var vowelIndex11 = vowels.count\n  \
    \  var vowelIndex12 = vowels.count\n    var vowelIndex13 = vowels.count\n    var\
    \ vowelIndex14 = vowels.count\n    var vowelIndex15 = vowels.count\n    var vowelIndex16\
    \ = vowels.count\n    var vowelIndex17 = vowels.count\n    var vowelIndex18 =\
    \ vowels.count\n    var vowelIndex19 = vowels.count\n    var vowelIndex20 = vowels.count\n\
    \    var vowelIndex21 = vowels.count\n    var vowelIndex22 = vowels.count\n  \
    \  var vowelIndex23 = vowels.count\n    var vowelIndex24 = vowels.count\n    var\
    \ vowelIndex25 = vowels.count\n    var vowelIndex26 = vowels.count\n    var vowelIndex27\
    \ = vowels.count\n    var vowelIndex28 = vowels.count\n    var vowelIndex29 =\
    \ vowels.count\n    var vowelIndex30 = vowels.count\n    var vowelIndex31 = vowels.count\n\
    \    var vowelIndex32 = vowels.count\n    var vowelIndex33 = vowels.count\n  \
    \  var vowelIndex34 = vowels.count\n    var vowelIndex35 = vowels.count\n    var\
    \ vowelIndex36 = vowels.count\n    var vowelIndex37 = vowels.count\n    var vowelIndex38\
    \ = vowels.count\n    var vowelIndex39 = vowels.count\n    var vowelIndex40 =\
    \ vowels.count\n    var vowelIndex41 = vowels.count\n    var vowelIndex42 = vowels.count\n\
    \    var vowelIndex43 = vowels.count\n    var vowelIndex44 = vowels.count\n  \
    \  var vowelIndex45 = vowels.count\n    var vowelIndex46 = vowels.count\n    var\
    \ vowelIndex47 = vowels.count\n    var vowelIndex48 = vowels.count\n    var vowelIndex49\
    \ = vowels.count\n    var vowelIndex50 = vowels.count\n    var vowelIndex51 =\
    \ vowels.count\n    var vowelIndex52 = vowels.count\n    var vowelIndex53 = vowels.count\n\
    \    var vowelIndex54 = vowels.count\n    var vowelIndex55 = vowels.count\n  \
    \  var vowelIndex56 = vowels.count\n    var vowelIndex57 = \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpri2idtb7.swift:71:23: error: expected initial value after '='\n\
    \    var vowelIndex57 = \n                      ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndex2 = vowels.count - 1\n\
    \    var vowelIndex3 = vowels.count - 2\n    var vowelIndex4 = vowels.count -\
    \ 3\n    var vowelIndex5 = vowels.count - 4\n    var vowelIndex6 = vowels.count\
    \ - 5\n    var vowelIndex7 = vowels.count - 6\n    var vowelIndex8 = vowels.count\
    \ - 7\n    var vowelIndex9 = vowels.count - 8\n    var vowelIndex10 = vowels.count\
    \ - 9\n    var vowelIndex11 = vowels.count - 10\n    var vowelIndex12 = vowels.count\
    \ - 11\n    var vowelIndex13 = vowels.count - 12\n    var vowelIndex14 = vowels.count\
    \ - 13\n    var vowelIndex15 = vowels.count - 14\n    var vowelIndex16 = vowels.count\
    \ - 15\n    var vowelIndex17 = vowels.count - 16\n    var vowelIndex18 = vowels.count\
    \ - 17\n    var vowelIndex19 = vowels.count - 18\n    var vowelIndex20 = vowels.count\
    \ - 19\n    var vowelIndex21 = vowels.count - 20\n    var vowelIndex22 = vowels.count\
    \ - 21\n    var vowelIndex23 = vowels.count - 22\n    var vowelIndex24 = vowels.count\
    \ - 23\n    var vowelIndex25 = vowels.count - 24\n    var vowelIndex26 = vowels.count\
    \ - 25\n    var vowelIndex27 = vowels.count - 26\n    var vowelIndex28 = vowels.count\
    \ - 27\n    var vowelIndex29 = vowels.count - 28\n    var vowelIndex30 = vowels.count\
    \ - 29\n    var vowelIndex31 = vowels.count - 30\n    var vowelIndex32 = vowels.count\
    \ - 31\n    var vowelIndex33 = vowels.count - 32\n    var vowelIndex34 = vowels.count\
    \ - 33\n    var vowelIndex35 = vowels.count - 34\n    var vowelIndex36 = vowels.count\
    \ - 35\n    var vowelIndex37 = vowels.count - 36\n    var vowelIndex38 = vowels.count\
    \ - 37\n    var vowelIndex39 = vowels.count - 38\n    var vowelIndex40 = vowels.count\
    \ - 39\n    var vowelIndex41 = vowels.count - 40\n    var vowelIndex42 = vowels.count\
    \ - 41\n    var vowelIndex43 = vowels.count - 42\n    var vowelIndex44 = vowels.count\
    \ - 43\n    var vowelIndex45 = vowels.count - 44\n    var vowelIndex46 = vowels.count\
    \ - 45\n    var vowelIndex47 = vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4pg9pxr.swift:61:24: error: cannot find 'vowel' in scope\n   \
    \ var vowelIndex47 = vowel\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndex2 = vowels.count - 1\n\
    \    var vowelIndex3 = vowels.count - 2\n    var vowelIndex4 = vowels.count -\
    \ 3\n    var vowelIndex5 = vowels.count - 4\n    var vowelIndex6 = vowels.count\
    \ - 5\n    var vowelIndex7 = vowels.count - 6\n    var vowelIndex8 = vowels.count\
    \ - 7\n    var vowelIndex9 = vowels.count - 8\n    var vowelIndex10 = vowels.count\
    \ - 9\n    var vowelIndex11 = vowels.count - 10\n    var vowelIndex12 = vowels.count\
    \ - 11\n    var vowelIndex13 = vowels.count - 12\n    var vowelIndex14 = vowels.count\
    \ - 13\n    var vowelIndex15 = vowels.count - 14\n    var vowelIndex16 = vowels.count\
    \ - 15\n    var vowelIndex17 = vowels.count - 16\n    var vowelIndex18 = vowels.count\
    \ - 17\n    var vowelIndex19 = vowels.count - 18\n    var vowelIndex20 = vowels.count\
    \ - 19\n    var vowelIndex21 = vowels.count - 20\n    var vowelIndex22 = vowels.count\
    \ - 21\n    var vowelIndex23 = vowels.count - 22\n    var vowelIndex24 = vowels.count\
    \ - 23\n    var vowelIndex25 = vowels.count - 24\n    var vowelIndex26 = vowels.count\
    \ - 25\n    var vowelIndex27 = vowels.count - 26\n    var vowelIndex28 = vowels.count\
    \ - 27\n    var vowelIndex29 = vowels.count - 28\n    var vowelIndex30 = vowels.count\
    \ - 29\n    var vowelIndex31 = vowels.count - 30\n    var vowelIndex32 = vowels.count\
    \ - 31\n    var vowelIndex33 = vowels.count - 32\n    var vowelIndex34 = vowels.count\
    \ - 33\n    var vowelIndex35 = vowels.count - 34\n    var vowelIndex36 = vowels.count\
    \ - 35\n    var vowelIndex37 = vowels.count - 36\n    var vowelIndex38 = vowels.count\
    \ - 37\n    var vowelIndex39 = vowels.count - 38\n    var vowelIndex40 = vowels.count\
    \ - 39\n    var vowelIndex41 = vowels.count - 40\n    var vowelIndex42 = vowels.count\
    \ - 41\n    var vowelIndex43 = vowels.count - 42\n    var vowelIndex44 = vowels.count\
    \ - 43\n    var vowelIndex45 = vowels.count - 44\n    var vowelIndex46 = vowels.count\
    \ - 45\n    var vowelIndex47 = vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpo4pg9pxr.swift:61:24: error: cannot find 'vowel' in scope\n   \
    \ var vowelIndex47 = vowel\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.filter({ $0.isUppercase }).count > 0 {\n \
    \           vowels.append(char.unicodeScalars.filter({ $0.isUppercase }).first!)\n\
    \        }\n    }\n    if vowels.count > 0 {\n        return vowels.sorted().first!\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl6ddbgk0.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpl6ddbgk0.swift:15:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isUppercase'\n        if\
    \ char.unicodeScalars.filter({ $0.isUppercase }).count > 0 {\n               \
    \                         ~~ ^~~~~~~~~~~\n/tmp/tmpl6ddbgk0.swift:16:20: error:\
    \ no exact matches in call to instance method 'append'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isUppercase }).first!)\n                   ^\n/tmp/tmpl6ddbgk0.swift:16:20:\
    \ note: found candidate with type '(__owned String) -> ()'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isUppercase }).first!)\n                   ^\n/tmp/tmpl6ddbgk0.swift:16:20:\
    \ note: found candidate with type '(__owned Unicode.Scalar) -> ()'\n         \
    \   vowels.append(char.unicodeScalars.filter({ $0.isUppercase }).first!)\n   \
    \                ^\n/tmp/tmpl6ddbgk0.swift:16:59: error: value of type 'Unicode.Scalar'\
    \ has no member 'isUppercase'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isUppercase }).first!)\n                                                \
    \       ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    \n    for char in word {\n      \
    \  if vowels.contains(char) {\n            vowelsCount[vowels.indexOf(char)]++\n\
    \        }\n    }\n    \n    if vowelsCount.contains(0) {\n        return \"\"\
    \n    }\n    \n    if vowelsCount.contains(1) {\n        return vowels[0]\n  \
    \  }\n    \n    if vowelsCount.contains(2) {\n        return vowels[1]\n    }\n\
    \    \n    if vowelsCount.contains(3) {\n        return vowels[2]\n    }\n   \
    \ \n    if vowelsCount.contains(4) {\n        return vowels[3]\n    }\n    \n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxbyif_u1.swift:17:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(char) {\n   \
    \                        ^\n/tmp/tmpxbyif_u1.swift:18:46: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            vowelsCount[vowels.indexOf(char)]++\n\
    \                                             ^~\n/tmp/tmpxbyif_u1.swift:18:32:\
    \ error: value of type '[String]' has no member 'indexOf'\n            vowelsCount[vowels.indexOf(char)]++\n\
    \                        ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = word.characters.count\n    var vowelIndex2\
    \ = word.characters.count - 1\n    var vowelIndex3 = word.characters.count - 2\n\
    \    var vowelIndex4 = word.characters.count - 3\n    var vowelIndex5 = word.characters.count\
    \ - 4\n    var vowelIndex6 = word.characters.count - 5\n    var vowelIndex7 =\
    \ word.characters.count - 6\n    var vowelIndex8 = word.characters.count - 7\n\
    \    var vowelIndex9 = word.characters.count - 8\n    var vowelIndex10 = word.characters.count\
    \ - 9\n    var vowelIndex11 = word.characters.count - 10\n    var vowelIndex12\
    \ = word.characters.count - 11\n    var vowelIndex13 = word.characters.count -\
    \ 12\n    var vowelIndex14 = word.characters.count - 13\n    var vowelIndex15\
    \ = word.characters.count - 14\n    var vowelIndex16 = word.characters.count -\
    \ 15\n    var vowelIndex17 = word.characters.count - 16\n    var vowelIndex18\
    \ = word.characters.count - 17\n    var vowelIndex19 = word.characters.count -\
    \ 18\n    var vowelIndex20 = word.characters.count - 19\n    var vowelIndex21\
    \ = word.characters.count - 20\n    var vowelIndex22 = word.characters.count -\
    \ 21\n    var vowelIndex23 = word.characters.count - 22\n    var vowelIndex24\
    \ = word.characters.count - 23\n    var vowelIndex25 = word.characters.count -\
    \ 24\n    var vowelIndex26 = word.characters.count - 25\n    var vowelIndex27\
    \ = word.characters.count - 26\n    var vowelIndex28 = word.characters.count -\
    \ 27\n    var vowelIndex29 = word.characters.count - 28\n    var vowelIndex30\
    \ = word.characters.count - 29\n    var vowelIndex31 = word.characters.count -\
    \ 30\n    var vowelIndex32 = word.characters.count - 31\n    var vowelIndex33\
    \ = word.characters.count - 32\n    var vowelIndex34 = word.characters.count -\
    \ 33\n    var vowelIndex35 = word.characters.count - 34\n    var vowelIndex36\
    \ = word.characters.count - 35\n    var vowelIndex37 = word.characters.count -\
    \ 36\n    var vowelIndex38 = word.characters.count - 37\n    var vowelIndex39\
    \ = word.characters.count - 38\n    var vowelIndex40 = word.characters.count -\
    \ 39\n    var vowelIndex41 = word.characters.count - 40\n    var vowelIndex42\
    \ = word.characters.count - 41\n    var vowelIndex43 = word.characters.count -\
    \ 42\n    var vowelIndex44 = word.characters.count - 43\n    var vowelIndex45\
    \ = word.characters.count - 44\n    var vowelIndex46 = word.characters.count -\
    \ 45\n    var vowelIndex47\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphtx98sp7.swift:15:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtx98sp7.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtx98sp7.swift:17:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = word.characters.count - 2\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtx98sp7.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = word.characters.count - 3\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtx98sp7.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = word.characters.count - 4\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtx98sp7.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = word.characters.count - 5\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphtx98sp7.swift:21:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = word.characters.count - 6\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'charact"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word {\n\
    \        if letter.isUpper() {\n            vowels.append(letter)\n        }\n\
    \    }\n    vowels.reverse()\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n\
    \    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n \
    \   var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n  \
    \  var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n \
    \   var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmdvvj8iq.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpmdvvj8iq.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = Set<Character>()\n    vowels.insert(\"\
    a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"i\")\n    vowels.insert(\"\
    o\")\n    vowels.insert(\"u\")\n    vowels.insert(\"A\")\n    vowels.insert(\"\
    E\")\n    vowels.insert(\"I\")\n    vowels.insert(\"O\")\n    vowels.insert(\"\
    U\")\n    \n    var vowelsCount = vowels.count\n    \n    var vowelsCountFromRight\
    \ = 0\n    \n    for char in word.characters {\n        if vowels.contains(char)\
    \ {\n            vowelsCountFromRight++\n        }\n    }\n    \n    if vowelsCountFromRight\
    \ == 0 {\n        return \"\"\n    }\n    \n    if vowelsCountFromRight == 1 {\n\
    \        return vowels.first!\n    }\n    \n    if vowelsCountFromRight == 2 {\n\
    \        return vowels.first! + vowels.last!\n    }\n    \n    if vowelsCountFromRight\
    \ == 3 {\n        return vowels.first! + vowels.last! + vowels.last!\n    }\n\
    \    \n    if vowelsCountFromRight == 4 {\n        return vowels.first! + vowels.last!\
    \ + vowels.last! + vowels.last!\n    }\n    \n    if vowelsCountFromRight == 5\
    \ {\n        return vowels.first! + vowels.last! + vowels.last! + vowels.last!\
    \ + vowels.last!\n    }\n    \n    if vowelsCountFromRight == 6 {\n        return\
    \ vowels.first! + vowels.last! + vowels.last! + vowels.last! + vowels.last! +\
    \ vowels.last! + vowels.last!\n    }\n    \n    if vowelsCountFromRight == 7 {\n\
    \        return vowels.first! + vowels.last! + vowels.last! + vowels.last! + vowels.last!\
    \ + vowels.last! + vowels.last! + vowels.last! + vowels.last!\n    }\n    \n \
    \   if vowelsCountFromRight == 8 {\n        return vowels.first! + vowels.last!\
    \ + vowels.last! + vowels.last! + vowels.last! + vowels.last! + vowels.last! +\
    \ vowels.last! + vowels.last! + vowels.last! + vowels.last!\n    }\n    \n   \
    \ if vowelsCountFromRight == 9 {\n        return vowels.first! + vowels.last!\
    \ + vowels.last! + vowels.last! + vowels.last! + vowels.last! + vowels.\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpshirlli5.swift:72:113: error: expected member name following '.'\n\
    \        return vowels.first! + vowels.last! + vowels.last! + vowels.last! + vowels.last!\
    \ + vowels.last! + vowels.\n                                                 \
    \                                                               ^\n/tmp/tmpshirlli5.swift:100:48:\
    \ error: expected '}' at end of brace statement\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")\n                                               ^\n/tmp/tmpshirlli5.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpshirlli5.swift:29:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpshirlli5.swift:31:33: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            vowelsCountFromRight++\n\
    \                                ^~\n/tmp/tmpshirlli5.swift:40:28: error: cannot\
    \ convert return expression of type 'Character' to return type 'String'\n    \
    \    return vowels.first!\n               ~~~~~~~~~~~~^\n/tmp/tmpshirlli5.swift:44:39:\
    \ error: value of type 'Set<Character>' has no member 'last'\n        return vowels.first!\
    \ + vowels.last!\n                               ~~~~~~ ^~~~\n/tmp/tmpshirlli5.swift:44:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        return vowels.first! + vowels.last!\n                           ^\n/tmp/tmpshirlli5.swift:48:39:\
    \ error: value of type 'Set<Character>' has no member 'last'\n        return vowels.first!\
    \ + vowels.last! + vowels.last!\n                               ~~~~~~ ^~~~\n\
    /tmp/tmpshirlli5.swift:48:54: error: value of type 'Set<Character>' has no member\
    \ 'last'\n        return vowels.first! + vowels.last! + vowels.last!\n       \
    \                                       ~~~~~~ ^~~~\n/tmp/tmpshirlli5.swift:52:39:\
    \ e"
  stdout: ''
  timestamp: 1660014307
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.contains(.vowel) {\n            vowels.append(char)\n\
    \        }\n    }\n    if vowels.count == 0 {\n        return \"\"\n    }\n  \
    \  if vowels.count > 1 {\n        return \"\"\n    }\n    if vowels.count == 1\
    \ {\n        return vowels[0]\n    }\n    let first = vowels.first!\n    let last\
    \ = vowels.last!\n    let range = word.unicodeScalars.rangeOfComposedCharacterSequence(in:\
    \ first..<last)\n    if range.count == 0 {\n        return \"\"\n    }\n    return\
    \ word.unicodeScalars.first!.description\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpkhm80ub8.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpkhm80ub8.swift:15:42:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n                                        ~^~~~~\n/tmp/tmpkhm80ub8.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(char)\n                          ^\n/tmp/tmpkhm80ub8.swift:30:37:\
    \ error: value of type 'String.UnicodeScalarView' has no member 'rangeOfComposedCharacterSequence'\n\
    \    let range = word.unicodeScalars.rangeOfComposedCharacterSequence(in: first..<last)\n\
    \                ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexEnd = vowels.count\n\
    \    var vowelIndexStart = 0\n    var vowelIndexStartEnd = vowels.count\n    var\
    \ vowelIndexStartEnd2 = vowels.count\n    var vowelIndexStartEnd3 = vowels.count\n\
    \    var vowelIndexStartEnd4 = vowels.count\n    var vowelIndexStartEnd5 = vowels.count\n\
    \    var vowelIndexStartEnd6 = vowels.count\n    var vowelIndexStartEnd7 = vowels.count\n\
    \    var vowelIndexStartEnd8 = vowels.count\n    var vowelIndexStartEnd9 = vowels.count\n\
    \    var vowelIndexStartEnd10 = vowels.count\n    var vowelIndexStartEnd11 = vowels.count\n\
    \    var vowelIndexStartEnd12 = vowels.count\n    var vowelIndexStartEnd13 = vowels.count\n\
    \    var vowelIndexStartEnd14 = vowels.count\n    var vowelIndexStartEnd15 = vowels.count\n\
    \    var vowelIndexStartEnd16 = vowels.count\n    var vowelIndexStartEnd17 = vowels.count\n\
    \    var vowelIndexStartEnd18 = vowels.count\n    var vowelIndexStartEnd19 = vowels.count\n\
    \    var vowelIndexStartEnd20 = vowels.count\n    var vowelIndexStartEnd21 = vowels.count\n\
    \    var vowelIndexStartEnd22 = vowels.count\n    var vowelIndexStartEnd23 = vowels.count\n\
    \    var vowelIndexStartEnd24 = vowels.count\n    var vowelIndexStartEnd25 = vowels.count\n\
    \    var vowelIndexStartEnd26 = vowels.count\n    var vowelIndexStartEnd27 = vowels.count\n\
    \    var vowelIndexStartEnd28 = vowels.count\n    var vowelIndexStartEnd29 = vowels.count\n\
    \    var vowelIndexStartEnd30 = vowels.count\n    var vowelIndexStartEnd31 = vowels.count\n\
    \    var vowelIndexStartEnd32 = vowels.count\n    var vowelIndexStartEnd33 = vowels.count\n\
    \    var vowelIndexStartEnd34 = vowels.count\n    var vowelIndexStartEnd35 = vowels.count\n\
    \    var vowelIndexStartEnd36 = vowels.count\n    var vowelIndexStartEnd37 = vowels.count\n\
    \    var vowelIndexStartEnd38 = vowels.count\n    var vowelIndexStartEnd39 = vowels.count\n\
    \    var vowelIndexStartEnd40 = vowels.count\n    var vowelIndexStartEnd41 = vowels.count\n\
    \    var vowelIndexStartEnd42 = vowels.count\n    var vowelIndexStartEnd43 = vowels.count\n\
    \    var vowelIndexStartEnd44 = vowels.count\n    var vowelIndexStart\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpcamjdqoy.swift:62:9: error: type annotation missing in pattern\n\
    \    var vowelIndexStart\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelsCountIndex = 0\n    var\
    \ vowelsCountMax = 0\n    var vowelsCountMin = 0\n    var vowelsCountSum = 0\n\
    \    var vowelsCountSumIndex = 0\n    var vowelsCountSumMax = 0\n    var vowelsCountSumMin\
    \ = 0\n    var vowelsCountSumSum = 0\n    var vowelsCountSumSumIndex = 0\n   \
    \ var vowelsCountSumSumMax = 0\n    var vowelsCountSumSumMin = 0\n    var vowelsCountSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumIndex = 0\n    var vowelsCountSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumMin = 0\n    var vowelsCountSumSumSumSum =\
    \ 0\n    var vowelsCountSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumSumMin = 0\n    var vowelsCountSumSumSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumSumSumMin = 0\n    var vowelsCountSumSumSumSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumMin = 0\n    var vowelsCountSumSumSumSumSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumMin = 0\n    var vowelsCountSumSumSumSumSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumMin = 0\n    var vowelsCountSumSumSumSumSumSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumSumMin = 0\n    var vowelsCountSumSumSumSumSumSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumSumSumSumMax\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumSumMin = 0\n    var vowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdvcfwayj.swift:39:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumIndex'\n\
    \    var vowelsCountSumSumSumSumSumIndex = 0\n        ^\n/tmp/tmpdvcfwayj.swift:35:9:\
    \ note: 'vowelsCountSumSumSumSumSumIndex' previously declared here\n    var vowelsCountSumSumSumSumSumIndex\
    \ = 0\n        ^\n/tmp/tmpdvcfwayj.swift:45:9: error: invalid redeclaration of\
    \ 'vowelsCountSumSumSumSumSumSumMin'\n    var vowelsCountSumSumSumSumSumSumMin\
    \ = 0\n        ^\n/tmp/tmpdvcfwayj.swift:41:9: note: 'vowelsCountSumSumSumSumSumSumMin'\
    \ previously declared here\n    var vowelsCountSumSumSumSumSumSumMin = 0\n   \
    \     ^\n/tmp/tmpdvcfwayj.swift:46:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSum'\n\
    \    var vowelsCountSumSumSumSumSumSumSum = 0\n        ^\n/tmp/tmpdvcfwayj.swift:42:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSum' previously declared here\n    var vowelsCountSumSumSumSumSumSumSum\
    \ = 0\n        ^\n/tmp/tmpdvcfwayj.swift:48:9: error: invalid redeclaration of\
    \ 'vowelsCountSumSumSumSumSumSumSumMax'\n    var vowelsCountSumSumSumSumSumSumSumMax\
    \ = 0\n        ^\n/tmp/tmpdvcfwayj.swift:44:9: note: 'vowelsCountSumSumSumSumSumSumSumMax'\
    \ previously declared here\n    var vowelsCountSumSumSumSumSumSumSumMax = 0\n\
    \        ^\n/tmp/tmpdvcfwayj.swift:49:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumMin'\n\
    \    var vowelsCountSumSumSumSumSumSumMin = 0\n        ^\n/tmp/tmpdvcfwayj.swift:41:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumMin' previously declared here\n    var vowelsCountSumSumSumSumSumSumMin\
    \ = 0\n        ^\n/tmp/tmpdvcfwayj.swift:51:9: error: invalid redeclaration of\
    \ 'vowelsCountSumSumSumSumSumSumSumIndex'\n    var vowelsCountSumSumSumSumSumSumSumIndex\
    \ = 0\n        ^\n/tmp/tmpdvcfwayj.swift:47:9: note: 'vowelsCountSumSumSumSumSumSumSumIndex'\
    \ previously declared here\n    var vowelsCountSumSumSumSumSumSumSumIndex = 0\n\
    \        ^\n/tmp/tmpdvcfwayj.swift:52:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumMax'\n\
    \    var vowelsCountSumSumSumSumSumSumSumMax = 0\n        ^\n/tmp/tmpdvcfwayj.swift:44:9:\
    \ note: 'vowelsCountSumSumSumS"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    for char in word {\n        if vowels.contains(char)\
    \ {\n            vowelsCount[vowels.indexOf(char)]++\n        }\n    }\n    if\
    \ vowelsCount.contains(0) {\n        return \"\"\n    }\n    if vowelsCount.contains(1)\
    \ {\n        return vowels[0]\n    }\n    if vowelsCount.contains(2) {\n     \
    \   return vowels[1]\n    }\n    if vowelsCount.contains(3) {\n        return\
    \ vowels[2]\n    }\n    if vowelsCount.contains(4) {\n        return vowels[3]\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2wgd8f4.swift:16:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(char) {\n   \
    \                        ^\n/tmp/tmpz2wgd8f4.swift:17:46: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            vowelsCount[vowels.indexOf(char)]++\n\
    \                                             ^~\n/tmp/tmpz2wgd8f4.swift:17:32:\
    \ error: value of type '[String]' has no member 'indexOf'\n            vowelsCount[vowels.indexOf(char)]++\n\
    \                        ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word {\n\
    \        if letter.isUpper() {\n            vowels.append(letter)\n        } else\
    \ if letter.isLower() {\n            vowels.append(letter)\n        } else {\n\
    \            vowels.append(letter)\n        }\n    }\n    vowels.reverse()\n \
    \   var result: String = \"\"\n    for vowel in vowels {\n        if vowel.hasPrefix(\"\
    a\") {\n            if vowel.hasSuffix(\"e\") {\n                if vowel.hasSuffix(\"\
    i\") {\n                    if vowel.hasSuffix(\"o\") {\n                    \
    \    if vowel.hasSuffix(\"u\") {\n                            result = vowel\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzkt6imq7.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpzkt6imq7.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n/tmp/tmpzkt6imq7.swift:17:26:\
    \ error: value of type 'Character' has no member 'isLower'\n        } else if\
    \ letter.isLower() {\n                  ~~~~~~ ^~~~~~~\n/tmp/tmpzkt6imq7.swift:18:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n/tmp/tmpzkt6imq7.swift:20:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word {\n\
    \        if letter.isUpper() {\n            vowels.append(letter)\n        }\n\
    \    }\n    vowels.reverse()\n    for vowel in vowels {\n        if vowel.hasPrefix(\"\
    A\") {\n            return vowel\n        }\n    }\n    return \"\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpt5gcc4lc.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmpt5gcc4lc.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.contains(.vowel) {\n            vowels.append(char)\n\
    \        }\n    }\n    if vowels.count > 0 {\n        let vowel = vowels.sorted(by:\
    \ { $0.unicodeScalars.compare($1.unicodeScalars) == .orderedAscending })[0]\n\
    \        return vowel.unicodeScalars.first!\n    } else {\n        return \"\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_7_i_tdj.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_7_i_tdj.swift:15:42:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n                                        ~^~~~~\n/tmp/tmp_7_i_tdj.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(char)\n                          ^\n/tmp/tmp_7_i_tdj.swift:20:59:\
    \ error: value of type 'String.UnicodeScalarView' has no member 'compare'\n  \
    \      let vowel = vowels.sorted(by: { $0.unicodeScalars.compare($1.unicodeScalars)\
    \ == .orderedAscending })[0]\n                                        ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex2: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex3: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex4:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex5: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex6: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex7:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex8: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex9: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex10:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex11: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex12: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex13:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex14: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex15: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex16:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex17: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex18: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex19:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex20: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex21: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex22:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex23: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex24: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex25:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex26: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex27: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex28:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex29: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex30: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex31:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex32: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex33: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex34:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex35: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex36: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex37:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvvz9rul4.swift:52:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountMax: Int\
    \ = 0\n    var vowelsIndexCountMin: Int = 0\n    var vowelsIndexCountSum: Int\
    \ = 0\n    var vowelsIndexCountSumMax: Int = 0\n    var vowelsIndexCountSumMin:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex: Int = 0\n    var vowelsIndexCountSumMinIndex:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex2: Int = 0\n    var vowelsIndexCountSumMinIndex2:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex3: Int = 0\n    var vowelsIndexCountSumMinIndex3:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex4: Int = 0\n    var vowelsIndexCountSumMinIndex4:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex5: Int = 0\n    var vowelsIndexCountSumMinIndex5:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex6: Int = 0\n    var vowelsIndexCountSumMinIndex6:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex7: Int = 0\n    var vowelsIndexCountSumMinIndex7:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex8: Int = 0\n    var vowelsIndexCountSumMinIndex8:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex9: Int = 0\n    var vowelsIndexCountSumMinIndex9:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex10: Int = 0\n    var vowelsIndexCountSumMinIndex10:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex11: Int = 0\n    var vowelsIndexCountSumMinIndex11:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex12: Int = 0\n    var vowelsIndexCountSumMinIndex12:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex13: Int = 0\n    var vowelsIndexCountSumMinIndex13:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex14: Int = 0\n    var vowelsIndexCountSumMinIndex14:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex15: Int = 0\n    var vowelsIndexCountSumMinIndex15:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex16: Int = 0\n    var vowelsIndexCountSumMinIndex16:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex17: \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp32ce009p.swift:54:39: error: expected type\n    var vowelsIndexCountSumMaxIndex17:\
    \ \n                                      ^\n                                \
    \       <#type#>\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for index\
    \ in word.characters.reverse() {\n        switch index {\n        case \"a\":\n\
    \        case \"e\":\n        case \"i\":\n        case \"o\":\n        case \"\
    u\":\n            vowelIndex = word.characters.count - 1\n            vowel =\
    \ index\n            break\n        default:\n            break\n        }\n \
    \   }\n    if vowelIndex == 0 {\n        return \"\"\n    }\n    if vowelIndex\
    \ == word.characters.count - 1 {\n        return vowel\n    }\n    if vowelIndex\
    \ > word.characters.count - 1 {\n        return \"\"\n    }\n    if vowelIndex\
    \ < 0 {\n        return \"\"\n    }\n    if vowelIndex == word.characters.count\
    \ - 2 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 3 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 4 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 5 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 6 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 7 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 8 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 9 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 10 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 11 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 12 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 13 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 14 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 15 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 16 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 17 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 18 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 19 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 20 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 21 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 22 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 23 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 24 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 25 {\n        return vowel\n    }\n    if vowelIndex == word.characters.count\
    \ - 26 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzusjk9d.swift:17:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"a\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpuzusjk9d.swift:18:9: error: 'case' label in\
    \ a 'switch' must have at least one executable statement\n        case \"e\":\n\
    \        ^~~~~~~~~\n                  break\n/tmp/tmpuzusjk9d.swift:19:9: error:\
    \ 'case' label in a 'switch' must have at least one executable statement\n   \
    \     case \"i\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzusjk9d.swift:20:9:\
    \ error: 'case' label in a 'switch' must have at least one executable statement\n\
    \        case \"o\":\n        ^~~~~~~~~\n                  break\n/tmp/tmpuzusjk9d.swift:141:48:\
    \ error: expected '}' at end of brace statement\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")\n                                               ^\n/tmp/tmpuzusjk9d.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpuzusjk9d.swift:15:34:\
    \ error: value of type 'String' has no member 'reverse'\n    for index in word.characters.reverse()\
    \ {\n                 ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpuzusjk9d.swift:32:27: error:\
    \ 'characters' is unavailable: Please use String directly\n    if vowelIndex ==\
    \ word.characters.count - 1 {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpuzusjk9d.swift:35:26: error: 'characters'\
    \ is unavailable: Please use String directly\n    if vowelIndex > word.characters.count\
    \ - 1 {\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuzusjk9d.swift:41:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    if vowelIndex == word.characters.count - 2 {\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var chara"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n    var\
    \ vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var vowelIndex6\
    \ = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9 =\
    \ 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12\
    \ = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15\
    \ = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18\
    \ = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21\
    \ = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24\
    \ = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27\
    \ = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30\
    \ = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33\
    \ = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36\
    \ = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39\
    \ = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42\
    \ = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45\
    \ = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48\
    \ = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51\
    \ = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54\
    \ = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57\
    \ = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60\
    \ = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63\
    \ = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66\
    \ = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69\
    \ = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72\
    \ = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75\
    \ = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78\
    \ = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n    var vowelIndex81\
    \ = 0\n    var vowelIndex82 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp33ckr20i.swift:97:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp33ckr20i.swift:13:9: warning: variable 'vowels' was written to, but\
    \ never read\n    var vowels = [String]()\n        ^\n/tmp/tmp33ckr20i.swift:15:9:\
    \ warning: initialization of variable 'vowelIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp33ckr20i.swift:16:9: warning: initialization of variable 'vowelIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp33ckr20i.swift:17:9:\
    \ warning: initialization of variable 'vowelIndex3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp33ckr20i.swift:18:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp33ckr20i.swift:19:9:\
    \ warning: initialization of variable 'vowelIndex5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp33ckr20i.swift:20:9: warning: initialization of variable 'vowelIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp33ckr20i.swift:21:9:\
    \ warning: initialization of variable 'vowelIndex7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex7 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp33ckr20i.swift:22:9: warning: initialization of variable 'vowelIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex8 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp33ckr20i.swift:23:9:\
    \ warning: initialization of variable 'vowelIndex9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex9 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp33ckr20i.swift:24:9: warning:"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountIndex: [Int]\
    \ = []\n    var vowelsIndexCountIndexCount: [Int] = []\n    var vowelsIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCount: [Int] = []\n    var\
    \ vowelsIndexCountIndexCountIndexCountIndex: [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndex: [Int]\
    \ = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCount: [Int]\
    \ = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpig94q3ay.swift:26:9: error: invalid redeclaration of 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex: [Int]\
    \ = []\n        ^\n/tmp/tmpig94q3ay.swift:25:9: note: 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex'\
    \ previously declared here\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n        ^\n/tmp/tmpig94q3ay.swift:33:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n        ^\n/tmp/tmpig94q3ay.swift:32:9: note: 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\
    \ previously declared here\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n        ^\n/tmp/tmpig94q3ay.swift:35:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n        ^\n/tmp/tmpig94q3ay.swift:34:9: note: 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\
    \ previously declared here\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n        ^\n/tmp/tmpig94q3ay.swift:38:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n        ^\n/tmp/tmpig94q3ay.swift:37:9: note: 'vowelsIndexCountIndexCountIndexCountIndexCount"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = vowelsIndex\n\
    \    var vowelsIndex3 = vowelsIndex\n    var vowelsIndex4 = vowelsIndex\n    var\
    \ vowelsIndex5 = vowelsIndex\n    var vowelsIndex6 = vowelsIndex\n    var vowelsIndex7\
    \ = vowelsIndex\n    var vowelsIndex8 = vowelsIndex\n    var vowelsIndex9 = vowelsIndex\n\
    \    var vowelsIndex10 = vowelsIndex\n    var vowelsIndex11 = vowelsIndex\n  \
    \  var vowelsIndex12 = vowelsIndex\n    var vowelsIndex13 = vowelsIndex\n    var\
    \ vowelsIndex14 = vowelsIndex\n    var vowelsIndex15 = vowelsIndex\n    var vowelsIndex16\
    \ = vowelsIndex\n    var vowelsIndex17 = vowelsIndex\n    var vowelsIndex18 =\
    \ vowelsIndex\n    var vowelsIndex19 = vowelsIndex\n    var vowelsIndex20 = vowelsIndex\n\
    \    var vowelsIndex21 = vowelsIndex\n    var vowelsIndex22 = vowelsIndex\n  \
    \  var vowelsIndex23 = vowelsIndex\n    var vowelsIndex24 = vowelsIndex\n    var\
    \ vowelsIndex25 = vowelsIndex\n    var vowelsIndex26 = vowelsIndex\n    var vowelsIndex27\
    \ = vowelsIndex\n    var vowelsIndex28 = vowelsIndex\n    var vowelsIndex29 =\
    \ vowelsIndex\n    var vowelsIndex30 = vowelsIndex\n    var vowelsIndex31 = vowelsIndex\n\
    \    var vowelsIndex32 = vowelsIndex\n    var vowelsIndex33 = vowelsIndex\n  \
    \  var vowelsIndex34 = vowelsIndex\n    var vowelsIndex35 = vowelsIndex\n    var\
    \ vowelsIndex36 = vowelsIndex\n    var vowelsIndex37 = vowelsIndex\n    var vowelsIndex38\
    \ = vowelsIndex\n    var vowelsIndex39 = vowelsIndex\n    var vowelsIndex40 =\
    \ vowelsIndex\n    var vowelsIndex41 = vowelsIndex\n    var vowelsIndex42 = vowelsIndex\n\
    \    var vowelsIndex43 = vowelsIndex\n    var vowelsIndex44 = vowelsIndex\n  \
    \  var vowelsIndex45 = vowelsIndex\n    var vowelsIndex46 = vowelsIndex\n    var\
    \ vowelsIndex47 = vowelsIndex\n    var vowelsIndex48 = vowelsIndex\n    var vowelsIndex49\
    \ = vowelsIndex\n    var vowelsIndex50 = vowelsIndex\n    var vowelsIndex51 =\
    \ vowelsIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprvojhj30.swift:13:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = \"aeiouAEIOU\"\n    ~~~\
    \ ^\n    let\n/tmp/tmprvojhj30.swift:14:9: warning: initialization of variable\
    \ 'vowelsCount' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:15:9:\
    \ warning: variable 'vowelsIndex' was never mutated; consider changing to 'let'\
    \ constant\n    var vowelsIndex = 0\n    ~~~ ^\n    let\n/tmp/tmprvojhj30.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex2 = vowelsIndex\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex3 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmprvojhj30.swift:18:9: warning: initialization of variable 'vowelsIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex4 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:19:9:\
    \ warning: initialization of variable 'vowelsIndex5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex5 = vowelsIndex\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:20:9: warning: initialization\
    \ of variable 'vowelsIndex6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex6 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmprvojhj30.swift:21:9: warning: initialization of variable 'vowelsIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex7 = vowelsIndex\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojhj30.swift:22:9:\
    \ warning: initialization of variable 'vowelsIndex8' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex8 = vowelsIndex\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmprvojh"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsCountFromRight:\
    \ Int = 0\n    var vowelsCountFromLeft: Int = 0\n    var vowelsCountFromRightAndLeft:\
    \ Int = 0\n    var vowelsCountFromRightAndLeftFromLeft: Int = 0\n    var vowelsCountFromRightAndLeftFromRight:\
    \ Int = 0\n    var vowelsCountFromLeftAndRight: Int = 0\n    var vowelsCountFromLeftAndRightFromLeft:\
    \ Int = 0\n    var vowelsCountFromLeftAndRightFromRight: Int = 0\n    var vowelsCountFromRightAndLeftFromLeftAndRight:\
    \ Int = 0\n    var vowelsCountFromRightAndLeftFromRightAndLeft: Int = 0\n    var\
    \ vowelsCountFromLeftAndRightFromLeftAndRight: Int = 0\n    var vowelsCountFromLeftAndRightFromRightAndLeft:\
    \ Int = 0\n    var vowelsCountFromRightAndLeftFromLeftAndRightAndLeft: Int = 0\n\
    \    var vowelsCountFromLeftAndRightFromRightAndLeftAndLeft: Int = 0\n    var\
    \ vowelsCountFromRightAndLeftFromLeftAndRightAndLeftAndLeft: Int = 0\n    var\
    \ vowelsCountFromLeftAndRightFromRightAndLeftAndLeftAndLeft: Int = 0\n    var\
    \ vowelsCountFromRightAndLeftFromLeftAndRightAndLeftAndLeftAndLeft: Int = 0\n\
    \    var vowelsCountFromLeftAndRightFromRightAndLeftAndLeftAndLeftAndLeft: Int\
    \ = 0\n    var vowelsCountFromRightAndLeftFromLeftAndRightAndLeftAndLeftAndLeftAndLeft:\
    \ Int = 0\n    var vowelsCountFromLeftAndRightFromRightAndLeftAndLeftAndLeftAndLeftAndLeft:\
    \ Int = 0\n    var vowelsCountFromRightAndLeftFromLeftAndRightAndLeftAndLeftAndLeftAndLeftAndLeft:\
    \ Int = 0\n    var vowelsCountFromLeftAndRightFromRightAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeft:\
    \ Int = 0\n    var vowelsCountFromRightAndLeftFromLeftAndRightAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAnd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4n9j6ufb.swift:38:9: error: type annotation missing in pattern\n\
    \    var vowelsCountFromRightAndLeftFromLeftAndRightAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAndLeftAnd\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = Set<Character>()\n    vowels.insert(\"\
    a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"i\")\n    vowels.insert(\"\
    o\")\n    vowels.insert(\"u\")\n    vowels.insert(\"A\")\n    vowels.insert(\"\
    E\")\n    vowels.insert(\"I\")\n    vowels.insert(\"O\")\n    vowels.insert(\"\
    U\")\n    vowels.insert(\"a\")\n    vowels.insert(\"e\")\n    vowels.insert(\"\
    i\")\n    vowels.insert(\"o\")\n    vowels.insert(\"u\")\n    vowels.insert(\"\
    A\")\n    vowels.insert(\"E\")\n    vowels.insert(\"I\")\n    vowels.insert(\"\
    O\")\n    vowels.insert(\"U\")\n    \n    var vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    var vowelsIndex = 0\n    var vowelsCountIndex = 0\n \
    \   var vowelsIndex2 = 0\n    var vowelsCountIndex2 = 0\n    \n    var consonantsCount\
    \ = word.characters.filter({ !vowels.contains($0) }).count\n    \n    if consonantsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    var consonantsIndex = 0\n    var\
    \ consonantsCountIndex = 0\n    var consonantsIndex2 = 0\n    var consonantsCountIndex2\
    \ = 0\n    \n    var vowelsIndex2 = 0\n    var vowelsCountIndex2 = 0\n    \n \
    \   var consonantsIndex2 = 0\n    var consonantsCountIndex2 = 0\n    \n    var\
    \ consonantsIndex3 = 0\n    var consonantsCountIndex3 = 0\n    \n    var consonantsIndex4\
    \ = 0\n    var consonantsCountIndex4 = 0\n    \n    var consonantsIndex5 = 0\n\
    \    var consonantsCountIndex5 = 0\n    \n    var consonantsIndex6 = 0\n    var\
    \ consonantsCountIndex6 = 0\n    \n    var consonantsIndex7 = 0\n    var consonantsCountIndex7\
    \ = 0\n    \n    var consonantsIndex8 = 0\n    var consonantsCountIndex8 = 0\n\
    \    \n    var consonantsIndex9 = 0\n    var consonantsCountIndex9 = 0\n    \n\
    \    var consonantsIndex10 = 0\n    var consonantsCountIndex10 = 0\n    \n   \
    \ var consonantsIndex11 = 0\n    var consonantsCountIndex11 = 0\n    \n    var\
    \ consonantsIndex12 = 0\n    var consonantsCountIndex12 = 0\n    \n    var consonantsIndex13\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0v081r6g.swift:35:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0v081r6g.swift:46:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    var consonantsCount = word.characters.filter({\
    \ !vowels.contains($0) }).count\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0v081r6g.swift:57:9: error: invalid redeclaration\
    \ of 'vowelsIndex2'\n    var vowelsIndex2 = 0\n        ^\n/tmp/tmp0v081r6g.swift:43:9:\
    \ note: 'vowelsIndex2' previously declared here\n    var vowelsIndex2 = 0\n  \
    \      ^\n/tmp/tmp0v081r6g.swift:58:9: error: invalid redeclaration of 'vowelsCountIndex2'\n\
    \    var vowelsCountIndex2 = 0\n        ^\n/tmp/tmp0v081r6g.swift:44:9: note:\
    \ 'vowelsCountIndex2' previously declared here\n    var vowelsCountIndex2 = 0\n\
    \        ^\n/tmp/tmp0v081r6g.swift:60:9: error: invalid redeclaration of 'consonantsIndex2'\n\
    \    var consonantsIndex2 = 0\n        ^\n/tmp/tmp0v081r6g.swift:54:9: note: 'consonantsIndex2'\
    \ previously declared here\n    var consonantsIndex2 = 0\n        ^\n/tmp/tmp0v081r6g.swift:61:9:\
    \ error: invalid redeclaration of 'consonantsCountIndex2'\n    var consonantsCountIndex2\
    \ = 0\n        ^\n/tmp/tmp0v081r6g.swift:55:9: note: 'consonantsCountIndex2' previously\
    \ declared here\n    var consonantsCountIndex2 = 0\n        ^\n/tmp/tmp0v081r6g.swift:93:9:\
    \ error: type annotation missing in pattern\n    var consonantsIndex13\n     \
    \   ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.filter({ $0.isVowel }).count > 0 {\n     \
    \       vowels.append(char.unicodeScalars.filter({ $0.isVowel }).first!.value)\n\
    \        }\n    }\n    if vowels.count > 0 {\n        return vowels.sorted().first!\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpedaq45wx.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpedaq45wx.swift:15:44:\
    \ error: value of type 'Unicode.Scalar' has no member 'isVowel'\n        if char.unicodeScalars.filter({\
    \ $0.isVowel }).count > 0 {\n                                        ~~ ^~~~~~~\n\
    /tmp/tmpedaq45wx.swift:16:77: error: cannot convert value of type 'UInt32' to\
    \ expected argument type 'String'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isVowel }).first!.value)\n                                              \
    \                              ^\n/tmp/tmpedaq45wx.swift:16:59: error: value of\
    \ type 'Unicode.Scalar' has no member 'isVowel'\n            vowels.append(char.unicodeScalars.filter({\
    \ $0.isVowel }).first!.value)\n                                              \
    \         ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var result:\
    \ String = \"\"\n    \n    for char in word.characters {\n        if vowels.contains(char.lowercaseString)\
    \ {\n            \n            let index = word.characters.index(of: char.lowercaseString)!\n\
    \            \n            if index == word.characters.count - 1 {\n         \
    \       \n                result = char.lowercaseString\n                \n  \
    \          } else {\n                \n                let nextChar = word.characters[index\
    \ + 1]\n                \n                if nextChar.lowercaseString == char.lowercaseString\
    \ {\n                    \n                    result = char.lowercaseString\n\
    \                    \n                } else {\n                    \n      \
    \              result = \"\"\n                    \n                }\n      \
    \          \n            }\n            \n        }\n        \n    }\n    \n \
    \   return result\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp14zft12x.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp14zft12x.swift:19:33:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n        if\
    \ vowels.contains(char.lowercaseString) {\n                           ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp14zft12x.swift:21:56: error: value of type 'Character' has no member 'lowercaseString'\n\
    \            let index = word.characters.index(of: char.lowercaseString)!\n  \
    \                                                ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp14zft12x.swift:25:31:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \       result = char.lowercaseString\n                         ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmp14zft12x.swift:31:53: error: value of type 'Character' has no member 'lowercaseString'\n\
    \                if nextChar.lowercaseString == char.lowercaseString {\n     \
    \                                          ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp14zft12x.swift:33:35:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \           result = char.lowercaseString\n                             ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters, let word = word.characters\
    \ else {\n        return \"\"\n    }\n    var index = word.startIndex\n    var\
    \ vowelIndex = 0\n    while vowelIndex < vowels.count {\n        let char = vowels[vowelIndex]\n\
    \        if word.startIndex < index {\n            vowelIndex += 1\n         \
    \   continue\n        }\n        if word.endIndex > index {\n            vowelIndex\
    \ -= 1\n            continue\n        }\n        if char == word[index] {\n  \
    \          vowelIndex += 1\n            continue\n        }\n        if char ==\
    \ word[index..<word.endIndex].last {\n            vowelIndex -= 1\n          \
    \  continue\n        }\n        break\n    }\n    return vowelIndex < vowels.count\
    \ ? vowels[vowelIndex] : \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2maddf9h.swift:13:24: error: cannot find 'vowels' in scope\n  \
    \  guard let vowels = vowels.characters, let word = word.characters else {\n \
    \                      ^~~~~~\n/tmp/tmp2maddf9h.swift:13:59: error: 'characters'\
    \ is unavailable: Please use String directly\n    guard let vowels = vowels.characters,\
    \ let word = word.characters else {\n                                        \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2maddf9h.swift:13:43: error: initializer for conditional binding\
    \ must have Optional type, not 'String'\n    guard let vowels = vowels.characters,\
    \ let word = word.characters else {\n                                        \
    \  ^          ~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    \n    for char in word.characters {\n\
    \        if vowels.contains(char) {\n            vowelIndex = vowels.firstIndex(of:\
    \ char)\n            break\n        }\n    }\n    \n    if vowelIndex == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelIndex = vowelIndex - 1\n    \n\
    \    if vowelIndex < 0 {\n        return \"\"\n    }\n    \n    let firstConsonantIndex\
    \ = word.index(word, offsetBy: vowelIndex)\n    \n    let secondConsonantIndex\
    \ = word.index(word, offsetBy: vowelIndex + 1)\n    \n    if firstConsonantIndex\
    \ == word.endIndex {\n        return \"\"\n    }\n    \n    if secondConsonantIndex\
    \ == word.endIndex {\n        return \"\"\n    }\n    \n    let firstConsonant\
    \ = word[firstConsonantIndex].lowercased()\n    let secondConsonant = word[secondConsonantIndex].lowercased()\n\
    \    \n    if firstConsonant == secondConsonant {\n        return firstConsonant\n\
    \    }\n    \n    if firstConsonant == \"a\" || firstConsonant == \"e\" || firstConsonant\
    \ == \"i\" || firstConsonant == \"o\" || firstConsonant == \"u\" {\n        return\
    \ firstConsonant\n    }\n    \n    if secondConsonant == \"a\" || secondConsonant\
    \ == \"e\" || secondConsonant == \"i\" || secondConsonant == \"o\" || secondConsonant\
    \ == \"u\" {\n        return secondConsonant\n    }\n    \n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpg7s3nk8k.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpg7s3nk8k.swift:19:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpg7s3nk8k.swift:20:33:\
    \ error: value of optional type 'Array<String>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<String>.Index' (aka 'Int')\n        \
    \    vowelIndex = vowels.firstIndex(of: char)\n                              \
    \  ^\n/tmp/tmpg7s3nk8k.swift:20:33: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            vowelIndex = vowels.firstIndex(of:\
    \ char)\n                                ^\n                                 \
    \                    ?? <#default value#>\n/tmp/tmpg7s3nk8k.swift:20:33: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            vowelIndex = vowels.firstIndex(of: char)\n                      \
    \          ^\n                                                    !\n/tmp/tmpg7s3nk8k.swift:20:48:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowelIndex = vowels.firstIndex(of: char)\n                      \
    \                         ^\n/tmp/tmpg7s3nk8k.swift:29:9: error: invalid redeclaration\
    \ of 'vowelIndex'\n    let vowelIndex = vowelIndex - 1\n        ^\n/tmp/tmpg7s3nk8k.swift:16:9:\
    \ note: 'vowelIndex' previously declared here\n    var vowelIndex = 0\n      \
    \  ^\n/tmp/tmpg7s3nk8k.swift:35:42: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Index'\n    let firstConsonantIndex = word.index(word,\
    \ offsetBy: vowelIndex)\n                                         ^\n/tmp/tmpg7s3nk8k.swift:37:43:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Index'\n\
    \   "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word.characters\
    \ {\n        if letter.isUppercase {\n            vowels.append(letter)\n    \
    \    }\n    }\n    var vowelsCount = vowels.count\n    var vowelIndex = 0\n  \
    \  var vowelIndex2 = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n   \
    \ var vowelIndex5 = 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var\
    \ vowelIndex8 = 0\n    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var\
    \ vowelIndex11 = 0\n    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var\
    \ vowelIndex14 = 0\n    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var\
    \ vowelIndex17 = 0\n    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var\
    \ vowelIndex20 = 0\n    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var\
    \ vowelIndex23 = 0\n    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var\
    \ vowelIndex26 = 0\n    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var\
    \ vowelIndex29 = 0\n    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var\
    \ vowelIndex32 = 0\n    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var\
    \ vowelIndex35 = 0\n    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var\
    \ vowelIndex38 = 0\n    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var\
    \ vowelIndex41 = 0\n    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var\
    \ vowelIndex44 = 0\n    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var\
    \ vowelIndex47 = 0\n    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var\
    \ vowelIndex50 = 0\n    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var\
    \ vowelIndex53 = 0\n    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var\
    \ vowelIndex56 = 0\n    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var\
    \ vowelIndex59 = 0\n    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var\
    \ vowelIndex62 = 0\n    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var\
    \ vowelIndex65 = 0\n    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var\
    \ vowelIndex68 = 0\n    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var\
    \ vowelIndex71 = 0\n    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var\
    \ vowelIndex74 = 0\n    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var\
    \ vowelIndex77 = 0\n    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\"\
    ) == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptheu3d26.swift:99:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmptheu3d26.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptheu3d26.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n \
    \   var vowelIndex5 = 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n  \
    \  var vowelIndex8 = 0\n    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n  \
    \  var vowelIndex11 = 0\n    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n\
    \    var vowelIndex14 = 0\n    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n\
    \    var vowelIndex17 = 0\n    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n\
    \    var vowelIndex20 = 0\n    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n\
    \    var vowelIndex23 = 0\n    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n\
    \    var vowelIndex26 = 0\n    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n\
    \    var vowelIndex29 = 0\n    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n\
    \    var vowelIndex32 = 0\n    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n\
    \    var vowelIndex35 = 0\n    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n\
    \    var vowelIndex38 = 0\n    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n\
    \    var vowelIndex41 = 0\n    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n\
    \    var vowelIndex44 = 0\n    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n\
    \    var vowelIndex47 = 0\n    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n\
    \    var vowelIndex50 = 0\n    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n\
    \    var vowelIndex53 = 0\n    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n\
    \    var vowelIndex56 = 0\n    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n\
    \    var vowelIndex59 = 0\n    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n\
    \    var vowelIndex62 = 0\n    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n\
    \    var vowelIndex65 = 0\n    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n\
    \    var vowelIndex68 = 0\n    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n\
    \    var vowelIndex71 = 0\n    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n\
    \    var vowelIndex74 = 0\n    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n\
    \    var vowelIndex77 = 0\n    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n\
    \    var vowelIndex80 = 0\n    var vowelIndex81 = 0\n    var vowelIndex82 = 0\n\
    \    var vowelIndex83 = 0\n    var vowelIndex84 = 0\n    var vowelIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7vk7oj1_.swift:98:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013896
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    \n    for vowel in vowels {\n        if word.rangeOfString(vowel)\
    \ != nil {\n            return vowel\n        }\n    }\n    return \"\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0lm0gbei.swift:17:17: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if word.rangeOfString(vowel) != nil {\n           ~~~~\
    \ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"AEIOUaeiou\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsArrayCount = vowels.characters.count\n    var\
    \ vowelsArrayIndex = 0\n    var vowelsArrayLastIndex = 0\n    var vowelsArrayLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexCount2 = 0\n    var vowelsArrayLastIndexCount3\
    \ = 0\n    var vowelsArrayLastIndexCount4 = 0\n    var vowelsArrayLastIndexCount5\
    \ = 0\n    var vowelsArrayLastIndexCount6 = 0\n    var vowelsArrayLastIndexCount7\
    \ = 0\n    var vowelsArrayLastIndexCount8 = 0\n    var vowelsArrayLastIndexCount9\
    \ = 0\n    var vowelsArrayLastIndexCount10 = 0\n    var vowelsArrayLastIndexCount11\
    \ = 0\n    var vowelsArrayLastIndexCount12 = 0\n    var vowelsArrayLastIndexCount13\
    \ = 0\n    var vowelsArrayLastIndexCount14 = 0\n    var vowelsArrayLastIndexCount15\
    \ = 0\n    var vowelsArrayLastIndexCount16 = 0\n    var vowelsArrayLastIndexCount17\
    \ = 0\n    var vowelsArrayLastIndexCount18 = 0\n    var vowelsArrayLastIndexCount19\
    \ = 0\n    var vowelsArrayLastIndexCount20 = 0\n    var vowelsArrayLastIndexCount21\
    \ = 0\n    var vowelsArrayLastIndexCount22 = 0\n    var vowelsArrayLastIndexCount23\
    \ = 0\n    var vowelsArrayLastIndexCount24 = 0\n    var vowelsArrayLastIndexCount25\
    \ = 0\n    var vowelsArrayLastIndexCount26 = 0\n    var vowelsArrayLastIndexCount27\
    \ = 0\n    var vowelsArrayLastIndexCount28 = 0\n    var vowelsArrayLastIndexCount29\
    \ = 0\n    var vowelsArrayLastIndexCount30 = 0\n    var vowelsArrayLastIndexCount31\
    \ = 0\n    var vowelsArrayLastIndexCount32 = 0\n    var vowelsArrayLastIndexCount33\
    \ = 0\n    var vowelsArrayLastIndexCount34 = 0\n    var vowelsArrayLastIndexCount35\
    \ = 0\n    var vowelsArrayLastIndexCount36 = 0\n    var vowelsArrayLastIndexCount37\
    \ = 0\n    var vowelsArrayLastIndexCount38 = 0\n    var vowelsArrayLastIndexCount39\
    \ = 0\n    var vowelsArrayLastIndexCount40 = 0\n    var vowelsArrayLastIndexCount41\
    \ = 0\n    var vowelsArrayLastIndexCount42 = 0\n    var vowelsArrayLastIndexCount43\
    \ = 0\n    var vowelsArrayLastIndexCount44 = 0\n    var vowelsArrayLastIndexCount45\
    \ = 0\n    var vowelsArrayLastIndexCount46 = 0\n    var vowelsArrayLastIndexCount47\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvi0cou5z.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvi0cou5z.swift:15:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvi0cou5z.swift:13:9: warning: variable 'vowels' was\
    \ never mutated; consider changing to 'let' constant\n    var vowels = \"AEIOUaeiou\"\
    \n    ~~~ ^\n    let\n/tmp/tmpvi0cou5z.swift:14:9: warning: initialization of\
    \ variable 'vowelsArray' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var vowelsArray = vowels.characters\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpvi0cou5z.swift:15:9: warning: initialization of variable 'vowelsArrayCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsArrayCount = vowels.characters.count\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpvi0cou5z.swift:16:9: warning: initialization of variable 'vowelsArrayIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpvi0cou5z.swift:17:9:\
    \ warning: initialization of variable 'vowelsArrayLastIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsArrayLastIndex\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpvi0cou5z.swift:18:9: warning:\
    \ initialization of variable 'vowelsArrayLastIndexCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsArrayLastIndexCount\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpvi0cou5z.swift:19:9:\
    \ warning: initialization of variable 'vowelsArrayLastIndexCount2' was never used;\
    \ consider repla"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    for index\
    \ in word.characters.reverse() {\n        if index == \" \" {\n            vowelIndex++\n\
    \        }\n        if index == \"a\" || index == \"e\" || index == \"i\" || index\
    \ == \"o\" || index == \"u\" {\n            vowelIndex = word.characters.count\
    \ - vowelIndex\n            vowel = String(word.characters.suffix(vowelIndex))\n\
    \            break\n        }\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpw0bfr6q8.swift:15:34: error: value of type 'String' has no member\
    \ 'reverse'\n    for index in word.characters.reverse() {\n                 ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var vowelsCount: [Int] = [0, 0, 0, 0, 0]\n    \n    for char\
    \ in word.characters {\n        if vowels.contains(char) {\n            vowelsCount[vowels.indexOf(char)]++\n\
    \        }\n    }\n    \n    if vowelsCount[0] > 0 && vowelsCount[1] > 0 {\n \
    \       return \"\"\n    }\n    \n    if vowelsCount[0] > 0 && vowelsCount[1]\
    \ < 0 {\n        return vowels[0]\n    }\n    \n    if vowelsCount[0] < 0 && vowelsCount[1]\
    \ > 0 {\n        return vowels[vowels.count - 1]\n    }\n    \n    if vowelsCount[0]\
    \ < 0 && vowelsCount[1] < 0 {\n        return vowels[vowels.count - 2]\n    }\n\
    \    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz_olujyz.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpz_olujyz.swift:18:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpz_olujyz.swift:19:46:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelsCount[vowels.indexOf(char)]++\n                                     \
    \        ^~\n/tmp/tmpz_olujyz.swift:19:32: error: value of type '[String]' has\
    \ no member 'indexOf'\n            vowelsCount[vowels.indexOf(char)]++\n     \
    \                   ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    \n    for char in word {\n        if vowels.contains(char) {\n   \
    \         vowelsIndex.append(vowels.indexOf(char))\n        }\n    }\n    \n \
    \   if vowelsIndex.count > 0 {\n        let minIndex = vowelsIndex.min()!\n  \
    \      let maxIndex = vowelsIndex.max()!\n        \n        if maxIndex - minIndex\
    \ == 1 {\n            return vowels[minIndex]\n        }\n        \n        let\
    \ minIndex = vowelsIndex.min()!\n        let maxIndex = vowelsIndex.max()!\n \
    \       \n        if maxIndex - minIndex == 2 {\n            return vowels[minIndex]\
    \ + vowels[maxIndex]\n        }\n        \n        let minIndex = vowelsIndex.min()!\n\
    \        let maxIndex = vowelsIndex.max()!\n        \n        if maxIndex - minIndex\
    \ == 3 {\n            return vowels[minIndex] + vowels[maxIndex] + vowels[minIndex\
    \ + 1]\n        }\n        \n        let minIndex = vowelsIndex.min()!\n     \
    \   let maxIndex = vowelsIndex.max()!\n        \n        if maxIndex - minIndex\
    \ == 4 {\n            return vowels[minIndex] + vowels[maxIndex] + vowels[minIndex\
    \ + 1] + vowels[maxIndex + 1]\n        }\n    }\n    \n    return \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpk0w_oxsc.swift:18:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(char) {\n   \
    \                        ^\n/tmp/tmpk0w_oxsc.swift:19:39: error: value of type\
    \ '[String]' has no member 'indexOf'\n            vowelsIndex.append(vowels.indexOf(char))\n\
    \                               ~~~~~~ ^~~~~~~\n/tmp/tmpk0w_oxsc.swift:31:13:\
    \ error: invalid redeclaration of 'minIndex'\n        let minIndex = vowelsIndex.min()!\n\
    \            ^\n/tmp/tmpk0w_oxsc.swift:24:13: note: 'minIndex' previously declared\
    \ here\n        let minIndex = vowelsIndex.min()!\n            ^\n/tmp/tmpk0w_oxsc.swift:32:13:\
    \ error: invalid redeclaration of 'maxIndex'\n        let maxIndex = vowelsIndex.max()!\n\
    \            ^\n/tmp/tmpk0w_oxsc.swift:25:13: note: 'maxIndex' previously declared\
    \ here\n        let maxIndex = vowelsIndex.max()!\n            ^\n/tmp/tmpk0w_oxsc.swift:34:32:\
    \ error: binary operator '==' cannot be applied to operands of type 'Duration'\
    \ and 'Int'\n        if maxIndex - minIndex == 2 {\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk0w_oxsc.swift:34:32: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Duration, Duration), (Int, Int)\n     \
    \   if maxIndex - minIndex == 2 {\n                               ^\n/tmp/tmpk0w_oxsc.swift:38:13:\
    \ error: invalid redeclaration of 'minIndex'\n        let minIndex = vowelsIndex.min()!\n\
    \            ^\n/tmp/tmpk0w_oxsc.swift:24:13: note: 'minIndex' previously declared\
    \ here\n        let minIndex = vowelsIndex.min()!\n            ^\n/tmp/tmpk0w_oxsc.swift:39:13:\
    \ error: invalid redeclaration of 'maxIndex'\n        let maxIndex = vowelsIndex.max()!\n\
    \            ^\n/tmp/tmpk0w_oxsc.swift:25:13: note: 'maxIndex' previously declared\
    \ here\n        let maxIndex = vowelsIndex.max()!\n            ^\n/tmp/tmpk0w_oxsc.swift:41:32:\
    \ error: binary operator '==' cannot be applied to operands of type 'Duration'\
    \ and 'Int'\n        if maxIndex - minIndex == 3 {\n           ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpk0w_oxsc.swift:41:32: note: overloads for '==' exist wit"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0,\
    \ \"o\": 0, \"u\": 0]\n    var vowelsCountReverse: [String: Int] = [\"a\": 0,\
    \ \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverse: [String: Int] = [\"a\": 0, \"e\": 0, \"i\"\
    : 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverse: [String:\
    \ Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverse: [String: Int] = [\"a\": 0, \"\
    e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverse: [String: Int] = [\"a\"\
    : 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse: [String:\
    \ Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse: [String:\
    \ Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse: [String:\
    \ Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n    var\
    \ vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptjmyp5mo.swift:20:9: error: invalid redeclaration of 'vowelsCountReverseReverseReverseReverseReverse'\n\
    \    var vowelsCountReverseReverseReverseReverseReverse: [String: Int] = [\"a\"\
    : 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n        ^\n/tmp/tmptjmyp5mo.swift:19:9:\
    \ note: 'vowelsCountReverseReverseReverseReverseReverse' previously declared here\n\
    \    var vowelsCountReverseReverseReverseReverseReverse: [String: Int] = [\"a\"\
    : 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n        ^\n/tmp/tmptjmyp5mo.swift:21:9:\
    \ error: invalid redeclaration of 'vowelsCountReverseReverseReverseReverseReverse'\n\
    \    var vowelsCountReverseReverseReverseReverseReverse: [String: Int] = [\"a\"\
    : 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n        ^\n/tmp/tmptjmyp5mo.swift:19:9:\
    \ note: 'vowelsCountReverseReverseReverseReverseReverse' previously declared here\n\
    \    var vowelsCountReverseReverseReverseReverseReverse: [String: Int] = [\"a\"\
    : 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n        ^\n/tmp/tmptjmyp5mo.swift:25:9:\
    \ error: invalid redeclaration of 'vowelsCountReverseReverseReverseReverseReverseReverseReverse'\n\
    \    var vowelsCountReverseReverseReverseReverseReverseReverseReverse: [String:\
    \ Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n        ^\n/tmp/tmptjmyp5mo.swift:23:9:\
    \ note: 'vowelsCountReverseReverseReverseReverseReverseReverseReverse' previously\
    \ declared here\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n       \
    \ ^\n/tmp/tmptjmyp5mo.swift:26:9: error: invalid redeclaration of 'vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse'\n\
    \    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n       \
    \ ^\n/tmp/tmptjmyp5mo.swift:24:9: note: 'vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse'\
    \ previously declared here\n    var vowelsCountReverseReverseReverseReverseReverseReverseReverseReverse:\
    \ [String: Int] = [\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0]\n       \
    \ ^\n/tmp/tmptjmyp5mo.swift:28:9: error: invalid rede"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelsCount = vowels.count\n    var vowelsCount2\
    \ = vowelsCount\n    var vowelsCount3 = vowelsCount\n    var vowelsCount4 = vowelsCount\n\
    \    var vowelsCount5 = vowelsCount\n    var vowelsCount6 = vowelsCount\n    var\
    \ vowelsCount7 = vowelsCount\n    var vowelsCount8 = vowelsCount\n    var vowelsCount9\
    \ = vowelsCount\n    var vowelsCount10 = vowelsCount\n    var vowelsCount11 =\
    \ vowelsCount\n    var vowelsCount12 = vowelsCount\n    var vowelsCount13 = vowelsCount\n\
    \    var vowelsCount14 = vowelsCount\n    var vowelsCount15 = vowelsCount\n  \
    \  var vowelsCount16 = vowelsCount\n    var vowelsCount17 = vowelsCount\n    var\
    \ vowelsCount18 = vowelsCount\n    var vowelsCount19 = vowelsCount\n    var vowelsCount20\
    \ = vowelsCount\n    var vowelsCount21 = vowelsCount\n    var vowelsCount22 =\
    \ vowelsCount\n    var vowelsCount23 = vowelsCount\n    var vowelsCount24 = vowelsCount\n\
    \    var vowelsCount25 = vowelsCount\n    var vowelsCount26 = vowelsCount\n  \
    \  var vowelsCount27 = vowelsCount\n    var vowelsCount28 = vowelsCount\n    var\
    \ vowelsCount29 = vowelsCount\n    var vowelsCount30 = vowelsCount\n    var vowelsCount31\
    \ = vowelsCount\n    var vowelsCount32 = vowelsCount\n    var vowelsCount33 =\
    \ vowelsCount\n    var vowelsCount34 = vowelsCount\n    var vowelsCount35 = vowelsCount\n\
    \    var vowelsCount36 = vowelsCount\n    var vowelsCount37 = vowelsCount\n  \
    \  var vowelsCount38 = vowelsCount\n    var vowelsCount39 = vowelsCount\n    var\
    \ vowelsCount40 = vowelsCount\n    var vowelsCount41 = vowelsCount\n    var vowelsCount42\
    \ = vowelsCount\n    var vowelsCount43 = vowelsCount\n    var vowelsCount44 =\
    \ vowelsCount\n    var vowelsCount45 = vowelsCount\n    var vowelsCount46 = vowelsCount\n\
    \    var vowelsCount47 = vowelsCount\n    var vowelsCount48 = vowelsCount\n  \
    \  var vowelsCount49 = vowelsCount\n    var vowelsCount50 = vowelsCount\n    var\
    \ vowelsCount5\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2bctck7s.swift:65:9: error: type annotation missing in pattern\n\
    \    var vowelsCount5\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"AEIOUaeiou\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelsIndex = 0\n    var vowelsIndexCount = 0\n    var\
    \ vowelsIndexCountMax = vowelsCount - 1\n    var vowelsIndexCountMin = 0\n   \
    \ var vowelsIndexCountMaxMin = vowelsCount - 1\n    var vowelsIndexCountMinMax\
    \ = vowelsCount - 1\n    var vowelsIndexCountMaxMinMax = vowelsCount - 1\n   \
    \ var vowelsIndexCountMinMaxMax = vowelsCount - 1\n    var vowelsIndexCountMinMaxMaxMax\
    \ = vowelsCount - 1\n    var vowelsIndexCountMinMaxMaxMax = vowelsCount - 1\n\
    \    var vowelsIndexCountMinMaxMaxMaxMax = vowelsCount - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMax = vowelsCount - 1\n    var\
    \ vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMax = vowelsCount - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount -\
    \ 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount - 1\n\
    \    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount - 1\n\
    \    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount -\
    \ 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax =\
    \ vowelsCount - 1\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9jfwujzu.swift:24:9: error: invalid redeclaration of 'vowelsIndexCountMinMaxMaxMax'\n\
    \    var vowelsIndexCountMinMaxMaxMax = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:23:9:\
    \ note: 'vowelsIndexCountMinMaxMaxMax' previously declared here\n    var vowelsIndexCountMinMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:27:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinMaxMaxMaxMaxMax'\n    var vowelsIndexCountMinMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:26:9: note: 'vowelsIndexCountMinMaxMaxMaxMaxMax'\
    \ previously declared here\n    var vowelsIndexCountMinMaxMaxMaxMaxMax = vowelsCount\
    \ - 1\n        ^\n/tmp/tmp9jfwujzu.swift:30:9: error: invalid redeclaration of\
    \ 'vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMax'\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:29:9: note: 'vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMax'\
    \ previously declared here\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMax =\
    \ vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:33:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax'\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:32:9: note: 'vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax'\
    \ previously declared here\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:37:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:36:9: note: 'vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\
    \ previously declared here\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwujzu.swift:39:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax'\n    var vowelsIndexCountMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = vowelsCount - 1\n        ^\n/tmp/tmp9jfwuj"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexEnd = word.count - 1\n\
    \    var vowelIndexStart = 0\n    var vowelIndexStartEnd = word.count - 1\n  \
    \  var vowelIndexEndStart = 0\n    var vowelIndexStartEndEnd = word.count - 1\n\
    \    var vowelIndexStartEndStart = 0\n    var vowelIndexStartEndStartEnd = word.count\
    \ - 1\n    var vowelIndexStartEndStartStart = 0\n    var vowelIndexStartEndStartStartEnd\
    \ = word.count - 1\n    var vowelIndexStartEndStartStartStart = 0\n    var vowelIndexStartEndStartStartStartEnd\
    \ = word.count - 1\n    var vowelIndexStartEndStartStartStartEnd = 0\n    var\
    \ vowelIndexStartEndStartStartStartEndEnd = 0\n    var vowelIndexStartEndStartStartStartEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartStartStartEndEndEndEnd = 0\n    var vowelIndexStartEndStartStartStartEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartStartStartEndEndEndEndEndEnd = 0\n    var\
    \ vowelIndexStartEndStartStartEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd = 0\n    var\
    \ vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd = 0\n \
    \   var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEnd = 0\n    var\
    \ vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEndEnd =\
    \ 0\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndStartStart\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpgaczmugn.swift:27:9: error: invalid redeclaration of 'vowelIndexStartEndStartStartStartEnd'\n\
    \    var vowelIndexStartEndStartStartStartEnd = 0\n        ^\n/tmp/tmpgaczmugn.swift:26:9:\
    \ note: 'vowelIndexStartEndStartStartStartEnd' previously declared here\n    var\
    \ vowelIndexStartEndStartStartStartEnd = word.count - 1\n        ^\n/tmp/tmpgaczmugn.swift:35:9:\
    \ error: invalid redeclaration of 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd'\n\
    \    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd = 0\n        ^\n\
    /tmp/tmpgaczmugn.swift:34:9: note: 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpgaczmugn.swift:36:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd'\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpgaczmugn.swift:34:9: note: 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpgaczmugn.swift:37:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd'\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpgaczmugn.swift:34:9: note: 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpgaczmugn.swift:39:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd'\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpgaczmugn.swift:38:9: note: 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpgaczmugn.swift:40:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd'\n    var vowelIndexStartEndStartStartEndEndEndEndEndEndEndEndEnd"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"AEIOUaeiou\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n    var vowelIndex3\
    \ = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var vowelIndex6 =\
    \ 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9 = 0\n\
    \    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12 = 0\n\
    \    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15 = 0\n\
    \    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18 = 0\n\
    \    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21 = 0\n\
    \    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24 = 0\n\
    \    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27 = 0\n\
    \    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30 = 0\n\
    \    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33 = 0\n\
    \    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36 = 0\n\
    \    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39 = 0\n\
    \    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42 = 0\n\
    \    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45 = 0\n\
    \    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48 = 0\n\
    \    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51 = 0\n\
    \    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54 = 0\n\
    \    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57 = 0\n\
    \    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60 = 0\n\
    \    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63 = 0\n\
    \    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66 = 0\n\
    \    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69 = 0\n\
    \    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72 = 0\n\
    \    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75 = 0\n\
    \    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78 = 0\n\
    \    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n    var vowelIndex81 = 0\n\
    \    var vowelIndex82 = 0\n    var vowelIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2i11bxj2.swift:97:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmph_zt5fys.swift:13:24: error: use of local variable 'vowels' before\
    \ its declaration\n    guard let vowels = vowels.characters.map(String.init) else\
    \ {\n                       ^\n/tmp/tmph_zt5fys.swift:101:9: note: 'vowels' declared\
    \ here\n    let vowels\n        ^\n/tmp/tmph_zt5fys.swift:101:9: error: type annotation\
    \ missing in pattern\n    let vowels\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [String: Int]()\n    for vowel in vowels {\n \
    \       vowelsCount[vowel] = word.characters.filter({ $0 == vowel }).count\n \
    \   }\n    var vowelIndex: Int = 0\n    var vowelCount: Int = 0\n    var vowel:\
    \ String = String()\n    for letter in word.characters.reversed() {\n        if\
    \ vowelsCount[vowels[vowelIndex]] != 0 {\n            vowelCount += vowelsCount[vowels[vowelIndex]]\n\
    \            vowelIndex += 1\n        } else {\n            if vowelCount > 0\
    \ {\n                vowel = vowels[vowelIndex - 1]\n                vowelCount\
    \ = vowelsCount[vowels[vowelIndex - 1]]\n            } else {\n              \
    \  return \"\"\n            }\n        }\n    }\n    return vowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6nrffjw1.swift:16:58: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'String'\n      \
    \  vowelsCount[vowel] = word.characters.filter({ $0 == vowel }).count\n      \
    \                                                ~~ ^  ~~~~~\n/tmp/tmp6nrffjw1.swift:16:58:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        vowelsCount[vowel] = word.characters.filter({\
    \ $0 == vowel }).count\n                                                     \
    \    ^\n/tmp/tmp6nrffjw1.swift:21:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters.reversed() {\n      \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6nrffjw1.swift:23:38: error: value of optional type 'Int?' must be\
    \ unwrapped to a value of type 'Int'\n            vowelCount += vowelsCount[vowels[vowelIndex]]\n\
    \                                     ^\n/tmp/tmp6nrffjw1.swift:23:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         vowelCount += vowelsCount[vowels[vowelIndex]]\n                    \
    \                 ^\n                                                        \
    \  ?? <#default value#>\n/tmp/tmp6nrffjw1.swift:23:38: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            vowelCount\
    \ += vowelsCount[vowels[vowelIndex]]\n                                     ^\n\
    \                                                         !\n/tmp/tmp6nrffjw1.swift:28:41:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \                vowelCount = vowelsCount[vowels[vowelIndex - 1]]\n          \
    \                              ^\n/tmp/tmp6nrffjw1.swift:28:41: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \             vowelCount = vowelsCount[vowels[vowelIndex - 1]]\n          "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelsCount = 1\n\
    \    for char in word {\n        if char.lowercased() == \"a\" || char.lowercased()\
    \ == \"e\" || char.lowercased() == \"i\" || char.lowercased() == \"o\" || char.lowercased()\
    \ == \"u\" {\n            vowels.append(char.lowercased())\n            vowelsCount\
    \ += 1\n        }\n    }\n    if vowelsCount == 0 {\n        return \"\"\n   \
    \ }\n    if vowelsCount == 1 {\n        return vowels[0]\n    }\n    if vowelsCount\
    \ == 2 {\n        return vowels[1]\n    }\n    if vowelsCount == 3 {\n       \
    \ return vowels[2]\n    }\n    if vowelsCount == 4 {\n        return vowels[3]\n\
    \    }\n    if vowelsCount == 5 {\n        return vowels[4]\n    }\n    if vowelsCount\
    \ == 6 {\n        return vowels[5]\n    }\n    if vowelsCount == 7 {\n       \
    \ return vowels[6]\n    }\n    if vowelsCount == 8 {\n        return vowels[7]\n\
    \    }\n    if vowelsCount == 9 {\n        return vowels[8]\n    }\n    if vowelsCount\
    \ == 10 {\n        return vowels[9]\n    }\n    if vowelsCount == 11 {\n     \
    \   return vowels[10]\n    }\n    if vowelsCount == 12 {\n        return vowels[11]\n\
    \    }\n    if vowelsCount == 13 {\n        return vowels[12]\n    }\n    if vowelsCount\
    \ == 14 {\n        return vowels[13]\n    }\n    if vowelsCount == 15 {\n    \
    \    return vowels[14]\n    }\n    if vowelsCount == 16 {\n        return vowels[15]\n\
    \    }\n    if vowelsCount == 17 {\n        return vowels[16]\n    }\n    if vowelsCount\
    \ == 18 {\n        return vowels[17]\n    }\n    if vowelsCount == 19 {\n    \
    \    return vowels[18]\n    }\n    if vowelsCount == 20 {\n        return vowels[19]\n\
    \    }\n    if vowelsCount == 21 {\n        return vowels[20]\n    }\n    if vowelsCount\
    \ == 22 {\n        return vowels[21]\n    }\n    if vowelsCount == 23 {\n    \
    \    return vowels[22]\n    }\n    if vowelsCount == 24 {\n        return vowels[23]\n\
    \    }\n    if vowelsCount == 25 {\n        return vowels[24]\n    }\n    if vowelsCount\
    \ == 26 {\n        return vowels[25]\n    }\n    if vowelsCount == 27 {\n    \
    \    return vowels[26]\n    }\n    if vowelsCount == 28 {\n        return vowels[27\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpar2vpti1.swift:107:1: error: expected ']' in expression list\n\
    }\n^\n/tmp/tmpar2vpti1.swift:106:22: note: to match this opening '['\n       \
    \ return vowels[27\n                     ^\n/tmp/tmpar2vpti1.swift:134:48: error:\
    \ expected '}' at end of brace statement\nassert(get_closest_vowel(word: \"Above\"\
    ) == \"o\")\n                                               ^\n/tmp/tmpar2vpti1.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpar2vpti1.swift:110:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"]\n    var vowelIndex = 0\n    var vowelCount = 0\n    var vowelString\
    \ = \"\"\n    var lastVowelIndex = 0\n    var lastVowelCount = 0\n    var lastVowelString\
    \ = \"\"\n    var lastVowelIndex = 0\n    var lastVowelCount = 0\n    for index\
    \ in 0..<word.characters.count {\n        if word.characters.count > index {\n\
    \            if word.characters.count - index > 1 {\n                if word.characters.count\
    \ - index > 2 {\n                    if word.characters.count - index > 3 {\n\
    \                        if word.characters.count - index > 4 {\n            \
    \                if word.characters.count - index > 5 {\n                    \
    \            if word.characters.count - index > 6 {\n                        \
    \            if word.characters.count - index > 7 {\n                        \
    \                if word.characters.count - index > 8 {\n                    \
    \                        if word.characters.count - index > 9 {\n            \
    \                                    if word.characters.count - index > 10 {\n\
    \                                                    if word.characters.count\
    \ - index > 11 {\n                                                        if word.characters.count\
    \ - index > 12 {\n                                                           \
    \ if word.characters.count - index > 13 {\n                                  \
    \                              if word.characters.count - index > 14 {\n     \
    \                                                               if word.characters.count\
    \ - index > 15 {\n                                                           \
    \             if word.characters.count - index > 16 {\n                      \
    \                                                      if word.characters.count\
    \ - index > 17 {\n                                                           \
    \                     if word.characters.count - index > 18 {\n              \
    \                                                                      if word.characters.count\
    \ - index > 19 {\n                                                           \
    \                             if word.characters.count - index > 20 {\n      \
    \                                                                            \
    \          if word.characters.count - index > 21 {\n                         \
    \                                                                       if word.characters.count\
    \ - index > 22 {\n                                                           \
    \                                         if word.characters.count - index > 23\
    \ {\n                                                                        \
    \                                if word.characters.count - index > 24 {\n   \
    \                                                                            \
    \                             if word.characters.count - index > 25 {\n      \
    \                                                                            \
    \                              if word.characters.count - index > 26 {\n     \
    \                                                                            \
    \                                   if word.characters.count - index > 27 {\n\
    \                                                                            \
    \                                            if word.characters.count - index\
    \ > 28 {\n                                                                   \
    \                                                         if word.characters.count\
    \ - index > 29 {\n                                                           \
    \                                                                     if word.characters.count\
    \ - index > 30 {\n                                                           \
    \                                                                         if word.characters.count\
    \ - index > 31 {\n                                                           \
    \                                                                            \
    \ if word.characters.count - index > 32 {\n                                  \
    \                                                                            \
    \                              if word.characters.count - index > 33 {\n     \
    \                                                                            \
    \                                                               if word.characters.count\
    \ - index > 34 {\n                                                           \
    \                                                                            \
    \             if word.characters.count - index > 35 {\n                      \
    \                                                                            \
    \                                                      if word.characters.count\
    \ - index > 36 {\n                                                           \
    \                                                                            \
    \                     if word.characters.count - index > 37 {\n              \
    \                                                                            \
    \                                      \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3t1mjhka.swift:90:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmp3t1mjhka.swift:60:191: note: to match this\
    \ opening '{'\n                                                              \
    \                                                                            \
    \              if word.characters.count - index > 36 {\n                     \
    \                                                                            \
    \                                                                            \
    \                 ^\n/tmp/tmp3t1mjhka.swift:90:48: error: expected '}' at end\
    \ of brace statement\nassert(get_closest_vowel(word: \"Above\") == \"o\")\n  \
    \                                             ^\n/tmp/tmp3t1mjhka.swift:59:187:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                              if word.characters.count - index > 35 {\n     \
    \                                                                            \
    \                                                                            \
    \                             ^\n/tmp/tmp3t1mjhka.swift:90:48: error: expected\
    \ '}' at end of brace statement\nassert(get_closest_vowel(word: \"Above\") ==\
    \ \"o\")\n                                               ^\n/tmp/tmp3t1mjhka.swift:58:183:\
    \ note: to match this opening '{'\n                                          \
    \                                                                            \
    \                          if word.characters.count - index > 34 {\n         \
    \                                                                            \
    \                                                                            \
    \                     ^\n/tmp/tmp3t1mjhka.swift:90:48: error: expected '}' at\
    \ end of brace statement\nassert(get_closest_vowel(word: \"Above\") == \"o\")\n\
    \                                               ^\n/tmp/tmp3t1mjhka.swift:57:179:\
    \ note: to"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    guard let vowels = vowels.characters.map(String.init)\
    \ else {\n        return \"\"\n    }\n    var vowelIndex = 0\n    var vowelIndexEnd\
    \ = word.characters.count\n    var vowelIndexStart = 0\n    var vowelIndexStartEnd\
    \ = word.characters.count\n    var vowelIndexStartEnd = 0\n    var vowelIndexStartEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEnd = 0\n    var vowelIndexStartEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n    var\
    \ vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd =\
    \ 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd =\
    \ 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0oaaq6_f.swift:13:24: error: cannot find 'vowels' in scope\n  \
    \  guard let vowels = vowels.characters.map(String.init) else {\n            \
    \           ^~~~~~\n/tmp/tmp0oaaq6_f.swift:17:30: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexEnd = word.characters.count\n\
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0oaaq6_f.swift:19:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexStartEnd = word.characters.count\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0oaaq6_f.swift:20:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEnd'\n    var vowelIndexStartEnd = 0\n        ^\n/tmp/tmp0oaaq6_f.swift:19:9:\
    \ note: 'vowelIndexStartEnd' previously declared here\n    var vowelIndexStartEnd\
    \ = word.characters.count\n        ^\n/tmp/tmp0oaaq6_f.swift:31:9: error: invalid\
    \ redeclaration of 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEnd'\n    var\
    \ vowelIndexStartEndEndEndEndEndEndEndEndEndEndEnd = 0\n        ^\n/tmp/tmp0oaaq6_f.swift:30:9:\
    \ note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEnd' previously declared\
    \ here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEnd = 0\n       \
    \ ^\n/tmp/tmp0oaaq6_f.swift:36:9: error: invalid redeclaration of 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n  \
    \      ^\n/tmp/tmp0oaaq6_f.swift:35:9: note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmp0oaaq6_f.swift:40:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\n  \
    \  var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd =\
    \ 0\n    "
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [String: Int]()\n    var vowelsCountIndex = 0\n\
    \    for char in word {\n        if vowelsCount[char] == nil {\n            vowelsCount[char]\
    \ = 1\n        } else {\n            vowelsCount[char]!++\n        }\n    }\n\
    \    for char in vowels {\n        if vowelsCount[char] == 1 {\n            return\
    \ char\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpeztzed6e.swift:17:24: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowelsCount[char] == nil {\n\
    \                       ^\n/tmp/tmpeztzed6e.swift:18:25: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            vowelsCount[char]\
    \ = 1\n                        ^\n/tmp/tmpeztzed6e.swift:20:31: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            vowelsCount[char]!++\n\
    \                              ^~\n/tmp/tmpeztzed6e.swift:20:25: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       vowelsCount[char]!++\n                        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSum: Int = 0\n    var vowelsCountSumMax:\
    \ Int = vowelsCountMax\n    var vowelsCountSumMin: Int = vowelsCountMin\n    var\
    \ vowelsCountSumSum: Int = 0\n    var vowelsCountSumSumMax: Int = vowelsCountSumMax\n\
    \    var vowelsCountSumSumMin: Int = vowelsCountSumMin\n    var vowelsCountSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumMax: Int = vowelsCountSumSumMax\n    var\
    \ vowelsCountSumSumSumMin: Int = vowelsCountSumSumMin\n    var vowelsCountSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumMax: Int = vowelsCountSumSumSumMax\n\
    \    var vowelsCountSumSumSumSumMin: Int = vowelsCountSumSumSumMin\n    var vowelsCountSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumMax\n\
    \    var vowelsCountSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumMin\n   \
    \ var vowelsCountSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumSumSumMax\n    var vowelsCountSumSumSumSumSumSumMin:\
    \ Int = vowelsCountSumSumSumSumSumMin\n    var vowelsCountSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumSumSumMax\n\
    \    var vowelsCountSumSumSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumSumSumMin\n\
    \    var vowelsCountSumSumSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumSumSumSumSumMax\n    var vowelsCountSumSumSumSumSumSumSumSumMin:\
    \ Int = vowelsCountSumSumSumSumSumSumSumMin\n    var vowelsCountSumSumSumSumSumSumSumSum:\
    \ Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvvmp5u2g.swift:42:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSum'\n\
    \    var vowelsCountSumSumSumSumSumSumSumSum: Int = 0\n        ^\n/tmp/tmpvvmp5u2g.swift:39:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSum' previously declared here\n    var\
    \ vowelsCountSumSumSumSumSumSumSumSum: Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex: Int\
    \ = 0\n    var vowelIndex2: Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4:\
    \ Int = 0\n    var vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var\
    \ vowelIndex7: Int = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int\
    \ = 0\n    var vowelIndex10: Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12:\
    \ Int = 0\n    var vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var\
    \ vowelIndex15: Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17:\
    \ Int = 0\n    var vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var\
    \ vowelIndex20: Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22:\
    \ Int = 0\n    var vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var\
    \ vowelIndex25: Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27:\
    \ Int = 0\n    var vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var\
    \ vowelIndex30: Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32:\
    \ Int = 0\n    var vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var\
    \ vowelIndex35: Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37:\
    \ Int = 0\n    var vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var\
    \ vowelIndex40: Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42:\
    \ Int = 0\n    var vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var\
    \ vowelIndex45: Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47:\
    \ Int = 0\n    var vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var\
    \ vowelIndex50: Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52:\
    \ Int = 0\n    var vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var\
    \ vowelIndex55: Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57:\
    \ Int = 0\n    var vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var\
    \ vowelIndex60: Int = 0\n    var vowelIndex61: Int = 0\n    var vowelIndex62:\
    \ Int = 0\n    var vowelIndex63: Int = 0\n    var vowelIndex64: Int = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpt8sg705b.swift:13:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = []\n\
    \        ^~~~~~\n        _\n/tmp/tmpt8sg705b.swift:14:9: warning: variable 'vowelIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelIndex:\
    \ Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpt8sg705b.swift:15:9: warning:\
    \ variable 'vowelIndex2' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelIndex2: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpt8sg705b.swift:16:9:\
    \ warning: variable 'vowelIndex3' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex3: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpt8sg705b.swift:17:9: warning: variable 'vowelIndex4' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex4: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpt8sg705b.swift:18:9: warning: variable 'vowelIndex5' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex5: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpt8sg705b.swift:19:9: warning: variable\
    \ 'vowelIndex6' was never used; consider replacing with '_' or removing it\n \
    \   var vowelIndex6: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpt8sg705b.swift:20:9:\
    \ warning: variable 'vowelIndex7' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex7: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpt8sg705b.swift:21:9: warning: variable 'vowelIndex8' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex8: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpt8sg705b.swift:22:9: warning: variable 'vowelIndex9' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex9: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpt8sg705b.swift:23:9: warning: variable\
    \ 'vowelIndex10' was never used; consider replacing with '_' or removing it\n\
    \    var vowelIndex10: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpt8sg705b.swift:24:9:\
    \ warning: variable 'vowelIndex11' was never used; consider r"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [Character] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.count == 1 && char.unicodeScalars.first ==\
    \ .A {\n            vowels.append(char)\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .E {\n            vowels.append(char)\n\
    \        } else if char.unicodeScalars.count == 1 && char.unicodeScalars.first\
    \ == .I {\n            vowels.append(char)\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .O {\n            vowels.append(char)\n\
    \        } else if char.unicodeScalars.count == 1 && char.unicodeScalars.first\
    \ == .U {\n            vowels.append(char)\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .Y {\n            vowels.append(char)\n\
    \        } else if char.unicodeScalars.count == 1 && char.unicodeScalars.first\
    \ == .A {\n            vowels.append(char)\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .E {\n            vowels.append(char)\n\
    \        } else if char.unicodeScalars.count == 1 && char.unicodeScalars.first\
    \ == .I {\n            vowels.append(char)\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .O {\n            vowels.append(char)\n\
    \        } else if char.unicodeScalars.count == 1 && char.unicodeScalars.first\
    \ == .U {\n            vowels.append(char)\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .Y {\n            vowels.append(char)\n\
    \        }\n    }\n    return vowels.last!\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpynizlicd.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpynizlicd.swift:15:76:\
    \ error: type 'Unicode.Scalar?' has no member 'A'\n        if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .A {\n                                \
    \                                          ~^\n/tmp/tmpynizlicd.swift:17:83: error:\
    \ type 'Unicode.Scalar?' has no member 'E'\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .E {\n                                \
    \                                                 ~^\n/tmp/tmpynizlicd.swift:19:83:\
    \ error: type 'Unicode.Scalar?' has no member 'I'\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .I {\n                                \
    \                                                 ~^\n/tmp/tmpynizlicd.swift:21:83:\
    \ error: type 'Unicode.Scalar?' has no member 'O'\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .O {\n                                \
    \                                                 ~^\n/tmp/tmpynizlicd.swift:23:83:\
    \ error: type 'Unicode.Scalar?' has no member 'U'\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .U {\n                                \
    \                                                 ~^\n/tmp/tmpynizlicd.swift:25:83:\
    \ error: type 'Unicode.Scalar?' has no member 'Y'\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .Y {\n                                \
    \                                                 ~^\n/tmp/tmpynizlicd.swift:27:83:\
    \ error: type 'Unicode.Scalar?' has no member 'A'\n        } else if char.unicodeScalars.count\
    \ == 1 && char.unicodeScalars.first == .A {\n                                \
    \                                                 ~^\n/tmp/tmpynizlicd.swift:29:83:\
    \ error: ty"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word {\n\
    \        if letter.isUpper() {\n            vowels.append(letter)\n        }\n\
    \    }\n    vowels.removeAll(where: {$0.isUpper()})\n    vowels.removeAll(where:\
    \ {$0.isLower()})\n    vowels.removeAll(where: {$0.isDigit()})\n    vowels.removeAll(where:\
    \ {$0.isPunctuation()})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$0.isSymbol()})\n    vowels.removeAll(where:\
    \ {$0.isSpace})\n    vowels.removeAll(where: {$\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6yrr5mqs.swift:57:30: error: '$' is not an identifier; use backticks\
    \ to escape it\n    vowels.removeAll(where: {$\n                             ^\n\
    \                             `$`\n/tmp/tmp6yrr5mqs.swift:61:1: error: expected\
    \ ')' in expression list\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n^\n/tmp/tmp6yrr5mqs.swift:57:21: note: to match this opening '('\n \
    \   vowels.removeAll(where: {$\n                    ^\n/tmp/tmp6yrr5mqs.swift:85:48:\
    \ error: expected '}' at end of brace statement\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")\n                                               ^\n/tmp/tmp6yrr5mqs.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmp6yrr5mqs.swift:15:19:\
    \ error: value of type 'Character' has no member 'isUpper'\n        if letter.isUpper()\
    \ {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp6yrr5mqs.swift:16:27: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            vowels.append(letter)\n\
    \                          ^\n/tmp/tmp6yrr5mqs.swift:19:33: error: value of type\
    \ 'String' has no member 'isUpper'\n    vowels.removeAll(where: {$0.isUpper()})\n\
    \                             ~~ ^~~~~~~\n/tmp/tmp6yrr5mqs.swift:20:33: error:\
    \ value of type 'String' has no member 'isLower'\n    vowels.removeAll(where:\
    \ {$0.isLower()})\n                             ~~ ^~~~~~~\n/tmp/tmp6yrr5mqs.swift:21:33:\
    \ error: value of type 'String' has no member 'isDigit'\n    vowels.removeAll(where:\
    \ {$0.isDigit()})\n                             ~~ ^~~~~~~\n/tmp/tmp6yrr5mqs.swift:22:33:\
    \ error: value of type 'String' has no member 'isPunctuation'\n    vowels.removeAll(where:\
    \ {$0.isPunctuation()})\n                             ~~ ^~~~~~~~~~~~~\n/tmp/tmp6yrr5mqs.swift:23:33:\
    \ error: value of type 'String' has no member 'isSymbol'\n    vowels.removeAll(where:\
    \ {$0.isSymbol()})\n                             ~~ ^~~~~~~~\n/tmp/tmp6yrr5mqs.swift:24:33:\
    \ error: value of type 'String' has no member 'isSpace'\n    vowels.removeAll(wh"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelsIndex = [Int]()\n    \n\
    \    for letter in word {\n        if vowels.contains(letter) {\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n        }\n    }\n    \n    for index in 0..<vowels.count {\n        if\
    \ vowelsCount[index] > 0 {\n            vowelsIndex.append(index)\n        }\n\
    \    }\n    \n    if vowelsIndex.count > 0 {\n        return vowels[vowelsIndex.min()]\n\
    \    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphpp9k_2l.swift:18:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(letter) {\n \
    \                          ^\n/tmp/tmphpp9k_2l.swift:19:32: error: value of type\
    \ '[String]' has no member 'indexOf'\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n                        ~~~~~~ ^~~~~~~\n/tmp/tmphpp9k_2l.swift:30:35:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        return vowels[vowelsIndex.min()]\n                                  ^\n\
    /tmp/tmphpp9k_2l.swift:30:35: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        return vowels[vowelsIndex.min()]\n\
    \                                  ^\n                                       \
    \ ?? <#default value#>\n/tmp/tmphpp9k_2l.swift:30:35: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        return\
    \ vowels[vowelsIndex.min()]\n                                  ^\n           \
    \                            !\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var lastVowelIndex\
    \ = 0\n    var lastVowel = \"\"\n    for index in 0..<word.characters.count {\n\
    \        let char = word.characters[index]\n        if char.lowercased() == \"\
    a\" || char.lowercased() == \"e\" || char.lowercased() == \"i\" || char.lowercased()\
    \ == \"o\" || char.lowercased() == \"u\" {\n            vowelIndex = index\n \
    \           vowel = char\n        }\n    }\n    if vowelIndex == 0 {\n       \
    \ return \"\"\n    }\n    for index in (vowelIndex..<word.characters.count) {\n\
    \        let char = word.characters[index]\n        if char.lowercased() == \"\
    a\" || char.lowercased() == \"e\" || char.lowercased() == \"i\" || char.lowercased()\
    \ == \"o\" || char.lowercased() == \"u\" {\n            lastVowelIndex = index\n\
    \            lastVowel = char\n        }\n    }\n    if lastVowelIndex == 0 {\n\
    \        return \"\"\n    }\n    if lastVowelIndex < vowelIndex {\n        return\
    \ \"\"\n    }\n    if lastVowelIndex > vowelIndex {\n        return vowel\n  \
    \  }\n    if lastVowelIndex == vowelIndex {\n        return lastVowel\n    }\n\
    \    if lastVowelIndex < vowelIndex {\n        return lastVowel\n    }\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoakftfkf.swift:17:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 0..<word.characters.count {\n        \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpoakftfkf.swift:18:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpoakftfkf.swift:18:25:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = word.characters[index]\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoakftfkf.swift:21:21: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            vowel = char\n     \
    \               ^~~~\n/tmp/tmpoakftfkf.swift:27:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in (vowelIndex..<word.characters.count)\
    \ {\n                                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpoakftfkf.swift:28:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let char = word.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpoakftfkf.swift:28:25:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = word.characters[index]\n                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public v"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndexEnd = word.count\n    \n    var vowelIndexStart = 0\n\
    \    var vowelIndexEnd = 0\n    \n    while vowelIndex < vowelIndexEnd {\n   \
    \     \n        vowelIndexStart = word.index(vowels[vowelIndex], offsetBy: 1)\n\
    \        vowelIndexEnd = word.index(vowels[vowelIndex], offsetBy: vowelIndexStart\
    \ + 1)\n        \n        if vowelIndexStart < vowelIndexEnd {\n            vowelIndex\
    \ += 1\n        } else {\n            vowelIndex -= 1\n        }\n    }\n    \n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_elsr8be.swift:20:9: error: invalid redeclaration of 'vowelIndexEnd'\n\
    \    var vowelIndexEnd = 0\n        ^\n/tmp/tmp_elsr8be.swift:17:9: note: 'vowelIndexEnd'\
    \ previously declared here\n    var vowelIndexEnd = word.count\n        ^\n/tmp/tmp_elsr8be.swift:24:44:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String.Index'\n\
    \        vowelIndexStart = word.index(vowels[vowelIndex], offsetBy: 1)\n     \
    \                                      ^\n/tmp/tmp_elsr8be.swift:24:32: error:\
    \ cannot assign value of type 'String.Index' to type 'Int'\n        vowelIndexStart\
    \ = word.index(vowels[vowelIndex], offsetBy: 1)\n                          ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_elsr8be.swift:25:42: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String.Index'\n        vowelIndexEnd = word.index(vowels[vowelIndex],\
    \ offsetBy: vowelIndexStart + 1)\n                                         ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var consonantIndex\
    \ = 0\n    var consonant = \"\"\n    var lastConsonantIndex = 0\n    var lastConsonant\
    \ = \"\"\n    var lastVowelIndex = 0\n    var lastVowel = \"\"\n    for index\
    \ in 0..<word.count {\n        if word[index] == \"a\" || word[index] == \"e\"\
    \ || word[index] == \"i\" || word[index] == \"o\" || word[index] == \"u\" {\n\
    \            vowelIndex = index\n            vowel = word[index]\n        }\n\
    \        if word[index] == \"b\" || word[index] == \"c\" || word[index] == \"\
    d\" || word[index] == \"f\" || word[index] == \"g\" || word[index] == \"h\" ||\
    \ word[index] == \"j\" || word[index] == \"k\" || word[index] == \"l\" || word[index]\
    \ == \"m\" || word[index] == \"n\" || word[index] == \"p\" || word[index] == \"\
    q\" || word[index] == \"r\" || word[index] == \"s\" || word[index] == \"t\" ||\
    \ word[index] == \"v\" || word[index] == \"w\" || word[index] == \"x\" || word[index]\
    \ == \"y\" || word[index] == \"z\" {\n            consonantIndex = index\n   \
    \         consonant = word[index]\n        }\n        if word[index] == \" \"\
    \ {\n            lastConsonantIndex = consonantIndex\n            lastConsonant\
    \ = consonant\n            lastVowelIndex = vowelIndex\n            lastVowel\
    \ = vowel\n        }\n    }\n    if lastConsonantIndex == 0 {\n        return\
    \ \"\"\n    }\n    if lastConsonantIndex == word.count - 1 {\n        return lastVowel\n\
    \    }\n    if lastVowelIndex == 0 {\n        return lastConsonant\n    }\n  \
    \  if lastVowelIndex == word.count - 1 {\n        return lastConsonant\n    }\n\
    \    if lastConsonantIndex < lastVowelIndex {\n        return lastVowel\n    }\n\
    \    if lastConsonantIndex > lastVowelIndex {\n        return lastConsonant\n\
    \    }\n    if lastConsonantIndex == lastVowelIndex {\n        if lastVowelIndex\
    \ == 0 {\n            return lastConsonant\n        }\n        if lastVowelIndex\
    \ == word.count - 1 {\n            return lastConsonant\n        }\n        if\
    \ lastConsonantIndex < lastVowelIndex {\n            return lastVowel\n      \
    \  }\n        if lastConsonantIndex > lastVowelIndex {\n            return lastConsonant\n\
    \        }\n        if lastConsonantIndex == lastVowelIndex && lastVowelIndex\
    \ == 0 {\n            return lastConsonant\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqr4bbvf4.swift:98:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpqr4bbvf4.swift:55:45: note: to match this opening\
    \ '{'\n    if lastConsonantIndex == lastVowelIndex {\n                       \
    \                     ^\n/tmp/tmpqr4bbvf4.swift:98:48: error: expected '}' at\
    \ end of brace statement\nassert(get_closest_vowel(word: \"Above\") == \"o\")\n\
    \                                               ^\n/tmp/tmpqr4bbvf4.swift:12:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpqr4bbvf4.swift:22:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if word[index] == \"a\" || word[index]\
    \ == \"e\" || word[index] == \"i\" || word[index] == \"o\" || word[index] == \"\
    u\" {\n           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpqr4bbvf4.swift:22:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if word[index] == \"a\" || word[index] == \"e\" || word[index] == \"\
    i\" || word[index] == \"o\" || word[index] == \"u\" {\n                      \
    \           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpqr4bbvf4.swift:22:56: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ word[index] == \"a\" || word[index] == \"e\" || word[index] == \"i\" || word[index]\
    \ == \"o\" || word[index] == \"u\" {\n                                       \
    \                ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpqr4bbvf4.swift:22:78: error: 'subscript"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for letter in word {\n\
    \        if letter.isUpper() {\n            vowels.append(letter)\n        } else\
    \ if letter.isLower() {\n            vowels.append(letter)\n        } else if\
    \ letter.isDigit() {\n            vowels.append(letter)\n        } else if letter\
    \ == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"o\" || letter\
    \ == \"u\" {\n            vowels.append(letter)\n        }\n    }\n    if vowels.count\
    \ < 2 {\n        return \"\"\n    }\n    var vowelIndex = 0\n    var vowelIndex2\
    \ = vowels.count - 1\n    var vowelIndex3 = vowels.count - 2\n    var vowelIndex4\
    \ = vowels.count - 3\n    var vowelIndex5 = vowels.count - 4\n    var vowelIndex6\
    \ = vowels.count - 5\n    var vowelIndex7 = vowels.count - 6\n    var vowelIndex8\
    \ = vowels.count - 7\n    var vowelIndex9 = vowels.count - 8\n    var vowelIndex10\
    \ = vowels.count - 9\n    var vowelIndex11 = vowels.count - 10\n    var vowelIndex12\
    \ = vowels.count - 11\n    var vowelIndex13 = vowels.count - 12\n    var vowelIndex14\
    \ = vowels.count - 13\n    var vowelIndex15 = vowels.count - 14\n    var vowelIndex16\
    \ = vowels.count - 15\n    var vowelIndex17 = vowels.count - 16\n    var vowelIndex18\
    \ = vowels.count - 17\n    var vowelIndex19 = vowels.count - 18\n    var vowelIndex20\
    \ = vowels.count - 19\n    var vowelIndex21 = vowels.count - 20\n    var vowelIndex22\
    \ = vowels.count - 21\n    var vowelIndex23 = vowels.count - 22\n    var vowelIndex24\
    \ = vowels.count - 23\n    var vowelIndex25 = vowels.count - 24\n    var vowelIndex26\
    \ = vowels.count - 25\n    var vowelIndex27 = vowels.count - 26\n    var vowelIndex28\
    \ = vowels.count - 27\n    var vowelIndex29 = vowels.count - 28\n    var vowelIndex30\
    \ = vowels.count - 29\n    var vowelIndex31 = vowels.count - 30\n    var vowelIndex32\
    \ = vowels.count - 31\n    var vowelIndex33 = vowels.count - 32\n    var vowelIndex34\
    \ = vowels.count - 33\n    var vowelIndex35 = vowels.count - 34\n    var vowelIndex36\
    \ = vowels.count - 35\n    var vowelIndex37 = vowels.count - 36\n    var vowelIndex38\
    \ = vowels.count - 37\n    var vowelIndex39 = vowels.count - 38\n    var \n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1e06vx6q.swift:67:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1e06vx6q.swift:15:19: error: value of type 'Character' has no member\
    \ 'isUpper'\n        if letter.isUpper() {\n           ~~~~~~ ^~~~~~~\n/tmp/tmp1e06vx6q.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n/tmp/tmp1e06vx6q.swift:17:26:\
    \ error: value of type 'Character' has no member 'isLower'\n        } else if\
    \ letter.isLower() {\n                  ~~~~~~ ^~~~~~~\n/tmp/tmp1e06vx6q.swift:18:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n/tmp/tmp1e06vx6q.swift:19:26:\
    \ error: value of type 'Character' has no member 'isDigit'\n        } else if\
    \ letter.isDigit() {\n                  ~~~~~~ ^~~~~~~\n/tmp/tmp1e06vx6q.swift:20:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n/tmp/tmp1e06vx6q.swift:22:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(letter)\n                          ^\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"AEIOUaeiou\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = word.characters.count - 1\n    var vowelIndex2\
    \ = word.characters.count - 1\n    var vowelIndex3 = word.characters.count - 1\n\
    \    var vowelIndex4 = word.characters.count - 1\n    var vowelIndex5 = word.characters.count\
    \ - 1\n    var vowelIndex6 = word.characters.count - 1\n    var vowelIndex7 =\
    \ word.characters.count - 1\n    var vowelIndex8 = word.characters.count - 1\n\
    \    var vowelIndex9 = word.characters.count - 1\n    var vowelIndex10 = word.characters.count\
    \ - 1\n    var vowelIndex11 = word.characters.count - 1\n    var vowelIndex12\
    \ = word.characters.count - 1\n    var vowelIndex13 = word.characters.count -\
    \ 1\n    var vowelIndex14 = word.characters.count - 1\n    var vowelIndex15 =\
    \ word.characters.count - 1\n    var vowelIndex16 = word.characters.count - 1\n\
    \    var vowelIndex17 = word.characters.count - 1\n    var vowelIndex18 = word.characters.count\
    \ - 1\n    var vowelIndex19 = word.characters.count - 1\n    var vowelIndex20\
    \ = word.characters.count - 1\n    var vowelIndex21 = word.characters.count -\
    \ 1\n    var vowelIndex22 = word.characters.count - 1\n    var vowelIndex23 =\
    \ word.characters.count - 1\n    var vowelIndex24 = word.characters.count - 1\n\
    \    var vowelIndex25 = word.characters.count - 1\n    var vowelIndex26 = word.characters.count\
    \ - 1\n    var vowelIndex27 = word.characters.count - 1\n    var vowelIndex28\
    \ = word.characters.count - 1\n    var vowelIndex29 = word.characters.count -\
    \ 1\n    var vowelIndex30 = word.characters.count - 1\n    var vowelIndex31 =\
    \ word.characters.count - 1\n    var vowelIndex32 = word.characters.count - 1\n\
    \    var vowelIndex33 = word.characters.count - 1\n    var vowelIndex34 = word.characters.count\
    \ - 1\n    var vowelIndex35 = word.characters.count - 1\n    var vowelIndex36\
    \ = word.characters.count - 1\n    var vowelIndex37 = word.characters.count -\
    \ 1\n    var vowelIndex38 = word.characters.count - 1\n    var vowelIndex39 =\
    \ word.characters.count - 1\n    var vowelIndex40 = word.characters.count - 1\n\
    \    var vowelIndex41 = word.characters.count - 1\n    var vowelIndex42 = word.characters.count\
    \ - 1\n    var vowelIndex43 = word.characters.count - 1\n    var vowelIndex44\
    \ = word.characters.count - 1\n    var vowelIndex45 = word.characters.count -\
    \ 1\n    var vowelIndex46 = word.characters.count - 1\n    var vowelIndex47 =\
    \ word.characters.count - 1\n    var vowelIndex48 = word.characters.count - 1\n\
    \    var vowelIndex49 = word.characters.count - 1\n    var vowelIndex50 = word.characters.count\
    \ - 1\n    var vowelIndex51 = word.characters.\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl9gez367.swift:65:39: error: expected member name following '.'\n\
    \    var vowelIndex51 = word.characters.\n                                   \
    \   ^\n/tmp/tmpl9gez367.swift:15:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex = word.characters.count - 1\n      \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl9gez367.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl9gez367.swift:17:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl9gez367.swift:18:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl9gez367.swift:19:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl9gez367.swift:20:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl9gez367.swift:21:28: error: 'characters' is una"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSum: Int = 0\n    var vowelsCountSumMax:\
    \ Int = 0\n    var vowelsCountSumMin: Int = 0\n    var vowelsCountSumSum: Int\
    \ = 0\n    var vowelsCountSumSumMax: Int = 0\n    var vowelsCountSumSumMin: Int\
    \ = 0\n    var vowelsCountSumSumSum: Int = 0\n    var vowelsCountSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumMax: Int = 0\n    var vowelsCountSumSumSumSumMin:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumMax: Int = 0\n    var vowelsCountSumSumSumSumSumSumMin:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumMax: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumMin:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMin: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMax: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMin:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMax:\
    \ Int = 0\n    var vowelsCountSumSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpc1cq792z.swift:37:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumMax'\n\
    \    var vowelsCountSumSumSumSumSumSumMax: Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:34:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumMax' previously declared here\n    var vowelsCountSumSumSumSumSumSumMax:\
    \ Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:38:9: error: invalid redeclaration\
    \ of 'vowelsCountSumSumSumSumSumSumMin'\n    var vowelsCountSumSumSumSumSumSumMin:\
    \ Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:35:9: note: 'vowelsCountSumSumSumSumSumSumMin'\
    \ previously declared here\n    var vowelsCountSumSumSumSumSumSumMin: Int = 0\n\
    \        ^\n/tmp/tmpc1cq792z.swift:39:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSum'\n\
    \    var vowelsCountSumSumSumSumSumSumSum: Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:36:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSum' previously declared here\n    var vowelsCountSumSumSumSumSumSumSum:\
    \ Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:45:9: error: invalid redeclaration\
    \ of 'vowelsCountSumSumSumSumSumSumSumSum'\n    var vowelsCountSumSumSumSumSumSumSumSum:\
    \ Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:42:9: note: 'vowelsCountSumSumSumSumSumSumSumSum'\
    \ previously declared here\n    var vowelsCountSumSumSumSumSumSumSumSum: Int =\
    \ 0\n        ^\n/tmp/tmpc1cq792z.swift:46:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumMax'\n\
    \    var vowelsCountSumSumSumSumSumSumSumSumMax: Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:43:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSumMax' previously declared here\n  \
    \  var vowelsCountSumSumSumSumSumSumSumSumMax: Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:47:9:\
    \ error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumMin'\n \
    \   var vowelsCountSumSumSumSumSumSumSumSumMin: Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:44:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumSumMin' previously declared here\n  \
    \  var vowelsCountSumSumSumSumSumSumSumSumMin: Int = 0\n        ^\n/tmp/tmpc1cq792z.swift:49:9:\
    \ error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumSumMax'\n \
    \   var vowelsCountS"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    \n    for letter in word {\n    \
    \    if vowels.contains(letter) {\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n        }\n    }\n    \n    if vowelsCount.count == 0 {\n        return\
    \ \"\"\n    }\n    \n    var minVowel: Int = vowelsCount.min()!\n    var maxVowel:\
    \ Int = vowelsCount.max()!\n    \n    if minVowel == maxVowel {\n        return\
    \ \"\"\n    }\n    \n    var closestVowel: String = vowels[minVowel]\n    \n \
    \   if minVowel == maxVowel - 1 {\n        closestVowel = vowels[minVowel]\n \
    \   }\n    \n    if minVowel == maxVowel + 1 {\n        closestVowel = vowels[minVowel]\n\
    \    }\n    \n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3dit70on.swift:17:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(letter) {\n \
    \                          ^\n/tmp/tmp3dit70on.swift:18:32: error: value of type\
    \ '[String]' has no member 'indexOf'\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n                        ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013897
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    var vowelIndex = 0\n\
    \    var consonantIndex = 0\n    var consonantIndex2 = word.length - 1\n    var\
    \ consonantIndex3 = word.length - 1\n    var consonantIndex4 = word.length - 1\n\
    \    var consonantIndex5 = word.length - 1\n    var consonantIndex6 = word.length\
    \ - 1\n    var consonantIndex7 = word.length - 1\n    var consonantIndex8 = word.length\
    \ - 1\n    var consonantIndex9 = word.length - 1\n    var consonantIndex10 = word.length\
    \ - 1\n    var consonantIndex11 = word.length - 1\n    var consonantIndex12 =\
    \ word.length - 1\n    var consonantIndex13 = word.length - 1\n    var consonantIndex14\
    \ = word.length - 1\n    var consonantIndex15 = word.length - 1\n    var consonantIndex16\
    \ = word.length - 1\n    var consonantIndex17 = word.length - 1\n    var consonantIndex18\
    \ = word.length - 1\n    var consonantIndex19 = word.length - 1\n    var consonantIndex20\
    \ = word.length - 1\n    var consonantIndex21 = word.length - 1\n    var consonantIndex22\
    \ = word.length - 1\n    var consonantIndex23 = word.length - 1\n    var consonantIndex24\
    \ = word.length - 1\n    var consonantIndex25 = word.length - 1\n    var consonantIndex26\
    \ = word.length - 1\n    var consonantIndex27 = word.length - 1\n    var consonantIndex28\
    \ = word.length - 1\n    var consonantIndex29 = word.length - 1\n    var consonantIndex30\
    \ = word.length - 1\n    var consonantIndex31 = word.length - 1\n    var consonantIndex32\
    \ = word.length - 1\n    var consonantIndex33 = word.length - 1\n    var consonantIndex34\
    \ = word.length - 1\n    var consonantIndex35 = word.length - 1\n    var consonantIndex36\
    \ = word.length - 1\n    var consonantIndex37 = word.length - 1\n    var consonantIndex38\
    \ = word.length - 1\n    var consonantIndex39 = word.length - 1\n    var consonantIndex40\
    \ = word.length - 1\n    var consonantIndex41 = word.length - 1\n    var consonantIndex42\
    \ = word.length - 1\n    var consonantIndex43 = word.length - 1\n    var consonantIndex44\
    \ = word.length - 1\n    var consonantIndex45 = word.length - 1\n    var consonantIndex46\
    \ = word.length - 1\n    var consonantIndex47 = word.length - 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpsirivz9d.swift:16:32: error: value of type 'String' has no member\
    \ 'length'\n    var consonantIndex2 = word.length - 1\n                      \
    \    ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:17:32: error: value of type 'String'\
    \ has no member 'length'\n    var consonantIndex3 = word.length - 1\n        \
    \                  ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:18:32: error: value of\
    \ type 'String' has no member 'length'\n    var consonantIndex4 = word.length\
    \ - 1\n                          ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:19:32: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex5 = word.length\
    \ - 1\n                          ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:20:32: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex6 = word.length\
    \ - 1\n                          ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:21:32: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex7 = word.length\
    \ - 1\n                          ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:22:32: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex8 = word.length\
    \ - 1\n                          ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:23:32: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex9 = word.length\
    \ - 1\n                          ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:24:33: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex10 = word.length\
    \ - 1\n                           ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:25:33: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex11 = word.length\
    \ - 1\n                           ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:26:33: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex12 = word.length\
    \ - 1\n                           ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:27:33: error:\
    \ value of type 'String' has no member 'length'\n    var consonantIndex13 = word.length\
    \ - 1\n                           ~~~~ ^~~~~~\n/tmp/tmpsirivz9d.swift:28:33: error:\
    \ value of type 'String' has no member 'length'\n "
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.contains(.vowel) {\n            vowels.append(char)\n\
    \        }\n    }\n    if vowels.isEmpty {\n        return \"\"\n    }\n    let\
    \ vowel = vowels.sorted()[vowels.count - 1]\n    let index = word.characters.index(of:\
    \ vowel)\n    if index == word.characters.count - 1 {\n        return \"\"\n \
    \   }\n    let start = word.characters.index(before: index)\n    let end = word.characters.index(before:\
    \ start, offsetBy: 1)\n    return word.substring(from: start!, to: end!)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3mlocvig.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp3mlocvig.swift:15:42:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n                                        ~^~~~~\n/tmp/tmp3mlocvig.swift:16:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(char)\n                          ^\n/tmp/tmp3mlocvig.swift:23:43:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n    let index = word.characters.index(of: vowel)\n      \
    \                                    ^\n/tmp/tmp3mlocvig.swift:28:31: error: no\
    \ exact matches in call to instance method 'index'\n    let end = word.characters.index(before:\
    \ start, offsetBy: 1)\n                              ^\n/tmp/tmp3mlocvig.swift:28:31:\
    \ note: found candidate with type '(String.Index, Int) -> String.Index'\n    let\
    \ end = word.characters.index(before: start, offsetBy: 1)\n                  \
    \            ^\n/tmp/tmp3mlocvig.swift:29:17: error: value of type 'String' has\
    \ no member 'substring'\n    return word.substring(from: start!, to: end!)\n \
    \          ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = vowelsIndex - 1\n    \n    let vowelsIndex\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).count\n    \n \
    \   if vowelsIndex == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex\
    \ = vowelsIndex - 1\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = vowelsIndex - 1\n    \n    let vowelsIndex\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).count\n    \n \
    \   if vowelsIndex == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex\
    \ = vowelsIndex - 1\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = vowelsIndex - 1\n    \n    let vowelsIndex\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).count\n    \n \
    \   if vowelsIndex == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex\
    \ = vowelsIndex - 1\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = vowelsIndex - 1\n    \n    let vowelsIndex\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).count\n    \n \
    \   if vowelsIndex == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex\
    \ = vowelsIndex - 1\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsIndex == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = vowelsIndex - 1\n    \n    let vowelsIndex\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).count\n    \n \
    \   if vowelsIndex == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex\
    \ = vowelsIndex - 1\n    \n    let vowelsIndex = word.characters.\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpgursfavk.swift:102:38: error: expected member name following '.'\n\
    \    let vowelsIndex = word.characters.\n                                    \
    \ ^\n/tmp/tmpgursfavk.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgursfavk.swift:22:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpgursfavk.swift:28:9: error: invalid redeclaration\
    \ of 'vowelsIndex'\n    let vowelsIndex = vowelsIndex - 1\n        ^\n/tmp/tmpgursfavk.swift:22:9:\
    \ note: 'vowelsIndex' previously declared here\n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n        ^\n/tmp/tmpgursfavk.swift:30:28: error:\
    \ 'characters' is unavailable: Please use String directly\n    let vowelsIndex\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).count\n       \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgursfavk.swift:30:9: error: invalid redeclaration of 'vowelsIndex'\n\
    \    let vowelsIndex = word.characters.reversed().filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpgursfavk.swift:22:9: note: 'vowelsIndex' previously\
    \ declared here\n    let vowelsIndex = word.characters.reversed().filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpgursfavk.swift:38:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n                           ^~~~~~~~~~\nSwift.String:5:"
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [Character] = []\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.count > 0 {\n            vowels.append(char.unicodeScalars.first!)\n\
    \        }\n    }\n    if vowels.count > 0 {\n        let vowelIndex = vowels.firstIndex(of:\
    \ vowels.last!)\n        if vowelIndex != nil {\n            let vowel = vowels[vowelIndex!]\n\
    \            if vowel.unicodeScalars.count > 0 {\n                let consonantIndex\
    \ = vowel.unicodeScalars.firstIndex(of: vowel.unicodeScalars.last!)\n        \
    \        if consonantIndex != nil {\n                    let consonant = vowel.unicodeScalars[consonantIndex!]\n\
    \                    if consonant.unicodeScalars.count > 0 {\n               \
    \         let consonantIndex = word.characters.index(of: consonant)\n        \
    \                if consonantIndex != nil {\n                            let consonantIndex\
    \ = word.characters.index(of: consonant, offsetBy: consonantIndex!.advancedBy(1))\n\
    \                            if consonantIndex != nil {\n                    \
    \            let consonantIndex = word.characters.index(of: consonant, offsetBy:\
    \ consonantIndex!.advancedBy(-1))\n                                if consonantIndex\
    \ != nil {\n                                    let consonantIndex = word.characters.index(of:\
    \ consonant, offsetBy: consonantIndex!.advancedBy(2))\n                      \
    \              if consonantIndex != nil {\n                                  \
    \      return word.substring(to: consonantIndex!)\n                          \
    \          }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpu40awcr9.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpu40awcr9.swift:16:20:\
    \ error: no exact matches in call to instance method 'append'\n            vowels.append(char.unicodeScalars.first!)\n\
    \                   ^\nSwift.Array:6:37: note: candidate expects value of type\
    \ 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable public mutating\
    \ func append(_ newElement: __owned Element)\n                               \
    \     ^\nSwift.RangeReplaceableCollection:4:37: note: candidate expects value\
    \ of type 'Character' for parameter #1 (got 'Unicode.Scalar')\n    @inlinable\
    \ public mutating func append(_ newElement: __owned Self.Element)\n          \
    \                          ^\n/tmp/tmpu40awcr9.swift:16:20: note: found candidate\
    \ with type '(__owned Unicode.Scalar) -> ()'\n            vowels.append(char.unicodeScalars.first!)\n\
    \                   ^\n/tmp/tmpu40awcr9.swift:27:34: error: value of type 'Unicode.Scalar'\
    \ has no member 'unicodeScalars'\n                    if consonant.unicodeScalars.count\
    \ > 0 {\n                       ~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpu40awcr9.swift:28:72:\
    \ error: cannot convert value of type 'Unicode.Scalar' to expected argument type\
    \ 'String.Element' (aka 'Character')\n                        let consonantIndex\
    \ = word.characters.index(of: consonant)\n                                   \
    \                                    ^\n/tmp/tmpu40awcr9.swift:30:66: error: no\
    \ exact matches in call to instance method 'index'\n                         \
    \   let consonantIndex = word.characters.index(of: consonant, offsetBy: consonantIndex!.advancedBy(1))\n\
    \                                                                 ^\n/tmp/tmpu40awcr9.swift:30:66:\
    \ note: found candidate with type '(String.Index, Int) -> String.Index'\n    \
    \                        let consonantIndex = word.characters.index("
  stdout: ''
  timestamp: 1660013898
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowelIndex = 0\n    var vowel = \"\"\n    var lastVowel\
    \ = \"\"\n    for index in 0..<word.count {\n        let char = word[index]\n\
    \        if char.lowercased() == \"a\" || char.lowercased() == \"e\" || char.lowercased()\
    \ == \"i\" || char.lowercased() == \"o\" || char.lowercased() == \"u\" {\n   \
    \         vowelIndex = index\n            vowel = char\n        }\n    }\n   \
    \ if vowelIndex == 0 {\n        return \"\"\n    }\n    if vowelIndex == word.count\
    \ - 1 {\n        return vowel\n    }\n    if vowelIndex > word.count - 1 {\n \
    \       return \"\"\n    }\n    if vowelIndex == 0 {\n        lastVowel = vowel\n\
    \    }\n    if vowelIndex == word.count - 1 {\n        return lastVowel\n    }\n\
    \    if vowelIndex > 0 {\n        lastVowel = word[vowelIndex-1]\n    }\n    if\
    \ vowelIndex == word.count - 1 {\n        return lastVowel\n    }\n    if vowelIndex\
    \ < word.count - 1 {\n        lastVowel = word[vowelIndex+1]\n    }\n    if lastVowel\
    \ == vowel {\n        return vowel\n    }\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyz67iejq.swift:17:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpyz67iejq.swift:20:21: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            vowel = char\n\
    \                    ^~~~\n/tmp/tmpyz67iejq.swift:39:25: error: cannot assign\
    \ value of type 'Character' to type 'String'\n        lastVowel = word[vowelIndex-1]\n\
    \                    ~~~~^~~~~~~~~~~~~~\n/tmp/tmpyz67iejq.swift:45:25: error:\
    \ cannot assign value of type 'Character' to type 'String'\n        lastVowel\
    \ = word[vowelIndex+1]\n                    ~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013898
