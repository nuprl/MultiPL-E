name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
  /// histogram('b b b b a') == {'b': 4}\n/// histogram('') == {}\nfunc histogram(test:\
  \ String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["\tletters := strings.Split(test, \" \")\n\thistogram := make([String\
    \ : Int])\n\tfor _, letter := range letters {\n\t\thistogram[letter] = histogram.get(letter,\
    \ 0) + 1\n\t}\n\treturn histogram", "\thistograms := make(map[String]int)\n\t\
    for _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms", "    var histogram = [String : Int]()\n    for letter\
    \ in test.split(\" \") {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.split(\" \") {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "\thistograms := make(map[String]int)\n\tfor _, letter := range strings.Split(test,\
    \ \" \") {\n\t\thistograms[letter]++\n\t}\n\treturn histograms", "\thistograms\
    \ := make(map[String]Int)\n\tfor _, letter := range strings.Split(test, \" \"\
    ) {\n\t\thistograms[letter]++\n\t}\n\treturn histograms", "\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make([String : Int])\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter] = histogram.get(letter, 0) + 1\n\t}\n\treturn histogram",
  "\thistograms := make(map[String]int)\n\tfor _, letter := range strings.Split(test,\
    \ \" \") {\n\t\thistograms[letter]++\n\t}\n\treturn histograms", "    var histogram\
    \ = [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    for letter in test.split(\" \") {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram", "    var histogram = [String : Int]()\n    for letter\
    \ in test.split(\" \") {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms", "\tletters := strings.Split(test, \" \")\n\thistogram\
    \ := make(map[String]int)\n\tfor _, letter := range letters {\n\t\thistogram[letter]++\n\
    \t}\n\treturn histogram", "\thistograms := make(map[String]int)\n\tfor _, letter\
    \ := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\t}\n\treturn\
    \ histograms", "    var histogram = [String : Int]()\n    for letter in test.split(\"\
    \ \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "\tletters := strings.Split(test, \" \")\n\thistograms\
    \ := make(map[String]int)\n\tfor _, letter := range letters {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms", "    var histogram = [String : Int]()\n    for letter\
    \ in test.split(\" \") {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram", "    var histogram = [String :\
    \ Int]()\n    for letter in test.split(\" \") {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var histogram\
    \ = [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram"]
stop_tokens:
- "\n}"
