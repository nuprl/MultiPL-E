language: swift
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for index in 0..<l.count {\n        result[index] += 1\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: -4
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ i = 0\n    var result = [Int]()\n    for x in l {\n        result.append(i +\
    \ x)\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3,\
    \ 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: Exception
  stderr: 'tmp35b8zepr/tmp35b8zepr.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add995f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add992f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add992f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add992ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35b8zepr                        0x00005569460176bd <unavailable> + 5821

    5    libc.so.6                          0x00002add997e5460 __libc_start_main +
    245

    6    tmp35b8zepr                        0x00005569460171e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824796
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ i = 0\n    var r = [Int]()\n    for x in l {\n        r.append(x + 1)\n    \
    \    i += 1\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: -4
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ i = 0\n    var result = [Int]()\n    for element in l {\n        result.append(element\
    \ + i)\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l:\
    \ [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123])\
    \ == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: Exception
  stderr: 'tmpvusxg23n/tmpvusxg23n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9362464c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b936215bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b936215b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b936215a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvusxg23n                        0x000055a149be26bd <unavailable> + 5821

    5    libc.so.6                          0x00002b9362650460 __libc_start_main +
    245

    6    tmpvusxg23n                        0x000055a149be21e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for index in 0..<result.count {\n        result[index] += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0 ..< l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmpl1s3_4f0.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: -4
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ i = 0\n    var r = [Int]()\n    for v in l {\n        r.append(v)\n        i\
    \ += 1\n    }\n    for v in r {\n        r[i] += v\n    }\n    return r\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l:\
    \ [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123])\
    \ == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abe86ec2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe86bb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abe86bb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abe86bb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abe86bb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abe869b87ec <unavailable> + 186348

    6    tmp0pgrk0qo                        0x0000558dff5a5b05 <unavailable> + 6917

    7    tmp0pgrk0qo                        0x0000558dff5a562d <unavailable> + 5677

    8    libc.so.6                          0x00002abe870ae460 __libc_start_main +
    245

    9    tmp0pgrk0qo                        0x0000558dff5a5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0 ..< l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmpl1s3_4f0.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: -4
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ i = 0\n    var r = [Int]()\n    for x in l {\n        r.append(i + x)\n    \
    \    i += 1\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: Exception
  stderr: 'tmpx8tr32rh/tmpx8tr32rh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eb5027c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eb4d1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eb4d1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eb4d1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8tr32rh                        0x000055638093c6bd <unavailable> + 5821

    5    libc.so.6                          0x00002b9eb5213460 __libc_start_main +
    245

    6    tmpx8tr32rh                        0x000055638093c1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0 ..< l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmpl1s3_4f0.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for index in 0..<result.count {\n        result[index] += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ i = 0\n    var result = [Int]()\n    for x in l {\n        result.append(x +\
    \ 1)\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3,\
    \ 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 1...len(l) {\n        result.append(result.removeLast())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmpd73p313w.swift:9:18: error: cannot find 'len' in scope\n    for\
    \ _ in 1...len(l) {\n                 ^~~\n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i := 0; i < len(l); i++ {\n        result.append(l[i]\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp1proslxp.swift:9:12: error: expected type\n    for i := 0; i <\
    \ len(l); i++ {\n           ^\n            <#type#>\n/tmp/tmp1proslxp.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(l); i++\
    \ {\n           ^\n/tmp/tmp1proslxp.swift:9:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(l); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824796
- exit_code: -4
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 1...l.count {\n        result.append(result.removeLast())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a8f409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a8f100561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a8f100286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a8f10013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a8f0ffbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbbqu5pr2                        0x000055787e48aa6f <unavailable> + 6767

    6    tmpbbqu5pr2                        0x000055787e48a5dd <unavailable> + 5597

    7    libc.so.6                          0x00002b7a8f5f5460 __libc_start_main +
    245

    8    tmpbbqu5pr2                        0x000055787e48a2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = l\n    for _ in 0..<l.count {\n        result.append(result!.count\
    \ + 1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp8q6_sg8w.swift:10:29: error: cannot force unwrap value of non-optional\
    \ type '[Int]'\n        result.append(result!.count + 1)\n                   \
    \   ~~~~~~^\n                            \n"
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for v in l {\n        result.append(v + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for i : Int in l {\n        result.append(i + 1)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824796
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
