name: HumanEval_51_remove_vowels
language: swift
prompt: "\n/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
  /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
  /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
  \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
  ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
  \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
  \ \"ybcd\") == \"ybcd\")"
completions: ["    let vowels = \"aeiouAEIOU\"\n    let regex = try! NSRegularExpression(pattern:\
    \ \"[\" + vowels + \"]\", options: [])\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSMakeRange(0, text.characters.count), withTemplate:\
    \ \"\")", '    return removeVowels(text, nil)', "    var result = \"\"\n    for\
    \ c in text {\n        if !is_vowel(c) {\n            result += c\n        }\n\
    \    }\n    return result", "    return text.filter {\n        !contains($0, \"\
    aeiouAEIOU\")\n    }", '    return removeVowels(text, nil)', "    return text.filter\
    \ {\n        !contains($0.unicodeScalars.filter({ $0.isInverted }).map({ $0.value\
    \ }), 0xAC00..0xD7AF)\n    }", "    return text.filter {\n        !contains($0,\
    \ \"aeiouAEIOU\")\n    }", "    text.unicodeScalars.filter { $0.isInvertedSet\
    \ }.map { $0.value }\n        .joined()", "    var result = \"\"\n    for c in\
    \ text {\n        if !is_vowel(c) {\n            result += c\n        }\n    }\n\
    \    return result", "    return text.filter {\n        !contains($0.unicodeScalars.filter({\
    \ $0.isInverted }).map({ $0.value }), 0xAC00..0xD79F)\n    }", "    return text.filter\
    \ {\n        !contains($0, \"aeiouAEIOU\")\n    }", "    let vowels = \"aeiouAEIOU\"\
    \n    var result = \"\"\n    for char in text {\n        if !vowels.contains(char)\
    \ {\n            result += char\n        }\n    }\n    return result", "\treturn\
    \ removeVowels(text, nil)", "    return text.filter {\n        !contains($0, \"\
    aeiouAEIOU\")\n    }", "    return text.filter {\n        !contains($0, \"aeiouAEIOU\"\
    )\n    }", "    return text.filter {\n        !contains($0, \"aeiouAEIOU\")\n\
    \    }", "    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char\
    \ in text {\n        if !vowels.contains(char) {\n            result += char\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for c in text\
    \ {\n        if !is_vowel(c) {\n            result += c\n        }\n    }\n  \
    \  return result", "    return text.filter {\n        !contains($0.unicodeScalars.filter({\
    \ $0.isInverted }).map({ $0.value }), 0xAC00..0xD7AF)\n    }", "    let vowels\
    \ = \"aeiouAEIOU\"\n    let result = \"\"\n    for char in text {\n        if\
    \ !vowels.contains(char) {\n            result += char\n        }\n    }\n   \
    \ return result"]
stop_tokens:
- "\n}"
