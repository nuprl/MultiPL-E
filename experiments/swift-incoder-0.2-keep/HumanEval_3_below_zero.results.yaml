language: swift
name: HumanEval_3_below_zero
results:
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance -= operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4929358c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492904f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b492904f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b492904f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b492904ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4928e4ee83 <unavailable> + 188035

    6    tmpf6mkq121                        0x000055741aecd9c2 <unavailable> + 6594

    7    tmpf6mkq121                        0x000055741aecd41d <unavailable> + 5149

    8    libc.so.6                          0x00002b4929544460 __libc_start_main +
    245

    9    tmpf6mkq121                        0x000055741aecd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance -= operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4929358c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492904f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b492904f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b492904f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b492904ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4928e4ee83 <unavailable> + 188035

    6    tmpf6mkq121                        0x000055741aecd9c2 <unavailable> + 6594

    7    tmpf6mkq121                        0x000055741aecd41d <unavailable> + 5149

    8    libc.so.6                          0x00002b4929544460 __libc_start_main +
    245

    9    tmpf6mkq121                        0x000055741aecd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance -= operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4929358c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b492904f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b492904f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b492904f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b492904ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4928e4ee83 <unavailable> + 188035

    6    tmpf6mkq121                        0x000055741aecd9c2 <unavailable> + 6594

    7    tmpf6mkq121                        0x000055741aecd41d <unavailable> + 5149

    8    libc.so.6                          0x00002b4929544460 __libc_start_main +
    245

    9    tmpf6mkq121                        0x000055741aecd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n \
    \       balance += operation\n        if balance < 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= operation\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fb7536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fb722d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fb722d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fb722d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fb722cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8fb702ce83 <unavailable> + 188035

    6    tmpv1swsc_a                        0x0000555af9f149c2 <unavailable> + 6594

    7    tmpv1swsc_a                        0x0000555af9f1441d <unavailable> + 5149

    8    libc.so.6                          0x00002b8fb7722460 __libc_start_main +
    245

    9    tmpv1swsc_a                        0x0000555af9f14129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: 0
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = 0\n    for op in operations {\n        balance\
    \ += op\n        if balance < 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014076
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for operation in operations\
    \ {\n        balance += operation\n        if balance < 0 {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(below_zero(operations: [] as [Int]) == false)\nassert(below_zero(operations:\
    \ [1, 2, -3, 1, 2, -3]) == false)\nassert(below_zero(operations: [1, 2, -4, 5,\
    \ 6]) == true)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ false)\nassert(below_zero(operations: [1, -1, 2, -2, 5, -5, 4, -5]) == true)\n\
    assert(below_zero(operations: [1, -2, 2, -2, 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abac2cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abac29f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abac29f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abac29f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abac29f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abac27f4e83 <unavailable> + 188035

    6    tmp53vsysf7                        0x00005634966349c2 <unavailable> + 6594

    7    tmp53vsysf7                        0x000056349663441d <unavailable> + 5149

    8    libc.so.6                          0x00002abac2eea460 __libc_start_main +
    245

    9    tmp53vsysf7                        0x0000563496634129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
- exit_code: -4
  program: "\n/// You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n/// zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n/// at that point function\
    \ should return True. Otherwise it should return False.\n/// >>> below_zero([1,\
    \ 2, 3])\n/// False\n/// >>> below_zero([1, 2, -4, 5])\n/// True\nfunc below_zero(operations:\
    \ [Int]) -> Bool {\n    var balance = operations[0]\n    for op in operations\
    \ {\n        if balance < 0 {\n            return true\n        }\n        balance\
    \ -= op\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(below_zero(operations:\
    \ [] as [Int]) == false)\nassert(below_zero(operations: [1, 2, -3, 1, 2, -3])\
    \ == false)\nassert(below_zero(operations: [1, 2, -4, 5, 6]) == true)\nassert(below_zero(operations:\
    \ [1, -1, 2, -2, 5, -5, 4, -4]) == false)\nassert(below_zero(operations: [1, -1,\
    \ 2, -2, 5, -5, 4, -5]) == true)\nassert(below_zero(operations: [1, -2, 2, -2,\
    \ 5, -5, 4, -4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b963c51cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b963c213561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b963c213286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b963c21313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b963c212bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b963c012e83 <unavailable> + 188035

    6    tmp7xg7th4l                        0x0000564bebbe89c2 <unavailable> + 6594

    7    tmp7xg7th4l                        0x0000564bebbe841d <unavailable> + 5149

    8    libc.so.6                          0x00002b963c708460 __libc_start_main +
    245

    9    tmp7xg7th4l                        0x0000564bebbe8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014238
