name: HumanEval_9_rolling_max
language: swift
prompt: "\n/// From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n/// in the sequence.\n/// >>> rolling_max([1, 2, 3,\
  \ 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == []\
  \ as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
  \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
  \ == [3, 3, 3, 100, 100])"
completions: ["    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max", "    var max =\
    \ [Int]()\n    var index = 0\n    for number in numbers {\n        if number >\
    \ max[index] {\n            max = [Int](repeating: number, count: index + 1)\n\
    \        }\n        max[index] = number\n        index += 1\n    }\n    return\
    \ max", "    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max", "    var max =\
    \ [Int]()\n    var maxIndex = 0\n    for number in numbers {\n        if number\
    \ > max[maxIndex] {\n            max[maxIndex] = number\n            maxIndex\
    \ += 1\n        }\n    }\n    return max", "    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for number in numbers {\n        if number > max[maxIndex] {\n    \
    \        max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n\
    \    return max", "    var max = [Int]()\n    var maxIndex = 0\n    for number\
    \ in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max", "  \
    \  var max = [Int]()\n    var maxIndex = 0\n    for number in numbers {\n    \
    \    if number > max[maxIndex] {\n            max[maxIndex] = number\n       \
    \     maxIndex += 1\n        }\n    }\n    return max", "    var max = [Int]()\n\
    \    var maxIndex = 0\n    for number in numbers {\n        if number > max[maxIndex]\
    \ {\n            max[maxIndex] = number\n            maxIndex += 1\n        }\n\
    \    }\n    return max", "    var max = numbers[0]\n    var maxIndex = -1\n  \
    \  for index in 1..<numbers.count {\n        if numbers[index] > max {\n     \
    \       max = numbers[index]\n            maxIndex = index\n        }\n    }\n\
    \    return numbers[maxIndex..<numbers.count]", "    var max = numbers[0]\n  \
    \  var rollingMax = [Int]()\n    for number in numbers {\n        if number >\
    \ max {\n            rollingMax.append(max)\n            max = number\n      \
    \  } else {\n            max = number\n        }\n    }\n    rollingMax.append(max)\n\
    \    return rollingMax", "    var max = [Int]()\n    var maxIndex = 0\n    for\
    \ number in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max", "  \
    \  var max = [Int]()\n    var maxIndex = 0\n    for number in numbers {\n    \
    \    if number > max[maxIndex] {\n            max[maxIndex] = number\n       \
    \     maxIndex += 1\n        }\n    }\n    return max", "    var max = [Int]()\n\
    \    var maxIndex = 0\n    for number in numbers {\n        if number > max[maxIndex]\
    \ {\n            max[maxIndex] = number\n            maxIndex += 1\n        }\n\
    \    }\n    return max", "    var max = numbers[0]\n    var rolling_max = numbers[0]\n\
    \    for number in numbers {\n        if number > max {\n            max = number\n\
    \        }\n        if number > rolling_max {\n            rolling_max = number\n\
    \        }\n    }\n    return rolling_max", "    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for number in numbers {\n        if number > max[maxIndex] {\n    \
    \        max[maxIndex] = number\n            maxIndex += 1\n        }\n    }\n\
    \    return max", "    var max_so_far = numbers[0]\n    var max_so_far_index =\
    \ 0\n    for index in 1..<numbers.count {\n        if numbers[index] > max_so_far\
    \ {\n            max_so_far = numbers[index]\n            max_so_far_index = index\n\
    \        }\n    }\n    return Array(numbers[max_so_far_index..<numbers.count])",
  "    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers {\n    \
    \    if number > max[maxIndex] {\n            max[maxIndex] = number\n       \
    \     maxIndex += 1\n        }\n    }\n    return max", "    var result: [Int]\
    \ = []\n    var max: Int = 0\n    for number in numbers {\n        if number >\
    \ max {\n            max = number\n        }\n    }\n    for number in numbers\
    \ {\n        if number > max {\n            result.append(number)\n        }\n\
    \    }\n    return result", "    var max = [Int]()\n    var maxIndex = 0\n   \
    \ for number in numbers {\n        if number > max[maxIndex] {\n            max[maxIndex]\
    \ = number\n            maxIndex += 1\n        }\n    }\n    return max", "  \
    \  var max = [Int]()\n    var index = 0\n    for number in numbers {\n       \
    \ if index == 0 {\n            max = number\n        } else {\n            if\
    \ number > max[index] {\n                max[index] = number\n            }\n\
    \        }\n        index++\n    }\n    return max"]
stop_tokens:
- "\n}"
