language: swift
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make([String : Int])\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter] = histogram.get(letter, 0) + 1\n\t}\n\treturn histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwa5tqf4r.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpwa5tqf4r.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpwa5tqf4r.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpwa5tqf4r.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpwa5tqf4r.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpwa5tqf4r.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make([String : Int])\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter] = histogram.get(letter, 0) + 1\n\t}\n\treturn histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwa5tqf4r.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpwa5tqf4r.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpwa5tqf4r.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpwa5tqf4r.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpwa5tqf4r.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpwa5tqf4r.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistograms := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistograms[letter]++\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpy_kdijm_.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpy_kdijm_.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpy_kdijm_.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpy_kdijm_.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpy_kdijm_.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpy_kdijm_.swift:17:9:\
    \ error: cannot find 'histograms' in scope\n        return histograms\n      \
    \         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\tresult := make(map[String]int)\n\tfor letter, count := range histograms\
    \ {\n\t\tresult[letter] = count\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmprisubrwo.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmprisubrwo.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmprisubrwo.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n        for letter, count := range\
    \ histograms {\n                  ^\n/tmp/tmprisubrwo.swift:17:12: error: expected\
    \ Sequence expression for for-each loop\n        for letter, count := range histograms\
    \ {\n                  ^\n/tmp/tmprisubrwo.swift:12:2: error: cannot find 'histograms'\
    \ in scope\n        histograms := make(map[String]int)\n        ^~~~~~~~~~\n/tmp/tmprisubrwo.swift:20:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4mwkk9ue.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\tif _, ok := histograms[letter];\
    \ !ok {\n\t\t\thistograms[letter] = 1\n\t\t} else {\n\t\t\thistograms[letter]++\n\
    \t\t}\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqrgegmjy.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmpqrgegmjy.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmpqrgegmjy.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:14:12:\
    \ error: expected '{' after 'if' condition\n                if _, ok := histograms[letter];\
    \ !ok {\n                         ^\n/tmp/tmpqrgegmjy.swift:12:2: error: cannot\
    \ find 'histograms' in scope\n        histograms := make(map[String]int)\n   \
    \     ^~~~~~~~~~\n/tmp/tmpqrgegmjy.swift:20:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogramCount :=\
    \ [String : Int]()\n\tfor _, letter := range strings.Split(test, \" \") {\n\t\t\
    histogramCount[letter] = histogramCount[letter] + 1\n\t}\n\treturn histogramCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmplh176_cx.swift:12:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogramCount := [String : Int]()\n          \
    \            ^\n                      ;\n/tmp/tmplh176_cx.swift:12:17: error:\
    \ expected expression\n        histogramCount := [String : Int]()\n          \
    \             ^\n/tmp/tmplh176_cx.swift:13:7: error: expected 'in' after for-each\
    \ pattern\n        for _, letter := range strings.Split(test, \" \") {\n     \
    \        ^\n/tmp/tmplh176_cx.swift:13:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, letter := range strings.Split(test, \" \") {\n\
    \             ^\n/tmp/tmplh176_cx.swift:12:2: error: cannot find 'histogramCount'\
    \ in scope\n        histogramCount := [String : Int]()\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmplh176_cx.swift:16:9: error: cannot find 'histogramCount' in scope\n  \
    \      return histogramCount\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    var max = 0\n    for letter in test.split(\" \") {\n \
    \       if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n            if count > max {\n                max = count\n           \
    \ }\n        } else {\n            histogram[letter] = 1\n        }\n    }\n \
    \   return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdc_tglqu.swift:14:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make([String : Int], len(letters))\n\tfor _, letter :=\
    \ range letters {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg7e4b0wo.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpg7e4b0wo.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpg7e4b0wo.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpg7e4b0wo.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpg7e4b0wo.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpg7e4b0wo.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make([String : Int])\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpvn2s5zzz.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpvn2s5zzz.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpvn2s5zzz.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpvn2s5zzz.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpvn2s5zzz.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpvn2s5zzz.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    var maxCount = 0\n    var maxLetter = \"\"\n    for letter\
    \ in test.split(\" \") {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n        if histogram[letter] > maxCount {\n            maxCount\
    \ = histogram[letter]\n            maxLetter = letter\n        }\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp88z2yg10.swift:15:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    var letters = test.split(\" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasmc1axx.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    var letters = test.split(\" \")\n                      \
    \ ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4mwkk9ue.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogramCount :=\
    \ make([String : Int])\n\tfor _, letter := range strings.Split(test, \" \") {\n\
    \t\thistogramCount[letter]++\n\t}\n\treturn histogramCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfw2l4hz4.swift:12:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogramCount := make([String : Int])\n      \
    \                ^\n                      ;\n/tmp/tmpfw2l4hz4.swift:12:17: error:\
    \ expected expression\n        histogramCount := make([String : Int])\n      \
    \                 ^\n/tmp/tmpfw2l4hz4.swift:13:7: error: expected 'in' after for-each\
    \ pattern\n        for _, letter := range strings.Split(test, \" \") {\n     \
    \        ^\n/tmp/tmpfw2l4hz4.swift:13:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, letter := range strings.Split(test, \" \") {\n\
    \             ^\n/tmp/tmpfw2l4hz4.swift:12:2: error: cannot find 'histogramCount'\
    \ in scope\n        histogramCount := make([String : Int])\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmpfw2l4hz4.swift:16:9: error: cannot find 'histogramCount' in scope\n  \
    \      return histogramCount\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    var letters = test.split(\" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasmc1axx.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    var letters = test.split(\" \")\n                      \
    \ ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogram := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistogram[letter]++\n\
    \t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmplkmyp7dx.swift:12:11: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogram := make(map[String]Int)\n           \
    \      ^\n                 ;\n/tmp/tmplkmyp7dx.swift:12:12: error: expected expression\n\
    \        histogram := make(map[String]Int)\n                  ^\n/tmp/tmplkmyp7dx.swift:13:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ strings.Split(test, \" \") {\n             ^\n/tmp/tmplkmyp7dx.swift:13:7: error:\
    \ expected Sequence expression for for-each loop\n        for _, letter := range\
    \ strings.Split(test, \" \") {\n             ^\n/tmp/tmplkmyp7dx.swift:12:2: error:\
    \ function is unused\n        histogram := make(map[String]Int)\n        ^~~~~~~~~\n\
    /tmp/tmplkmyp7dx.swift:16:9: error: cannot convert return expression of type '(String)\
    \ -> [String : Int]' to return type '[String : Int]'\n        return histogram\n\
    \               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\tresult := make(map[String]int)\n\tfor letter, count := range histograms\
    \ {\n\t\tresult[letter] = count\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmprisubrwo.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmprisubrwo.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmprisubrwo.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n        for letter, count := range\
    \ histograms {\n                  ^\n/tmp/tmprisubrwo.swift:17:12: error: expected\
    \ Sequence expression for for-each loop\n        for letter, count := range histograms\
    \ {\n                  ^\n/tmp/tmprisubrwo.swift:12:2: error: cannot find 'histograms'\
    \ in scope\n        histograms := make(map[String]int)\n        ^~~~~~~~~~\n/tmp/tmprisubrwo.swift:20:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make([String : Int])\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter] = histogram.get(letter, 0) + 1\n\t}\n\treturn histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwa5tqf4r.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpwa5tqf4r.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpwa5tqf4r.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpwa5tqf4r.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpwa5tqf4r.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpwa5tqf4r.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\tif _, ok := histograms[letter];\
    \ !ok {\n\t\t\thistograms[letter] = 1\n\t\t} else {\n\t\t\thistograms[letter]++\n\
    \t\t}\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqrgegmjy.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmpqrgegmjy.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmpqrgegmjy.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:14:12:\
    \ error: expected '{' after 'if' condition\n                if _, ok := histograms[letter];\
    \ !ok {\n                         ^\n/tmp/tmpqrgegmjy.swift:12:2: error: cannot\
    \ find 'histograms' in scope\n        histograms := make(map[String]int)\n   \
    \     ^~~~~~~~~~\n/tmp/tmpqrgegmjy.swift:20:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogram := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistogram[letter]++\n\
    \t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps1je91i3.swift:12:11: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogram := make(map[String]int)\n           \
    \      ^\n                 ;\n/tmp/tmps1je91i3.swift:12:12: error: expected expression\n\
    \        histogram := make(map[String]int)\n                  ^\n/tmp/tmps1je91i3.swift:13:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ strings.Split(test, \" \") {\n             ^\n/tmp/tmps1je91i3.swift:13:7: error:\
    \ expected Sequence expression for for-each loop\n        for _, letter := range\
    \ strings.Split(test, \" \") {\n             ^\n/tmp/tmps1je91i3.swift:12:2: error:\
    \ function is unused\n        histogram := make(map[String]int)\n        ^~~~~~~~~\n\
    /tmp/tmps1je91i3.swift:16:9: error: cannot convert return expression of type '(String)\
    \ -> [String : Int]' to return type '[String : Int]'\n        return histogram\n\
    \               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    var letters = test.split(\" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasmc1axx.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    var letters = test.split(\" \")\n                      \
    \ ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4mwkk9ue.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\tif _, ok := histograms[letter];\
    \ !ok {\n\t\t\thistograms[letter] = 1\n\t\t} else {\n\t\t\thistograms[letter]++\n\
    \t\t}\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqrgegmjy.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmpqrgegmjy.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmpqrgegmjy.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:14:12:\
    \ error: expected '{' after 'if' condition\n                if _, ok := histograms[letter];\
    \ !ok {\n                         ^\n/tmp/tmpqrgegmjy.swift:12:2: error: cannot\
    \ find 'histograms' in scope\n        histograms := make(map[String]int)\n   \
    \     ^~~~~~~~~~\n/tmp/tmpqrgegmjy.swift:20:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\tif _, ok := histograms[letter];\
    \ !ok {\n\t\t\thistograms[letter] = 1\n\t\t} else {\n\t\t\thistograms[letter]++\n\
    \t\t}\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqrgegmjy.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmpqrgegmjy.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmpqrgegmjy.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:14:12:\
    \ error: expected '{' after 'if' condition\n                if _, ok := histograms[letter];\
    \ !ok {\n                         ^\n/tmp/tmpqrgegmjy.swift:12:2: error: cannot\
    \ find 'histograms' in scope\n        histograms := make(map[String]int)\n   \
    \     ^~~~~~~~~~\n/tmp/tmpqrgegmjy.swift:20:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]Int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter] = histogram.get(letter, 0) + 1\n\t}\n\treturn histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpo_xwuapf.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpo_xwuapf.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpo_xwuapf.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpo_xwuapf.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpo_xwuapf.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpo_xwuapf.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    var maxCount = 0\n    var maxLetter = \"\"\n    for letter\
    \ in test.split(\" \") {\n        if let count = histogram[letter] {\n       \
    \     histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n        if histogram[letter] > maxCount {\n            maxCount\
    \ = histogram[letter]\n            maxLetter = letter\n        }\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp88z2yg10.swift:15:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogramCount :=\
    \ [String : Int]()\n\tfor _, letter := range strings.Split(test, \" \") {\n\t\t\
    histogramCount[letter] = histogramCount[letter] + 1\n\t}\n\treturn histogramCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmplh176_cx.swift:12:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogramCount := [String : Int]()\n          \
    \            ^\n                      ;\n/tmp/tmplh176_cx.swift:12:17: error:\
    \ expected expression\n        histogramCount := [String : Int]()\n          \
    \             ^\n/tmp/tmplh176_cx.swift:13:7: error: expected 'in' after for-each\
    \ pattern\n        for _, letter := range strings.Split(test, \" \") {\n     \
    \        ^\n/tmp/tmplh176_cx.swift:13:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, letter := range strings.Split(test, \" \") {\n\
    \             ^\n/tmp/tmplh176_cx.swift:12:2: error: cannot find 'histogramCount'\
    \ in scope\n        histogramCount := [String : Int]()\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmplh176_cx.swift:16:9: error: cannot find 'histogramCount' in scope\n  \
    \      return histogramCount\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\tresult := make(map[String]int)\n\tfor letter, count := range histograms\
    \ {\n\t\tresult[letter] = count\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmprisubrwo.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmprisubrwo.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmprisubrwo.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n        for letter, count := range\
    \ histograms {\n                  ^\n/tmp/tmprisubrwo.swift:17:12: error: expected\
    \ Sequence expression for for-each loop\n        for letter, count := range histograms\
    \ {\n                  ^\n/tmp/tmprisubrwo.swift:12:2: error: cannot find 'histograms'\
    \ in scope\n        histograms := make(map[String]int)\n        ^~~~~~~~~~\n/tmp/tmprisubrwo.swift:20:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\tif _, ok := histograms[letter];\
    \ !ok {\n\t\t\thistograms[letter] = 1\n\t\t} else {\n\t\t\thistograms[letter]++\n\
    \t\t}\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqrgegmjy.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmpqrgegmjy.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmpqrgegmjy.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:14:12:\
    \ error: expected '{' after 'if' condition\n                if _, ok := histograms[letter];\
    \ !ok {\n                         ^\n/tmp/tmpqrgegmjy.swift:12:2: error: cannot\
    \ find 'histograms' in scope\n        histograms := make(map[String]int)\n   \
    \     ^~~~~~~~~~\n/tmp/tmpqrgegmjy.swift:20:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4mwkk9ue.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\tif _, ok := histograms[letter];\
    \ !ok {\n\t\t\thistograms[letter] = 1\n\t\t} else {\n\t\t\thistograms[letter]++\n\
    \t\t}\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqrgegmjy.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmpqrgegmjy.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmpqrgegmjy.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:14:12:\
    \ error: expected '{' after 'if' condition\n                if _, ok := histograms[letter];\
    \ !ok {\n                         ^\n/tmp/tmpqrgegmjy.swift:12:2: error: cannot\
    \ find 'histograms' in scope\n        histograms := make(map[String]int)\n   \
    \     ^~~~~~~~~~\n/tmp/tmpqrgegmjy.swift:20:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogramCount :=\
    \ [String : Int]()\n\tfor _, letter := range strings.Split(test, \" \") {\n\t\t\
    histogramCount[letter] = histogramCount[letter] + 1\n\t}\n\treturn histogramCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmplh176_cx.swift:12:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogramCount := [String : Int]()\n          \
    \            ^\n                      ;\n/tmp/tmplh176_cx.swift:12:17: error:\
    \ expected expression\n        histogramCount := [String : Int]()\n          \
    \             ^\n/tmp/tmplh176_cx.swift:13:7: error: expected 'in' after for-each\
    \ pattern\n        for _, letter := range strings.Split(test, \" \") {\n     \
    \        ^\n/tmp/tmplh176_cx.swift:13:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, letter := range strings.Split(test, \" \") {\n\
    \             ^\n/tmp/tmplh176_cx.swift:12:2: error: cannot find 'histogramCount'\
    \ in scope\n        histogramCount := [String : Int]()\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmplh176_cx.swift:16:9: error: cannot find 'histogramCount' in scope\n  \
    \      return histogramCount\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\tresult := make([String : Int])\n\tfor _, letter := range letters {\n\
    \t\tresult[letter] = result[letter] + 1\n\t}\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpref3pvzz.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpref3pvzz.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpref3pvzz.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpref3pvzz.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpref3pvzz.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpref3pvzz.swift:17:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\tif _, ok := histograms[letter];\
    \ !ok {\n\t\t\thistograms[letter] = 1\n\t\t} else {\n\t\t\thistograms[letter]++\n\
    \t\t}\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqrgegmjy.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmpqrgegmjy.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmpqrgegmjy.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmpqrgegmjy.swift:14:12:\
    \ error: expected '{' after 'if' condition\n                if _, ok := histograms[letter];\
    \ !ok {\n                         ^\n/tmp/tmpqrgegmjy.swift:12:2: error: cannot\
    \ find 'histograms' in scope\n        histograms := make(map[String]int)\n   \
    \     ^~~~~~~~~~\n/tmp/tmpqrgegmjy.swift:20:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    var letters = test.split(\" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpasmc1axx.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    var letters = test.split(\" \")\n                      \
    \ ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogramCount :=\
    \ [String : Int]()\n\tfor _, letter := range strings.Split(test, \" \") {\n\t\t\
    histogramCount[letter] = histogramCount[letter] + 1\n\t}\n\treturn histogramCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmplh176_cx.swift:12:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogramCount := [String : Int]()\n          \
    \            ^\n                      ;\n/tmp/tmplh176_cx.swift:12:17: error:\
    \ expected expression\n        histogramCount := [String : Int]()\n          \
    \             ^\n/tmp/tmplh176_cx.swift:13:7: error: expected 'in' after for-each\
    \ pattern\n        for _, letter := range strings.Split(test, \" \") {\n     \
    \        ^\n/tmp/tmplh176_cx.swift:13:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, letter := range strings.Split(test, \" \") {\n\
    \             ^\n/tmp/tmplh176_cx.swift:12:2: error: cannot find 'histogramCount'\
    \ in scope\n        histogramCount := [String : Int]()\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmplh176_cx.swift:16:9: error: cannot find 'histogramCount' in scope\n  \
    \      return histogramCount\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4mwkk9ue.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\tresult := make(map[String]int)\n\tfor letter, count := range histograms\
    \ {\n\t\tresult[letter] = count\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmprisubrwo.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmprisubrwo.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmprisubrwo.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmprisubrwo.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n        for letter, count := range\
    \ histograms {\n                  ^\n/tmp/tmprisubrwo.swift:17:12: error: expected\
    \ Sequence expression for for-each loop\n        for letter, count := range histograms\
    \ {\n                  ^\n/tmp/tmprisubrwo.swift:12:2: error: cannot find 'histograms'\
    \ in scope\n        histograms := make(map[String]int)\n        ^~~~~~~~~~\n/tmp/tmprisubrwo.swift:20:9:\
    \ error: cannot find 'result' in scope\n        return result\n              \
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]Int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptri60gp9.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]Int)\n          \
    \        ^\n                  ;\n/tmp/tmptri60gp9.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]Int)\n                   ^\n\
    /tmp/tmptri60gp9.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmptri60gp9.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]Int)\n\
    \        ^~~~~~~~~~\n/tmp/tmptri60gp9.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistograms := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistograms[letter]++\n\t}\n\treturn histograms\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpy_kdijm_.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmpy_kdijm_.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmpy_kdijm_.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmpy_kdijm_.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmpy_kdijm_.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmpy_kdijm_.swift:17:9:\
    \ error: cannot find 'histograms' in scope\n        return histograms\n      \
    \         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistogramCount :=\
    \ [String : Int]()\n\tfor _, letter := range strings.Split(test, \" \") {\n\t\t\
    histogramCount[letter] = histogramCount[letter] + 1\n\t}\n\treturn histogramCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmplh176_cx.swift:12:16: error: consecutive statements on a line must\
    \ be separated by ';'\n        histogramCount := [String : Int]()\n          \
    \            ^\n                      ;\n/tmp/tmplh176_cx.swift:12:17: error:\
    \ expected expression\n        histogramCount := [String : Int]()\n          \
    \             ^\n/tmp/tmplh176_cx.swift:13:7: error: expected 'in' after for-each\
    \ pattern\n        for _, letter := range strings.Split(test, \" \") {\n     \
    \        ^\n/tmp/tmplh176_cx.swift:13:7: error: expected Sequence expression for\
    \ for-each loop\n        for _, letter := range strings.Split(test, \" \") {\n\
    \             ^\n/tmp/tmplh176_cx.swift:12:2: error: cannot find 'histogramCount'\
    \ in scope\n        histogramCount := [String : Int]()\n        ^~~~~~~~~~~~~~\n\
    /tmp/tmplh176_cx.swift:16:9: error: cannot find 'histogramCount' in scope\n  \
    \      return histogramCount\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4mwkk9ue.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\tletters := strings.Split(test,\
    \ \" \")\n\thistogram := make(map[String]int)\n\tfor _, letter := range letters\
    \ {\n\t\thistogram[letter]++\n\t}\n\treturn histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp64hrfur3.swift:12:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        letters := strings.Split(test, \" \")\n       \
    \        ^\n               ;\n/tmp/tmp64hrfur3.swift:12:10: error: expected expression\n\
    \        letters := strings.Split(test, \" \")\n                ^\n/tmp/tmp64hrfur3.swift:14:7:\
    \ error: expected 'in' after for-each pattern\n        for _, letter := range\
    \ letters {\n             ^\n/tmp/tmp64hrfur3.swift:14:7: error: expected Sequence\
    \ expression for for-each loop\n        for _, letter := range letters {\n   \
    \          ^\n/tmp/tmp64hrfur3.swift:12:2: error: cannot find 'letters' in scope\n\
    \        letters := strings.Split(test, \" \")\n        ^~~~~~~\n/tmp/tmp64hrfur3.swift:17:9:\
    \ error: cannot convert return expression of type '(String) -> [String : Int]'\
    \ to return type '[String : Int]'\n        return histogram\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n\thistograms := make(map[String]int)\n\
    \tfor _, letter := range strings.Split(test, \" \") {\n\t\thistograms[letter]++\n\
    \t}\n\treturn histograms\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphyjvd3ue.swift:12:12: error: consecutive statements on a line must\
    \ be separated by ';'\n        histograms := make(map[String]int)\n          \
    \        ^\n                  ;\n/tmp/tmphyjvd3ue.swift:12:13: error: expected\
    \ expression\n        histograms := make(map[String]int)\n                   ^\n\
    /tmp/tmphyjvd3ue.swift:13:7: error: expected 'in' after for-each pattern\n   \
    \     for _, letter := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:13:7:\
    \ error: expected Sequence expression for for-each loop\n        for _, letter\
    \ := range strings.Split(test, \" \") {\n             ^\n/tmp/tmphyjvd3ue.swift:12:2:\
    \ error: cannot find 'histograms' in scope\n        histograms := make(map[String]int)\n\
    \        ^~~~~~~~~~\n/tmp/tmphyjvd3ue.swift:16:9: error: cannot find 'histograms'\
    \ in scope\n        return histograms\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.split(\" \") {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfeji5mef.swift:13:24: error: no exact matches in call to instance\
    \ method 'split'\n    for letter in test.split(\" \") {\n                    \
    \   ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1659820725
