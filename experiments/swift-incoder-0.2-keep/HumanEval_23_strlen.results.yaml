language: swift
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen('')\n/// 0\n/// >>>\
    \ strlen('abc')\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824365
