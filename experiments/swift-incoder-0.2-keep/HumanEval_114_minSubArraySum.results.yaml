language: swift
name: HumanEval_114_minSubArraySum
results:
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpkwq2u3t5/tmpkwq2u3t5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4f73cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4f70c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4f70c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4f70c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwq2u3t5                        0x000055d12e0d648a <unavailable> + 5258

    5    libc.so.6                          0x00002ab4f75b6460 __libc_start_main +
    245

    6    tmpkwq2u3t5                        0x000055d12e0d60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for num in nums {\n\
    \        sum += num\n        if sum < minSum {\n            minSum = sum\n   \
    \     }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpes7smobl/tmpes7smobl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0afcbeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0afc8e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0afc8e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0afc8e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpes7smobl                        0x00005647bfe084da <unavailable> + 5338

    5    libc.so.6                          0x00002b0afcdd6460 __libc_start_main +
    245

    6    tmpes7smobl                        0x00005647bfe08129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        if num < min {\n            min = num\n        }\n        if num\
    \ < minSum {\n            minSum = num\n        }\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpk0bwtnmk/tmpk0bwtnmk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6356fc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6356cbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6356cbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6356cba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0bwtnmk                        0x000055c91d47f59f <unavailable> + 5535

    5    libc.so.6                          0x00002b63571b0460 __libc_start_main +
    245

    6    tmpk0bwtnmk                        0x000055c91d47f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    var minSum = nums[0]\n    for n in nums {\n \
    \       sum += n\n        if sum < minSum {\n            minSum = sum\n      \
    \  }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpquunqbz5/tmpquunqbz5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5c669ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5c6391b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5c6391988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5c63907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpquunqbz5                        0x000055f33b0a94da <unavailable> + 5338

    5    libc.so.6                          0x00002ae5c6886460 __libc_start_main +
    245

    6    tmpquunqbz5                        0x000055f33b0a9129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        if num < min {\n            min = num\n        } else {\n       \
    \     minSum += min\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp87m1o6tq/tmp87m1o6tq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b004f538c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b004f22fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b004f22f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b004f22e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87m1o6tq                        0x0000561e7975f4da <unavailable> + 5338

    5    libc.so.6                          0x00002b004f724460 __libc_start_main +
    245

    6    tmp87m1o6tq                        0x0000561e7975f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    var minSum = nums[0]\n    for num in nums\
    \ {\n        if num < min {\n            min = num\n        }\n        minSum\
    \ += num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmp66176rgz/tmp66176rgz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdcf541c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdcf238b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdcf238988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdcf2377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp66176rgz                        0x000055e5c8a8b4da <unavailable> + 5338

    5    libc.so.6                          0x00002acdcf72d460 __libc_start_main +
    245

    6    tmp66176rgz                        0x000055e5c8a8b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for n in nums {\n        if n == min {\n\
    \            continue\n        }\n        if n < min {\n            min = n\n\
    \        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpny2r7uv7/tmpny2r7uv7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd42bcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd428c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd428c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd428c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny2r7uv7                        0x000055f41007e59f <unavailable> + 5535

    5    libc.so.6                          0x00002acd42db9460 __libc_start_main +
    245

    6    tmpny2r7uv7                        0x000055f41007e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for n in nums {\n        sum += n\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpkwq2u3t5/tmpkwq2u3t5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4f73cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4f70c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4f70c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4f70c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwq2u3t5                        0x000055d12e0d648a <unavailable> + 5258

    5    libc.so.6                          0x00002ab4f75b6460 __libc_start_main +
    245

    6    tmpkwq2u3t5                        0x000055d12e0d60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var sum = 0\n    for num in nums {\n        sum += num\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmphomi9gjj/tmphomi9gjj.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73f854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73f54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba73f54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba73f54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphomi9gjj                        0x0000560b87ea448a <unavailable> + 5258

    5    libc.so.6                          0x00002ba73fa40460 __libc_start_main +
    245

    6    tmphomi9gjj                        0x0000560b87ea40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = nums[0]\n    for num in nums {\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    return min\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpvv6nk88p/tmpvv6nk88p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac08a6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac08a3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac08a3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac08a3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvv6nk88p                        0x000055ee2fd2959f <unavailable> + 5535

    5    libc.so.6                          0x00002ac08a8c4460 __libc_start_main +
    245

    6    tmpvv6nk88p                        0x000055ee2fd29129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum + num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpcpzaoo0j/tmpcpzaoo0j.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b627fbdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b627f8d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b627f8d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b627f8d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpzaoo0j                        0x0000557c442744da <unavailable> + 5338

    5    libc.so.6                          0x00002b627fdc8460 __libc_start_main +
    245

    6    tmpcpzaoo0j                        0x0000557c44274129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = nums[0]\n    for num in nums {\n        minSum =\
    \ minSum - num\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'tmpyxacocyc/tmpyxacocyc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c687dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c684d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c684d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c684d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxacocyc                        0x000055fad2c014da <unavailable> + 5338

    5    libc.so.6                          0x00002b7c689c8460 __libc_start_main +
    245

    6    tmpyxacocyc                        0x000055fad2c01129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014163
