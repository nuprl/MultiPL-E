language: swift
name: HumanEval_145_order_by_points
results:
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            sum +=\
    \ n % 10\n        }\n        result.append(n)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvpe5so66/tmpvpe5so66.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b733f85ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b733f555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b733f555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b733f5547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpe5so66                        0x000056283a65b694 <unavailable> + 5780

    5    libc.so.6                          0x00002b733fa4a460 __libc_start_main +
    245

    6    tmpvpe5so66                        0x000056283a65b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.insert(sum, num)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfk5z3q_r.swift:15:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum > 0 {\n            result.insert(num, 0)\n            sum -= num\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpe6lyklux.swift:17:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, 0)\n                   ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            if\
    \ sum == 0 {\n                result.append(num)\n            } else {\n     \
    \           let index = nums.indexOf(num)\n                result[index] = num\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp2l801he.swift:22:34: error: value of type '[Int]' has no member\
    \ 'indexOf'\n                let index = nums.indexOf(num)\n                 \
    \           ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.insert(num,\
    \ at: result.index(of: num))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwqpt2bqb.swift:23:43: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.insert(num, at: result.index(of: num))\n   \
    \                                       ^\n/tmp/tmpwqpt2bqb.swift:23:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result.insert(num, at: result.index(of: num))\n                 \
    \                         ^\n                                                \
    \         ?? <#default value#>\n/tmp/tmpwqpt2bqb.swift:23:43: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result.insert(num, at: result.index(of: num))\n                         \
    \                 ^\n                                                        !\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    let len = nums.count\n    var sum\
    \ = 0\n    var result = [Int]()\n    for i in 0..<len {\n        sum += nums[i]\n\
    \        result.append(sum)\n    }\n    return result.sorted(by: { (a, b) -> Bool\
    \ in\n        let aSum = a % 10\n        let bSum = b % 10\n        return aSum\
    \ < bSum ? true : aSum > bSum\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp8oim7kxx/tmp8oim7kxx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b835e30dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b835e004b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b835e004988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b835e0037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8oim7kxx                        0x000055dad9403734 <unavailable> + 5940

    5    libc.so.6                          0x00002b835e4f9460 __libc_start_main +
    245

    6    tmp8oim7kxx                        0x000055dad9403319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpatltmylt/tmpatltmylt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b954f91ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b954f615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b954f615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b954f6147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatltmylt                        0x0000558ff1d97684 <unavailable> + 5764

    5    libc.so.6                          0x00002b954fb0a460 __libc_start_main +
    245

    6    tmpatltmylt                        0x0000558ff1d97269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var numsSorted = nums\n    for\
    \ i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums); j++ {\n\
    \            if nums[j] < nums[i] {\n                numsSorted = numsSorted[:j]\
    \ + numsSorted[j+1:]\n                break\n            }\n        }\n    }\n\
    \    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphnorci2l.swift:11:12: error: expected type\n    for i := 0; i <\
    \ len(nums); i++ {\n           ^\n            <#type#>\n/tmp/tmphnorci2l.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(nums);\
    \ i++ {\n           ^\n/tmp/tmphnorci2l.swift:11:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(nums); i++ {\n       \
    \    ^\n/tmp/tmphnorci2l.swift:12:16: error: expected type\n        for j := i\
    \ + 1; j < len(nums); j++ {\n               ^\n                <#type#>\n/tmp/tmphnorci2l.swift:12:16:\
    \ error: expected 'in' after for-each pattern\n        for j := i + 1; j < len(nums);\
    \ j++ {\n               ^\n/tmp/tmphnorci2l.swift:12:16: error: expected Sequence\
    \ expression for for-each loop\n        for j := i + 1; j < len(nums); j++ {\n\
    \               ^\n/tmp/tmphnorci2l.swift:14:41: error: expected expression in\
    \ list of expressions\n                numsSorted = numsSorted[:j] + numsSorted[j+1:]\n\
    \                                        ^\n/tmp/tmphnorci2l.swift:14:61: error:\
    \ expected ',' separator\n                numsSorted = numsSorted[:j] + numsSorted[j+1:]\n\
    \                                                            ^\n             \
    \                                               ,\n/tmp/tmphnorci2l.swift:14:61:\
    \ error: expected expression in list of expressions\n                numsSorted\
    \ = numsSorted[:j] + numsSorted[j+1:]\n                                      \
    \                      ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = result[i]\
    \ - sum\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwmxwzdqr.swift:16:12: error: expected type\n    for i := 0; i <\
    \ len(result); i++ {\n           ^\n            <#type#>\n/tmp/tmpwmxwzdqr.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(result);\
    \ i++ {\n           ^\n/tmp/tmpwmxwzdqr.swift:16:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(result); i++ {\n     \
    \      ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            if sum\
    \ == 0 {\n                result.append(n)\n            } else {\n           \
    \     let index = nums.indexOf(sum)\n                result.append(nums[index])\n\
    \                nums[index] = n\n                sum -= n\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpa6mz2t21.swift:22:34: error: value of type '[Int]' has no member\
    \ 'indexOf'\n                let index = nums.indexOf(sum)\n                 \
    \           ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmps44punte/tmps44punte.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3302ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe32d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe32d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe32d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps44punte                        0x000055f03a7fa604 <unavailable> + 5636

    5    libc.so.6                          0x00002afe3321a460 __libc_start_main +
    245

    6    tmps44punte                        0x000055f03a7fa1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        if aDigit == bDigit {\n            return\
    \ a < b\n        } else {\n            return aDigit < bDigit\n        }\n   \
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpcme22uau/tmpcme22uau.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46bf49cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46bf193b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46bf193988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46bf1927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcme22uau                        0x000055d20ee13714 <unavailable> + 5908

    5    libc.so.6                          0x00002b46bf688460 __libc_start_main +
    245

    6    tmpcme22uau                        0x000055d20ee132f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n      \
    \  let bDigit = b % 10\n        return aDigit == bDigit || aDigit < bDigit\n \
    \   })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpeq4kuknt/tmpeq4kuknt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0aa8a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0aa8779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0aa8779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0aa87787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeq4kuknt                        0x000055774b470714 <unavailable> + 5908

    5    libc.so.6                          0x00002b0aa8c6e460 __libc_start_main +
    245

    6    tmpeq4kuknt                        0x000055774b4702f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: {\n        sum - $0\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7cuhc18m.swift:16:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmp7cuhc18m.swift:17:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum += num\n        }\n        if sum == 0 {\n            result.insert(num,\
    \ at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp7qetdor2/tmp7qetdor2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b910ddd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b910dacbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b910dacb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b910daca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7qetdor2                        0x000055cb6f8db604 <unavailable> + 5636

    5    libc.so.6                          0x00002b910dfc0460 __libc_start_main +
    245

    6    tmp7qetdor2                        0x000055cb6f8db1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            if\
    \ sum == 0 {\n                result.append(num)\n            } else {\n     \
    \           let index = sum % 10\n                result.append(num)\n       \
    \         result.append(index)\n            }\n            sum = 0\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpy8i7n282/tmpy8i7n282.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83ee681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83ee378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83ee378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83ee3777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8i7n282                        0x0000561527129694 <unavailable> + 5780

    5    libc.so.6                          0x00002b83ee86d460 __libc_start_main +
    245

    6    tmpy8i7n282                        0x0000561527129279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmps44punte/tmps44punte.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3302ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe32d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe32d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe32d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps44punte                        0x000055f03a7fa604 <unavailable> + 5636

    5    libc.so.6                          0x00002afe3321a460 __libc_start_main +
    245

    6    tmps44punte                        0x000055f03a7fa1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    let len = nums.count\n    var result\
    \ = [Int](repeating: 0, count: len)\n    var sum = 0\n    for i in 0..<len {\n\
    \        sum += nums[i]\n        result[i] = sum\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp5sg8ppmv/tmp5sg8ppmv.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ec1353c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ec104ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ec104a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ec10497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sg8ppmv                        0x0000556103c8c6e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b1ec153f460 __libc_start_main +
    245

    6    tmp5sg8ppmv                        0x0000556103c8c2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n    }\n    var result = [Int]()\n    for num in nums\
    \ {\n        if sum < 0 {\n            sum += num\n        } else {\n        \
    \    sum -= num\n        }\n        result.append(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp3yd9hc8j/tmp3yd9hc8j.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c564a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c561a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c561a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c5619f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yd9hc8j                        0x0000555620ccc604 <unavailable> + 5636

    5    libc.so.6                          0x00002b4c56695460 __libc_start_main +
    245

    6    tmp3yd9hc8j                        0x0000555620ccc1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmplp5wr2i0/tmplp5wr2i0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68b5c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68b5940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68b5940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68b593f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp5wr2i0                        0x00005635b8a17684 <unavailable> + 5764

    5    libc.so.6                          0x00002b68b5e35460 __libc_start_main +
    245

    6    tmplp5wr2i0                        0x00005635b8a17269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum += num\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp39vft07_/tmp39vft07_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6bcd11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6bca08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6bca08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6bca077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp39vft07_                        0x000055b6de236604 <unavailable> + 5636

    5    libc.so.6                          0x00002ad6bcefd460 __libc_start_main +
    245

    6    tmp39vft07_                        0x000055b6de2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum += num\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpngi6d5uf/tmpngi6d5uf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ff0a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03fed9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03fed9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03fed997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngi6d5uf                        0x000055870b84d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b03ff28f460 __libc_start_main +
    245

    6    tmpngi6d5uf                        0x000055870b84d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            result.append(n)\n\
    \            sum -= n\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmplmb0ssvu/tmplmb0ssvu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22699dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22696d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22696d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22696d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmb0ssvu                        0x0000564741a65604 <unavailable> + 5636

    5    libc.so.6                          0x00002b2269bcb460 __libc_start_main +
    245

    6    tmplmb0ssvu                        0x0000564741a651e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        let aIndex = a.hashValue % aSum\n        let bIndex\
    \ = b.hashValue % bSum\n        return aIndex < bIndex\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpbostp4pb/tmpbostp4pb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e52f39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e52c30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e52c30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e52c2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbostp4pb                        0x000055f9bf0b0764 <unavailable> + 5988

    5    libc.so.6                          0x00002b4e53125460 __libc_start_main +
    245

    6    tmpbostp4pb                        0x000055f9bf0b0349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            if sum\
    \ == 0 {\n                result.append(n)\n            } else {\n           \
    \     let index = nums.index {\n                    $0 >= n && $0 < sum\n    \
    \            }\n                result.append(nums[index])\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpkjwadnib.swift:22:34: warning: 'index(where:)' is deprecated: renamed\
    \ to 'firstIndex(where:)'\n                let index = nums.index {\n        \
    \                         ^\n/tmp/tmpkjwadnib.swift:22:34: note: use 'firstIndex(where:)'\
    \ instead\n                let index = nums.index {\n                        \
    \         ^~~~~\n                                 firstIndex\n/tmp/tmpkjwadnib.swift:25:36:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \     result.append(nums[index])\n                                   ^\n/tmp/tmpkjwadnib.swift:22:21:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n                let index = nums.index {\n           \
    \         ^\n                guard \n/tmp/tmpkjwadnib.swift:22:34: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \             let index = nums.index {\n                                 ^\n/tmp/tmpkjwadnib.swift:22:34:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n                let index = nums.index {\n                          \
    \       ^\n/tmp/tmpkjwadnib.swift:25:36: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n                result.append(nums[index])\n\
    \                                   ^\n                                      \
    \   ?? <#default value#>\n/tmp/tmpkjwadnib.swift:25:36: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n              \
    \  result.append(nums[index])\n                                   ^\n        \
    \                                !\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum > 0 {\n            for _ in 0..<sum {\n                result.append(0)\n\
    \            }\n            result.append(num)\n            sum -= num\n     \
    \   } else {\n            result.append(num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpwfqs5pz8/tmpwfqs5pz8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5afb2aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5afafa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5afafa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5afafa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfqs5pz8                        0x00005653c3dc5784 <unavailable> + 6020

    5    libc.so.6                          0x00002b5afb49a460 __libc_start_main +
    245

    6    tmpwfqs5pz8                        0x00005653c3dc5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    var i = 0\n    for num in nums {\n        if sum < 0 {\n         \
    \   sum += num\n            result[i] = -num\n            i++\n        } else\
    \ {\n            sum -= num\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphf6n8teu.swift:21:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            i++\n             ^~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum > bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpu9nm5d1p.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    var i = 0\n    for num in result {\n        if sum < 0 {\n       \
    \     sum *= -1\n            i += 1\n        }\n        if sum == 0 {\n      \
    \      break\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpw6wzqy0b/tmpw6wzqy0b.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a72f49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a72c40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a72c40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a72c3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw6wzqy0b                        0x000055b828e9b6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b6a73135460 __libc_start_main +
    245

    6    tmpw6wzqy0b                        0x000055b828e9b289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            result.insert(sum - num, num)\n            sum -= num\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjvlrdrcj.swift:20:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum - num, num)\n               \
    \    ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    return result.sorted(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpo6hu5bpc.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n      \
    \  let bDigit = b % 10\n        return aDigit < bDigit || (aDigit == bDigit &&\
    \ a.compare(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpeb_93zw9.swift:19:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit < bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n\
    \        return aDigit > bDigit || (aDigit == bDigit && a.compare(b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwquyqqzo.swift:19:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit > bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum: Int = 0\n    var result:\
    \ [Int] = []\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n\
    \        let bSum = sum - b\n        return aSum < bSum\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpu5mk6g06/tmpu5mk6g06.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bd6a0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bd6702b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bd6702988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bd67017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5mk6g06                        0x000055e4c77fe634 <unavailable> + 5684

    5    libc.so.6                          0x00002b9bd6bf7460 __libc_start_main +
    245

    6    tmpu5mk6g06                        0x000055e4c77fe219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            if sum\
    \ == 0 {\n                result.append(n)\n            } else {\n           \
    \     let index = nums.indexOf(sum)\n                result.append(nums[index])\n\
    \                nums.remove(at: index)\n                sum -= nums[index]\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4x09480f.swift:22:34: error: value of type '[Int]' has no member\
    \ 'indexOf'\n                let index = nums.indexOf(sum)\n                 \
    \           ~~~~ ^~~~~~~\n/tmp/tmp4x09480f.swift:24:22: error: no exact matches\
    \ in call to instance method 'remove'\n                nums.remove(at: index)\n\
    \                     ^\n/tmp/tmp4x09480f.swift:24:22: note: found candidate with\
    \ type '(Int) -> Int'\n                nums.remove(at: index)\n              \
    \       ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n     \
    \   let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum && a.compareTo(b)\
    \ == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmph5qj7txp.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum - a\n       \
    \ let bSum = sum - b\n        return aSum < bSum\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpf58hagl3/tmpf58hagl3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdc52bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdc4fb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdc4fb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdc4fb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf58hagl3                        0x000055ea51768684 <unavailable> + 5764

    5    libc.so.6                          0x00002acdc54a7460 __libc_start_main +
    245

    6    tmpf58hagl3                        0x000055ea51768269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: {\n        sum - $0\n    })\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpforjn1u3.swift:16:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpforjn1u3.swift:17:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    let len = nums.count\n    if len\
    \ == 0 {\n        return nums\n    }\n    var numsCopy = nums\n    var sum = 0\n\
    \    for i in 0..<len {\n        sum += numsCopy[i]\n        numsCopy[i] = 0\n\
    \    }\n    var result = [Int]()\n    var index = 0\n    for num in nums {\n \
    \       if num != 0 {\n            result[index] = num\n            index++\n\
    \        }\n    }\n    for num in numsCopy {\n        if num != 0 {\n        \
    \    result[index] = num\n            index++\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpxlgjvont.swift:25:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpxlgjvont.swift:31:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n      \
    \  let bDigit = b % 10\n        return aDigit > bDigit || (aDigit == bDigit &&\
    \ a.compare(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7j3y3oy6.swift:19:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit > bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp5sz_as6o/tmp5sz_as6o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6527aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6527798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6527798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65277977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sz_as6o                        0x000055f61eb3a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b6527c8d460 __libc_start_main +
    245

    6    tmp5sz_as6o                        0x000055f61eb3a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n      \
    \  let bDigit = b % 10\n        return aDigit > bDigit || (aDigit == bDigit &&\
    \ a.compare(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7j3y3oy6.swift:19:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit > bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            result.append(num)\n\
    \            sum -= num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpagllirce/tmpagllirce.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70a2e40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70a2b37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70a2b37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70a2b367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagllirce                        0x00005627a1be5604 <unavailable> + 5636

    5    libc.so.6                          0x00002b70a302c460 __libc_start_main +
    245

    6    tmpagllirce                        0x00005627a1be51e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 9 {\n            sum = 9\n      \
    \  }\n        result.append(num)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1ewq4l80/tmp1ewq4l80.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b828f19ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b828ee95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b828ee95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b828ee947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ewq4l80                        0x0000560490eda604 <unavailable> + 5636

    5    libc.so.6                          0x00002b828f38a460 __libc_start_main +
    245

    6    tmp1ewq4l80                        0x0000560490eda1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            if\
    \ sum == 0 {\n                result.append(num)\n            } else {\n     \
    \           let index = sum % 10\n                result.append(nums[index])\n\
    \                sum -= nums[index]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpgs3pf90k/tmpgs3pf90k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad75e37dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad75e074b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad75e074988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad75e0737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgs3pf90k                        0x0000565347c446e4 <unavailable> + 5860

    5    libc.so.6                          0x00002ad75e569460 __libc_start_main +
    245

    6    tmpgs3pf90k                        0x0000565347c442c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        return aDigit < bDigit || (aDigit == bDigit\
    \ && a.compare(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyan85hqg.swift:19:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit < bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n    }\n    var result = [Int]()\n    for num in nums\
    \ {\n        if sum < 0 {\n            sum += num\n        } else {\n        \
    \    if sum == 0 {\n                result.append(num)\n            } else {\n\
    \                let index = sum % 10\n                result.append(num)\n  \
    \              sum -= index\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp107xc9tc/tmp107xc9tc.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a53d1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a53a15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a53a15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a53a147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp107xc9tc                        0x0000564910abd694 <unavailable> + 5780

    5    libc.so.6                          0x00002b0a53f0a460 __libc_start_main +
    245

    6    tmp107xc9tc                        0x0000564910abd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.insert(sum, num)\n            sum = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcqmqhkly.swift:15:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: {\n        let num1 = $0\n        let num2 = $1\n\
    \        return sum - num1 - num2\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3af8cndl.swift:19:27: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n        return sum - num1 - num2\n                \
    \          ^\n               ((               ) != 0)\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    let sum = nums.reduce(0, +)\n \
    \   var result = [Int]()\n    for n in nums {\n        if n > 0 && n < sum {\n\
    \            result.insert(n, at: 0)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp3tqufe5b/tmp3tqufe5b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adacbd3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adacba33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adacba33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adacba327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tqufe5b                        0x00005623eef8b674 <unavailable> + 5748

    5    libc.so.6                          0x00002adacbf28460 __libc_start_main +
    245

    6    tmp3tqufe5b                        0x00005623eef8b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.insert(sum, num)\n            sum = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcqmqhkly.swift:15:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.insert(num,\
    \ at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdtrmhe7q/tmpdtrmhe7q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab28d37fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab28d076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab28d076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab28d0757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtrmhe7q                        0x000055b06f561604 <unavailable> + 5636

    5    libc.so.6                          0x00002ab28d56b460 __libc_start_main +
    245

    6    tmpdtrmhe7q                        0x000055b06f5611e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpatltmylt/tmpatltmylt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b954f91ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b954f615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b954f615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b954f6147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatltmylt                        0x0000558ff1d97684 <unavailable> + 5764

    5    libc.so.6                          0x00002b954fb0a460 __libc_start_main +
    245

    6    tmpatltmylt                        0x0000558ff1d97269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.insert(num,\
    \ at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdtrmhe7q/tmpdtrmhe7q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab28d37fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab28d076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab28d076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab28d0757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtrmhe7q                        0x000055b06f561604 <unavailable> + 5636

    5    libc.so.6                          0x00002ab28d56b460 __libc_start_main +
    245

    6    tmpdtrmhe7q                        0x000055b06f5611e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            if\
    \ sum > 0 {\n                result.insert(sum, num)\n                sum = 0\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwfpxbtbm.swift:20:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(sum, num)\n                 \
    \      ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    for num in nums {\n        if sum < 0 {\n            sum *= -1\n \
    \           sum += num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1hufm8xq/tmp1hufm8xq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66e6f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66e3f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab66e3f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab66e3ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1hufm8xq                        0x000055a7aa7a5604 <unavailable> + 5636

    5    libc.so.6                          0x00002ab66e8e5460 __libc_start_main +
    245

    6    tmp1hufm8xq                        0x000055a7aa7a51e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp5sz_as6o/tmp5sz_as6o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6527aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6527798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6527798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65277977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sz_as6o                        0x000055f61eb3a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b6527c8d460 __libc_start_main +
    245

    6    tmp5sz_as6o                        0x000055f61eb3a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            if sum\
    \ == 0 {\n                result.append(n)\n            } else {\n           \
    \     if sum < n {\n                    result.append(n)\n                } else\
    \ {\n                    result.append(sum)\n                    result.append(n)\n\
    \                }\n            }\n            sum = 0\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp6la90f8l/tmp6la90f8l.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b167d123c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b167ce1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b167ce1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b167ce197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6la90f8l                        0x000055cd2e060604 <unavailable> + 5636

    5    libc.so.6                          0x00002b167d30f460 __libc_start_main +
    245

    6    tmp6la90f8l                        0x000055cd2e0601e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.insert(num,\
    \ at: result.index(of: num))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwqpt2bqb.swift:23:43: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.insert(num, at: result.index(of: num))\n   \
    \                                       ^\n/tmp/tmpwqpt2bqb.swift:23:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result.insert(num, at: result.index(of: num))\n                 \
    \                         ^\n                                                \
    \         ?? <#default value#>\n/tmp/tmpwqpt2bqb.swift:23:43: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result.insert(num, at: result.index(of: num))\n                         \
    \                 ^\n                                                        !\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp5sz_as6o/tmp5sz_as6o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6527aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6527798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6527798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65277977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sz_as6o                        0x000055f61eb3a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b6527c8d460 __libc_start_main +
    245

    6    tmp5sz_as6o                        0x000055f61eb3a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum == bSum || (aSum > bSum ? true\
    \ : a.toInt() < b.toInt())\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbz9fbk4h.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    let numsCopy = nums.copy()\n  \
    \  let len = nums.count\n    var sum = 0\n    for i in 0..<len {\n        sum\
    \ += numsCopy[i]\n        numsCopy[i] = 0\n    }\n    var result = [Int]()\n \
    \   for i in 0..<len {\n        let index = nums.firstIndex(of: i)\n        if\
    \ index != nil {\n            result.append(nums[index!])\n            nums[index!]\
    \ = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpxr4fg11m.swift:10:25: error: value of type '[Int]' has no member\
    \ 'copy'\n    let numsCopy = nums.copy()\n                   ~~~~ ^~~~\n/tmp/tmpxr4fg11m.swift:22:17:\
    \ error: cannot assign through subscript: 'nums' is a 'let' constant\n       \
    \     nums[index!] = 0\n            ~~~~^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            sum\
    \ += num * 10\n        }\n        result.append(num)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp8sny51ig/tmp8sny51ig.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad050f93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad050c8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad050c8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad050c897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8sny51ig                        0x000055fcf53ea604 <unavailable> + 5636

    5    libc.so.6                          0x00002ad05117f460 __libc_start_main +
    245

    6    tmp8sny51ig                        0x000055fcf53ea1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp0pbkkjnt/tmp0pbkkjnt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b003630dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0036004b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0036004988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00360037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0pbkkjnt                        0x0000557bb6cf3604 <unavailable> + 5636

    5    libc.so.6                          0x00002b00364f9460 __libc_start_main +
    245

    6    tmp0pbkkjnt                        0x0000557bb6cf31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n        let\
    \ bSum = sum\n        let aIndex = a.hashValue % aSum\n        let bIndex = b.hashValue\
    \ % bSum\n        return aIndex < bIndex\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpp2f59jw3/tmpp2f59jw3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06b36fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06b33f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06b33f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06b33f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2f59jw3                        0x0000564ecacbf764 <unavailable> + 5988

    5    libc.so.6                          0x00002b06b38e6460 __libc_start_main +
    245

    6    tmpp2f59jw3                        0x0000564ecacbf349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n    }\n    var result = [Int]()\n    for num in nums\
    \ {\n        if sum < 0 {\n            sum += num\n        } else {\n        \
    \    if sum == 0 {\n                result.append(num)\n            } else {\n\
    \                let index = sum % 10\n                result.append(num)\n  \
    \              result.append(index)\n                sum -= index\n          \
    \  }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp2s2q718s/tmp2s2q718s.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9083c83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b908397ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b908397a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90839797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2s2q718s                        0x0000556068803694 <unavailable> + 5780

    5    libc.so.6                          0x00002b9083e6f460 __libc_start_main +
    245

    6    tmp2s2q718s                        0x0000556068803279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum > 0 {\n            for _ in 0..<(sum / 10) {\n               \
    \ result.append(0)\n            }\n            result.append(num)\n          \
    \  sum -= num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp2zykjnt_/tmp2zykjnt_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c665fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c6356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c6356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c63557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zykjnt_                        0x00005613d719a784 <unavailable> + 6020

    5    libc.so.6                          0x00002b14c684b460 __libc_start_main +
    245

    6    tmp2zykjnt_                        0x00005613d719a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.insert(sum, num)\n            sum = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcqmqhkly.swift:15:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum += num\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpngi6d5uf/tmpngi6d5uf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ff0a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03fed9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03fed9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03fed997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngi6d5uf                        0x000055870b84d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b03ff28f460 __libc_start_main +
    245

    6    tmpngi6d5uf                        0x000055870b84d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum - b\n \
    \   })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmppipwmxru/tmppipwmxru.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abed2570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abed2267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abed2267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abed22667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppipwmxru                        0x0000555c35879684 <unavailable> + 5764

    5    libc.so.6                          0x00002abed275c460 __libc_start_main +
    245

    6    tmppipwmxru                        0x0000555c35879269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: {\n        sum == $0.sumOfDigits() ? $0.index() <\
    \ $1.index() : $0.sumOfDigits() < $1.sumOfDigits()\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpnwhx9fg0.swift:17:19: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n        sum == $0.sumOfDigits() ? $0.index() < $1.index() : $0.sumOfDigits()\
    \ < $1.sumOfDigits()\n               ~~ ^~~~~~~~~~~\n/tmp/tmpnwhx9fg0.swift:17:38:\
    \ error: value of type 'Int' has no member 'index'\n        sum == $0.sumOfDigits()\
    \ ? $0.index() < $1.index() : $0.sumOfDigits() < $1.sumOfDigits()\n          \
    \                        ~~ ^~~~~\n/tmp/tmpnwhx9fg0.swift:17:51: error: value\
    \ of type 'Int' has no member 'index'\n        sum == $0.sumOfDigits() ? $0.index()\
    \ < $1.index() : $0.sumOfDigits() < $1.sumOfDigits()\n                       \
    \                        ~~ ^~~~~\n/tmp/tmpnwhx9fg0.swift:17:64: error: value\
    \ of type 'Int' has no member 'sumOfDigits'\n        sum == $0.sumOfDigits() ?\
    \ $0.index() < $1.index() : $0.sumOfDigits() < $1.sumOfDigits()\n            \
    \                                                ~~ ^~~~~~~~~~~\n/tmp/tmpnwhx9fg0.swift:17:83:\
    \ error: value of type 'Int' has no member 'sumOfDigits'\n        sum == $0.sumOfDigits()\
    \ ? $0.index() < $1.index() : $0.sumOfDigits() < $1.sumOfDigits()\n          \
    \                                                                     ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmps44punte/tmps44punte.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3302ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe32d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe32d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe32d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps44punte                        0x000055f03a7fa604 <unavailable> + 5636

    5    libc.so.6                          0x00002afe3321a460 __libc_start_main +
    245

    6    tmps44punte                        0x000055f03a7fa1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1sccwhyx/tmp1sccwhyx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53c8564c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53c825bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53c825b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53c825a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1sccwhyx                        0x000056257e15c684 <unavailable> + 5764

    5    libc.so.6                          0x00002b53c8750460 __libc_start_main +
    245

    6    tmp1sccwhyx                        0x000056257e15c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n        let\
    \ bSum = sum\n        sum = aSum + b\n        return sum == aSum\n    })\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpjymoghm0/tmpjymoghm0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbb6433c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbb612ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbb612a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbb61297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjymoghm0                        0x0000555eceda2684 <unavailable> + 5764

    5    libc.so.6                          0x00002adbb661f460 __libc_start_main +
    245

    6    tmpjymoghm0                        0x0000555eceda2269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            if\
    \ sum > 0 {\n                sum += num\n            }\n        }\n        result.append(num)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpe4cu6sg9/tmpe4cu6sg9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06c8114c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06c7e0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06c7e0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06c7e0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4cu6sg9                        0x000055dcf2fe0604 <unavailable> + 5636

    5    libc.so.6                          0x00002b06c8300460 __libc_start_main +
    245

    6    tmpe4cu6sg9                        0x000055dcf2fe01e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        if aSum == bSum {\n            return a.toInt()\
    \ < b.toInt()\n        }\n        return aSum < bSum\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp13fhkrt2.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmps44punte/tmps44punte.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3302ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe32d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe32d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe32d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps44punte                        0x000055f03a7fa604 <unavailable> + 5636

    5    libc.so.6                          0x00002afe3321a460 __libc_start_main +
    245

    6    tmps44punte                        0x000055f03a7fa1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var numsSorted = nums\n    var\
    \ sum = 0\n    for num in numsSorted {\n        sum += num\n    }\n    for num\
    \ in numsSorted {\n        if sum > 0 {\n            sum -= num\n            numsSorted.insert(num,\
    \ at: 0)\n        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpp8y79dxl/tmpp8y79dxl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affcd4b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affcd1adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affcd1ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affcd1ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8y79dxl                        0x000055be3c7b45b4 <unavailable> + 5556

    5    libc.so.6                          0x00002affcd6a2460 __libc_start_main +
    245

    6    tmpp8y79dxl                        0x000055be3c7b4199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        return aDigit > bDigit || (aDigit == bDigit\
    \ && a.compare(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpae0lo38t.swift:19:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit > bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum == bSum || (aSum > 0 && bSum\
    \ > 0 && aSum < bSum)\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpli41ngwc.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmps44punte/tmps44punte.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3302ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe32d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe32d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe32d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps44punte                        0x000055f03a7fa604 <unavailable> + 5636

    5    libc.so.6                          0x00002afe3321a460 __libc_start_main +
    245

    6    tmps44punte                        0x000055f03a7fa1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmplp5wr2i0/tmplp5wr2i0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68b5c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68b5940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68b5940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68b593f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp5wr2i0                        0x00005635b8a17684 <unavailable> + 5764

    5    libc.so.6                          0x00002b68b5e35460 __libc_start_main +
    245

    6    tmplp5wr2i0                        0x00005635b8a17269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        if aSum == bSum {\n            return a.toInt()\
    \ < b.toInt()\n        }\n        return aSum < bSum\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp13fhkrt2.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n     \
    \   let bSum = b.toInt()\n        return aSum == bSum ? a.toInt() < b.toInt()\
    \ : aSum > bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmrj6ymk2.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmplp5wr2i0/tmplp5wr2i0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68b5c49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68b5940b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68b5940988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68b593f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp5wr2i0                        0x00005635b8a17684 <unavailable> + 5764

    5    libc.so.6                          0x00002b68b5e35460 __libc_start_main +
    245

    6    tmplp5wr2i0                        0x00005635b8a17269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 9 {\n            sum = 9\n      \
    \  }\n        result.append(num)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1ewq4l80/tmp1ewq4l80.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b828f19ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b828ee95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b828ee95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b828ee947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ewq4l80                        0x0000560490eda604 <unavailable> + 5636

    5    libc.so.6                          0x00002b828f38a460 __libc_start_main +
    245

    6    tmp1ewq4l80                        0x0000560490eda1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 9 {\n            sum = 0\n      \
    \  }\n        if result.contains(sum) {\n            let index = result.index(of:\
    \ sum)\n            result[index] = num\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_q7du_ea.swift:21:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = result.index(of: sum)\n      \
    \                         ^\n/tmp/tmp_q7du_ea.swift:21:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = result.index(of: sum)\n                   \
    \            ^~~~~\n                               firstIndex\n/tmp/tmp_q7du_ea.swift:22:20:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result[index] = num\n                   ^\n/tmp/tmp_q7du_ea.swift:22:20: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result[index] = num\n                   ^\n                     \
    \    ?? <#default value#>\n/tmp/tmp_q7du_ea.swift:22:20: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            result[index]\
    \ = num\n                   ^\n                        !\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        result.append(n)\n    }\n\
    \    result.sort(by: {\n        sum - $0\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7cuhc18m.swift:16:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmp7cuhc18m.swift:17:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n        if sum > 0 {\n         \
    \   result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp9508oglc/tmp9508oglc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2efc1e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2efbedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2efbedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2efbeda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9508oglc                        0x000055f6183cd604 <unavailable> + 5636

    5    libc.so.6                          0x00002b2efc3d0460 __libc_start_main +
    245

    6    tmp9508oglc                        0x000055f6183cd1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.insert(sum, num)\n            sum = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcqmqhkly.swift:15:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum *= -1\n        }\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptpz9z_e7/tmptpz9z_e7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03929f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03926efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03926ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03926ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpz9z_e7                        0x000055cfa794c604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0392be4460 __libc_start_main +
    245

    6    tmptpz9z_e7                        0x000055cfa794c1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var numsSorted = nums\n    var\
    \ sum = 0\n    for num in numsSorted {\n        sum += num\n    }\n    var index\
    \ = 0\n    for num in numsSorted {\n        if sum < 0 {\n            numsSorted.insert(num,\
    \ at: index)\n            sum = 0\n        } else {\n            sum += num\n\
    \        }\n        index += 1\n    }\n    return numsSorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmprst02aur/tmprst02aur.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b574c3c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b574c0bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b574c0bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b574c0ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprst02aur                        0x0000559fc84b15b4 <unavailable> + 5556

    5    libc.so.6                          0x00002b574c5b0460 __libc_start_main +
    245

    6    tmprst02aur                        0x0000559fc84b1199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            sum +=\
    \ n % 10\n        }\n        result.append(n)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvpe5so66/tmpvpe5so66.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b733f85ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b733f555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b733f555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b733f5547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpe5so66                        0x000056283a65b694 <unavailable> + 5780

    5    libc.so.6                          0x00002b733fa4a460 __libc_start_main +
    245

    6    tmpvpe5so66                        0x000056283a65b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n     \
    \   let bSum = b.toInt()\n        if aSum == bSum { return a.toInt() < b.toInt()\
    \ }\n        return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6wodw_mj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n      \
    \  sum = aSum + b\n        return sum < 0\n    })\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1fxedmak/tmp1fxedmak.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba66b3cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba66b0c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba66b0c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba66b0c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fxedmak                        0x000055794ccf6684 <unavailable> + 5764

    5    libc.so.6                          0x00002ba66b5ba460 __libc_start_main +
    245

    6    tmp1fxedmak                        0x000055794ccf6269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for n in nums {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by:\
    \ { (a, b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n\
    \        return aDigit < bDigit || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1jyexvfx.swift:19:58: error: value of type 'Int' has no member\
    \ 'compareTo'\n        return aDigit < bDigit || (aDigit == bDigit && a.compareTo(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.insert(num,\
    \ at: result.index(of: num))\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwqpt2bqb.swift:23:43: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.insert(num, at: result.index(of: num))\n   \
    \                                       ^\n/tmp/tmpwqpt2bqb.swift:23:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \            result.insert(num, at: result.index(of: num))\n                 \
    \                         ^\n                                                \
    \         ?? <#default value#>\n/tmp/tmpwqpt2bqb.swift:23:43: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        \
    \    result.insert(num, at: result.index(of: num))\n                         \
    \                 ^\n                                                        !\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    let len = nums.count\n    var sum\
    \ = 0\n    var result = [Int]()\n    for i in 0..<len {\n        sum += nums[i]\n\
    \        result.append(sum)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp27kjp_lh/tmp27kjp_lh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebe9269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebe8f60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebe8f60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebe8f5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27kjp_lh                        0x000055fa68fd86d4 <unavailable> + 5844

    5    libc.so.6                          0x00002aebe9455460 __libc_start_main +
    245

    6    tmp27kjp_lh                        0x000055fa68fd82b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.insert(num,\
    \ at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdtrmhe7q/tmpdtrmhe7q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab28d37fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab28d076b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab28d076988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab28d0757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdtrmhe7q                        0x000055b06f561604 <unavailable> + 5636

    5    libc.so.6                          0x00002ab28d56b460 __libc_start_main +
    245

    6    tmpdtrmhe7q                        0x000055b06f5611e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n     \
    \   let bSum = b.toInt()\n        if aSum == bSum {\n            return a.toInt()\
    \ < b.toInt()\n        }\n        return aSum > bSum\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_ru3zhbj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var numsSorted = nums\n    var\
    \ sum = 0\n    for num in numsSorted {\n        sum += num\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n    }\n    return numsSorted.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcpgjjffm.swift:14:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: num))\n    \
    \                                     ^\n/tmp/tmpcpgjjffm.swift:14:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: num))\n                     \
    \                    ^\n                                                     \
    \   ?? <#default value#>\n/tmp/tmpcpgjjffm.swift:14:42: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: num))\n                                         ^\n   \
    \                                                    !\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aDigit = a % 10\n\
    \        let bDigit = b % 10\n        if aDigit == bDigit {\n            return\
    \ a < b\n        }\n        return aDigit < bDigit\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp3f_yi56d/tmp3f_yi56d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b122fe92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b122fb89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b122fb89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b122fb887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3f_yi56d                        0x00005638d09da714 <unavailable> + 5908

    5    libc.so.6                          0x00002b123007e460 __libc_start_main +
    245

    6    tmp3f_yi56d                        0x00005638d09da2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum\
    \ - b\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpatltmylt/tmpatltmylt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b954f91ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b954f615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b954f615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b954f6147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatltmylt                        0x0000558ff1d97684 <unavailable> + 5764

    5    libc.so.6                          0x00002b954fb0a460 __libc_start_main +
    245

    6    tmpatltmylt                        0x0000558ff1d97269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            if sum\
    \ == 0 {\n                result.append(n)\n            } else {\n           \
    \     let index = nums.indexOf(sum)\n                result.append(nums[index])\n\
    \                nums.remove(at: index)\n                nums.remove(at: index)\n\
    \                sum -= nums[index]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1yx4hmfp.swift:22:34: error: value of type '[Int]' has no member\
    \ 'indexOf'\n                let index = nums.indexOf(sum)\n                 \
    \           ~~~~ ^~~~~~~\n/tmp/tmp1yx4hmfp.swift:24:22: error: no exact matches\
    \ in call to instance method 'remove'\n                nums.remove(at: index)\n\
    \                     ^\n/tmp/tmp1yx4hmfp.swift:24:22: note: found candidate with\
    \ type '(Int) -> Int'\n                nums.remove(at: index)\n              \
    \       ^\n/tmp/tmp1yx4hmfp.swift:25:22: error: no exact matches in call to instance\
    \ method 'remove'\n                nums.remove(at: index)\n                  \
    \   ^\n/tmp/tmp1yx4hmfp.swift:25:22: note: found candidate with type '(Int) ->\
    \ Int'\n                nums.remove(at: index)\n                     ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            if\
    \ sum == 0 {\n                result.append(num)\n            } else {\n     \
    \           let index = nums.firstIndex(of: num)!\n                result.append(nums[index])\n\
    \                sum -= nums[index]\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpulzt8qb5/tmpulzt8qb5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3aa1b26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3aa181db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3aa181d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3aa181c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulzt8qb5                        0x0000560de8677754 <unavailable> + 5972

    5    libc.so.6                          0x00002b3aa1d12460 __libc_start_main +
    245

    6    tmpulzt8qb5                        0x0000560de8677339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var numsSorted = [Int]()\n    var\
    \ sum = 0\n    for num in nums {\n        sum += num\n        numsSorted.append(num)\n\
    \    }\n    var numsSortedCopy = numsSorted\n    var index = 0\n    for num in\
    \ numsSorted {\n        for _ in 0..<num {\n            numsSortedCopy[index]\
    \ = numsSortedCopy[index] + 1\n            index++\n        }\n    }\n    return\
    \ numsSortedCopy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4avqwjs9.swift:21:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    var sorted = [Int]()\n    for num in result {\n        if sum < 0 {\n   \
    \         sorted.append(num)\n            sum = 0\n        } else {\n        \
    \    sum -= num\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpurscake5/tmpurscake5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf154dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf151d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf151d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf151d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurscake5                        0x000056289b138604 <unavailable> + 5636

    5    libc.so.6                          0x00002acf156ca460 __libc_start_main +
    245

    6    tmpurscake5                        0x000056289b1381e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n    }\n    var result = [Int]()\n    for num in nums\
    \ {\n        if sum < 0 {\n            sum += num\n        } else {\n        \
    \    if sum > 0 {\n                sum += num\n            } else {\n        \
    \        result.append(num)\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_3ddriq2/tmp_3ddriq2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae297d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae294cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae294cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae294ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3ddriq2                        0x0000558ebaf56604 <unavailable> + 5636

    5    libc.so.6                          0x00002aae299c0460 __libc_start_main +
    245

    6    tmp_3ddriq2                        0x0000558ebaf561e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            if sum\
    \ == 0 {\n                result.append(n)\n            } else {\n           \
    \     let index = sum / 10\n                result.append(nums[index])\n     \
    \           sum -= index * 10\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpcg6_s_a9/tmpcg6_s_a9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c1f891c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1f588b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1f588988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1f5877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcg6_s_a9                        0x000055637cecd6e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b0c1fa7d460 __libc_start_main +
    245

    6    tmpcg6_s_a9                        0x000055637cecd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 9 {\n            sum = 0\n      \
    \  }\n        result.append(num)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdde5f_5c/tmpdde5f_5c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a4ee65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a4eb5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a4eb5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a4eb5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdde5f_5c                        0x000055e0755cf604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0a4f051460 __libc_start_main +
    245

    6    tmpdde5f_5c                        0x000055e0755cf1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    var i = 0\n    for num in result {\n        if sum < 0 {\n            sum\
    \ *= -1\n            sum -= num\n        } else {\n            sum += num\n  \
    \      }\n        result[i] = num\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpg492ska0/tmpg492ska0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19eeb5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19ee856b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19ee856988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19ee8557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg492ska0                        0x0000558d9a2fa654 <unavailable> + 5716

    5    libc.so.6                          0x00002b19eed4b460 __libc_start_main +
    245

    6    tmpg492ska0                        0x0000558d9a2fa239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += num\n        } else {\n            if\
    \ sum == 0 {\n                result.append(num)\n            } else {\n     \
    \           let index = nums.indexOf(num)\n                result[index] = num\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp2l801he.swift:22:34: error: value of type '[Int]' has no member\
    \ 'indexOf'\n                let index = nums.indexOf(num)\n                 \
    \           ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum += num\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp39vft07_/tmp39vft07_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6bcd11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6bca08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6bca08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6bca077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp39vft07_                        0x000055b6de236604 <unavailable> + 5636

    5    libc.so.6                          0x00002ad6bcefd460 __libc_start_main +
    245

    6    tmp39vft07_                        0x000055b6de2361e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum &&\
    \ a.compareTo(b) == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7t1gxfsj.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: {\n        sum - $0\n    })\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpforjn1u3.swift:16:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmpforjn1u3.swift:17:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.insert(sum, num)\n            sum = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcqmqhkly.swift:15:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum, num)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n\
    \        let bSum = b.toInt()\n        if aSum == bSum {\n            return a.toInt()\
    \ < b.toInt()\n        } else {\n            return aSum < bSum\n        }\n \
    \   })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpv5wytymi.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnhj85gpc/tmpnhj85gpc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b205b420c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b205b117b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b205b117988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b205b1167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnhj85gpc                        0x000055881eb8a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b205b60c460 __libc_start_main +
    245

    6    tmpnhj85gpc                        0x000055881eb8a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 9 {\n            sum = 9\n      \
    \  }\n        if sum == 0 {\n            continue\n        }\n        if result.contains(sum)\
    \ {\n            continue\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptey22_c5/tmptey22_c5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af326b9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af326895b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af326895988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3268947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptey22_c5                        0x000055818fac3664 <unavailable> + 5732

    5    libc.so.6                          0x00002af326d8a460 __libc_start_main +
    245

    6    tmptey22_c5                        0x000055818fac3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            sum +=\
    \ n % 10\n        }\n        if sum < 0 {\n            sum = 0\n        }\n  \
    \      if sum > 9 {\n            sum -= 10\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnca3ob1i/tmpnca3ob1i.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b8368ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b83385b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b83385988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b833847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnca3ob1i                        0x000055a7b0bec694 <unavailable> + 5780

    5    libc.so.6                          0x00002b3b8387a460 __libc_start_main +
    245

    6    tmpnca3ob1i                        0x000055a7b0bec279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            sum +=\
    \ n % 10\n        }\n        result.append(n)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpvpe5so66/tmpvpe5so66.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b733f85ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b733f555b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b733f555988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b733f5547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpe5so66                        0x000056283a65b694 <unavailable> + 5780

    5    libc.so.6                          0x00002b733fa4a460 __libc_start_main +
    245

    6    tmpvpe5so66                        0x000056283a65b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var numsSorted = nums\n    var\
    \ sum = 0\n    for num in numsSorted {\n        sum += num\n    }\n    var result\
    \ = [Int]()\n    for num in numsSorted {\n        if sum < 0 {\n            result.insert(num,\
    \ sum)\n        } else {\n            result.insert(num, sum + 10)\n        }\n\
    \        sum -= num\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpgtiw_7mc.swift:18:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(num, sum)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpgtiw_7mc.swift:20:20:\
    \ error: no exact matches in call to instance method 'insert'\n            result.insert(num,\
    \ sum + 10)\n                   ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum == 0 {\n\
    \            result.append(num)\n        }\n        if sum > 0 {\n           \
    \ sum -= num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdf02414q/tmpdf02414q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd1690c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd1387b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd1387988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd13867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf02414q                        0x0000558b49898604 <unavailable> + 5636

    5    libc.so.6                          0x00002abdd187c460 __libc_start_main +
    245

    6    tmpdf02414q                        0x0000558b498981e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        return sum - a < sum - b\n \
    \   })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmppipwmxru/tmppipwmxru.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abed2570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abed2267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abed2267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abed22667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppipwmxru                        0x0000555c35879684 <unavailable> + 5764

    5    libc.so.6                          0x00002abed275c460 __libc_start_main +
    245

    6    tmppipwmxru                        0x0000555c35879269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum -= 10\n        }\n        result.append(num)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp5sz_as6o/tmp5sz_as6o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6527aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6527798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6527798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65277977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5sz_as6o                        0x000055f61eb3a604 <unavailable> + 5636

    5    libc.so.6                          0x00002b6527c8d460 __libc_start_main +
    245

    6    tmp5sz_as6o                        0x000055f61eb3a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum < 0 {\n     \
    \       sum = 0\n        }\n        if sum > 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmps44punte/tmps44punte.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe3302ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe32d25b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe32d25988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe32d247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps44punte                        0x000055f03a7fa604 <unavailable> + 5636

    5    libc.so.6                          0x00002afe3321a460 __libc_start_main +
    245

    6    tmps44punte                        0x000055f03a7fa1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n     \
    \   let bSum = b.toInt()\n        return aSum < bSum || (aSum == bSum && a.compareTo(b)\
    \ == .orderedAscending)\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmph5qj7txp.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sum = 0\n    var result = [Int]()\n\
    \    for num in nums {\n        sum += num\n        result.append(num)\n    }\n\
    \    result.sort(by: { (a, b) -> Bool in\n        let aSum = a.toInt()\n     \
    \   let bSum = b.toInt()\n        return aSum == bSum || (aSum > 0 && bSum > 0\
    \ && aSum < bSum)\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2s7t9yvd.swift:17:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        result.append(num)\n\
    \    }\n    result.sort(by: { (a, b) -> Bool in\n        let aSum = sum\n    \
    \    let bSum = sum\n        if aSum == bSum {\n            return a < b\n   \
    \     }\n        return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmple8eyu0s/tmple8eyu0s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6736cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67369e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67369e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67369e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmple8eyu0s                        0x0000564e03668684 <unavailable> + 5764

    5    libc.so.6                          0x00002b6736ed7460 __libc_start_main +
    245

    6    tmple8eyu0s                        0x0000564e03668269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n    }\n    for num in nums {\n\
    \        if sum < 0 {\n            sum += 10\n        }\n        if sum > 0 {\n\
    \            sum += num\n        }\n        if sum == 0 {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpngi6d5uf/tmpngi6d5uf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ff0a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03fed9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03fed9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03fed997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngi6d5uf                        0x000055870b84d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b03ff28f460 __libc_start_main +
    245

    6    tmpngi6d5uf                        0x000055870b84d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for n in nums {\n        sum += n\n    }\n    for n in nums {\n   \
    \     if sum < 0 {\n            sum += n\n        } else {\n            if sum\
    \ > 0 {\n                sum += n\n            }\n            result.insert(sum,\
    \ sum)\n            sum = 0\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpm42mhgs6.swift:22:20: error: no exact matches in call to instance\
    \ method 'insert'\n            result.insert(sum, sum)\n                   ^\n\
    Swift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)', expected:\
    \ '(_:at:)')\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1659825102
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var sum\
    \ = 0\n    for num in nums {\n        sum += num\n        if sum > 0 {\n     \
    \       result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp119k8px0/tmp119k8px0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6c93acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6c90a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6c90a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6c90a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp119k8px0                        0x000055e2e0a0f604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba6c9598460 __libc_start_main +
    245

    6    tmp119k8px0                        0x000055e2e0a0f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659825101
