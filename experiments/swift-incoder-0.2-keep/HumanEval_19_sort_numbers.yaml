name: HumanEval_19_sort_numbers
language: swift
prompt: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc sort_numbers(numbers:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
  \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") ==\
  \ \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine\
  \ eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
  \ \"six five four three two one zero\") == \"zero one two three four five six\")"
completions: ["\tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(number", "    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")", "\tnumbers\
    \ = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers, \"0\"\
    )\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.Tri",
  "    var numbers = numbers.split(\" \")\n    numbers.sort()\n    return strings.Join(numbers,\
    \ \" \")", "    var numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ strings.Join(numbers, \" \")", "\tnumbers = strings.TrimSpace(numbers)\n\tnumbers\
    \ := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn strings.Join(numbers,\
    \ \" \")", "    var numbers_arr = numbers.split(\" \").map(String::init)\n   \
    \ numbers_arr.sort()\n    return numbers_arr.join(\" \")", "    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n    numbers_array.sort()\n    return\
    \ numbers_array.joined(\" \")", "    var numbers = numbers.split(\" \").sorted()\n\
    \    return numbers.joinWithSeparator(\" \")", "\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.Tri", "    var numberList = numbers.split(\" \"\
    ).map{Int($0)}\n    numberList.sort()\n    return numberList.join(\" \")", "\t\
    numbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers, \"\
    \\n\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n", "\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")", "    numbers = strings.TrimSpace(numbers)\n \
    \   numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \".\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"#\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"&\", \"\", -1)\n    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \")\", \"\", -1)\n    numbers = strings.Replace(numbers, \"=\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"<\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \">\", \"\", -1)\n    numbers = strings.Replace(numbers, \"?\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"!\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"@\", \"\", -1)\n    numbers = strings.Replace(numbers, \"#\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"+\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\"", "   \
    \ var numbers = numbers.split(\" \")\n    numbers.sort()\n    return strings.Join(numbers,\
    \ \" \")", "\tnumbers = strings.TrimSpace(numbers)\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimPrefix(number", "\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number",
  "\tnumbers = strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \",\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(", "    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")", "    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")"]
stop_tokens:
- "\n}"
