language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let intValue = Int(value) {\n            filtered.append(intValue)\n   \
    \     }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp_y8rvr9i.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  } else {\n            return nil\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpm22fvp53.swift:13:20: error: 'nil' is incompatible with return\
    \ type '[Int]'\n            return nil\n                   ^\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyrrfyhv_.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = Int(value) {\n            result.append(intValue)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7zw87siy.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        switch\
    \ value {\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Double:\n            result.append(Int(value))\n  \
    \      case let value as String:\n            result.append(Int(value))\n    \
    \    case let value as Bool:\n            result.append(Int(value))\n        case\
    \ let value as Dictionary<String, AnyHashable>:\n            result.append(filter_integers(value.values))\n\
    \        case let value as Array:\n            result.append(filter_integers(value))\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7nx_5mnh.swift:21:27: error: reference to generic type 'Array'\
    \ requires arguments in <...>\n        case let value as Array:\n            \
    \              ^\n                               <Any>\nSwift.Array:1:23: note:\
    \ generic type 'Array' declared here\n@frozen public struct Array<Element> : _DestructorSafeContainer\
    \ {\n                      ^\n/tmp/tmp7nx_5mnh.swift:16:27: error: value of optional\
    \ type 'Int?' must be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmp7nx_5mnh.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmp7nx_5mnh.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n/tmp/tmp7nx_5mnh.swift:18:27: error: no exact\
    \ matches in call to initializer \n            result.append(Int(value))\n   \
    \                       ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Bool')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Bool')\n    public init(_ source: Float)\n          \
    \ ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Bool')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Bool')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Bool')\n    public\
    \ init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note: candidate\
    \ expects value of type 'Builtin.Word' for parameter #1 (got 'Bool')\n    public\
    \ init(_ _v: Builtin.Word)\n           ^\n/tmp/tmp7nx_5mnh.swift:20:20: error:\
    \ no exact matches "
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let value = value as? Int {\n            filtered.append(value)\n      \
    \  }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = Int(value) {\n            filtered.append(intValue)\n       \
    \ }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5vw91lkm.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = Int(value) {\n            result.append(intValue)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp7zw87siy.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        guard\
    \ let intValue = Int(value) else {\n            throw PythonError.new(\"filter_integers\
    \ expects integers\")\n        }\n        result.append(intValue)\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp6g61gi_f.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(value)\
    \ else {\n                                 ^\n                               \
    \        as! String\n/tmp/tmp6g61gi_f.swift:11:19: error: cannot find 'PythonError'\
    \ in scope\n            throw PythonError.new(\"filter_integers expects integers\"\
    )\n                  ^~~~~~~~~~~\n/tmp/tmp6g61gi_f.swift:11:13: error: error is\
    \ not handled because the enclosing function is not declared 'throws'\n      \
    \      throw PythonError.new(\"filter_integers expects integers\")\n         \
    \   ^\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let intValue = value as? Int {\n            filtered.append(intValue)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let int = Int(value) {\n            filtered.append(int)\n        }\n  \
    \  }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqqtwih61.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let intValue = value as? Int {\n            filtered.append(intValue)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        switch\
    \ value {\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Double:\n            result.append(Int(value))\n  \
    \      default:\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmphfag2w52/tmphfag2w52.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8219387c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b821907eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b821907e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b821907d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfag2w52                        0x000055ad61d29e0b <unavailable> + 7691

    5    libc.so.6                          0x00002b8219573460 __libc_start_main +
    245

    6    tmphfag2w52                        0x000055ad61d29719 <unavailable> + 5913

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        guard\
    \ let intValue = Int(value) else {\n            throw PythonError.newError(\n\
    \                PythonError.TypeError, \"filter expected a number but got \\\
    (String(describing: type(of: value)))\"\n            )\n        }\n        result.append(intValue)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp9jlfkg17.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(value)\
    \ else {\n                                 ^\n                               \
    \        as! String\n/tmp/tmp9jlfkg17.swift:11:19: error: cannot find 'PythonError'\
    \ in scope\n            throw PythonError.newError(\n                  ^~~~~~~~~~~\n\
    /tmp/tmp9jlfkg17.swift:12:17: error: cannot find 'PythonError' in scope\n    \
    \            PythonError.TypeError, \"filter expected a number but got \\(String(describing:\
    \ type(of: value)))\"\n                ^~~~~~~~~~~\n/tmp/tmp9jlfkg17.swift:11:13:\
    \ error: error is not handled because the enclosing function is not declared 'throws'\n\
    \            throw PythonError.newError(\n            ^\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpyrrfyhv_.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let value = value as? Int {\n            filtered.append(value)\n      \
    \  }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = Int(value) {\n            filtered.append(intValue)\n       \
    \ }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5vw91lkm.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        guard\
    \ let intValue = Int(value) else {\n            throw PythonError.newError(\n\
    \                error: .conversionFailed,\n                reason: \"Expected\
    \ an integer, got \\(String(describing: value)) instead\"\n            )\n   \
    \     }\n        result.append(intValue)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp3w016ya4.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(value)\
    \ else {\n                                 ^\n                               \
    \        as! String\n/tmp/tmp3w016ya4.swift:11:19: error: cannot find 'PythonError'\
    \ in scope\n            throw PythonError.newError(\n                  ^~~~~~~~~~~\n\
    /tmp/tmp3w016ya4.swift:12:25: error: cannot infer contextual base in reference\
    \ to member 'conversionFailed'\n                error: .conversionFailed,\n  \
    \                     ~^~~~~~~~~~~~~~~~\n/tmp/tmp3w016ya4.swift:11:13: error:\
    \ error is not handled because the enclosing function is not declared 'throws'\n\
    \            throw PythonError.newError(\n            ^\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        switch\
    \ value {\n        case let value as Int:\n            result.append(value)\n\
    \        case let value as Double:\n            result.append(Int(value))\n  \
    \      case let value as String:\n            result.append(Int(value))\n    \
    \    default:\n            result.append(0)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxflg2re3.swift:16:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n            result.append(Int(value))\n\
    \                          ^\n/tmp/tmpxflg2re3.swift:16:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n         \
    \   result.append(Int(value))\n                          ^\n                 \
    \                    ?? <#default value#>\n/tmp/tmpxflg2re3.swift:16:27: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.append(Int(value))\n                          ^\n        \
    \                            !\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = Int(value) {\n            filtered.append(intValue)\n       \
    \ }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5vw91lkm.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            filtered.append(int)\n        }\n    }\n\
    \    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpt99llzso.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  } else {\n            return nil\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp82q6ej1b.swift:13:20: error: 'nil' is incompatible with return\
    \ type '[Int]'\n            return nil\n                   ^\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let int = Int(value) {\n            filtered.append(int)\n        }\n  \
    \  }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpqqtwih61.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  } else {\n            fatalError(\"Expected an Int but was \\(String(describing:\
    \ value))\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\n\
    assert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable],\
    \ 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: Exception
  stderr: 'tmpap8ook8h/tmpap8ook8h.swift:13: Fatal error: Expected an Int but was
    [:]

    Current stack trace:

    0    libswiftCore.so                    0x00002abe76c96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe7698db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe7698d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe7698c7b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpap8ook8h                        0x000055fe8341a798 <unavailable> + 10136

    5    tmpap8ook8h                        0x000055fe8341a01f <unavailable> + 8223

    6    libc.so.6                          0x00002abe76e82460 __libc_start_main +
    245

    7    tmpap8ook8h                        0x000055fe83419a29 <unavailable> + 6697

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let intValue = value as? Int {\n            filtered.append(intValue)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        guard\
    \ let value = value as? Int else { continue }\n        result.append(value)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered: [Int] = []\n    for value in values {\n      \
    \  if let intValue = value as? Int {\n            filtered.append(intValue)\n\
    \        }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = Int(value) {\n            filtered.append(intValue)\n       \
    \ }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp5vw91lkm.swift:10:31: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let intValue = Int(value) {\n\
    \                              ^\n                                    as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        guard\
    \ let intValue = value as? Int else { continue }\n        filtered.append(intValue)\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        guard\
    \ let intValue = Int(value) else {\n            throw PythonError.newError(\n\
    \                PythonError.TypeError, \"filter expected a number but got \\\
    (String(describing: value))\"\n            )\n        }\n        result.append(intValue)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp70iac9g3.swift:10:34: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        guard let intValue = Int(value)\
    \ else {\n                                 ^\n                               \
    \        as! String\n/tmp/tmp70iac9g3.swift:11:19: error: cannot find 'PythonError'\
    \ in scope\n            throw PythonError.newError(\n                  ^~~~~~~~~~~\n\
    /tmp/tmp70iac9g3.swift:12:17: error: cannot find 'PythonError' in scope\n    \
    \            PythonError.TypeError, \"filter expected a number but got \\(String(describing:\
    \ value))\"\n                ^~~~~~~~~~~\n/tmp/tmp70iac9g3.swift:11:13: error:\
    \ error is not handled because the enclosing function is not declared 'throws'\n\
    \            throw PythonError.newError(\n            ^\n"
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            filtered.append(intValue)\n    \
    \    }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_integers(values: [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values:\
    \ [4, [:] as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"])\
    \ == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            filtered.append(value)\n        }\n\
    \    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = Int(value) {\n            result.append(int)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpf3iueciy.swift:10:26: error: cannot convert value of type 'AnyHashable'\
    \ to expected argument type 'String'\n        if let int = Int(value) {\n    \
    \                     ^\n                               as! String\n"
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
