language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3xwzdyxd.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if evenDigits.contains(n)\
    \ == false {\n                result.append(n)\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppqz6hu03/tmppqz6hu03.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac667a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac6649bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac6649b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac6649a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqz6hu03                        0x0000559e0ffd86ec <unavailable> + 5868

    5    libc.so.6                          0x00002aac66990460 __libc_start_main +
    245

    6    tmppqz6hu03                        0x0000559e0ffd82e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted(by: {$0 < $1})\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl5euts37/tmpl5euts37.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7813957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b781364eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b781364e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b781364d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5euts37                        0x000055b22129e6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b7813b43460 __libc_start_main +
    245

    6    tmpl5euts37                        0x000055b22129e2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a34152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a33e49561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a33e49286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a33e4913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a33e48bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5a33c487ec <unavailable> + 186348

    6    tmp189v667n                        0x000055c8ee554bfe <unavailable> + 7166

    7    tmp189v667n                        0x000055c8ee55459c <unavailable> + 5532

    8    libc.so.6                          0x00002b5a3433e460 __libc_start_main +
    245

    9    tmp189v667n                        0x000055c8ee554279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3xwzdyxd.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n           \
    \ evenDigit.append(n)\n        } else {\n            for d in evenDigit {\n  \
    \              if d == n {\n                    result.append(n)\n           \
    \         break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpcxk1udqm/tmpcxk1udqm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b4cda6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b4ca9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b4ca9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b4ca9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxk1udqm                        0x000055c877cf267c <unavailable> + 5756

    5    libc.so.6                          0x00002b4b4cf92460 __libc_start_main +
    245

    6    tmpcxk1udqm                        0x000055c877cf2279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for v in x {\n        if i % 2 == 0 {\n            result.append(v)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxfwqefwi/tmpxfwqefwi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa400cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa3fdc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa3fdc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa3fdc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxfwqefwi                        0x0000557dbba9b67c <unavailable> + 5756

    5    libc.so.6                          0x00002afa402b6460 __libc_start_main +
    245

    6    tmpxfwqefwi                        0x0000557dbba9b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n            last\
    \ = last * 10 + n\n        } else {\n            if last > 0 {\n             \
    \   result.append(last)\n            }\n            last = n\n        }\n    }\n\
    \    if last > 0 {\n        result.append(last)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmppkzgrl6q/tmppkzgrl6q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35464e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35461dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35461df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35461de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppkzgrl6q                        0x000055c2801a967c <unavailable> + 5756

    5    libc.so.6                          0x00002b35466d4460 __libc_start_main +
    245

    6    tmppkzgrl6q                        0x000055c2801a9279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.contains(n) {\n                continue\n\
    \            }\n            result.append(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbtqeqj0x/tmpbtqeqj0x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae42cdf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae42caecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae42caec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae42caeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtqeqj0x                        0x00005580e0d816ec <unavailable> + 5868

    5    libc.so.6                          0x00002ae42cfe1460 __libc_start_main +
    245

    6    tmpbtqeqj0x                        0x00005580e0d812e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n           \
    \ evenDigit.append()\n        } else {\n            result.append(n)\n       \
    \ }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpye6c916a.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmpye6c916a.swift:21:16: error: no\
    \ exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigitCount = 0\n    for element in x {\n        if element % 2 == 0 {\n\
    \            evenDigitCount += 1\n        }\n    }\n    for element in x {\n \
    \       if element % 2 != 0 && evenDigitCount > 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpv6hx2u0o/tmpv6hx2u0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60b527ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60b4f71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60b4f71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60b4f707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6hx2u0o                        0x000055bf4406b67c <unavailable> + 5756

    5    libc.so.6                          0x00002b60b5466460 __libc_start_main +
    245

    6    tmpv6hx2u0o                        0x000055bf4406b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n\
    \            result.removeLast()\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp370u8ew4/tmp370u8ew4.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b6de77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b6db6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b6db6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b6db6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp370u8ew4                        0x000055b2fddd876c <unavailable> + 5996

    5    libc.so.6                          0x00002b2b6e063460 __libc_start_main +
    245

    6    tmp370u8ew4                        0x000055b2fddd8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxs7mqszg.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            for e in evenDigits {\n\
    \                if e == n {\n                    break\n                }\n \
    \           }\n            if !result.contains(n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjnf2gq8p/tmpjnf2gq8p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed4951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed4648b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed4648988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed46477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnf2gq8p                        0x000055afeea396ec <unavailable> + 5868

    5    libc.so.6                          0x00002b8ed4b3d460 __libc_start_main +
    245

    6    tmpjnf2gq8p                        0x000055afeea392e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, evenDigits)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz2rqoydu.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdqp70mx5.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for v in x {\n        if v % 2 == 0 {\n            result.append(v)\n\
    \        }\n    }\n    for v in result {\n        if v % 2 != 0 {\n          \
    \  i += 1\n        }\n    }\n    return result.sorted(by: { $0 < $1 })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxscwb32t/tmpxscwb32t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8fe6a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8fe399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8fe399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8fe3987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxscwb32t                        0x000055bbc3c906ec <unavailable> + 5868

    5    libc.so.6                          0x00002ae8fe88e460 __libc_start_main +
    245

    6    tmpxscwb32t                        0x000055bbc3c902e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.contains(n) == false {\n              \
    \  result.append(n)\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvmfhrrgu/tmpvmfhrrgu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3f7245c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3f6f3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3f6f3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3f6f3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmfhrrgu                        0x0000563fde4cd6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ad3f7431460 __libc_start_main +
    245

    6    tmpvmfhrrgu                        0x0000563fde4cd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last = n /\
    \ 10\n        } else {\n            if last > 0 {\n                result.insert(last,\
    \ last)\n            }\n            last = 0\n        }\n    }\n    if last >\
    \ 0 {\n        result.insert(last, last)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmptduajley.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, last)\n               \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmptduajley.swift:24:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(last,\
    \ last)\n               ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 10 == 0 {\n            continue\n        }\n      \
    \  if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxknv2swm/tmpxknv2swm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42e3c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42e3929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42e3929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42e39287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxknv2swm                        0x0000563d7745b6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b42e3e1e460 __libc_start_main +
    245

    6    tmpxknv2swm                        0x0000563d7745b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for element in x {\n        if element % 2 == 0 {\n            i\
    \ += 1\n        } else {\n            result.append(element)\n        }\n    }\n\
    \    for element in x {\n        if element % 2 != 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result.sorted(by: <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmptot9fkz8/tmptot9fkz8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d3689bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d36592b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d36592988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d365917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptot9fkz8                        0x00005655319ac6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b2d36a87460 __libc_start_main +
    245

    6    tmptot9fkz8                        0x00005655319ac2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lastEvenDigit = x.first!\n    for x in x {\n        if lastEvenDigit % 2 ==\
    \ 0 {\n            lastEvenDigit /= 2\n        } else {\n            result.append(x)\n\
    \            lastEvenDigit = x\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp8un3ldo_/tmp8un3ldo_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf6b547c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf6b23eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf6b23e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf6b23d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8un3ldo_                        0x00005648fabe26dc <unavailable> + 5852

    5    libc.so.6                          0x00002aaf6b733460 __libc_start_main +
    245

    6    tmp8un3ldo_                        0x00005648fabe22d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = false\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit\
    \ = true\n        } else {\n            if evenDigit {\n                result.append(n)\n\
    \            }\n            evenDigit = false\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpf3a4c7mb/tmpf3a4c7mb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba65e8adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba65e5a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba65e5a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba65e5a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf3a4c7mb                        0x000055f36b3d367c <unavailable> + 5756

    5    libc.so.6                          0x00002ba65ea99460 __libc_start_main +
    245

    6    tmpf3a4c7mb                        0x000055f36b3d3279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphjsx_1r8.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last = last\
    \ * 10 + n % 10\n        } else {\n            if last > 0 {\n               \
    \ last = last / 10\n            }\n            result.append(n)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpzbh3po2j/tmpzbh3po2j.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba72b834c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba72b52bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba72b52b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba72b52a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbh3po2j                        0x0000556952ece67c <unavailable> + 5756

    5    libc.so.6                          0x00002ba72ba20460 __libc_start_main +
    245

    6    tmpzbh3po2j                        0x0000556952ece279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxs7mqszg.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphjsx_1r8.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    for n in result {\n        if\
    \ n % 2 == 0 {\n            result.remove(at: result.index(of: n))\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpem20he_8.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpem20he_8.swift:21:38:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n           \
    \ result.remove(at: result.index(of: n))\n                                   \
    \  ^\n/tmp/tmpem20he_8.swift:21:38: note: coalesce using '??' to provide a default\
    \ when the optional value contains 'nil'\n            result.remove(at: result.index(of:\
    \ n))\n                                     ^\n                              \
    \                    ?? <#default value#>\n/tmp/tmpem20he_8.swift:21:38: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \            result.remove(at: result.index(of: n))\n                        \
    \             ^\n                                                 !\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last: Int = 0\n    for x in x {\n        if x % 2 == 0 {\n            last =\
    \ last * 10 + x\n        } else {\n            if last > 0 {\n               \
    \ result.append(last)\n            }\n            last = x\n        }\n    }\n\
    \    if last > 0 {\n        result.append(last)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpf8ax6l8j/tmpf8ax6l8j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b631519ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6314e95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6314e95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6314e947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8ax6l8j                        0x000055e1a662067c <unavailable> + 5756

    5    libc.so.6                          0x00002b631538a460 __libc_start_main +
    245

    6    tmpf8ax6l8j                        0x000055e1a6620279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for element in x {\n        if element % 2 == 0 {\n         \
    \   result[index] = element\n            index++\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxhlsdii.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphjsx_1r8.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            for e in evenDigits {\n\
    \                if e == n {\n                    break\n                }\n \
    \           }\n            if result.contains(n) {\n                continue\n\
    \            }\n            result.append(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3kipm480/tmp3kipm480.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba480955c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48064cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48064c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48064b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kipm480                        0x00005596698b66ec <unavailable> + 5868

    5    libc.so.6                          0x00002ba480b41460 __libc_start_main +
    245

    6    tmp3kipm480                        0x00005596698b62e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, evenDigits)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz2rqoydu.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = false\n    for n in x {\n        if n % 2 == 0 {\n            if\
    \ evenDigit {\n                result.append(n)\n            } else {\n      \
    \          evenDigit = true\n            }\n        } else {\n            evenDigit\
    \ = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmd2v2rgn/tmpmd2v2rgn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3602b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35ffadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35ffad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35ffac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd2v2rgn                        0x0000560b46bde67c <unavailable> + 5756

    5    libc.so.6                          0x00002ac3604a2460 __libc_start_main +
    245

    6    tmpmd2v2rgn                        0x0000560b46bde279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a51647c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a5133e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a5133e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a5133e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a5133dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5a5143fc1d <unavailable> + 2489373

    6    tmpy7gmpon3                        0x00005654d71ccf40 <unavailable> + 8000

    7    tmpy7gmpon3                        0x00005654d71cc77c <unavailable> + 6012

    8    libc.so.6                          0x00002b5a51833460 __libc_start_main +
    245

    9    tmpy7gmpon3                        0x00005654d71cc459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp35mz7xs5/tmp35mz7xs5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b369648ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3696181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3696181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36961807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35mz7xs5                        0x0000564def86b76c <unavailable> + 5996

    5    libc.so.6                          0x00002b3696676460 __libc_start_main +
    245

    6    tmp35mz7xs5                        0x0000564def86b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n  \
    \          result.append(num)\n        }\n    }\n    for num in x {\n        if\
    \ num % 2 == 0 {\n            result.append(num)\n        }\n    }\n    for num\
    \ in x {\n        if num % 2 != 0 {\n            i += 1\n        }\n    }\n  \
    \  for num in x {\n        if num % 2 != 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n  \
    \          result.append(num)\n        }\n    }\n    for num in x {\n        if\
    \ num % 2 != 0 {\n            i += 1\n        }\n    }\n    for num in x {\n \
    \       if num % 2 != 0 {\n            result.append(num)\n        }\n    }\n\
    \    for num in x {\n        if num % 2 != 0 {\n            i += 1\n        }\n\
    \    }\n    for num in x {\n        if num % 2 != 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n  \
    \          result.append(num)\n        }\n    }\n    for num in x {\n        if\
    \ num % 2 != 0 {\n            i += 1\n        }\n    }\n    for num in x {\n \
    \       if num % 2 != 0 {\n            result.append(num)\n        }\n    }\n\
    \    for num in x {\n        if num % 2 != 0 {\n            i += 1\n        }\n\
    \    }\n    for num in x {\n        if num % 2 != 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n  \
    \          result.append(num)\n        }\n    }\n    for num in x {\n        if\
    \ num % 2 != 0 {\n            i += 1\n        }\n    }\n    for num in x {\n \
    \       if num % 2 != 0 {\n            result.append(num)\n        }\n    }\n\
    \    for num in x {\n        if num % 2 != 0 {\n            i += 1\n        }\n\
    \    }\n    for num in x {\n        if num % 2 != 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmptddgnnnn.swift:135:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmptddgnnnn.swift:153:54: error: expected '}' at end of brace statement\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])\n                      \
    \                               ^\n/tmp/tmptddgnnnn.swift:10:39: note: to match\
    \ this opening '{'\nfunc unique_digits(x: [Int]) -> [Int] {\n                \
    \                      ^\n/tmp/tmptddgnnnn.swift:138:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    var odd  = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        result.append(n)\n    }\n    for n in odd\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp2z8_vv59/tmp2z8_vv59.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13e9c0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13e9901b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13e9901988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13e99007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2z8_vv59                        0x0000556f8c1e36ec <unavailable> + 5868

    5    libc.so.6                          0x00002b13e9df6460 __libc_start_main +
    245

    6    tmp2z8_vv59                        0x0000556f8c1e32e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ v in x {\n        if v % 2 == 0 {\n            continue\n        }\n       \
    \ var idx = result.count\n        result[idx] = v\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abd7cad5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd7c7cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abd7c7cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abd7c7cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abd7c7cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abd7c5cb7ec <unavailable> + 186348

    6    tmp5mfks96z                        0x0000562bdb832d34 <unavailable> + 7476

    7    tmp5mfks96z                        0x0000562bdb83269c <unavailable> + 5788

    8    libc.so.6                          0x00002abd7ccc1460 __libc_start_main +
    245

    9    tmp5mfks96z                        0x0000562bdb832379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e6b96ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e6b665561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e6b665286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e6b66513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e6b664bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0e6b766c1d <unavailable> + 2489373

    6    tmp98uo_h32                        0x000055d9ff946fe0 <unavailable> + 8160

    7    tmp98uo_h32                        0x000055d9ff94681c <unavailable> + 6172

    8    libc.so.6                          0x00002b0e6bb5a460 __libc_start_main +
    245

    9    tmp98uo_h32                        0x000055d9ff9464f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.count > 0 {\n                result.insert(even.min(),\
    \ n)\n                even.removeFirst()\n            } else {\n             \
    \   result.append(n)\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp0crpj5ca.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(even.min(), n)\n            \
    \           ^\n/tmp/tmp0crpj5ca.swift:18:24: note: candidate has partially matching\
    \ parameter list (__owned Int, at: Int)\n                result.insert(even.min(),\
    \ n)\n                       ^\n/tmp/tmp0crpj5ca.swift:18:24: note: candidate\
    \ has partially matching parameter list (__owned Int, at: Array<Int>.Index)\n\
    \                result.insert(even.min(), n)\n                       ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpk8pvxtgs.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if num % 2 == 0 {\n            continue\n        }\n   \
    \     var index = result.count\n        result.append(num)\n        while index\
    \ > 0 && result[index-1] > num {\n            result.removeAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpbrra8wh4.swift:38:54: error: expected '}' at end of brace statement\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])\n                      \
    \                               ^\n/tmp/tmpbrra8wh4.swift:12:18: note: to match\
    \ this opening '{'\n    for num in x {\n                 ^\n/tmp/tmpbrra8wh4.swift:38:54:\
    \ error: expected '}' at end of brace statement\nassert(unique_digits(x: [135,\
    \ 103, 31]) == [31, 135])\n                                                  \
    \   ^\n/tmp/tmpbrra8wh4.swift:10:39: note: to match this opening '{'\nfunc unique_digits(x:\
    \ [Int]) -> [Int] {\n                                      ^\n/tmp/tmpbrra8wh4.swift:19:20:\
    \ error: value of type '[Int]' has no member 'removeAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtIndexAtInd"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n           \
    \ evenDigit.append()\n        } else {\n            result.append(n)\n       \
    \ }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpye6c916a.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmpye6c916a.swift:21:16: error: no\
    \ exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n           \
    \ evenDigit.append()\n        } else {\n            result.append(n)\n       \
    \ }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpye6c916a.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmpye6c916a.swift:21:16: error: no\
    \ exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.count > 0 {\n                result +=\
    \ even\n                even = [Int]()\n            }\n            result.append(n)\n\
    \        }\n    }\n    if even.count > 0 {\n        result += even\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpcv4nv843/tmpcv4nv843.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c1ec22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c1e919b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c1e919988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c1e9187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcv4nv843                        0x0000561265f0272c <unavailable> + 5932

    5    libc.so.6                          0x00002b3c1ee0e460 __libc_start_main +
    245

    6    tmpcv4nv843                        0x0000561265f02329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, evenDigits)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz2rqoydu.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    for n in even {\n        if !contains(result,\
    \ n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4tb7xix4.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp4tb7xix4.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ v in x {\n        if v % 2 == 0 {\n            continue\n        }\n       \
    \ let idx = result.index(of: v)\n        if idx != nil {\n            result.remove(at:\
    \ idx!)\n        } else {\n            result.append(v)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp07_mo8ef/tmp07_mo8ef.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b36545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b3623cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b3623c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b3623b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07_mo8ef                        0x0000560a048f273c <unavailable> + 5948

    5    libc.so.6                          0x00002b4b36731460 __libc_start_main +
    245

    6    tmp07_mo8ef                        0x0000560a048f2339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    var i = 0\n    for n in x {\n        if n % 2 == 0 {\n \
    \           even.append(n)\n        } else {\n            result.append(n)\n \
    \       }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpkhicl2mk.swift:22:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, even) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpovvj56pc.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, even) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpk8pvxtgs.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxs7mqszg.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lastDigit = x[x.startIndex]\n    for element in x {\n        if element % lastDigit\
    \ == 0 {\n            lastDigit = element\n        } else {\n            result.append(element)\n\
    \            lastDigit = element\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpoptd9fgs/tmpoptd9fgs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab187bafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1878a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1878a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1878a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoptd9fgs                        0x000055fca332772c <unavailable> + 5932

    5    libc.so.6                          0x00002ab187d9b460 __libc_start_main +
    245

    6    tmpoptd9fgs                        0x000055fca3327329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sortInPlace()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxc7x5992.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpxc7x5992.swift:19:12:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n    result.sortInPlace()\n\
    \    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphjsx_1r8.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, even) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpovvj56pc.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, even) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last = last\
    \ * 10 + n % 10\n        } else {\n            if last > 0 {\n               \
    \ last = last * 10 + n % 10\n            } else {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpebb3t404/tmpebb3t404.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad321bc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3218bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3218bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3218bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpebb3t404                        0x0000557b6333867c <unavailable> + 5756

    5    libc.so.6                          0x00002ad321db1460 __libc_start_main +
    245

    6    tmpebb3t404                        0x0000557b63338279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted(by: { $0 < $1 })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl5h_m69x/tmpl5h_m69x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e1d7eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e1d4e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e1d4e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e1d4e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5h_m69x                        0x0000562c9aac46ec <unavailable> + 5868

    5    libc.so.6                          0x00002b5e1d9da460 __libc_start_main +
    245

    6    tmpl5h_m69x                        0x0000562c9aac42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lastEvenDigit = 0\n    for n in x {\n        if n % 2 == 0 {\n            lastEvenDigit\
    \ = n\n        } else {\n            if lastEvenDigit != 0 {\n               \
    \ result.insert(lastEvenDigit - 1, n)\n            }\n            lastEvenDigit\
    \ = 0\n        }\n    }\n    if lastEvenDigit != 0 {\n        result.insert(lastEvenDigit\
    \ - 1, n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpndcwutjd.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(lastEvenDigit - 1, n)\n     \
    \                  ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmpndcwutjd.swift:24:42: error: cannot find 'n' in scope\n\
    \        result.insert(lastEvenDigit - 1, n)\n                               \
    \          ^\n/tmp/tmpndcwutjd.swift:24:16: error: no exact matches in call to\
    \ instance method 'insert'\n        result.insert(lastEvenDigit - 1, n)\n    \
    \           ^\n/tmp/tmpndcwutjd.swift:24:16: note: found candidate with type '(__owned\
    \ Int, Int) -> ()'\n        result.insert(lastEvenDigit - 1, n)\n            \
    \   ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            for e in evenDigits {\n\
    \                if e == n {\n                    break\n                }\n \
    \           }\n            if !result.contains(n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjnf2gq8p/tmpjnf2gq8p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed4951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed4648b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed4648988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed46477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjnf2gq8p                        0x000055afeea396ec <unavailable> + 5868

    5    libc.so.6                          0x00002b8ed4b3d460 __libc_start_main +
    245

    6    tmpjnf2gq8p                        0x000055afeea392e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigitCount = 0\n    for n in x {\n        if n % 2 == 0 {\n            evenDigitCount++\n\
    \        }\n    }\n    for n in x {\n        if n % 2 == 0 && evenDigitCount >\
    \ 0 {\n            result.append(n)\n            evenDigitCount--\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpp3mjknr2.swift:15:27: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            evenDigitCount++\n                       \
    \   ^~\n/tmp/tmpp3mjknr2.swift:21:27: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            evenDigitCount--\n                       \
    \   ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.contains(n) == false {\n              \
    \  result.append(n)\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvmfhrrgu/tmpvmfhrrgu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3f7245c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3f6f3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3f6f3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3f6f3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmfhrrgu                        0x0000563fde4cd6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ad3f7431460 __libc_start_main +
    245

    6    tmpvmfhrrgu                        0x0000563fde4cd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if num % 2 == 0 {\n            continue\n        }\n   \
    \     var index = -1\n        for idx in 0..<result.count {\n            if result[idx]\
    \ == num {\n                index = idx\n                break\n            }\n\
    \        }\n        if index == -1 {\n            result.append(num)\n       \
    \ } else {\n            result[index] = num\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpji8vmrqt/tmpji8vmrqt.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b701de84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b701db7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b701db7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b701db7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpji8vmrqt                        0x000055c38fc5586c <unavailable> + 6252

    5    libc.so.6                          0x00002b701e070460 __libc_start_main +
    245

    6    tmpji8vmrqt                        0x000055c38fc55469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ i += 1\n        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n\
    \            result.removeLast()\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp370u8ew4/tmp370u8ew4.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b6de77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b6db6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b6db6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b6db6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp370u8ew4                        0x000055b2fddd876c <unavailable> + 5996

    5    libc.so.6                          0x00002b2b6e063460 __libc_start_main +
    245

    6    tmp370u8ew4                        0x000055b2fddd8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var evenDigit = false\n    for element in x {\n  \
    \      if element % 2 == 0 {\n            evenDigit = true\n        }\n      \
    \  if evenDigit {\n            result.append(element)\n        }\n        if element\
    \ % 2 == 0 {\n            evenDigit = false\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpun936a1_/tmpun936a1_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb90b26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb9081db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb9081d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb9081c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpun936a1_                        0x00005555b1fa467c <unavailable> + 5756

    5    libc.so.6                          0x00002afb90d12460 __libc_start_main +
    245

    6    tmpun936a1_                        0x00005555b1fa4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for v in x {\n        if v%2 == 0 {\n            last = v\n  \
    \      } else {\n            if last != 0 {\n                result.append(last)\n\
    \            }\n            last = v\n        }\n    }\n    if last != 0 {\n \
    \       result.append(last)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpui4f3hcj/tmpui4f3hcj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea8e2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea8b22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea8b22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea8b217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpui4f3hcj                        0x000055f908bb667c <unavailable> + 5756

    5    libc.so.6                          0x00002b4ea9017460 __libc_start_main +
    245

    6    tmpui4f3hcj                        0x000055f908bb6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last = n %\
    \ 10\n        } else {\n            if last != 0 {\n                result.append((last\
    \ + 1) * 10)\n            }\n            last = n % 10\n        }\n    }\n   \
    \ if last != 0 {\n        result.append((last + 1) * 10)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpoc6rqn8j/tmpoc6rqn8j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09935f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09932edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09932ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09932ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoc6rqn8j                        0x000055d8653ea67c <unavailable> + 5756

    5    libc.so.6                          0x00002b09937e2460 __libc_start_main +
    245

    6    tmpoc6rqn8j                        0x000055d8653ea279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, evenDigits)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz2rqoydu.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n\
    \            even.append(num)\n        } else {\n            result.append(num)\n\
    \        }\n    }\n    for num in even {\n        result.remove(at: i)\n     \
    \   i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmprpos50jo/tmprpos50jo.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e1c2a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e1bf9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e1bf9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e1bf9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprpos50jo                        0x0000563f9742f6dc <unavailable> + 5852

    5    libc.so.6                          0x00002b5e1c493460 __libc_start_main +
    245

    6    tmprpos50jo                        0x0000563f9742f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for element in x {\n        if element % 2 == 0 {\n         \
    \   result[index] = element\n            index++\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqxhlsdii.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a51647c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a5133e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a5133e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a5133e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a5133dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5a5143fc1d <unavailable> + 2489373

    6    tmpy7gmpon3                        0x00005654d71ccf40 <unavailable> + 8000

    7    tmpy7gmpon3                        0x00005654d71cc77c <unavailable> + 6012

    8    libc.so.6                          0x00002b5a51833460 __libc_start_main +
    245

    9    tmpy7gmpon3                        0x00005654d71cc459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, even) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpovvj56pc.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, even) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    for element in result {\n        if element % 2 != 0 {\n\
    \            i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl67gkg5g/tmpl67gkg5g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71e876ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71e8465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71e8465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71e84647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl67gkg5g                        0x000056369946d71c <unavailable> + 5916

    5    libc.so.6                          0x00002b71e895a460 __libc_start_main +
    245

    6    tmpl67gkg5g                        0x000056369946d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a34152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a33e49561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a33e49286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a33e4913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a33e48bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5a33c487ec <unavailable> + 186348

    6    tmp189v667n                        0x000055c8ee554bfe <unavailable> + 7166

    7    tmp189v667n                        0x000055c8ee55459c <unavailable> + 5532

    8    libc.so.6                          0x00002b5a3433e460 __libc_start_main +
    245

    9    tmp189v667n                        0x000055c8ee554279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphlfcn3nl.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    for n in even {\n        if !contains(result,\
    \ n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4tb7xix4.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp4tb7xix4.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lastDigit = x[x.startIndex]\n    for n in x {\n        if n % 10 != 0 {\n  \
    \          lastDigit = n % 10\n        } else {\n            if lastDigit % 2\
    \ == 0 {\n                result.append(n)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp4cve0z3z/tmp4cve0z3z.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab800e36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab800b2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab800b2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab800b2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4cve0z3z                        0x000055e21847872c <unavailable> + 5932

    5    libc.so.6                          0x00002ab801022460 __libc_start_main +
    245

    6    tmp4cve0z3z                        0x000055e218478329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    for k in x {\n        if i % 2 == 0\
    \ {\n            if j == 0 {\n                result.append(k)\n             \
    \   j++\n            } else {\n                if k != result[j] {\n         \
    \           result.append(k)\n                }\n                j++\n       \
    \     }\n        } else {\n            if j == 0 {\n                result.append(k)\n\
    \                j++\n            } else {\n                if k != result[j]\
    \ {\n                    result.append(k)\n                }\n               \
    \ j++\n            }\n        }\n        i++\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp20nkwz0d.swift:19:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                j++\n                 ^~\n/tmp/tmp20nkwz0d.swift:24:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      j++\n                 ^~\n/tmp/tmp20nkwz0d.swift:29:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n                j++\n        \
    \         ^~\n/tmp/tmp20nkwz0d.swift:34:18: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n                j++\n                 ^~\n/tmp/tmp20nkwz0d.swift:37:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        i++\n\
    \         ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3xwzdyxd.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphjsx_1r8.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    var j = 0\n    for _ in x {\n        if i % 2 == 0 {\n          \
    \  result.append(x[j])\n        }\n        i += 1\n        j += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpaw6x28qk/tmpaw6x28qk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c8fcf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c8f9ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c8f9eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c8f9ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaw6x28qk                        0x000056075a9af6cc <unavailable> + 5836

    5    libc.so.6                          0x00002b5c8fee0460 __libc_start_main +
    245

    6    tmpaw6x28qk                        0x000056075a9af2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.removeFirst()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpr0ryk4f3.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a34152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a33e49561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a33e49286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a33e4913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a33e48bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5a33c487ec <unavailable> + 186348

    6    tmp189v667n                        0x000055c8ee554bfe <unavailable> + 7166

    7    tmp189v667n                        0x000055c8ee55459c <unavailable> + 5532

    8    libc.so.6                          0x00002b5a3433e460 __libc_start_main +
    245

    9    tmp189v667n                        0x000055c8ee554279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            continue\n        }\n       \
    \ if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpw2fs94lx/tmpw2fs94lx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac76e1e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac76dedab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac76deda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac76ded97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2fs94lx                        0x0000565454d7d6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ac76e3cf460 __libc_start_main +
    245

    6    tmpw2fs94lx                        0x0000565454d7d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            for e in evenDigits {\n\
    \                if e % e == 0 {\n                    result.append(n)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp3w37erai/tmp3w37erai.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84aae73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84aab6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84aab6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84aab697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3w37erai                        0x000055fb620ca67c <unavailable> + 5756

    5    libc.so.6                          0x00002b84ab05f460 __libc_start_main +
    245

    6    tmp3w37erai                        0x000055fb620ca279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if num % 2 == 0 {\n            result.append(num)\n    \
    \    }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpjp53leec/tmpjp53leec.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbc7af9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbc77f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbc77f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbc77ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjp53leec                        0x00005558f869779c <unavailable> + 6044

    5    libc.so.6                          0x00002adbc7ce5460 __libc_start_main +
    245

    6    tmpjp53leec                        0x00005558f8697399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    for n in result {\n        if\
    \ n % 2 != 0 {\n            result.remove(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpklo_76r8.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmpklo_76r8.swift:21:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(n)\n\
    \                   ^\nSwift.Array:10:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at\
    \ index: Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmrrwx1dm.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, even) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpovvj56pc.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, even) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            for _n in evenDigits {\n\
    \                if n == _n {\n                    result.append(n)\n        \
    \            break\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbmkw4nyq/tmpbmkw4nyq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612b4c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b612b1bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b612b1bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b612b1bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmkw4nyq                        0x000055bcdb80967c <unavailable> + 5756

    5    libc.so.6                          0x00002b612b6b2460 __libc_start_main +
    245

    6    tmpbmkw4nyq                        0x000055bcdb809279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            i += 1\n    \
    \    }\n        if i == 0 {\n            result.append(n)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp26zwpyx6/tmp26zwpyx6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bf24fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bf21f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bf21f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bf21f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26zwpyx6                        0x0000561bddf1e67c <unavailable> + 5756

    5    libc.so.6                          0x00002b0bf26e8460 __libc_start_main +
    245

    6    tmp26zwpyx6                        0x0000561bddf1e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphjsx_1r8.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    for element in result {\n        if element % 2 != 0 {\n\
    \            i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl67gkg5g/tmpl67gkg5g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71e876ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71e8465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71e8465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71e84647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl67gkg5g                        0x000056369946d71c <unavailable> + 5916

    5    libc.so.6                          0x00002b71e895a460 __libc_start_main +
    245

    6    tmpl67gkg5g                        0x000056369946d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lastDigit = x[x.startIndex]\n    for element in x {\n        if element % lastDigit\
    \ == 0 {\n            result.append(element)\n        }\n        lastDigit = element\
    \ % lastDigit\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b788af59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b788ac50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b788ac50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b788ac5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b788ac4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpud0eo3fq                        0x0000557ae6d08c6d <unavailable> + 7277

    6    tmpud0eo3fq                        0x0000557ae6d0864c <unavailable> + 5708

    7    libc.so.6                          0x00002b788b145460 __libc_start_main +
    245

    8    tmpud0eo3fq                        0x0000557ae6d08329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.contains(n) == false {\n              \
    \  result.append(n)\n            }\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpvmfhrrgu/tmpvmfhrrgu.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3f7245c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3f6f3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3f6f3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3f6f3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmfhrrgu                        0x0000563fde4cd6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ad3f7431460 __libc_start_main +
    245

    6    tmpvmfhrrgu                        0x0000563fde4cd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpk8pvxtgs.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 10 == 0 {\n            continue\n        }\n      \
    \  if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpuml41t2_/tmpuml41t2_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb4dcfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb4d9f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb4d9f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb4d9f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuml41t2_                        0x00005586c7c8c78c <unavailable> + 6028

    5    libc.so.6                          0x00002abb4dee7460 __libc_start_main +
    245

    6    tmpuml41t2_                        0x00005586c7c8c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ v in x {\n        if v%2 == 0 {\n            continue\n        }\n        for\
    \ vv in result {\n            if v%vv == 0 {\n                break\n        \
    \    }\n        }\n        if vv <= v {\n            result.append(v)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp6gfqwlf4.swift:21:12: error: cannot find 'vv' in scope\n      \
    \  if vv <= v {\n           ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp35mz7xs5/tmp35mz7xs5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b369648ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3696181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3696181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36961807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35mz7xs5                        0x0000564def86b76c <unavailable> + 5996

    5    libc.so.6                          0x00002b3696676460 __libc_start_main +
    245

    6    tmp35mz7xs5                        0x0000564def86b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for num in x {\n        if num % 2 == 0 {\n            last =\
    \ num\n        } else {\n            if last != 0 {\n                result.insert(last,\
    \ num)\n            }\n            last = 0\n        }\n    }\n    if last !=\
    \ 0 {\n        result.insert(last, num)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpa35hgfe7.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, num)\n                \
    \       ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpa35hgfe7.swift:24:29:\
    \ error: cannot find 'num' in scope\n        result.insert(last, num)\n      \
    \                      ^~~\n/tmp/tmpa35hgfe7.swift:24:16: error: no exact matches\
    \ in call to instance method 'insert'\n        result.insert(last, num)\n    \
    \           ^\n/tmp/tmpa35hgfe7.swift:24:16: note: found candidate with type '(__owned\
    \ Int, Int) -> ()'\n        result.insert(last, num)\n               ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last = n /\
    \ 10\n        } else {\n            if last != 0 {\n                result.insert(last,\
    \ last)\n            }\n            last = 0\n        }\n    }\n    if last !=\
    \ 0 {\n        result.insert(last, last)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvyrixsyp.swift:18:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(last, last)\n               \
    \        ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n/tmp/tmpvyrixsyp.swift:24:16:\
    \ error: no exact matches in call to instance method 'insert'\n        result.insert(last,\
    \ last)\n               ^\nSwift.Array:11:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lastDigit = 0\n    for n in x {\n        if lastDigit % 2 == 0 {\n         \
    \   lastDigit = n\n        } else {\n            if lastDigit > n {\n        \
    \        result.append(lastDigit)\n            }\n            lastDigit = n\n\
    \        }\n    }\n    if lastDigit > 0 {\n        result.append(lastDigit)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxvpue8sr/tmpxvpue8sr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f4f540c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f4f237b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f4f237988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f4f2367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvpue8sr                        0x000055ab2b58667c <unavailable> + 5756

    5    libc.so.6                          0x00002b4f4f72c460 __libc_start_main +
    245

    6    tmpxvpue8sr                        0x000055ab2b586279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, even) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpovvj56pc.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, even) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, n)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    for\
    \ n in evenDigits {\n        if contains(result, n) {\n            continue\n\
    \        }\n        result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5tksjpup.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp5tksjpup.swift:23:12:\
    \ error: cannot find 'contains' in scope\n        if contains(result, n) {\n \
    \          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for x in x {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            for y in even {\n                if x == y {\n\
    \                    result.append(x)\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpqgefcnyh/tmpqgefcnyh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23d79a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23d7697b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23d7697988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23d76967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgefcnyh                        0x000055e21ac8d67c <unavailable> + 5756

    5    libc.so.6                          0x00002b23d7b8c460 __libc_start_main +
    245

    6    tmpqgefcnyh                        0x000055e21ac8d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if result.contains(n) {\n                continue\n\
    \            }\n            result.append(n)\n        }\n    }\n    for n in even\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  result.append(n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp6zzwr104/tmp6zzwr104.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af396f61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af396c58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af396c58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af396c577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6zzwr104                        0x00005604f03d56ec <unavailable> + 5868

    5    libc.so.6                          0x00002af39714d460 __libc_start_main +
    245

    6    tmp6zzwr104                        0x00005604f03d52e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdqp70mx5.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    for element in result {\n        if element % 2 != 0 {\n\
    \            i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpl67gkg5g/tmpl67gkg5g.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71e876ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71e8465b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71e8465988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71e84647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl67gkg5g                        0x000056369946d71c <unavailable> + 5916

    5    libc.so.6                          0x00002b71e895a460 __libc_start_main +
    245

    6    tmpl67gkg5g                        0x000056369946d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for v in x {\n        if i % 2 == 0 {\n            result.append(v)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxfwqefwi/tmpxfwqefwi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa400cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa3fdc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa3fdc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa3fdc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxfwqefwi                        0x0000557dbba9b67c <unavailable> + 5756

    5    libc.so.6                          0x00002afa402b6460 __libc_start_main +
    245

    6    tmpxfwqefwi                        0x0000557dbba9b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for x in x {\n        if x % 2 == 0 {\n            last = last\
    \ * 10 + x\n        } else {\n            if last > 0 {\n                result.append(last)\n\
    \            }\n            last = x\n        }\n    }\n    if last > 0 {\n  \
    \      result.append(last)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp5bjfc7yx/tmp5bjfc7yx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb0dddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb0ad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb0ad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb0ad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bjfc7yx                        0x0000556fbf9d667c <unavailable> + 5756

    5    libc.so.6                          0x00002aaeb0fc9460 __libc_start_main +
    245

    6    tmp5bjfc7yx                        0x0000556fbf9d6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, even) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpovvj56pc.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, even) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 == 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmphyri7b5c/tmphyri7b5c.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1df952c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1df649b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1df649988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1df6487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphyri7b5c                        0x000055612444676c <unavailable> + 5996

    5    libc.so.6                          0x00002ae1dfb3e460 __libc_start_main +
    245

    6    tmphyri7b5c                        0x0000556124446369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for v in x {\n        if i % 2 == 0 {\n            result.append(v)\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxfwqefwi/tmpxfwqefwi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa400cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa3fdc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa3fdc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa3fdc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxfwqefwi                        0x0000557dbba9b67c <unavailable> + 5756

    5    libc.so.6                          0x00002afa402b6460 __libc_start_main +
    245

    6    tmpxfwqefwi                        0x0000557dbba9b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxs7mqszg.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if !contains(result, n) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    for n in even {\n        if !contains(result,\
    \ n) {\n            result.append(n)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4tb7xix4.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp4tb7xix4.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    for n in result {\n        if\
    \ n % 2 != 0 {\n            result.remove(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmppw21fqq6.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n/tmp/tmppw21fqq6.swift:21:20:\
    \ error: no exact matches in call to instance method 'remove'\n            result.remove(n)\n\
    \                   ^\nSwift.Array:10:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at\
    \ index: Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last = n /\
    \ 10\n        } else {\n            if last != 0 {\n                result.append(last)\n\
    \            }\n            last = n\n        }\n    }\n    if last != 0 {\n \
    \       result.append(last)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpo_3kizlr/tmpo_3kizlr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed02273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed01f6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed01f6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed01f697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_3kizlr                        0x000056552c44367c <unavailable> + 5756

    5    libc.so.6                          0x00002aed0245f460 __libc_start_main +
    245

    6    tmpo_3kizlr                        0x000056552c443279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            continue\n        }\n       \
    \ if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpw2fs94lx/tmpw2fs94lx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac76e1e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac76dedab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac76deda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac76ded97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2fs94lx                        0x0000565454d7d6ec <unavailable> + 5868

    5    libc.so.6                          0x00002ac76e3cf460 __libc_start_main +
    245

    6    tmpw2fs94lx                        0x0000565454d7d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for v in x {\n        if v % 2 == 0 {\n            result.append(v)\n\
    \        }\n    }\n    for v in result {\n        if v % 2 != 0 {\n          \
    \  i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz6d3bcgi/tmpz6d3bcgi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ccbaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6cc8a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6cc8a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6cc8a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6d3bcgi                        0x000055652c86971c <unavailable> + 5916

    5    libc.so.6                          0x00002af6ccd96460 __libc_start_main +
    245

    6    tmpz6d3bcgi                        0x000055652c869319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n            last\
    \ = last * 10 + n % 10\n        } else {\n            if last > 0 {\n        \
    \        result.append(last)\n            }\n            last = n % 10\n     \
    \   }\n    }\n    if last > 0 {\n        result.append(last)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0jsjqwmv/tmp0jsjqwmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af96b127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af96ae1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af96ae1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af96ae1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jsjqwmv                        0x0000561459e1867c <unavailable> + 5756

    5    libc.so.6                          0x00002af96b313460 __libc_start_main +
    245

    6    tmp0jsjqwmv                        0x0000561459e18279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a34152c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a33e49561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a33e49286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a33e4913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a33e48bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5a33c487ec <unavailable> + 186348

    6    tmp189v667n                        0x000055c8ee554bfe <unavailable> + 7166

    7    tmp189v667n                        0x000055c8ee55459c <unavailable> + 5532

    8    libc.so.6                          0x00002b5a3433e460 __libc_start_main +
    245

    9    tmp189v667n                        0x000055c8ee554279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpu95xg536/tmpu95xg536.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89b33dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89b30d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89b30d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89b30d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu95xg536                        0x00005558607e176c <unavailable> + 5996

    5    libc.so.6                          0x00002b89b35cb460 __libc_start_main +
    245

    6    tmpu95xg536                        0x00005558607e1369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, evenDigits)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz2rqoydu.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n           \
    \ evenDigit.append()\n        } else {\n            result.append(n)\n       \
    \ }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpye6c916a.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmpye6c916a.swift:21:16: error: no\
    \ exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, evenDigits)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz2rqoydu.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last = 0\n    for n in x {\n        if n % 10 == 0 {\n            last = n %\
    \ 10\n        } else {\n            if last != 0 {\n                result.append(last)\n\
    \            }\n            last = n % 10\n        }\n    }\n    if last != 0\
    \ {\n        result.append(last)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_2a7qko2/tmp_2a7qko2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acec87b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acec84aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acec84ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acec84ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2a7qko2                        0x0000559edb0a467c <unavailable> + 5756

    5    libc.so.6                          0x00002acec89a3460 __libc_start_main +
    245

    6    tmp_2a7qko2                        0x0000559edb0a4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdqp70mx5.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if num % 2 == 0 {\n            continue\n        }\n   \
    \     for num2 in x {\n            if num2 == num {\n                continue\n\
    \            }\n            if num2 % 2 == 0 {\n                continue\n   \
    \         }\n            if num2 % num == 0 {\n                result.append(num)\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyieu79ij/tmpyieu79ij.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d93e68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d93b5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d93b5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d93b5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyieu79ij                        0x0000562081b1267c <unavailable> + 5756

    5    libc.so.6                          0x00002b8d94054460 __libc_start_main +
    245

    6    tmpyieu79ij                        0x0000562081b12279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, n)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    for\
    \ n in evenDigits {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp84mfp6ac.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, n) {\n                ^~~~~~~~\n/tmp/tmp84mfp6ac.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, n) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = 0\n    for n in x {\n        if n % 2 == 0 {\n            if evenDigit\
    \ == 0 {\n                result.append(n)\n            } else {\n           \
    \     evenDigit = 0\n            }\n        } else {\n            evenDigit +=\
    \ 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpuxej876z/tmpuxej876z.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ed0d9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ed0a92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ed0a92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ed0a917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxej876z                        0x00005576bdfdb67c <unavailable> + 5756

    5    libc.so.6                          0x00002b6ed0f87460 __libc_start_main +
    245

    6    tmpuxej876z                        0x00005576bdfdb279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n            last\
    \ = last * 10 + n % 10\n        } else {\n            if last > 0 {\n        \
    \        result.append(last)\n            }\n            last = n % 10\n     \
    \   }\n    }\n    if last > 0 {\n        result.append(last)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0jsjqwmv/tmp0jsjqwmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af96b127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af96ae1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af96ae1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af96ae1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jsjqwmv                        0x0000561459e1867c <unavailable> + 5756

    5    libc.so.6                          0x00002af96b313460 __libc_start_main +
    245

    6    tmp0jsjqwmv                        0x0000561459e18279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      i += 1\n        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmplchgtt0o/tmplchgtt0o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8e7256c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8e6f4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8e6f4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8e6f4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplchgtt0o                        0x00005642e6ebc71c <unavailable> + 5916

    5    libc.so.6                          0x00002af8e7442460 __libc_start_main +
    245

    6    tmplchgtt0o                        0x00005642e6ebc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3xwzdyxd.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 == 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpk8pvxtgs.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpdqp70mx5.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.count > 0 {\n                result.appendContentsOf(even)\n\
    \            }\n            even = [n]\n        }\n    }\n    if even.count >\
    \ 0 {\n        result.appendContentsOf(even)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpezovjyq3.swift:18:24: error: value of type '[Int]' has no member\
    \ 'appendContentsOf'\n                result.appendContentsOf(even)\n        \
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpezovjyq3.swift:24:16: error: value of\
    \ type '[Int]' has no member 'appendContentsOf'\n        result.appendContentsOf(even)\n\
    \        ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for v in x {\n        if v%2 == 0 {\n            result.append(v)\n\
    \        }\n    }\n    for v in result {\n        if v%2 != 0 {\n            i\
    \ += 1\n        }\n    }\n    return result.sorted(by: {$0 < $1}).prefix(i)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp44uy478r.swift:23:41: error: cannot convert return expression of\
    \ type 'ArraySlice<Int>' to return type '[Int]'\n    return result.sorted(by:\
    \ {$0 < $1}).prefix(i)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpadvhlnio.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ even {\n        result.remove(n)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqklo8u4r.swift:21:16: error: no exact matches in call to instance\
    \ method 'remove'\n        result.remove(n)\n               ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmrrwx1dm.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for x in x {\n        if x % 2 ==\
    \ 0 {\n            even.append(x)\n        } else {\n            odd.append(x)\n\
    \        }\n    }\n    for x in even {\n        if !contains(result, x) {\n  \
    \          result.append(x)\n        }\n    }\n    for x in odd {\n        if\
    \ !contains(result, x) {\n            result.append(x)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_zy8anph.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, x) {\n            ^~~~~~~~\n/tmp/tmp_zy8anph.swift:27:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, x) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 10 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.removeAll()\n    return\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmhvpfqrd.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ last: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n            last\
    \ = last * 10 + n % 10\n        } else {\n            if last > 0 {\n        \
    \        result.append(last)\n            }\n            last = n % 10\n     \
    \   }\n    }\n    if last > 0 {\n        result.append(last)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp0jsjqwmv/tmp0jsjqwmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af96b127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af96ae1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af96ae1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af96ae1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0jsjqwmv                        0x0000561459e1867c <unavailable> + 5756

    5    libc.so.6                          0x00002af96b313460 __libc_start_main +
    245

    6    tmp0jsjqwmv                        0x0000561459e18279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 10 == 0 {\n            continue\n        }\n      \
    \  if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxknv2swm/tmpxknv2swm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42e3c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42e3929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42e3929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42e39287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxknv2swm                        0x0000563d7745b6ec <unavailable> + 5868

    5    libc.so.6                          0x00002b42e3e1e460 __libc_start_main +
    245

    6    tmpxknv2swm                        0x0000563d7745b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.remove(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmphjsx_1r8.swift:20:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824437
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp35mz7xs5/tmp35mz7xs5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b369648ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3696181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3696181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36961807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35mz7xs5                        0x0000564def86b76c <unavailable> + 5996

    5    libc.so.6                          0x00002b3696676460 __libc_start_main +
    245

    6    tmp35mz7xs5                        0x0000564def86b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n           \
    \ evenDigit.append()\n        } else {\n            result.append(n)\n       \
    \ }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpye6c916a.swift:15:30: error: missing argument for parameter #1\
    \ in call\n            evenDigit.append()\n                             ^\n  \
    \                           <#Int#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmpye6c916a.swift:21:16: error: no\
    \ exact matches in call to instance method 'remove'\n        result.remove(n)\n\
    \               ^\nSwift.Array:10:37: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(at:)')\n    @inlinable public mutating func remove(at index:\
    \ Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 10 == 0 {\n            continue\n        }\n      \
    \  for d in 0..<10 {\n            if n % 10 == d {\n                break\n  \
    \          }\n        }\n        if d == 0 {\n            result.append(n)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp15cqj6zb.swift:21:12: error: cannot find 'd' in scope\n       \
    \ if d == 0 {\n           ^\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxs7mqszg.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = false\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit\
    \ = true\n        } else {\n            if evenDigit {\n                result.append(n)\n\
    \                evenDigit = false\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpxvjqa16p/tmpxvjqa16p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e37e37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e37b2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e37b2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e37b2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvjqa16p                        0x00005653f4af167c <unavailable> + 5756

    5    libc.so.6                          0x00002b6e38023460 __libc_start_main +
    245

    6    tmpxvjqa16p                        0x00005653f4af1279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    var i = 0\n    for num in x {\n        if num % 2\
    \ == 0 {\n            evenDigits.append(num)\n        } else {\n            i\
    \ += 1\n        }\n    }\n    for num in evenDigits {\n        if !contains(result,\
    \ num) {\n            result.append(num)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpr587rqcz.swift:22:13: error: cannot find 'contains' in scope\n\
    \        if !contains(result, num) {\n            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for n in result {\n\
    \        if n % 2 == 0 {\n            result.remove(n)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpjo9artfx.swift:22:20: error: no exact matches in call to instance\
    \ method 'remove'\n            result.remove(n)\n                   ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpz_w3fjym/tmpz_w3fjym.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b356b6edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b356b3e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b356b3e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b356b3e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_w3fjym                        0x000055a6a442c79c <unavailable> + 6044

    5    libc.so.6                          0x00002b356b8d9460 __libc_start_main +
    245

    6    tmpz_w3fjym                        0x000055a6a442c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpxs7mqszg.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824436
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 10 == 0 {\n            result.append(n)\n\
    \        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<i {\n\
    \        result.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a51647c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a5133e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5a5133e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5a5133e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5a5133dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5a5143fc1d <unavailable> + 2489373

    6    tmpy7gmpon3                        0x00005654d71ccf40 <unavailable> + 8000

    7    tmpy7gmpon3                        0x00005654d71cc77c <unavailable> + 6012

    8    libc.so.6                          0x00002b5a51833460 __libc_start_main +
    245

    9    tmpy7gmpon3                        0x00005654d71cc459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if num % 2 == 0 {\n            continue\n        }\n   \
    \     for num2 in x {\n            if num2 % 2 == 0 {\n                continue\n\
    \            }\n            if num == num2 {\n                continue\n     \
    \       }\n            if num < num2 {\n                result.insert(num)\n \
    \               break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmplife6orn.swift:24:34: error: missing argument for parameter 'at'\
    \ in call\n                result.insert(num)\n                              \
    \   ^\n                                 , at: <#Int#>\nSwift.Array:11:37: note:\
    \ 'insert(_:at:)' declared here\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigit = 0\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit\
    \ += 1\n        } else {\n            if evenDigit == 0 {\n                result.append(n)\n\
    \            }\n            evenDigit = 0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_43nktzt/tmp_43nktzt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acce4079c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acce3d70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acce3d70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acce3d6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_43nktzt                        0x00005595d4dff67c <unavailable> + 5756

    5    libc.so.6                          0x00002acce4265460 __libc_start_main +
    245

    6    tmp_43nktzt                        0x00005595d4dff279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    for n in result {\n        if n % 2 != 0 {\n          \
    \  result.removeAll({$0 == n})\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpe8kodawr.swift:20:20: error: no exact matches in call to instance\
    \ method 'removeAll'\n            result.removeAll({$0 == n})\n              \
    \     ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(where:)')\n    @inlinable public mutating func removeAll(where\
    \ shouldBeRemoved: (Self.Element) throws -> Bool) rethrows\n                 \
    \                   ^\nSwift.RangeReplaceableCollection:2:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(where:)')\n    @inlinable public\
    \ mutating func removeAll(where shouldBeRemoved: (Self.Element) throws -> Bool)\
    \ rethrows\n                                    ^\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ even = [Int]()\n    for x in x {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            if !contains(result, x) {\n                result.append(x)\n\
    \            }\n        }\n    }\n    for x in even {\n        if !contains(result,\
    \ x) {\n            result.append(x)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpo6oxizto.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, x) {\n                ^~~~~~~~\n/tmp/tmpo6oxizto.swift:23:13:\
    \ error: cannot find 'contains' in scope\n        if !contains(result, x) {\n\
    \            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824438
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in result {\n        if num % 2 != 0 {\n      \
    \      result.removeLast()\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp35mz7xs5/tmp35mz7xs5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b369648ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3696181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3696181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36961807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp35mz7xs5                        0x0000564def86b76c <unavailable> + 5996

    5    libc.so.6                          0x00002b3696676460 __libc_start_main +
    245

    6    tmp35mz7xs5                        0x0000564def86b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824437
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            if !contains(result, evenDigits)\
    \ {\n                result.append(n)\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpz2rqoydu.swift:17:17: error: cannot find 'contains' in scope\n\
    \            if !contains(result, evenDigits) {\n                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824436
