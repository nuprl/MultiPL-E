name: HumanEval_14_all_prefixes
language: swift
prompt: "\n/// Return list of all prefixes from shortest to longest of the input string\n\
  /// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string: String)\
  \ -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
  assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"\
  WWW\"])"
completions: ["    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for\
    \ c in string {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var current = string\n    while current != \"\
    \" {\n        current = current.prefix(string)\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.startIndex]\
    \ {\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n        } else {\n            prefixes.append(currentPrefix)\n       \
    \     currentPrefix = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    var currentPrefix =\
    \ \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for c in string {\n        currentPrefix = currentPrefix + c\n        if currentPrefix.count\
    \ > prefixes.count {\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    var longest = string\n    for _ in 0..<string.count {\n      \
    \  current = longest\n        longest = \"\"\n        for _ in 0..<string.count\
    \ {\n            current = current + string\n            if current.hasPrefix(string)\
    \ {\n                longest = current\n                break\n            }\n\
    \        }\n        prefixes.append(longest)\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var current = string\n    while current !=\
    \ \"\" {\n        prefixes.append(current)\n        current = prefixes.last!\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = currentPrefix + character\n    }\n    prefixes.append(currentPrefix)\n   \
    \ return prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\
    \"\n    for c in string {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = currentPrefix\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var current = string\n    while\
    \ current != \"\" {\n        current = current.prefix(string)\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string {\n\
    \        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        currentPrefix = currentPrefix + String(character)\n   \
    \     prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    for s in string.split(separator: \"\") {\n        prefixes.append(s)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            currentPrefix = currentPrefix + character\n        } else {\n\
    \            prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes", " \
    \   var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n\
    \        prefix += c\n        prefixes.append(prefix)\n        prefix = \"\"\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix:\
    \ String = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    while current != \"\" {\n        prefixes.append(current)\n  \
    \      current = prefixes.last!\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    for s in string.split(separator: \"\") {\n        prefixes.append(s)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        if c == prefix {\n            prefixes.append(prefix)\n\
    \            prefix = \"\"\n        } else {\n            prefix += c\n      \
    \  }\n    }\n    prefixes.append(prefix)\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for c in string {\n        if c == currentPrefix {\n            prefixes.append(c)\n\
    \        } else {\n            currentPrefix = c\n        }\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var current = string\n    var\
    \ i = 0\n    while i < len(current) {\n        current = current[i..<string.count]\n\
    \        prefixes.append(current)\n        i += 1\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    while current != \"\" {\n        current = current.prefix(string.count)\n\
    \        prefixes.append(current)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for character in string {\n\
    \        if character == currentPrefix[currentPrefix.startIndex] {\n         \
    \   prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = String(character) + currentPrefix\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    for s in string.characters\
    \ {\n        prefixes = append(prefixes, String(s))\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character) + currentPrefix\n\
    \            prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n \
    \       prefix += c\n        prefixes.append(prefix)\n        prefix = \"\"\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = String(character) + currentPrefix\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ current = string\n    var prefix: String = \"\"\n    while current != \"\" {\n\
    \        prefix = current + prefix\n        current = prefixes.last!\n       \
    \ prefixes.append(prefix)\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    var currentPrefix = \"\"\n    for c in string {\n        if c == currentPrefix\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = currentPrefix + c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for c in string {\n        currentPrefix = currentPrefix\
    \ + c\n        if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for c in string {\n        currentPrefix = currentPrefix\
    \ + c\n        if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ prefix: String = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string {\n\
    \        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character) + currentPrefix\n\
    \            prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        currentPrefix = String(currentPrefix) + String(character)\n\
    \        prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    var current = string\n    while current != \"\" {\n\
    \        current = current.prefix(string)\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = String(character) + currentPrefix\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    for\
    \ c in string {\n        prefixes.append(string[..<string.index(before: c)])\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            currentPrefix = currentPrefix[currentPrefix.startIndex..<currentPrefix.endIndex]\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = character\n        }\n    }\n    prefixes.append(currentPrefix)\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = currentPrefix + character\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        currentPrefix = currentPrefix + c\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n    for c\
    \ in string {\n        prefix += c\n        prefixes.append(prefix)\n    }\n \
    \   return prefixes", "    var prefixes = [String]()\n    for c in string {\n\
    \        prefixes.append(string[..<string.index(before: c)])\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n    for c\
    \ in string {\n        if c == prefix {\n            prefixes.append(prefix)\n\
    \        } else {\n            prefix = prefix + c\n            prefixes.append(prefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for character in string {\n        currentPrefix =\
    \ String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for c in string\
    \ {\n        prefixes.append(string[..<string.index(before: c)])\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var current = string\n    while\
    \ current != \"\" {\n        prefixes.append(current)\n        current = prefixes.last!\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix\
    \ = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for c in string {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n \
    \       prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n \
    \       prefix += c\n        prefixes.append(prefix)\n        prefix = \"\"\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = currentPrefix + character\n    }\n    prefixes.append(currentPrefix)\n   \
    \ return prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\
    \"\n    for c in string {\n        currentPrefix = currentPrefix + c\n       \
    \ prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    for s in string.split(separator: \"\") {\n        prefixes.append(s)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for c in string\
    \ {\n        for p in prefixes {\n            if c == p {\n                break\n\
    \            }\n        }\n        if p != nil {\n            prefixes.append(p)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ prefix = \"\"\n    for c in string {\n        prefix += c\n        if prefixes.contains(prefix)\
    \ {\n            prefixes.append(prefix)\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    for s in string.split(separator: \"\") {\n \
    \       prefixes.append(s)\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    var currentPrefix = \"\"\n    for character in string {\n        currentPrefix\
    \ = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    var prefix: String = \"\"\n    for c in string {\n\
    \        prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix\
    \ = \"\"\n    for c in string {\n        if c == prefix {\n            prefixes.append(prefix)\n\
    \        } else {\n            prefix = prefix + c\n            prefixes.append(prefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    for\
    \ c in string {\n        for p in prefixes {\n            if c == p {\n      \
    \          break\n            }\n        }\n        if p != nil {\n          \
    \  prefixes.append(p)\n        }\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    for c\
    \ in string {\n        prefixes.append(string[..<string.index(before: c)])\n \
    \   }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count-1]\
    \ {\n            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = character\n        }\n    }\n    prefixes.append(currentPrefix)\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n    for c\
    \ in string {\n        prefix += c\n        if prefixes.contains(prefix) {\n \
    \           prefixes.append(prefix)\n        }\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n\
    \        prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var current = string\n    while current != \"\
    \" {\n        prefixes.append(current)\n        current = prefixes.last!\n   \
    \ }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = currentPrefix + character\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n \
    \       prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix\
    \ = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for c in string\
    \ {\n        prefixes.append(string[..<string.index(before: c)])\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = currentPrefix + character\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n \
    \       if c == prefix {\n            prefixes.append(prefix)\n        } else\
    \ {\n            prefix = prefix + c\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix\
    \ = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count-1]\
    \ {\n            currentPrefix = currentPrefix + character\n        } else {\n\
    \            prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes", " \
    \   var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n\
    \        prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix:\
    \ String = \"\"\n    for c in string {\n        prefix += c\n        if prefixes.contains(prefix)\
    \ {\n            prefixes.append(prefix)\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var current = string\n    while !current.isEmpty\
    \ {\n        prefixes.append(current)\n        current = current.prefix(string.count)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for c in string\
    \ {\n        prefixes.append(string[..<string.index(before: c)])\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var current = string\n    while\
    \ current != \"\" {\n        current = current.prefix(string)\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.startIndex]\
    \ {\n            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = String(character) + currentPrefix\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    var currentPrefix =\
    \ \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = currentPrefix + character\n    }\n    prefixes.append(currentPrefix)\n   \
    \ return prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\
    \"\n    for c in string {\n        currentPrefix = currentPrefix + c\n       \
    \ prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var prefix = \"\"\n    for c in string {\n        if c ==\
    \ prefix {\n            prefixes.append(prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    var currentPrefix =\
    \ \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for c in string {\n        currentPrefix = currentPrefix + c\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        if c == prefix {\n            prefixes.append(prefix)\n\
    \            prefix = \"\"\n        } else {\n            prefix += c\n      \
    \  }\n    }\n    prefixes.append(prefix)\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for c in string {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        currentPrefix = currentPrefix + String(character)\n   \
    \     if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for character in string {\n        if character ==\
    \ currentPrefix[currentPrefix.count] {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + character\n   \
    \     }\n    }\n    return prefixes", "    var prefixes = [String]()\n    for\
    \ c in string {\n        prefixes.append(string[..<string.index(before: c)])\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = currentPrefix + character\n    }\n    prefixes.append(currentPrefix)\n   \
    \ return prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\
    \"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    for c\
    \ in string {\n        prefixes.append(string[..<string.index(before: c)])\n \
    \   }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    for s in string.split(separator: \"\") {\n      \
    \  prefixes.append(s)\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    var currentPrefix = \"\"\n    for c in string {\n        if c == currentPrefix\
    \ {\n            prefixes.append(currentPrefix)\n        } else {\n          \
    \  currentPrefix = currentPrefix + c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for character in string {\n        if character ==\
    \ currentPrefix[currentPrefix.count-1] {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + String(character)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    for\
    \ c in string {\n        prefixes.append(string[..<string.index(before: c)])\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    while current != \"\" {\n        current = current.prefix(string)\n\
    \        prefixes.append(current)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var prefix: String = \"\"\n    for c in string {\n       \
    \ prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        currentPrefix = currentPrefix + c\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = currentPrefix + character\n    }\n    prefixes.append(currentPrefix)\n   \
    \ return prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\
    \"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count-1]\
    \ {\n            currentPrefix = currentPrefix + character\n        } else {\n\
    \            prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes", " \
    \   var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    for c in string {\n        for p in prefixes\
    \ {\n            if c == p {\n                break\n            }\n        }\n\
    \        if p != nil {\n            prefixes.append(p)\n        }\n    }\n   \
    \ return prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n  \
    \  for c in string {\n        if c == prefix {\n            prefixes.append(prefix)\n\
    \        } else {\n            prefix = prefix + c\n        }\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for character in string {\n        currentPrefix = String(currentPrefix) +\
    \ String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for character in string {\n        if character == currentPrefix {\n      \
    \      prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = String(character)\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n            currentPrefix = \"\
    \"\n        } else {\n            currentPrefix = currentPrefix + character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes", " \
    \   var prefixes = [String]()\n    var current = string\n    var longest = 0\n\
    \    while current != \"\" {\n        current = current.prefix(string)\n     \
    \   if current != \"\" {\n            longest = longest.max(current)\n       \
    \     prefixes.append(current)\n        }\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    var current = string\n    for _ in 0..<string.count\
    \ {\n        current = current[1..<current.count]\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    for c in string {\n        prefixes = append(prefixes,\
    \ string[prefixes.endIndex..<string.endIndex])\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        currentPrefix = currentPrefix + c\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix:\
    \ String = \"\"\n    for c in string {\n        prefix += c\n        if prefix\
    \ != \"\" {\n            prefixes.append(prefix)\n            prefix = \"\"\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ prefix = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    var longest = string\n    while current != \"\" {\n        current\
    \ = current.prefix(string)\n        longest = longest.prefix(string)\n       \
    \ prefixes.append(current)\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix =\
    \ currentPrefix + c\n        if currentPrefix.hasPrefix(string) {\n          \
    \  prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var prefix: String = \"\"\n    for c in string\
    \ {\n        prefix += c\n        if prefix != \"\" {\n            prefixes.append(prefix)\n\
    \            prefix = \"\"\n        }\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for character in string {\n\
    \        if character == currentPrefix[currentPrefix.count] {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + character\n   \
    \     }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for c in string {\n        if c == currentPrefix {\n\
    \            prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    for c in string\
    \ {\n        prefixes.append(string[..<string.index(before: c)])\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    var prefix: String = \"\"\n    for c in string {\n\
    \        prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character) + currentPrefix\n\
    \            prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var current = string\n    var longest = 0\n\
    \    for c in current {\n        if longest < len(current) {\n            longest\
    \ = len(current)\n        }\n        current = current[longest..<longest+longest]\n\
    \        prefixes.append(current)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var current = string\n    var currentLength = current.characters.count\n\
    \    while currentLength > 0 {\n        prefixes.append(current)\n        currentLength\
    \ = current.characters.count\n        current = String(current.characters.suffix(currentLength))\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    var longest = string\n    while current != \"\" {\n        current\
    \ = current.prefix(string)\n        if current == \"\" {\n            break\n\
    \        }\n        prefixes.append(current)\n        longest = longest.prefix(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    while current != \"\" {\n        current = current.prefix(string)\n\
    \        prefixes.append(current)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for character in string {\n\
    \        if character == currentPrefix[currentPrefix.count] {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + character\n   \
    \     }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ currentPrefix = \"\"\n    for c in string {\n        if c == currentPrefix {\n\
    \            prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n    for c\
    \ in string {\n        prefix += c\n        if prefixes.contains(prefix) {\n \
    \           prefixes.append(prefix)\n        }\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n\
    \        prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for c in string\
    \ {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var current = string\n    while current != \"\
    \" {\n        prefixes.append(current)\n        current = current[current.startIndex..<current.endIndex]\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix:\
    \ String = \"\"\n    for c in string {\n        if prefix != \"\" {\n        \
    \    prefixes.append(prefix)\n        }\n        prefix = prefix + c\n    }\n\
    \    prefixes.append(prefix)\n    return prefixes", "    var prefixes = [String]()\n\
    \    var current = string\n    var last = \"\"\n    while current != \"\" {\n\
    \        current = last\n        last = current[current.startIndex]\n        prefixes.append(last)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    while current != \"\" {\n        current = current.prefix(string)\n\
    \        prefixes.append(current)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for character in string {\n\
    \        currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ current = string\n    var last = \"\"\n    while current != \"\" {\n       \
    \ current = current.prefix(string)\n        prefixes.append(current)\n       \
    \ last = current\n    }\n    prefixes.append(last)\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var prefix: String = \"\"\n    for c in string\
    \ {\n        prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        if character == currentPrefix[currentPrefix.count] {\n\
    \            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = currentPrefix + character\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var current = string\n    var\
    \ i = 0\n    while i < len(current) {\n        prefixes.append(current[i..<i+1])\n\
    \        i += 1\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix =\
    \ currentPrefix + c\n        if currentPrefix.hasPrefix(string) {\n          \
    \  prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var currentPrefix = \"\"\n    for character\
    \ in string {\n        currentPrefix = String(currentPrefix) + String(character)\n\
    \        prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    for c\
    \ in string {\n        prefixes.append(string[..<string.index(before: c)])\n \
    \   }\n    return prefixes", "    var prefixes = [String]()\n    var current =\
    \ string\n    while current != \"\" {\n        prefixes.append(current)\n    \
    \    current = current[current.startIndex..<current.endIndex]\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n    for c\
    \ in string {\n        prefix += c\n        prefixes.append(prefix)\n    }\n \
    \   return prefixes", "    var prefixes = [String]()\n    var prefix = \"\"\n\
    \    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    for _ in 0..<string.count {\n        current = current[1..<current.count]\n\
    \        prefixes.append(current)\n    }\n    return prefixes", "    var prefixes\
    \ = [String]()\n    var currentPrefix = \"\"\n    for character in string {\n\
    \        if character == currentPrefix[currentPrefix.count-1] {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + character\n   \
    \     }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ prefix = \"\"\n    for c in string {\n        if c == prefix {\n           \
    \ prefixes.append(prefix)\n        } else {\n            prefix = prefix + c\n\
    \            prefixes.append(prefix)\n        }\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var prefix: String = \"\"\n    for c in string\
    \ {\n        prefix += c\n        prefixes.append(prefix)\n    }\n    return prefixes",
  "    var prefixes = [String]()\n    var prefix = \"\"\n    for c in string {\n \
    \       if c == prefix {\n            prefixes.append(prefix)\n            prefix\
    \ = \"\"\n        } else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    var currentPrefix =\
    \ \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n   \
    \     if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes", "    var prefixes = [String]()\n    var\
    \ prefix = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \        prefix = \"\"\n    }\n    return prefixes", "    var prefixes = [String]()\n\
    \    var prefix = \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.startIndex]\
    \ {\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n        } else {\n            prefixes.append(currentPrefix)\n       \
    \     currentPrefix = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    var current = string\n\
    \    var last = \"\"\n    for _ in 0..<string.count {\n        current = last\n\
    \        last = string[string.index(string.startIndex, offsetBy: 1)]\n       \
    \ prefixes.append(current)\n    }\n    return prefixes"]
stop_tokens:
- "\n}"
