name: HumanEval_14_all_prefixes
language: swift
prompt: "\n/// Return list of all prefixes from shortest to longest of the input string\n\
  /// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string: String)\
  \ -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
  assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"\
  WWW\"])"
completions: ["    var prefixes = [String]()\n    var currentPrefix = \"\"\n    for\
    \ c in string {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes", "  \
    \  var prefixes = [String]()\n    var current = string\n    while current != \"\
    \" {\n        current = current.prefix(string)\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.startIndex]\
    \ {\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n        } else {\n            prefixes.append(currentPrefix)\n       \
    \     currentPrefix = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes", "    var prefixes = [String]()\n    var currentPrefix =\
    \ \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = String(currentPrefix)\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\"\n  \
    \  for c in string {\n        currentPrefix = currentPrefix + c\n        if currentPrefix.count\
    \ > prefixes.count {\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var current\
    \ = string\n    var longest = string\n    for _ in 0..<string.count {\n      \
    \  current = longest\n        longest = \"\"\n        for _ in 0..<string.count\
    \ {\n            current = current + string\n            if current.hasPrefix(string)\
    \ {\n                longest = current\n                break\n            }\n\
    \        }\n        prefixes.append(longest)\n    }\n    return prefixes", " \
    \   var prefixes = [String]()\n    var current = string\n    while current !=\
    \ \"\" {\n        prefixes.append(current)\n        current = prefixes.last!\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var prefix =\
    \ \"\"\n    for c in string {\n        prefix += c\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        if character == currentPrefix[currentPrefix.count]\
    \ {\n            prefixes.append(currentPrefix)\n        }\n        currentPrefix\
    \ = currentPrefix + character\n    }\n    prefixes.append(currentPrefix)\n   \
    \ return prefixes", "    var prefixes = [String]()\n    var currentPrefix = \"\
    \"\n    for c in string {\n        if c == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = currentPrefix + c\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes", "    var\
    \ prefixes = [String]()\n    for c in string {\n        prefixes.append(string[..<string.index(before:\
    \ c)])\n    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for character in string {\n        currentPrefix = currentPrefix\
    \ + String(character)\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes", "    var prefixes = [String]()\n    var current = string\n    while\
    \ current != \"\" {\n        current = current.prefix(string)\n        prefixes.append(current)\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        if c == currentPrefix {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = currentPrefix + c\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes", "    var prefixes = [String]()\n    var currentPrefix\
    \ = \"\"\n    for c in string {\n        currentPrefix = currentPrefix + c\n \
    \       prefixes.append(currentPrefix)\n    }\n    return prefixes"]
stop_tokens:
- "\n}"
