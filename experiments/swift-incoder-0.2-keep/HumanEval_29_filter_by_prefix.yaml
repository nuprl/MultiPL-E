name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfunc filter_by_prefix(strings:\
  \ [String], prefix: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ["\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\t\
    return filtered", "    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.Contains(prefix) {\n        return strings.FilterString(func(s\
    \ string) bool {\n            return strings.HasPrefix(s, prefix)\n        })\n\
    \    }\n    return strings", "\tlet filtered = strings.filter { (string: String)\
    \ -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\t\
    let filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\tlet prefix = prefix.lowercased()\n\treturn strings.filter {\n\t\
    \t$0.hasPrefix(prefix)\n\t}", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter { (string: String) ->\
    \ Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet\
    \ prefix = prefix.lowercased()\n\treturn strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}", "\tlet filtered = strings.filter { (string: String) -> Bool in\n\t\treturn\
    \ string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tif strings.IsNullOrEmpty(prefix)\
    \ {\n\t\treturn strings\n\t}\n\tstrings = strings.ToLower()\n\tprefix = prefix.ToLower()\n\
    \tresult := make([]string, 0)\n\tfor _, s := range strings {\n\t\tif strings.HasPrefix(s,\
    \ prefix) {\n\t\t\tresult = append(result, s)\n\t\t}\n\t}\n\treturn result", "\t\
    let filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  '    return strings.filter({ $0.hasPrefix(prefix) })', "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "\tprefix +=\
    \ \".\"\n\treturn strings.filter({ $0.hasPrefix(prefix) })", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.startsWith(prefix) {\n  \
    \          filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "\tif strings.IsNullOrEmpty(prefix) {\n\t\treturn strings\n\t}\n\tprefix += \".\"\
    \n\treturn strings.SplitN(strings, prefix, -1)"]
stop_tokens:
- "\n}"
