name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfunc filter_by_prefix(strings:\
  \ [String], prefix: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ["\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\t\
    return filtered", "    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.Contains(prefix) {\n        return strings.FilterString(func(s\
    \ string) bool {\n            return strings.HasPrefix(s, prefix)\n        })\n\
    \    }\n    return strings", "\tlet filtered = strings.filter { (string: String)\
    \ -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\t\
    let filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\tlet prefix = prefix.lowercased()\n\treturn strings.filter {\n\t\
    \t$0.hasPrefix(prefix)\n\t}", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter { (string: String) ->\
    \ Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet\
    \ prefix = prefix.lowercased()\n\treturn strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}", "\tlet filtered = strings.filter { (string: String) -> Bool in\n\t\treturn\
    \ string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tif strings.IsNullOrEmpty(prefix)\
    \ {\n\t\treturn strings\n\t}\n\tstrings = strings.ToLower()\n\tprefix = prefix.ToLower()\n\
    \tresult := make([]string, 0)\n\tfor _, s := range strings {\n\t\tif strings.HasPrefix(s,\
    \ prefix) {\n\t\t\tresult = append(result, s)\n\t\t}\n\t}\n\treturn result", "\t\
    let filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  '    return strings.filter({ $0.hasPrefix(prefix) })', "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "\tprefix +=\
    \ \".\"\n\treturn strings.filter({ $0.hasPrefix(prefix) })", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.startsWith(prefix) {\n  \
    \          filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "\tif strings.IsNullOrEmpty(prefix) {\n\t\treturn strings\n\t}\n\tprefix += \".\"\
    \n\treturn strings.SplitN(strings, prefix, -1)", "    return strings.filter {\
    \ (string: String) -> Bool in\n        let prefixLength = string.characters.count\n\
    \        return string.hasPrefix(prefix)\n    }", "\tlet filtered = strings.filter\
    \ { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\t\
    return filtered", "\tprefix = prefix.lowercased()\n\tstrings = strings.filter({\
    \ $0.hasPrefix(prefix) })\n\treturn strings", "    var filtered: [String] = []\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.Contains(prefix) {\n      \
    \  return strings.filter({ $0.hasPrefix(prefix) })\n    }\n    return strings",
  "\tlet prefix = prefix.lowercased()\n\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings", "    var filtered = [String]()\n    for s in\
    \ strings {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tprefix += \"\"\n\t\
    strings = strings.filter({ $0.hasPrefix(prefix) })\n\treturn strings", '    return
    filter_by_prefix(strings, prefix, true)', "\tlet filtered = strings.filter {\n\
    \t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "\tlet prefix\
    \ = prefix.lowercased()\n\treturn strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}", "\tprefix = prefix.lowercased()\n\tfiltered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter { (string: String) ->\
    \ Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet\
    \ filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    return strings.filter {\n \
    \       strings.firstIndex(of: $0, options: .caseInsensitive) != nil\n    }.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }", "\treturn strings.filter({ $0.hasPrefix(prefix)\
    \ })", '    return filter_by_prefix(strings, prefix, true)', "\tlet prefixes =\
    \ strings.map { $0.startsWith(prefix) }\n\treturn strings.filter {\n\t\t$0.startsWith(prefix)\n\
    \t}", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn\
    \ filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t\
    }\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter { (string: String) ->\
    \ Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", '    return
    strings.filter({ $0.hasPrefix(prefix) })', "\tlet filtered = strings.filter {\n\
    \t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "    var filtered: [String]\
    \ = []\n    for s in strings {\n        if s.startsWith(prefix) {\n          \
    \  filtered = append(filtered, s)\n        }\n    }\n    return filtered", "\t\
    filteredStrings := strings.filter({ $0.hasPrefix(prefix) })\n\treturn filteredStrings",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.startsWith(prefix) {\n            filtered = append(filtered, s)\n       \
    \ }\n    }\n    return filtered", "    var filtered: [String] = []\n    for s\
    \ in strings {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\t\
    return filtered", "\treturn strings.filter({ $0.hasPrefix(prefix) })", '    return
    filter_by_prefix(strings, prefix, true)', "\tlet filtered = strings.filter { (string:\
    \ String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t\
    }\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.IsPrefix(prefix) {\n      \
    \  return strings.Substr(prefix.Length)\n    }\n    return strings", "\tlet filtered\
    \ = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", '    return filter_by_prefix(strings, prefix, true)',
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t\
    }\n\treturn filtered", "\tif strings.IsNullOrEmpty(prefix) {\n\t\treturn strings\n\
    \t}\n\tfilteredStrings := strings.FilterStrings(strings.HasPrefix, strings)\n\t\
    return filteredStrings", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "\tlet filtered = strings.filter\
    \ { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\t\
    return filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet prefixes = strings.map { $0.prefix(prefix) }\n\
    \treturn strings.filter { prefixes.contains($0) }", "\tprefix += \" \"\n\tstrings\
    \ = strings.filter({ $0.hasPrefix(prefix) })\n\treturn strings", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.startsWith(prefix) {\n  \
    \          filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\treturn filter_by_prefix(strings, prefix, true)", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tif strings.IsNullOrEmpty(prefix)\
    \ {\n\t\treturn strings\n\t}\n\treturn strings.filter({ $0.hasPrefix(prefix) })",
  '    return filter_by_prefix(strings, prefix, true)', '    return filter_by_prefix(strings,
    prefix, true)', "    if strings.IsEmpty() {\n        return strings\n    }\n \
    \   if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return []", "\tlet prefix = prefix.lowercased()\n\treturn strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}", "\treturn filter_by_prefix(strings, prefix,\
    \ true)", "\tprefix = prefix.lowercased()\n\tfiltered = strings.filter {\n\t\t\
    $0.hasPrefix(prefix)\n\t}\n\treturn filtered", "    if strings.IsEmpty() {\n \
    \       return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return\
    \ strings.SplitN(prefix, 1, strings)\n    }\n    return strings", '    return
    filter_by_prefix(strings, prefix, true)', "\tlet filtered = strings.filter {\n\
    \t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", '    return filter_by_prefix(strings,
    prefix, true)', '    return filter_by_prefix(strings, prefix, true)', "\tlet filtered\
    \ = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet\
    \ filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  '    return filter_by_prefix(strings, prefix, true)', "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tprefix = prefix.lowercased()\n\
    \tstrings = strings.filter({ $0.hasPrefix(prefix) })\n\treturn strings", '    return
    strings.filter({ $0.hasPrefix(prefix) })', "\treturn filter_by_prefix(strings,\
    \ prefix, true)", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter { (string: String) ->\
    \ Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet\
    \ filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\treturn filter_by_prefix(strings, prefix, true)", " \
    \   var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "    var filtered = [String]()\n    for s in strings {\n        if\
    \ s.startsWith(prefix) {\n            filtered = append(filtered, s)\n       \
    \ }\n    }\n    return filtered", "\tprefix = prefix.lowercased()\n\tstrings =\
    \ strings.filter({ $0.hasPrefix(prefix) })\n\treturn strings", "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.startsWith(prefix) {\n  \
    \          filtered = append(filtered, s)\n        }\n    }\n    return filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    return strings.filter { (string)\
    \ -> Bool in\n        let prefixLength = string.characters.count\n        let\
    \ prefixIndex = string.characters.index(string.startIndex, offsetBy: prefixLength)\n\
    \        return prefixIndex != nil\n    }", "    var filtered = [String]()\n \
    \   for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", '    return filter_by_prefix(strings,
    prefix, true)', "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", '    return filter_by_prefix(strings, prefix, true)',
  "\tlet filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", '    return filter_by_prefix(strings, prefix, true)',
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.HasPrefix(prefix)\
    \ {\n        return strings.SplitN(prefix, 1, strings)\n    }\n    return []",
  "\tlet filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.HasPrefix(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    }\n    return strings", "\tlet filtered = strings.filter { (string:\
    \ String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\treturn filter_by_prefix(strings, prefix, true)", "    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.Contains(prefix) {\n      \
    \  return strings.filter({ $0.hasPrefix(prefix) })\n    }\n    return []", "\t\
    return filter_by_prefix(strings, prefix, true)", "\tlet filtered = strings.filter\
    \ { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\t\
    return filtered", "    var filtered = [String]()\n    for s in strings {\n   \
    \     if s.startsWith(prefix) {\n            filtered = append(filtered, s)\n\
    \        }\n    }\n    return filtered", "\tlet filtered = strings.filter {\n\t\
    \t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", '    return filter_by_prefix(strings,
    prefix, true)', "\tif strings.IsNullOrEmpty(prefix) {\n\t\treturn strings\n\t\
    }\n\tstrings = strings.ToLower()\n\tprefix = prefix.ToLower()\n\treturn strings.SplitN(strings,\
    \ prefix, func(i int, s string) bool {\n\t\treturn strings.HasPrefix(s, prefix)\n\
    \t})", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn\
    \ filtered", '    return filter_by_prefix(strings, prefix, true)', "\treturn filter_by_prefix(strings,\
    \ prefix, true)", "    if strings.IsEmpty() {\n        return strings\n    }\n\
    \    if strings.HasPrefix(prefix) {\n        return strings.SplitN(prefix, 1,\
    \ strings)\n    }\n    return []", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet prefix = prefix.lowercased()\n\treturn strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}", "\tlet filtered = strings.filter {\n\t\t\
    $0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet filtered = strings.filter\
    \ {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "    if strings.IsEmpty()\
    \ {\n        return strings\n    }\n    if strings.HasPrefix(prefix) {\n     \
    \   return strings.SplitN(prefix, 1, strings)\n    }\n    return []", "\tprefix\
    \ += \"\"\n\treturn strings.filter({ $0.hasPrefix(prefix) })", "\tlet filtered\
    \ = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet\
    \ filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "\tprefix +=\
    \ \" \"\n\tstrings = strings.filter({ $0.hasPrefix(prefix) })\n\treturn strings",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t\
    }\n\treturn filtered", "\tlet filtered = strings.filter { (string: String) ->\
    \ Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "   \
    \ if strings.IsEmpty() {\n        return strings\n    }\n    if strings.IsSingle()\
    \ && strings.First().StartsWith(prefix) {\n        return strings.Take(1)\n  \
    \  }\n    return strings", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "\tlet filtered = strings.filter\
    \ { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\t\
    return filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet filtered = strings.filter { (string: String) ->\
    \ Bool in\n\t\treturn string.hasPrefix(prefix)\n\t}\n\treturn filtered", "   \
    \ var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t\
    }\n\treturn filtered", "\treturn filter_by_prefix(strings, prefix, true)", "\t\
    let prefixes = strings.map { $0.prefix(prefix) }\n\treturn strings.filter {\n\t\
    \t$0.prefix(prefix) == true || prefixes.contains($0)\n\t}", '    return filter_by_prefix(strings,
    prefix, true)', "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    if strings.IsEmpty() {\n        return strings\n\
    \    }\n    if strings.Contains(prefix) {\n        return strings.filter({ $0.hasPrefix(prefix)\
    \ })\n    } else {\n        return strings\n    }", "\tlet prefixes = strings.map\
    \ { $0.hasPrefix(prefix) }\n\treturn strings.filter { prefixes.contains($0) }",
  "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "    if strings.IsEmpty() {\n        return strings\n    }\n    if strings.HasPrefix(prefix)\
    \ {\n        return strings.SplitN(prefix, 1, strings)\n    }\n    return strings",
  "\tlet filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "\tlet prefixes = strings.map { $0.startsWith(prefix)\
    \ }\n\treturn strings.filter { prefixes.contains($0) }", "\tif strings.IsNullOrEmpty(prefix)\
    \ {\n\t\treturn strings\n\t}\n\tvar filtered = [String]()\n\tfor _, s := range\
    \ strings {\n\t\tif strings.HasPrefix(s, prefix) {\n\t\t\tfiltered = append(filtered,\
    \ s)\n\t\t}\n\t}\n\treturn filtered", "\tif strings.IsNullOrEmpty(prefix) {\n\t\
    \treturn strings\n\t}\n\tfilteredStrings := make([]string, 0)\n\tfor _, s := range\
    \ strings {\n\t\tif strings.HasPrefix(s, prefix) {\n\t\t\tfilteredStrings = append(filteredStrings,\
    \ s)\n\t\t}\n\t}\n\treturn filteredStrings", '    return filter_by_prefix(strings,
    prefix, true)', '    return filter_by_prefix(strings, prefix, true)', "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered = append(filtered, s)\n        }\n    }\n    return\
    \ filtered", "\tlet filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t\
    }\n\treturn filtered", "\tprefix += \"\"\n\tstrings = strings.filter({ $0.hasPrefix(prefix)\
    \ })\n\treturn strings", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    var filtered = [String]()\n\
    \    for s in strings {\n        if s.startsWith(prefix) {\n            filtered\
    \ = append(filtered, s)\n        }\n    }\n    return filtered", "\tlet filtered\
    \ = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered", "\tlet\
    \ filtered = strings.filter {\n\t\t$0.hasPrefix(prefix)\n\t}\n\treturn filtered",
  "\tlet filtered = strings.filter { (string: String) -> Bool in\n\t\treturn string.hasPrefix(prefix)\n\
    \t}\n\treturn filtered", "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.startsWith(prefix) {\n            filtered = append(filtered,\
    \ s)\n        }\n    }\n    return filtered", "    if strings.IsEmpty() {\n  \
    \      return strings\n    }\n    if strings.HasPrefix(prefix) {\n        return\
    \ strings.SplitN(prefix, 1, strings)\n    }\n    return []"]
stop_tokens:
- "\n}"
