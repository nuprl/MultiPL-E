language: swift
name: HumanEval_9_rolling_max
results:
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [Int](repeating: number,\
    \ count: index + 1)\n        }\n        max[index] = number\n        index +=\
    \ 1\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9f7026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9f6d1d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9f6d1d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9f6d1d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9f6d1cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba9f6b1ce83 <unavailable> + 188035

    6    tmp7gntu4mb                        0x0000561f991e7b83 <unavailable> + 7043

    7    tmp7gntu4mb                        0x0000561f991e7695 <unavailable> + 5781

    8    libc.so.6                          0x00002ba9f7212460 __libc_start_main +
    245

    9    tmp7gntu4mb                        0x0000561f991e7299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var maxIndex = -1\n    for index in\
    \ 1..<numbers.count {\n        if numbers[index] > max {\n            max = numbers[index]\n\
    \            maxIndex = index\n        }\n    }\n    return numbers[maxIndex..<numbers.count]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpd35ncxz7.swift:15:19: error: cannot convert return expression of\
    \ type 'ArraySlice<Int>' to return type '[Int]'\n    return numbers[maxIndex..<numbers.count]\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n    for\
    \ number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab324985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32467c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab32467c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab32467c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab32467bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab32447be83 <unavailable> + 188035

    6    tmpryf51ng7                        0x000055c69ecffa52 <unavailable> + 6738

    7    tmpryf51ng7                        0x000055c69ecff52d <unavailable> + 5421

    8    libc.so.6                          0x00002ab324b71460 __libc_start_main +
    245

    9    tmpryf51ng7                        0x000055c69ecff239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers[0]\n   \
    \ for number in numbers {\n        if number > max {\n            max = number\n\
    \        }\n        if number > rolling_max {\n            rolling_max = number\n\
    \        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpxwijr1gr.swift:17:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[Int]'\n    return rolling_max\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    for index in 1..<numbers.count {\n        if numbers[index] > max_so_far\
    \ {\n            max_so_far = numbers[index]\n            max_so_far_index = index\n\
    \        }\n    }\n    return Array(numbers[max_so_far_index..<numbers.count])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aace3bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aace38b5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aace38b5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aace38b513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aace38b4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aace36b4e83 <unavailable> + 188035

    6    tmpvjmjsqur                        0x0000559091ab8b78 <unavailable> + 7032

    7    tmpvjmjsqur                        0x0000559091ab864d <unavailable> + 5709

    8    libc.so.6                          0x00002aace3daa460 __libc_start_main +
    245

    9    tmpvjmjsqur                        0x0000559091ab8359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpgt_ac2ju/tmpgt_ac2ju.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab97447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab9713eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab9713e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab9713d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgt_ac2ju                        0x000055f53c56f66d <unavailable> + 5741

    5    libc.so.6                          0x00002aab97633460 __libc_start_main +
    245

    6    tmpgt_ac2ju                        0x000055f53c56f189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if index == 0 {\n            max = number\n        } else {\n   \
    \         if number > max[index] {\n                max[index] = number\n    \
    \        }\n        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp0hs2r0c_.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = number\n                  ^~~~~~\n/tmp/tmp0hs2r0c_.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for number in\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ maxIndex = numbers.indexOf(max)\n        }\n    }\n    return numbers[maxIndex..<numbers.count]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpi_y2344v.swift:12:32: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            maxIndex = numbers.indexOf(max)\n                   \
    \    ~~~~~~~ ^~~~~~~\n/tmp/tmpi_y2344v.swift:15:19: error: cannot convert return\
    \ expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return numbers[maxIndex..<numbers.count]\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers {\n\
    \        if index == 0 {\n            max = n\n        } else {\n            if\
    \ n > max[index] {\n                max = [n]\n            } else {\n        \
    \        max[index] = n\n            }\n        }\n        index += 1\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp1dsa3v4d.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = n\n                  ^\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number in numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpwls9rwqp/tmpwls9rwqp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b35287c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b34f7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b34f7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b34f7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwls9rwqp                        0x0000561fb11f56cd <unavailable> + 5837

    5    libc.so.6                          0x00002b6b35473460 __libc_start_main +
    245

    6    tmpwls9rwqp                        0x0000561fb11f51e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n    for\
    \ number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab324985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32467c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab32467c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab32467c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab32467bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab32447be83 <unavailable> + 188035

    6    tmpryf51ng7                        0x000055c69ecffa52 <unavailable> + 6738

    7    tmpryf51ng7                        0x000055c69ecff52d <unavailable> + 5421

    8    libc.so.6                          0x00002ab324b71460 __libc_start_main +
    245

    9    tmpryf51ng7                        0x000055c69ecff239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    for number in numbers {\n        if number > max_so_far {\n            max_so_far\
    \ = number\n            max_so_far_index = numbers.indexOf(number)\n        }\n\
    \    }\n    var result = [Int]()\n    for number in numbers {\n        if number\
    \ == max_so_far {\n            result.append(number)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmptbhl487v.swift:12:40: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            max_so_far_index = numbers.indexOf(number)\n        \
    \                       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var max_idx = 1\n    for idx in 1..<numbers.count\
    \ {\n        if numbers[idx] > max {\n            max = numbers[idx]\n       \
    \     max_idx = idx\n        }\n    }\n    var result = [Int]()\n    result.append(max)\n\
    \    result.append(numbers[max_idx])\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad84117bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad840e72561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad840e72286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad840e7213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad840e71bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad840c71e83 <unavailable> + 188035

    6    tmpvasmmlus                        0x00005563b2103ae8 <unavailable> + 6888

    7    tmpvasmmlus                        0x00005563b21035ad <unavailable> + 5549

    8    libc.so.6                          0x00002ad841367460 __libc_start_main +
    245

    9    tmpvasmmlus                        0x00005563b21032b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var rollingMax = [Int]()\n    var currentMax\
    \ = numbers[0]\n    for number in numbers {\n        if number > currentMax {\n\
    \            rollingMax.append(currentMax)\n            max = [Int]()\n      \
    \  }\n        max.append(number)\n        currentMax = number\n    }\n    rollingMax.append(currentMax)\n\
    \    return rollingMax\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3ec6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3ec3f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3ec3f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3ec3f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3ec3f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab3ec1f5e83 <unavailable> + 188035

    6    tmpy1root7m                        0x00005642462afa81 <unavailable> + 6785

    7    tmpy1root7m                        0x00005642462af52d <unavailable> + 5421

    8    libc.so.6                          0x00002ab3ec8eb460 __libc_start_main +
    245

    9    tmpy1root7m                        0x00005642462af239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpgt_ac2ju/tmpgt_ac2ju.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab97447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab9713eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab9713e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab9713d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgt_ac2ju                        0x000055f53c56f66d <unavailable> + 5741

    5    libc.so.6                          0x00002aab97633460 __libc_start_main +
    245

    6    tmpgt_ac2ju                        0x000055f53c56f189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var max: Int = 0\n    for number\
    \ in numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number == max {\n            result.append(number)\n\
    \        } else {\n            result.append(max)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmposj5__1t/tmposj5__1t.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c172cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c1423b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3c1423988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3c14227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposj5__1t                        0x0000561a75a7866d <unavailable> + 5741

    5    libc.so.6                          0x00002af3c1918460 __libc_start_main +
    245

    6    tmposj5__1t                        0x0000561a75a78189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [number]\n        } else\
    \ {\n            max = [number] + max\n        }\n        index++\n    }\n   \
    \ return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp8njluq35.swift:15:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers\n    for\
    \ i in 1..numbers.count {\n        if rolling_max[i-1] > max {\n            max\
    \ = rolling_max[i-1]\n        }\n    }\n    return rolling_max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpb7pyb6i5.swift:9:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..numbers.count {\n              ^~\n   \
    \           ...\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    for index in 1..<numbers.count {\n        if numbers[index] > max_so_far\
    \ {\n            max_so_far = numbers[index]\n            max_so_far_index = index\n\
    \        }\n    }\n    return numbers[max_so_far_index..<numbers.count]\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp3t5ogvrk.swift:15:19: error: cannot convert return expression of\
    \ type 'ArraySlice<Int>' to return type '[Int]'\n    return numbers[max_so_far_index..<numbers.count]\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [number]\n        } else\
    \ {\n            max = append(max, number)\n        }\n        index++\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpc24zbgi4.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmpc24zbgi4.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for number in\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ maxIndex = numbers.indexOf(max)\n        }\n    }\n    return numbers.suffix(maxIndex\
    \ + 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp60mi2id6.swift:12:32: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            maxIndex = numbers.indexOf(max)\n                   \
    \    ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n    for\
    \ number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab324985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32467c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab32467c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab32467c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab32467bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab32447be83 <unavailable> + 188035

    6    tmpryf51ng7                        0x000055c69ecffa52 <unavailable> + 6738

    7    tmpryf51ng7                        0x000055c69ecff52d <unavailable> + 5421

    8    libc.so.6                          0x00002ab324b71460 __libc_start_main +
    245

    9    tmpryf51ng7                        0x000055c69ecff239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    var max_so_far_rolling_max = 0\n    for number in numbers {\n        if number\
    \ > max_so_far {\n            max_so_far = number\n            max_so_far_index\
    \ = numbers.indexOf(number)\n            max_so_far_rolling_max = number\n   \
    \     }\n    }\n    var result = [Int]()\n    for number in numbers {\n      \
    \  if number == max_so_far {\n            result.append(max_so_far_rolling_max)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpt2b7j9go.swift:13:40: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            max_so_far_index = numbers.indexOf(number)\n        \
    \                       ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    for number in numbers {\n        if number > max_so_far {\n            max_so_far\
    \ = number\n            max_so_far_index = numbers.index(of: number)\n       \
    \ }\n    }\n    var result = [Int]()\n    for number in numbers {\n        if\
    \ number == max_so_far {\n            result.append(number)\n        } else {\n\
    \            result.append(max_so_far)\n        }\n    }\n    result.append(max_so_far)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmps7fqzo48.swift:12:40: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            max_so_far_index = numbers.index(of: number)\n    \
    \                                   ^\n/tmp/tmps7fqzo48.swift:12:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         max_so_far_index = numbers.index(of: number)\n                     \
    \                  ^\n                                                       \
    \  ?? <#default value#>\n/tmp/tmps7fqzo48.swift:12:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            max_so_far_index\
    \ = numbers.index(of: number)\n                                       ^\n    \
    \                                                    !\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [Int](repeating: number,\
    \ count: index + 1)\n        }\n        max[index] = number\n        index = (index\
    \ + 1) % number.count\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmps2xyiau_.swift:14:38: error: value of type 'Int' has no member\
    \ 'count'\n        index = (index + 1) % number.count\n                      \
    \        ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [number]\n        } else\
    \ {\n            max = append(max, number)\n        }\n        index++\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpc24zbgi4.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmpc24zbgi4.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for n in numbers {\n\
    \        if index == 0 {\n            max = append(max, n)\n        } else {\n\
    \            if n > max[index] {\n                max = append(max, n)\n     \
    \       }\n        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpjcu251d6.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, n)\n                  ^~~~~~\n/tmp/tmpjcu251d6.swift:14:23:\
    \ error: cannot find 'append' in scope\n                max = append(max, n)\n\
    \                      ^~~~~~\n/tmp/tmpjcu251d6.swift:17:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        index++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    for number in numbers {\n        if number > max_so_far {\n            max_so_far\
    \ = number\n            max_so_far_index = numbers.indexOf(number)\n        }\n\
    \    }\n    var result = [Int]()\n    for number in numbers {\n        if number\
    \ == max_so_far {\n            result.append(number)\n        }\n    }\n    result.removeAtIndex(max_so_far_index)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpw8kqchj1.swift:12:40: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            max_so_far_index = numbers.indexOf(number)\n        \
    \                       ~~~~~~~ ^~~~~~~\n/tmp/tmpw8kqchj1.swift:21:12: error:\
    \ value of type '[Int]' has no member 'removeAtIndex'\n    result.removeAtIndex(max_so_far_index)\n\
    \    ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var max_idx = 1\n    for idx in 1..<numbers.count\
    \ {\n        if numbers[idx] > max {\n            max = numbers[idx]\n       \
    \     max_idx = idx\n        }\n    }\n    return Array(numbers[1..<max_idx])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac89a4f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac89a1e7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac89a1e7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac89a1e713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac89a1e6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac899fe6e83 <unavailable> + 188035

    6    tmpecckngj5                        0x0000556b04776b78 <unavailable> + 7032

    7    tmpecckngj5                        0x0000556b0477664d <unavailable> + 5709

    8    libc.so.6                          0x00002ac89a6dc460 __libc_start_main +
    245

    9    tmpecckngj5                        0x0000556b04776359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    for number in numbers {\n        if number > max_so_far {\n            max_so_far\
    \ = number\n            max_so_far_index = numbers.index(of: number)\n       \
    \ }\n    }\n    return numbers[max_so_far_index..<numbers.count]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp0ocgv9p6.swift:12:40: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            max_so_far_index = numbers.index(of: number)\n    \
    \                                   ^\n/tmp/tmp0ocgv9p6.swift:12:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         max_so_far_index = numbers.index(of: number)\n                     \
    \                  ^\n                                                       \
    \  ?? <#default value#>\n/tmp/tmp0ocgv9p6.swift:12:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            max_so_far_index\
    \ = numbers.index(of: number)\n                                       ^\n    \
    \                                                    !\n/tmp/tmp0ocgv9p6.swift:15:19:\
    \ error: cannot convert return expression of type 'ArraySlice<Int>' to return\
    \ type '[Int]'\n    return numbers[max_so_far_index..<numbers.count]\n       \
    \    ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers.first!\n    var max_so_far_index =\
    \ 0\n    for number in numbers {\n        if number > max_so_far {\n         \
    \   max_so_far = number\n            max_so_far_index = numbers.index(of: number)\n\
    \        }\n    }\n    var result = [Int]()\n    for number in numbers {\n   \
    \     if number == max_so_far {\n            result.append(number)\n        }\
    \ else {\n            result.append(max_so_far)\n        }\n    }\n    result.append(max_so_far)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpyfe9bw3k.swift:12:40: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            max_so_far_index = numbers.index(of: number)\n    \
    \                                   ^\n/tmp/tmpyfe9bw3k.swift:12:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         max_so_far_index = numbers.index(of: number)\n                     \
    \                  ^\n                                                       \
    \  ?? <#default value#>\n/tmp/tmpyfe9bw3k.swift:12:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            max_so_far_index\
    \ = numbers.index(of: number)\n                                       ^\n    \
    \                                                    !\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = append(max, number)\n\
    \        } else {\n            index = index + 1\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpam2rs6z5.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number in numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp705bzejx/tmp705bzejx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b782c10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b782be02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b782be02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b782be017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp705bzejx                        0x00005559709996cd <unavailable> + 5837

    5    libc.so.6                          0x00002b782c2f7460 __libc_start_main +
    245

    6    tmp705bzejx                        0x00005559709991e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n    for\
    \ number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab324985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32467c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab32467c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab32467c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab32467bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab32447be83 <unavailable> + 188035

    6    tmpryf51ng7                        0x000055c69ecffa52 <unavailable> + 6738

    7    tmpryf51ng7                        0x000055c69ecff52d <unavailable> + 5421

    8    libc.so.6                          0x00002ab324b71460 __libc_start_main +
    245

    9    tmpryf51ng7                        0x000055c69ecff239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for number in\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ maxIndex = numbers.indexOf(max)\n        }\n    }\n    return numbers[maxIndex..<numbers.count]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpi_y2344v.swift:12:32: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            maxIndex = numbers.indexOf(max)\n                   \
    \    ~~~~~~~ ^~~~~~~\n/tmp/tmpi_y2344v.swift:15:19: error: cannot convert return\
    \ expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return numbers[maxIndex..<numbers.count]\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var maxIndex = 0\n    for number in\
    \ numbers {\n        if number > max {\n            max = number\n           \
    \ maxIndex = numbers.indexOf(number)\n        }\n    }\n    return numbers[maxIndex..<numbers.count]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmp927cuh49.swift:12:32: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            maxIndex = numbers.indexOf(number)\n                \
    \       ~~~~~~~ ^~~~~~~\n/tmp/tmp927cuh49.swift:15:19: error: cannot convert return\
    \ expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return numbers[maxIndex..<numbers.count]\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var max: Int = 0\n    for number in\
    \ numbers {\n        if number > max {\n            max = number\n        }\n\
    \    }\n    for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmpqd9kd9tr/tmpqd9kd9tr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b88734c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b8842bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b8842b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b8842a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqd9kd9tr                        0x000055ee0c4216cd <unavailable> + 5837

    5    libc.so.6                          0x00002b9b88920460 __libc_start_main +
    245

    6    tmpqd9kd9tr                        0x000055ee0c4211e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if index == 0 {\n            max = number\n        } else {\n   \
    \         if number > max[index] {\n                max = number\n           \
    \ }\n        }\n        index += 1\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpptj5nspp.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = number\n                  ^~~~~~\n/tmp/tmpptj5nspp.swift:14:23:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n                max\
    \ = number\n                      ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var max = 0\n    for number in numbers\
    \ {\n        if number > max {\n            max = number\n        }\n    }\n \
    \   for number in numbers {\n        if number > max {\n            result.append(number)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'tmp705bzejx/tmp705bzejx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b782c10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b782be02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b782be02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b782be017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp705bzejx                        0x00005559709996cd <unavailable> + 5837

    5    libc.so.6                          0x00002b782c2f7460 __libc_start_main +
    245

    6    tmp705bzejx                        0x00005559709991e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [number]\n        } else\
    \ {\n            max = append(max, number)\n        }\n        index++\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpc24zbgi4.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmpc24zbgi4.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_count = 0\n\
    \    var max_so_far_index = 0\n    for number in numbers {\n        if number\
    \ > max_so_far {\n            max_so_far = number\n            max_so_far_count\
    \ = 0\n            max_so_far_index = number\n        } else if number == max_so_far\
    \ {\n            max_so_far_count += 1\n        }\n    }\n    var result = [Int]()\n\
    \    for number in numbers {\n        if number == max_so_far {\n            result.append(max_so_far_index)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8389e14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8389b0b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8389b0b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8389b0b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8389b0abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b838990ae83 <unavailable> + 188035

    6    tmpv69706j3                        0x000055d650ac6a9e <unavailable> + 6814

    7    tmpv69706j3                        0x000055d650ac652d <unavailable> + 5421

    8    libc.so.6                          0x00002b838a000460 __libc_start_main +
    245

    9    tmpv69706j3                        0x000055d650ac6239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rollingMax = [Int]()\n    for\
    \ number in numbers {\n        if number > max {\n            rollingMax.append(max)\n\
    \            max = number\n        } else {\n            max = number\n      \
    \  }\n    }\n    rollingMax.append(max)\n    return rollingMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab324985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab32467c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab32467c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab32467c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab32467bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab32447be83 <unavailable> + 188035

    6    tmpryf51ng7                        0x000055c69ecffa52 <unavailable> + 6738

    7    tmpryf51ng7                        0x000055c69ecff52d <unavailable> + 5421

    8    libc.so.6                          0x00002ab324b71460 __libc_start_main +
    245

    9    tmpryf51ng7                        0x000055c69ecff239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    var max_so_far_max = numbers[0]\n    for number in numbers {\n        if\
    \ number > max_so_far {\n            max_so_far = number\n            max_so_far_index\
    \ = numbers.index(of: number)\n            max_so_far_max = number\n        }\n\
    \    }\n    var result = [Int]()\n    for i in 0..<numbers.count {\n        if\
    \ numbers[i] > max_so_far_max {\n            result.append(numbers[i])\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpdkthexul.swift:13:40: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            max_so_far_index = numbers.index(of: number)\n    \
    \                                   ^\n/tmp/tmpdkthexul.swift:13:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         max_so_far_index = numbers.index(of: number)\n                     \
    \                  ^\n                                                       \
    \  ?? <#default value#>\n/tmp/tmpdkthexul.swift:13:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            max_so_far_index\
    \ = numbers.index(of: number)\n                                       ^\n    \
    \                                                    !\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_so_far = numbers[0]\n    var max_so_far_index = 0\n\
    \    for number in numbers {\n        if number > max_so_far {\n            max_so_far\
    \ = number\n            max_so_far_index = numbers.index(of: number)\n       \
    \ }\n    }\n    var result = [Int]()\n    for number in numbers {\n        if\
    \ number == max_so_far {\n            result.append(number)\n        } else {\n\
    \            result.append(max_so_far)\n        }\n    }\n    result.append(max_so_far)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmps7fqzo48.swift:12:40: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            max_so_far_index = numbers.index(of: number)\n    \
    \                                   ^\n/tmp/tmps7fqzo48.swift:12:40: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         max_so_far_index = numbers.index(of: number)\n                     \
    \                  ^\n                                                       \
    \  ?? <#default value#>\n/tmp/tmps7fqzo48.swift:12:40: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n            max_so_far_index\
    \ = numbers.index(of: number)\n                                       ^\n    \
    \                                                    !\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var rolling_max = numbers\n    for\
    \ number in numbers {\n        if number > max {\n            max = number\n \
    \       } else {\n            rolling_max = rolling_max[rolling_max.index(of:\
    \ number!)..<rolling_max.index(of: max!)]\n        }\n    }\n    return rolling_max\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpru_uz10x.swift:13:84: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            rolling_max = rolling_max[rolling_max.index(of: number!)..<rolling_max.index(of:\
    \ max!)]\n                                                                   \
    \                ^\n/tmp/tmpru_uz10x.swift:13:84: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n            rolling_max\
    \ = rolling_max[rolling_max.index(of: number!)..<rolling_max.index(of: max!)]\n\
    \                                                                            \
    \       ^\n                                                                  \
    \     (                           ?? <#default value#>)\n/tmp/tmpru_uz10x.swift:13:84:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n            rolling_max = rolling_max[rolling_max.index(of: number!)..<rolling_max.index(of:\
    \ max!)]\n                                                                   \
    \                ^\n                                                         \
    \                                         !\n/tmp/tmpru_uz10x.swift:13:51: error:\
    \ value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n            rolling_max =\
    \ rolling_max[rolling_max.index(of: number!)..<rolling_max.index(of: max!)]\n\
    \                                                  ^\n/tmp/tmpru_uz10x.swift:13:51:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n            rolling_max = rolling_max[rolling_max.index(of: number!)..<rolling_max.index(of:\
    \ max!)]\n                                                  ^\n              \
    \                        (                              ?? <#default value#>)\n\
    /tmp/tmpru_uz10x.swift:13:51: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n            rolling_max = rolling_max[rolling_max.index(of:\
    \ number!)..<roll"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var max_index = -1\n    for index\
    \ in 1..<numbers.count {\n        if numbers[index] > max {\n            max =\
    \ numbers[index]\n            max_index = index\n        }\n    }\n    return\
    \ numbers[max_index..<numbers.count]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmp2l6ydos0.swift:15:19: error: cannot convert return expression of\
    \ type 'ArraySlice<Int>' to return type '[Int]'\n    return numbers[max_index..<numbers.count]\n\
    \           ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if index == 0 {\n            max = number\n        } else {\n   \
    \         if number > max[index] {\n                max = number\n           \
    \ }\n        }\n        index += 1\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpptj5nspp.swift:11:19: error: cannot assign value of type 'Int'\
    \ to type '[Int]'\n            max = number\n                  ^~~~~~\n/tmp/tmpptj5nspp.swift:14:23:\
    \ error: cannot assign value of type 'Int' to type '[Int]'\n                max\
    \ = number\n                      ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var max_index = -1\n    var max_count\
    \ = 0\n    for number in numbers {\n        if number > max {\n            max\
    \ = number\n            max_index = numbers.indexOf(max)\n            max_count\
    \ = 1\n        } else {\n            max_count += 1\n        }\n    }\n    var\
    \ result = [Int]()\n    for number in numbers {\n        if number == max {\n\
    \            result.append(number)\n        }\n    }\n    if max_count > 1 {\n\
    \        result.append(max)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmph7n5wivv.swift:13:33: error: value of type '[Int]' has no member\
    \ 'indexOf'\n            max_index = numbers.indexOf(max)\n                  \
    \      ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = append(max, number)\n\
    \        } else {\n            index = index + 1\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpam2rs6z5.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var max_index = -1\n    var max_value\
    \ = numbers[0]\n    for i in 1..<numbers.count {\n        if numbers[i] > max\
    \ {\n            max = numbers[i]\n            max_index = i\n            max_value\
    \ = max\n        }\n    }\n    var result = [Int]()\n    for i in 0..<numbers.count\
    \ {\n        if numbers[i] > max_value {\n            result.append(numbers[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b371ec8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b371e984561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b371e984286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b371e98413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b371e983bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b371e783e83 <unavailable> + 188035

    6    tmp64klccqy                        0x000055e658256b1e <unavailable> + 6942

    7    tmp64klccqy                        0x000055e6582565ad <unavailable> + 5549

    8    libc.so.6                          0x00002b371ee79460 __libc_start_main +
    245

    9    tmp64klccqy                        0x000055e6582562b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [number]\n        } else\
    \ {\n            max = append(max, number)\n        }\n        index++\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpc24zbgi4.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmpc24zbgi4.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var currentMax = numbers[0]\n    for\
    \ number in numbers {\n        if number > currentMax {\n            result.append(currentMax)\n\
    \            currentMax = number\n        } else {\n            currentMax = number\n\
    \        }\n    }\n    result.append(currentMax)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\n\
    assert(rolling_max(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers:\
    \ [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3])\
    \ == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0dec4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a0dbbb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6a0dbbb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6a0dbbb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6a0dbbabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6a0d9bae83 <unavailable> + 188035

    6    tmpu9yus0vb                        0x000055a3c95cea5f <unavailable> + 6751

    7    tmpu9yus0vb                        0x000055a3c95ce52d <unavailable> + 5421

    8    libc.so.6                          0x00002b6a0e0b0460 __libc_start_main +
    245

    9    tmpu9yus0vb                        0x000055a3c95ce239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    for number in numbers {\n        if number\
    \ > max[0] {\n            max = [number]\n        } else {\n            max =\
    \ append(max, number)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpvg3hby7_.swift:12:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = numbers[0]\n    var max_index = -1\n    for index\
    \ in 1..<numbers.count {\n        if numbers[index] > max {\n            max =\
    \ numbers[index]\n            max_index = index\n        }\n    }\n    return\
    \ Array(numbers[0..<max_index])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af4476ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4473f6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af4473f6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af4473f613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af4473f5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af4471f5e83 <unavailable> + 188035

    6    tmpil3l23y6                        0x0000556900b79b78 <unavailable> + 7032

    7    tmpil3l23y6                        0x0000556900b7964d <unavailable> + 5709

    8    libc.so.6                          0x00002af4478eb460 __libc_start_main +
    245

    9    tmpil3l23y6                        0x0000556900b79359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [number]\n        } else\
    \ {\n            max = append(max, number)\n        }\n        index++\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpc24zbgi4.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmpc24zbgi4.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = append(max, number)\n\
    \        }\n        index++\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: SyntaxError
  stderr: "/tmp/tmpq84byh1z.swift:11:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmpq84byh1z.swift:13:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max_number = 0\n    var max_index = 0\n    for index in\
    \ 0..<numbers.count {\n        if numbers[index] > max_number {\n            max_number\
    \ = numbers[index]\n            max_index = index\n        }\n    }\n    return\
    \ Array(numbers[0..<max_index])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: Exception
  stderr: 'tmpn6ymid02/tmpn6ymid02.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba969e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba966dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba966da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba966d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn6ymid02                        0x0000560dc82da83d <unavailable> + 6205

    5    libc.so.6                          0x00002aba96bcf460 __libc_start_main +
    245

    6    tmpn6ymid02                        0x0000560dc82da359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: -4
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var maxIndex = 0\n    for number in numbers\
    \ {\n        if number > max[maxIndex] {\n            max[maxIndex] = number\n\
    \            maxIndex += 1\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rolling_max(numbers: [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) ==\
    \ [4, 4, 4, 4])\nassert(rolling_max(numbers: [3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abf0b37ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf0b071561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abf0b071286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abf0b07113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abf0b070bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abf0ae70e83 <unavailable> + 188035

    6    tmp_4mu93n6                        0x0000556a1d7edb1d <unavailable> + 6941

    7    tmp_4mu93n6                        0x0000556a1d7ed635 <unavailable> + 5685

    8    libc.so.6                          0x00002abf0b566460 __libc_start_main +
    245

    9    tmp_4mu93n6                        0x0000556a1d7ed239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824864
- exit_code: 1
  program: "\n/// From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int])\
    \ -> [Int] {\n    var max = [Int]()\n    var index = 0\n    for number in numbers\
    \ {\n        if number > max[index] {\n            max = [number]\n        } else\
    \ {\n            max = append(max, number)\n        }\n        index++\n    }\n\
    \    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rolling_max(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(rolling_max(numbers: [1, 2, 3, 4]) == [1,\
    \ 2, 3, 4])\nassert(rolling_max(numbers: [4, 3, 2, 1]) == [4, 4, 4, 4])\nassert(rolling_max(numbers:\
    \ [3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])"
  status: SyntaxError
  stderr: "/tmp/tmpc24zbgi4.swift:13:19: error: cannot find 'append' in scope\n  \
    \          max = append(max, number)\n                  ^~~~~~\n/tmp/tmpc24zbgi4.swift:15:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824864
