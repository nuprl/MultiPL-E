name: HumanEval_120_maximum
language: swift
prompt: "\n/// Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example 2:\n///\
  \ Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n/// Input:\
  \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n/// 1. The\
  \ length of the array will be in the range of [1, 1000].\n/// 2. The elements in\
  \ the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\n\
  func maximum(arr: [Int], k: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4,\
  \ -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0,\
  \ 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3],\
  \ k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7)\
  \ == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
  \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
  \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
  assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
completions: ["    precondition(k <= arr.count, \"k is out of range\")\n    var result\
    \ = [Int]()\n    var max = 0\n    for element in arr {\n        if element > max\
    \ {\n            max = element\n        }\n    }\n    for element in arr {\n \
    \       if element == max {\n            result.append(element)\n        }\n \
    \   }\n    return result", "    if k == 0 || k > arr.count {\n        return arr\n\
    \    }\n    \n    var max = [Int]()\n    \n    for index in 0..<k {\n        if\
    \ arr[index] > max[0] {\n            max = [arr[index]]\n        } else if arr[index]\
    \ == max[0] {\n            max.append(arr[index])\n        }\n    }\n    \n  \
    \  return max", '    return arr.sorted { $0 > $1 }.prefix(k)', "    var max =\
    \ [Int]()\n    var maxIndex = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n     \
    \       maxIndex = index\n        }\n    }\n    return max[maxIndex..<maxIndex+k]",
  "    var max = [Int]()\n    for x in arr {\n        if x < 0 {\n            max\
    \ = append(max, -x)\n        } else {\n            max = append(max, x)\n    \
    \    }\n    }\n    max = maximumSort(max, k)\n    return max", "    if k == 0\
    \ || arr.isEmpty {\n        return arr\n    }\n    \n    var max = [Int]()\n \
    \   var maxIndex = 0\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1]\
    \ {\n            max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n  \
    \  }\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1] {\n           \
    \ max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n    }\n    \n    for\
    \ i in 0..<k {\n        if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n\
    \            maxIndex = k-1\n        }\n    }\n    \n    for i in 0..<k {\n  \
    \      if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n            maxIndex\
    \ = k-1\n        }\n    }\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1]\
    \ {\n            max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n  \
    \  }\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1] {\n           \
    \ max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n    }\n    \n    for\
    \ i in 0..<k {\n        if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n\
    \            maxIndex = k-1\n        }\n    }\n    \n    for i in 0..<k {\n  \
    \      if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n            maxIndex\
    \ = k-1\n        }\n    }\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1]\
    \ {\n            max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n  \
    \  }\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1] {\n           \
    \ max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n    }\n    \n    for\
    \ i in 0..<k {\n        if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n\
    \            maxIndex = k-1\n        }\n    }\n    \n    for i in 0..<k {\n  \
    \      if arr[i] > max[k-1] {\n            max[k-1] = arr[i]\n            maxIndex\
    \ = k-1\n        }\n    }\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1]\
    \ {\n            max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n  \
    \  }\n    \n    for i in 0..<k {\n        if arr[i] > max[k-1] {\n           \
    \ max[k-1] = arr[i]\n            maxIndex = k-1\n        }\n    }\n    \n    for\
    \ i in 0..<k {", "    \n    var max = [Int]()\n    \n    if arr.count > k {\n\
    \        max = arr[k..<arr.count]\n    } else {\n        max = arr\n    }\n  \
    \  \n    return max", "    \n    // write your code here\n    \n    return arr",
  "    if k == 0 || arr.isEmpty() {\n        return arr\n    }\n    \n    var max\
    \ = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<arr.count {\n  \
    \      if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max[maxIndex..<maxIndex+k]",
  '    return arr.sorted { $0 > $1 }.prefix(k)', "    \n    var max = [Int]()\n  \
    \  \n    for x in arr {\n        if x > max[0] {\n            max[0] = x\n   \
    \     }\n    }\n    \n    for x in arr {\n        if x > max[1] {\n          \
    \  max[1] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[2]\
    \ {\n            max[2] = x\n        }\n    }\n    \n    return max[k..<3]", " \
    \   var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    return max[maxIndex..<maxIndex+k]",
  "    \n    var max = [Int]()\n    \n    for x in arr {\n        if x > max[0] {\n\
    \            max[0] = x\n        }\n    }\n    \n    for x in arr {\n        if\
    \ x == max[0] {\n            for y in max {\n                if y > x {\n    \
    \                max[1] = y\n                }\n            }\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x == max[1] {\n            for y in\
    \ max {\n                if y > x {\n                    max[2] = y\n        \
    \        }\n            }\n        }\n    }\n    \n    return max[k..<3]", " \
    \   \n    var max = [Int]()\n    \n    for x in arr {\n        if x < 0 {\n  \
    \          continue\n        }\n        \n        if k == 0 {\n            max\
    \ = append(max, x)\n            continue\n        }\n        \n        if x >\
    \ max[k-1] {\n            max[k-1] = x\n        }\n        \n        k--\n   \
    \ }\n    \n    return max", "    \n    var max = [Int]()\n    \n    for x in arr\
    \ {\n        if x < 0 {\n            continue\n        }\n        if k == 0 {\n\
    \            max = append(max, x)\n            continue\n        }\n        if\
    \ x > max[k] {\n            max[k] = x\n        }\n        k--\n    }\n    \n\
    \    return max", "    if k == 0 || arr.isEmpty {\n        return arr\n    }\n\
    \    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max[maxIndex..<k].sorted()",
  "    var result = [Int]()\n    var max = 0\n    for element in arr {\n        if\
    \ element > max {\n            max = element\n        }\n    }\n    for element\
    \ in arr {\n        if element == max {\n            result.append(element)\n\
    \        }\n    }\n    if k == result.count {\n        return result\n    }\n\
    \    if k > result.count {\n        return result\n    }\n    for element in arr\
    \ {\n        if element > max {\n            result.append(element)\n        }\n\
    \    }\n    return result", "    if k > arr.count {\n        return arr\n    }\n\
    \    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max", "    if\
    \ k == 0 || arr.isEmpty {\n        return arr\n    }\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n        if arr[i] >\
    \ max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex =\
    \ i\n        }\n    }\n    \n    return max[maxIndex..<k+1]", "    var result\
    \ = [Int]()\n    var max = 0\n    for x in arr {\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in arr {\n        if x == max {\n\
    \            result.append(x)\n        }\n    }\n    for x in arr {\n        if\
    \ x < max {\n            result.append(x)\n        }\n    }\n    if k == result.count\
    \ {\n        return result\n    }\n    if k > result.count {\n        return result\n\
    \    }\n    if k == 0 {\n        return result\n    }\n    if k == 1 {\n     \
    \   return result\n    }\n    if k == result.count - 1 {\n        return result\n\
    \    }\n    if k == result.count - 2 {\n        return result\n    }\n    if k\
    \ == result.count - 3 {\n        return result\n    }\n    if k == result.count\
    \ - 4 {\n        return result\n    }\n    if k == result.count - 5 {\n      \
    \  return result\n    }\n    if k == result.count - 6 {\n        return result\n\
    \    }\n    if k == result.count - 7 {\n        return result\n    }\n    if k\
    \ == result.count - 8 {\n        return result\n    }\n    if k == result.count\
    \ - 9 {\n        return result\n    }\n    if k == result.count - 10 {\n     \
    \   return result\n    }\n    if k == result.count - 11 {\n        return result\n\
    \    }\n    if k == result.count - 12 {\n        return result\n    }\n    if\
    \ k == result.count - 13 {\n        return result\n    }\n    if k == result.count\
    \ - 14 {\n        return result\n    }\n    if k == result.count - 15 {\n    \
    \    return result\n    }\n    if k == result.count - 16 {\n        return result\n\
    \    }\n    if k == result.count - 17 {\n        return result\n    }\n    if\
    \ k == result.count - 18 {\n        return result\n    }\n    if k == result.count\
    \ - 19 {\n        return result\n    }\n    if k == result.count - 20 {\n    \
    \    return result\n    }\n    if k == result.count - 21 {\n        return result\n\
    \    }\n    if k == result.count - 22 {\n        return result\n    }\n    if\
    \ k == result.count - 23 {\n        return result\n    }\n    if k == result.count\
    \ - 24 {\n        return result\n    }\n    if k == result.count - 25 {\n    \
    \    return result\n    }\n    if k == result.count - 26 {\n        return result\n\
    \    }\n    if k == result.count - 27 {\n        return result\n    }\n    if\
    \ k == result.count - 28 {\n        return result\n    }\n    if k == result.count\
    \ - 29 {\n        return result\n    }\n    if k == result.count - 30 {\n    \
    \    return result\n    }\n    if k == result.count - 31 {\n        return result\n\
    \    }\n    if k == result.count - 32 {"]
stop_tokens:
- "\n}"
