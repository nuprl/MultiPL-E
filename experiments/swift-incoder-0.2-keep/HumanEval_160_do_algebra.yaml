name: HumanEval_160_do_algebra
language: swift
prompt: "\n/// Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n/// the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ list is equal to the length of operand list minus one.\n/// Operand is a list\
  \ of of non-negative integers.\n/// Operator list has at least one operator, and\
  \ operand list has at least two operands.\nfunc do_algebra(operator: [String], operand:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"\
  +\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\",\
  \ \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"\
  *\"], operand: [7, 3, 4]) == 8)"
completions: ["    var result = 0\n    for index in 0..<operand.count {\n        let\
    \ value = operand[index]\n        switch operator[index] {\n        case \"+\"\
    :\n            result += value\n        case \"-\":\n            result -= value\n\
    \        case \"*\":\n            result *= value\n        case \"//\":\n    \
    \        result /= value\n        case \"**\":\n            result **= value\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = 0\n    var i = 0\n    for _ in 0..<operand.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        default:\n \
    \           break\n        }\n        i += 1\n    }\n    return result", "   \
    \ var result = 0\n    for index in 0..<operand.count {\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operand[index]\n        case \"\
    -\":\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Invalid operator: \\(operator[index])\")\n        }\n\
    \    }\n    return result", "    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result", "    var result = 0\n    for index in\
    \ 0..<operand.count {\n        let operand1 = operand[index]\n        let operator1\
    \ = operator[index]\n        switch operator1 {\n        case \"+\":\n       \
    \     result += operand1\n        case \"-\":\n            result -= operand1\n\
    \        case \"*\":\n            result *= operand1\n        case \"//\":\n \
    \           result /= operand1\n        case \"**\":\n            result **= operand1\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = 0\n    for index in 0..<operand.count {\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operand[index]\n        case \"\
    -\":\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Unknown operator\")\n        }\n    }\n    return result",
  "    var result = 0\n    for index in 0..<operand.count {\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operand[index]\n        case \"\
    -\":\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            break\n        }\n    }\n    return result", "    var result = 0\n\
    \    for index in 0..<operand.count {\n        let operandValue = operand[index]\n\
    \        let operatorValue = operator[index]\n        switch operatorValue {\n\
    \        case \"+\":\n            result += operandValue\n        case \"-\":\n\
    \            result -= operandValue\n        case \"*\":\n            result *=\
    \ operandValue\n        case \"//\":\n            result /= operandValue\n   \
    \     case \"**\":\n            result **= operandValue\n        default:\n  \
    \          break\n        }\n    }\n    return result", "    var result = 0\n\
    \    for index in 0..<operand.count {\n        switch operator[index] {\n    \
    \    case \"+\":\n            result += operand[index]\n        case \"-\":\n\
    \            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            break\n        }\n    }\n    return result", "    var result = 0\n\
    \    var index = 0\n    var operator_index = 0\n    var operand_index = 0\n  \
    \  var operator = operator[operator_index]\n    var operand = operand[operand_index]\n\
    \    while operator != \"+\" && operator != \"-\" && operator != \"*\" && operator\
    \ != \"//\" && operator != \"**\" {\n        operator_index += 1\n        operator\
    \ = operator[operator_index]\n    }\n    while operand != 0 {\n        result\
    \ += operand\n        operand_index += 1\n        operand = operand[operand_index]\n\
    \    }\n    if operator == \"+\" {\n        result = result\n    } else if operator\
    \ == \"-\" {\n        result = -result\n    } else if operator == \"*\" {\n  \
    \      result = result * operand\n    } else if operator == \"//\" {\n       \
    \ result = result / operand\n    } else if operator == \"**\" {\n        result\
    \ = result ** operand\n    }\n    return result", "    var result = 0\n    for\
    \ index in 0..<operand.count {\n        switch operator[index] {\n        case\
    \ \"+\":\n            result += operand[index]\n        case \"-\":\n        \
    \    result -= operand[index]\n        case \"*\":\n            result *= operand[index]\n\
    \        case \"//\":\n            result /= operand[index]\n        case \"**\"\
    :\n            result **= operand[index]\n        default:\n            fatalError(\"\
    Invalid operator\")\n        }\n    }\n    return result", "    var result = 0\n\
    \    for index in 0..<operand.count {\n        let operand1 = operand[index]\n\
    \        let operator1 = operator[index]\n        switch operator1 {\n       \
    \ case \"+\":\n            result += operand1\n        case \"-\":\n         \
    \   result -= operand1\n        case \"*\":\n            result *= operand1\n\
    \        case \"//\":\n            result /= operand1\n        case \"**\":\n\
    \            result **= operand1\n        default:\n            break\n      \
    \  }\n    }\n    return result", "    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator\"\
    )\n        }\n    }\n    return result", "    var result: Int = 0\n    for index\
    \ in 0..<operand.count {\n        let operandValue = operand[index]\n        let\
    \ operatorValue = operator[index]\n        switch operatorValue {\n        case\
    \ \"+\":\n            result += operandValue\n        case \"-\":\n          \
    \  result -= operandValue\n        case \"*\":\n            result *= operandValue\n\
    \        case \"//\":\n            result /= operandValue\n        case \"**\"\
    :\n            result **= operandValue\n        default:\n            fatalError(\"\
    Invalid operator: \\(operatorValue)\")\n        }\n    }\n    return result",
  "    var result = 0\n    for index in 0..<operand.count {\n        let operand1\
    \ = operand[index]\n        let operand2 = operand[index + 1]\n        switch\
    \ operator[index] {\n        case \"+\":\n            result += operand1\n   \
    \     case \"-\":\n            result -= operand1\n        case \"*\":\n     \
    \       result *= operand1\n        case \"//\":\n            result /= operand1\n\
    \        case \"**\":\n            result **= operand1\n        default:\n   \
    \         fatalError(\"Invalid operator\")\n        }\n    }\n    return result",
  "    var result = 0\n    for index in 0..<operand.count {\n        switch operator[index]\
    \ {\n        case \"+\":\n            result += operand[index]\n        case \"\
    -\":\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Invalid operator: \\(operator[index])\")\n        }\n\
    \    }\n    return result", "    var result = 0\n    for index in 0..<operand.count\
    \ {\n        switch operator[index] {\n        case \"+\":\n            result\
    \ += operand[index]\n        case \"-\":\n            result -= operand[index]\n\
    \        case \"*\":\n            result *= operand[index]\n        case \"//\"\
    :\n            result /= operand[index]\n        case \"**\":\n            result\
    \ **= operand[index]\n        default:\n            fatalError(\"Invalid operator:\
    \ \\(operator[index])\")\n        }\n    }\n    return result", "    var result\
    \ = 0\n    for index in 0..<operator.count {\n        switch operator[index] {\n\
    \        case \"+\":\n            result += operand[index]\n        case \"-\"\
    :\n            result -= operand[index]\n        case \"*\":\n            result\
    \ *= operand[index]\n        case \"//\":\n            result /= operand[index]\n\
    \        case \"**\":\n            result **= operand[index]\n        default:\n\
    \            fatalError(\"Invalid operator\")\n        }\n    }\n    return result",
  "    var result = 0\n    var index = 0\n    while index < operator.count {\n   \
    \     let operator = operator[index]\n        let operand = operand[index]\n \
    \       switch operator {\n        case \"+\":\n            result += operand\n\
    \        case \"-\":\n            result -= operand\n        case \"*\":\n   \
    \         result *= operand\n        case \"//\":\n            result /= operand\n\
    \        case \"**\":\n            result **= operand\n        default:\n    \
    \        fatalError(\"Invalid operator\")\n        }\n        index += 1\n   \
    \ }\n    return result", "    var result = 0\n    var i = 0\n    for _ in 0..<operand.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fatalError(\"Invalid operator\")\n        }\n \
    \       i += 1\n    }\n    return result"]
stop_tokens:
- "\n}"
