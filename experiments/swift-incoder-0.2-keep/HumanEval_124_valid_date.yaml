name: HumanEval_124_valid_date
language: swift
prompt: "\n/// You have to write a function which validates a given date string and\n\
  /// returns True if the date is valid otherwise False.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\n/// for example: \n/// valid_date('03-11-2000')\
  \ => True\n/// valid_date('15-01-2012') => False\n/// valid_date('04-0-2040') =>\
  \ False\n/// valid_date('06-04-2020') => True\n/// valid_date('06/04/2020') => False\n\
  func valid_date(date: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\n\
  assert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\"\
  ) == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date:\
  \ \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\n\
  assert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\"\
  ) == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date:\
  \ \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\n\
  assert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\"\
  ) == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date:\
  \ \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)"
completions: ["    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from: date) else {\
    \ return false }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ date, to: Date())\n    return components.day != 0", "    let dateFormatter =\
    \ DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let date\
    \ = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        let daysInMonth = calendar.component(.day, from: Date(), to: date)\n\
    \        return components.day == daysInMonth\n    }\n    return false", "   \
    \ let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    \n    if let date = dateFormatter.date(from: date) {\n        let calendar\
    \ = Calendar.current\n        let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n        let days = components.day!\n        \n    \
    \    if days > 31 || days < 1 || days > 29 || days < 4 {\n            return false\n\
    \        }\n        \n        let months = calendar.component(.month, from: date)\n\
    \        \n        if months > 12 || months < 1 {\n            return false\n\
    \        }\n        \n        return true\n    }\n    \n    return false", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != nil && components.day\
    \ >= 1 && components.day <= 31\n        && components.month != nil && components.month\
    \ >= 1 && components.month <= 12\n        && components.year != nil && components.year\
    \ >= 1980 && components.year <= 2040", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard let date = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    let calendar = Calendar.current\n\
    \    let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \    return components.day != 0", "    guard !date.isEmpty else {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from: date)\n\
    \    guard dateFromString != nil else {\n        return false\n    }\n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    guard components.day > 0 else {\n  \
    \      return false\n    }\n    guard components.month >= 1 && components.month\
    \ <= 12 else {\n        return false\n    }\n    guard components.day <= calendar.maximumDaysInMonth\
    \ else {\n        return false\n    }\n    return true", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    \n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n    let dateComponents =\
    \ dateFormatter.date(from: date)\n    \n    if dateComponents == nil {\n     \
    \   return false\n    }\n    \n    let calendar = Calendar.current\n    \n   \
    \ let components = calendar.dateComponents([.day], from: dateComponents!, to:\
    \ Date())\n    \n    if components.day < 1 || components.day > 31 || components.month\
    \ < 1 || components.month > 12 || components.year < 1900 ||\n        components.year\
    \ > Date().year {\n        return false\n    }\n    \n    return true", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else { return false }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else {\n        return false\n   \
    \ }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0", "    \n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n   \
    \ if !dateFormatter.date(from: date).isValid {\n        return false\n    }\n\
    \    \n    let dateFormatter2 = DateFormatter()\n    dateFormatter2.dateFormat\
    \ = \"dd-MM-yyyy\"\n    \n    if !dateFormatter2.date(from: date).isValid {\n\
    \        return false\n    }\n    \n    let dateFormatter3 = DateFormatter()\n\
    \    dateFormatter3.dateFormat = \"dd-MM-yyyy\"\n    \n    if !dateFormatter3.date(from:\
    \ date).isValid {\n        return false\n    }\n    \n    let dateFormatter4 =\
    \ DateFormatter()\n    dateFormatter4.dateFormat = \"dd-MM-yyyy\"\n    \n    if\
    \ !dateFormatter4.date(from: date).isValid {\n        return false\n    }\n  \
    \  \n    let dateFormatter5 = DateFormatter()\n    dateFormatter5.dateFormat =\
    \ \"dd-MM-yyyy\"\n    \n    if !dateFormatter5.date(from: date).isValid {\n  \
    \      return false\n    }\n    \n    let dateFormatter6 = DateFormatter()\n \
    \   dateFormatter6.dateFormat = \"dd-MM-yyyy\"\n    \n    if !dateFormatter6.date(from:\
    \ date).isValid {\n        return false\n    }\n    \n    let dateFormatter7 =\
    \ DateFormatter()\n    dateFormatter7.dateFormat = \"dd-MM-yyyy\"\n    \n    if\
    \ !dateFormatter7.date(from: date).isValid {\n        return false\n    }\n  \
    \  \n    let dateFormatter8 = DateFormatter()\n    dateFormatter8.dateFormat =\
    \ \"dd-MM-yyyy\"\n    \n    if !dateFormatter8.date(from: date).isValid {\n  \
    \      return false\n    }\n    \n    let dateFormatter9 = DateFormatter()\n \
    \   dateFormatter9.dateFormat = \"dd-MM-yyyy\"\n    \n    if !dateFormatter9.date(from:\
    \ date).isValid {\n        return false\n    }\n    \n    let dateFormatter10\
    \ = DateFormatter()\n    dateFormatter10.dateFormat = \"dd-MM-yyyy\"\n    \n \
    \   if !dateFormatter10.date(from: date).isValid {\n        return false\n   \
    \ }\n    \n    let dateFormatter11 = DateFormatter()\n    dateFormatter11.dateFormat\
    \ = \"dd-MM-yyyy\"\n    \n    if !dateFormatter11.date(from: date).isValid {\n\
    \        return false\n    }\n    \n    let dateFormatter12 = DateFormatter()\n\
    \    dateFormatter12.dateFormat = \"dd-MM-yyyy\"\n    \n    if !dateFormatter12.date(from:\
    \ date).isValid {\n        return false\n    }\n    \n    let dateFormatter13\
    \ = DateFormatter()\n    dateFormatter13.dateFormat = \"dd-MM-yyyy\"", "    let\
    \ dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let date = dateFormatter.date(from: date) else {\n        return false\n\
    \    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0", "    guard !date.isEmpty\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString = dateFormatter.date(from:\
    \ date)\n    guard dateFromString != nil else {\n        return false\n    }\n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    let daysInMonth = calendar.dateComponents([.day],\
    \ from: Date(), to: Date()).day!\n    guard components.day >= 1 && components.day\
    \ <= daysInMonth && components.month >= 1 && components.month <= 12 else {\n \
    \       return false\n    }\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from:\
    \ date)\n    \n    if dateString == nil {\n        return false\n    }\n    \n\
    \    let calendar = Calendar.current\n    \n    let year = dateString!.year\n\
    \    let month = dateString!.month\n    let day = dateString!.day\n    \n    let\
    \ daysInMonth = calendar.dateComponents([.day], from: DateComponents(year: year,\
    \ month: month, day: day)).value\n    \n    if daysInMonth < 1 || daysInMonth\
    \ > 31 || month < 1 || month > 12 || day < 1 || day > daysInMonth {\n        return\
    \ false\n    }\n    \n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from:\
    \ date)\n    \n    if dateString == nil {\n        return false\n    }\n    \n\
    \    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateString!, to: Date())\n    \n    if components.day < 1 || components.day\
    \ > 31 || components.month < 1 || components.month > 12 || components.year < 1950\
    \ {\n        return false\n    }\n    \n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let\
    \ date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    let calendar\
    \ = Calendar.current\n    let components = calendar.dateComponents([.day], from:\
    \ date, to: Date())\n    return components.day != 0", "    \n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    \n   \
    \ if let date = dateFormatter.date(from: date) {\n        let calendar = Calendar.current\n\
    \        let components = calendar.dateComponents([.day], from: date, to: Date())\n\
    \        return components.day != 0\n    }\n    return false", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    \n    let\
    \ calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: date, to: Date())\n    return components.day != 0", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateFromString\
    \ = dateFormatter.date(from: date)\n    if dateFromString == nil {\n        return\
    \ false\n    }\n    let calendar = Calendar.current\n    let components = calendar.dateComponents([.day],\
    \ from: dateFromString!, to: Date())\n    return components.day != nil"]
stop_tokens:
- "\n}"
