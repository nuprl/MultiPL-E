language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjsba2jbu.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpjsba2jbu.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphry3jiq0.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\"\
    \ \").map(String::init)\n    numbers_arr.sort()\n    return numbers_arr.join(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjw8cf119.swift:8:53: error: expected expression in list of expressions\n\
    \    var numbers_arr = numbers.split(\" \").map(String::init)\n              \
    \                                      ^\n/tmp/tmpjw8cf119.swift:8:54: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_arr\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                    ^\n                                                     ;\n\
    /tmp/tmpjw8cf119.swift:8:58: error: initializers may only be declared within a\
    \ type\n    var numbers_arr = numbers.split(\" \").map(String::init)\n       \
    \                                                  ^\n/tmp/tmpjw8cf119.swift:8:58:\
    \ error: expected '(' for initializer parameters\n    var numbers_arr = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \     ^\n/tmp/tmpjw8cf119.swift:8:31: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_arr = numbers.split(\" \").map(String::init)\n\
    \                              ^\n/tmp/tmpjw8cf119.swift:8:31: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_arr\
    \ = numbers.split(\" \").map(String::init)\n                              ^\n\
    /tmp/tmpjw8cf119.swift:8:31: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_arr = numbers.split(\" \").map(String::init)\n              \
    \                ^\n/tmp/tmpjw8cf119.swift:8:53: error: missing argument for parameter\
    \ #1 in call\n    var numbers_arr = numbers.split(\" \").map(String::init)\n \
    \                                                   ^\n                      \
    \                              <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                   \
    \        ^\n/tmp/tmpjw8cf119.swift:8:31"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n    numbers_array.sort()\n    return numbers_array.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjwlxvr2v.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpjwlxvr2v.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpjwlxvr2v.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpjwlxvr2v.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpjwlxvr2v.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpjwlxvr2v.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpjwlxvr2v.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpjwlxvr2v.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3geussht.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphry3jiq0.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numberList = numbers.split(\"\
    \ \").map{Int($0)}\n    numberList.sort()\n    return numberList.join(\" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxczbdppz.swift:8:36: error: missing argument label 'separator:'\
    \ in call\n    var numberList = numbers.split(\" \").map{Int($0)}\n          \
    \                         ^\n                                   separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \".\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"#\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"&\", \"\", -1)\n    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \")\", \"\", -1)\n    numbers = strings.Replace(numbers, \"=\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"<\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \">\", \"\", -1)\n    numbers = strings.Replace(numbers, \"?\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"!\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"@\", \"\", -1)\n    numbers = strings.Replace(numbers, \"#\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"+\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq66cvnmw.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpq66cvnmw.swift:47:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"/\", \"\"\n                             ^\n/tmp/tmpq66cvnmw.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpq66cvnmw.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpq66cvnmw.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmpq66cvnmw.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmpq66cvnmw.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmpq66cvnmw.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmpq66cvnmw.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpq66cvnmw.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpq66cvnmw.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpq66cvnmw.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpq66cvnmw.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmpq66cvnmw.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmpq66cvnmw.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"1\", "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphoe97mzw.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmphoe97mzw.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmphoe97mzw.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmphoe97mzw.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmphoe97mzw.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bz9mr5f.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"S\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n    numbers = strings.TrimSuffix(numbers, \"i\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"I\")\n    numbers = strings.TrimSuffix(numbers, \"o\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"O\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"e\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(numbers, \"E\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"E\")\n    numbers = strings.TrimSuffix(\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2l1re9wt.swift:48:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmp2l1re9wt.swift:8:15: error: cannot find 'strings' in scope\n   \
    \ numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp2l1re9wt.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp2l1re9wt.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmp2l1re9wt.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmp2l1re9wt.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"S\")\n              ^~~~~~~\n\
    /tmp/tmp2l1re9wt.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"S\")\n    ^~~~~~~\n/tmp/tmp2l1re9wt.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n              ^~~~~~~\n/tmp/tmp2l1re9wt.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    ^~~~~~~\n/tmp/tmp2l1re9wt.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"X\")\n              ^~~~~~~\n\
    /tmp/tmp2l1re9wt.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"X\")\n    ^~~~~~~\n/tmp/tmp2l1re9wt.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"i\")\n              ^~~~~~~\n/tmp/tmp2l1re9wt.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"i\")\n    ^~~~~~~\n/tmp/tmp2l1re9wt.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"I\")\n              ^~~~~~~\n\
    /tmp/tmp2l1re9wt.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbe"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp7laqs8i.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpp7laqs8i.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3jwgsben.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmp3jwgsben.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \",\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"+\", \"\", -1)\n    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \")\", \"\", -1)\n    numbers = strings.Replace(numbers, \"=\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"!\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"@\", \"\", -1)\n    numbers = strings.Replace(numbers, \"#\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"$\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n    numbers = strings.Replace(numbers, \"&\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"+\", \"\", -1)\n    numbers = strings.Replace(numbers, \"=\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"<\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \">\", \"\", -1)\n    numbers = strings.Replace(numbers, \"?\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"\\\\\", \"\", -1)\n    numbers = strings.Replace(numbers, \"|\", \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwbqgqb_x.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpwbqgqb_x.swift:47:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"|\", \"\"\n                             ^\n/tmp/tmpwbqgqb_x.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \",\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpwbqgqb_x.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmpwbqgqb_x.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmpwbqgqb_x.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"0\", "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy8fij0pm.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpy8fij0pm.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"-\")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpb3zp3fl5.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmpb3zp3fl5.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n              ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n    ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:12:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \" \")\n \
    \             ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:12:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \" \")\n    ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"-\", \" \")\n           \
    \   ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:13:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\", \" \")\n\
    \    ^~~~~~~\n/tmp/tmpb3zp3fl5.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n\
    /tmp/tmpb3zp3fl5.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n\
    /tmp/tmpb3zp3fl5.swift:15:15: error: cannot find 'strings'"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map{String::fromCharCode($0)}\n    numbers_array.sort()\n    return String(numbers_array)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6aereq0q.swift:8:54: error: consecutive statements on a line must\
    \ be separated by ';'\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                                     ^\n                    \
    \                                 ;\n/tmp/tmp6aereq0q.swift:8:54: error: expected\
    \ expression\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                                     ^\n/tmp/tmp6aereq0q.swift:8:33:\
    \ error: no exact matches in call to instance method 'split'\n    var numbers_array\
    \ = numbers.split(\" \").map{String::fromCharCode($0)}\n                     \
    \           ^\n/tmp/tmp6aereq0q.swift:8:33: note: candidate has partially matching\
    \ parameter list (separator: String.Element, maxSplits: Int, omittingEmptySubsequences:\
    \ Bool)\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                ^\n/tmp/tmp6aereq0q.swift:8:33: note: candidate\
    \ has partially matching parameter list (separator: String.Element, maxSplits:\
    \ Int, omittingEmptySubsequences: Bool)\n    var numbers_array = numbers.split(\"\
    \ \").map{String::fromCharCode($0)}\n                                ^\n/tmp/tmp6aereq0q.swift:8:47:\
    \ error: contextual type for closure argument list expects 1 argument, which cannot\
    \ be implicitly ignored\n    var numbers_array = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                              ^\n                           \
    \                    _ in \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysj1_45v.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpysj1_45v.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpysj1_45v.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map(String).sorted(by: <)\n    return numbers.joined(\" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg6c7qi26.swift:8:38: error: no exact matches in call to instance\
    \ method 'map'\n    var numbers = numbers.split(\" \").map(String).sorted(by:\
    \ <)\n                                     ^\n/tmp/tmpg6c7qi26.swift:8:38: note:\
    \ candidate expects value of type '(ArraySlice<String.Element>) throws -> ()'\
    \ (aka '(ArraySlice<Character>) throws -> ()') for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    var numbers = numbers.split(\" \").map(String).sorted(by:\
    \ <)\n                                     ^\n/tmp/tmpg6c7qi26.swift:8:38: note:\
    \ candidate expects value of type '(ArraySlice<String.Element>) throws -> ()'\
    \ (aka '(ArraySlice<Character>) throws -> ()') for parameter #1 (got 'String.Element'\
    \ (aka 'Character'))\n    var numbers = numbers.split(\" \").map(String).sorted(by:\
    \ <)\n                                     ^\n/tmp/tmpg6c7qi26.swift:8:27: error:\
    \ no exact matches in call to instance method 'split'\n    var numbers = numbers.split(\"\
    \ \").map(String).sorted(by: <)\n                          ^\n/tmp/tmpg6c7qi26.swift:8:27:\
    \ note: candidate has partially matching parameter list (separator: String.Element,\
    \ maxSplits: Int, omittingEmptySubsequences: Bool)\n    var numbers = numbers.split(\"\
    \ \").map(String).sorted(by: <)\n                          ^\n/tmp/tmpg6c7qi26.swift:8:27:\
    \ note: candidate has partially matching parameter list (separator: String.Element,\
    \ maxSplits: Int, omittingEmptySubsequences: Bool)\n    var numbers = numbers.split(\"\
    \ \").map(String).sorted(by: <)\n                          ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3jwgsben.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmp3jwgsben.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysj1_45v.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpysj1_45v.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpysj1_45v.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmplmxwhvnd.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    var sortedNumbers = \"\"\n    for number in numbers {\n        if number\
    \ == \"zero\" {\n            sortedNumbers += \"0\"\n        } else if number\
    \ == \"one\" {\n            sortedNumbers += \"1\"\n        } else if number ==\
    \ \"two\" {\n            sortedNumbers += \"2\"\n        } else if number == \"\
    three\" {\n            sortedNumbers += \"3\"\n        } else if number == \"\
    four\" {\n            sortedNumbers += \"4\"\n        } else if number == \"five\"\
    \ {\n            sortedNumbers += \"5\"\n        } else if number == \"six\" {\n\
    \            sortedNumbers += \"6\"\n        } else if number == \"seven\" {\n\
    \            sortedNumbers += \"7\"\n        } else if number == \"eight\" {\n\
    \            sortedNumbers += \"8\"\n        } else if number == \"nine\" {\n\
    \            sortedNumbers += \"9\"\n        } else {\n            sortedNumbers\
    \ += number\n        }\n    }\n    return sortedNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa5z1ogi8.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpesztu7o2.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpesztu7o2.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpesztu7o2.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpesztu7o2.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpesztu7o2.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3geussht.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map{ Int($0) }\n    numbers.sort()\n    return numbers.join(\" \")\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmbivl2kg.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").map{ Int($0) }\n           \
    \                     ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map{ Int($0) }\n    numbers_array.sort()\n    return numbers_array.map{\
    \ String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpx0urtc29.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bz9mr5f.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmplmxwhvnd.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bz9mr5f.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \".\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"/\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.Trim\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpw000c74h.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpw000c74h.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmpw000c74h.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpw000c74h.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpw000c74h.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \".\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"/\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"*\")\n\tnumbers := strings.TrimRight(numbers, \"+\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \".\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"/\")\n\tnumbers := strings.TrimRight(numbers, \"%\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"#\")\n\tnumbers := strings.TrimRight(numbers, \"(\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \")\")\n\tnumbers := strings.TrimRight(numbers, \"*\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"+\")\n\tnumbers := strings.TrimRight(numbers, \",\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \".\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"/\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimRight(numbers, \"#\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"(\")\n\tnumbers := strings.TrimRight(numbers, \")\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"*\")\n\tnumbers := strings.TrimRight(numbers, \"+\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \".\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"/\")\n\tnumbers := strings.TrimRight(numbers, \"%\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"#\")\n\tnumbers := \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp373a8e7n.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp373a8e7n.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmp373a8e7n.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp373a8e7n.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp373a8e7n.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.reduce(\"\") { $0 + \" \" + $1 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl8c9z5j4.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9fyuz44j.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp9fyuz44j.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \".\")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpj3w_zdz_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpj3w_zdz_.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpij61uu6z.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp1tpp6ekh.swift:51:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmp1tpp6ekh.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"-\")\n              \
    \    ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"-\")\n\
    \        ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmp1tpp6ekh.swift:14:2: erro"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"*\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n\tnumbers = strings.TrimSuffix(numbers, \")\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"#\")\n\tnumbers = strings.TrimSuffix(numbers, \"%\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"!\")\n\tnumbers = strings.TrimSuffix(numbers, \"$\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"&\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers = strings.TrimSuffix(numbers, \"(\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"!\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"$\")\n\tnumbers = strings.TrimSuffix(numbers, \"%\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n\tnumbers = strings.TrimSuffix(numbers, \"*\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n\tnumbers = strings.TrimSuffix(numbers, \")\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"#\")\n\tnumbers = strings.TrimSuffix(numbers, \"%\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"!\")\n\tnumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp14qv3vc0.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp14qv3vc0.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp14qv3vc0.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmp14qv3vc0.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmp14qv3vc0.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmp14qv3vc0.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmp14qv3vc0.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmp14qv3vc0.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmp14qv3vc0.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmp14qv3vc0.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmp14qv3vc0.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmp14qv3vc0.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmp14qv3vc0.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmp14qv3vc0.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers := strings.TrimSuffix(numbers, \".\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"/\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimSuffix(numbers, \"&\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"*\")\n\tnumbers := strings.TrimSuffix(numbers, \"(\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers := strings.TrimSuffix(numbers, \"#\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimSuffix(numbers, \"@\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"$\")\n\tnumbers := strings.TrimSuffix(numbers, \"!\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"+\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"=\")\n\tnumbers := strings.TrimSuffix(numbers, \"<\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \">\")\n\tnumbers := strings.TrimSuffix(numbers, \"[\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"]\")\n\tnumbers := strings.TrimSuffix(numbers, \"{\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"}\")\n\tnumbers := strings.TrimSuffix(numbers, \"|\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers := strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"?\")\n\tnumbers := strings.TrimSuffix(numbers, \"*\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"!\")\n\tnumbers := strings.TrimSuffix(numbers, \"(\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \")\")\n\tnumbers := strings.TrimSuffix(numbers, \"#\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers := strings.TrimSuffix(numbers, \"@\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"$\")\n\tnumbers := strings.TrimSuffix(numbers, \"!\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"+\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"=\")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpyalvuh_i.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpyalvuh_i.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmpyalvuh_i.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpyalvuh_i.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpyalvuh_i.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpesztu7o2.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpesztu7o2.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpesztu7o2.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpesztu7o2.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpesztu7o2.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_szh3c42.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp_szh3c42.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmp_szh3c42.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp_szh3c42.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp_szh3c42.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bz9mr5f.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"10\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"11\")\n\tnumbers = strings.TrimSuffix(numbers, \"12\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"13\")\n\tnumbers = strings.TrimSuffix(numbers, \"14\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"15\")\n\tnumbers = strings.TrimSuffix(numbers, \"16\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"17\")\n\tnumbers = strings.TrimSuffix(numbers, \"18\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"19\")\n\tnumbers = strings.TrimSuffix(numbers, \"20\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"21\")\n\tnumbers = strings.TrimSuffix(numbers, \"22\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"23\")\n\tnumbers = strings.TrimSuffix(numbers, \"24\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"25\")\n\tnumbers = strings.TrimSuffix(numbers, \"26\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"27\")\n\tnumbers = strings.TrimSuffix(numbers, \"28\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"29\")\n\tnumbers = strings.TrimSuffix(numbers, \"30\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"31\")\n\tnumbers = strings.TrimSuffix(numbers, \"32\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"33\")\n\tnumbers = strings.TrimSuffix(numbers, \"34\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"35\")\n\tnumbers = strings.TrimSuffix(numbers, \"36\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"37\")\n\tnumbers = strings.TrimSuffix(numbers, \"38\")\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdtedsa7e.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpdtedsa7e.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpdtedsa7e.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpdtedsa7e.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpdtedsa7e.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpdtedsa7e.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpdtedsa7e.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpdtedsa7e.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpdtedsa7e.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpdtedsa7e.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpdtedsa7e.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpdtedsa7e.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpdtedsa7e.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpdtedsa7e.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n    numbers =\
    \ strings.TrimLeftFunc(numbers, unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLineBreak)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsDigit)\n    numbers = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp2y5cjkh9.swift:43:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmp2y5cjkh9.swift:8:15: error: cannot find 'strings' in scope\n   \
    \ numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n              ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:9:46: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                             ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsDigit)\n    ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimLeftFunc(numbers,\
    \ unicode.IsDigit)\n              ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:10:45: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimLeftFunc(numbers,\
    \ unicode.IsDigit)\n                                            ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimLeftFunc(numbers, unicode.IsDigit)\n    ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n              ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:11:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \                                        ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:11:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              ^~~~~~~\n/tmp/tmp2y5cjkh9.swift:12:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = st"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bz9mr5f.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgpjbhq35.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpgpjbhq35.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmpgpjbhq35.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpgpjbhq35.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpgpjbhq35.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3geussht.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysj1_45v.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpysj1_45v.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpysj1_45v.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysj1_45v.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpysj1_45v.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpysj1_45v.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.reduce(\"\", { $0 + \" \" + $1 })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysquo5kj.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpij61uu6z.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map{ Int($0) }\n    numbers_array.sort()\n    return numbers.split(\" \"\
    ).map{ String($0) }.joined(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppjqc7ik_.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n/tmp/tmppjqc7ik_.swift:10:20: error: no exact matches in call to instance\
    \ method 'split'\n    return numbers.split(\" \").map{ String($0) }.joined(\"\
    \ \")\n                   ^\n/tmp/tmppjqc7ik_.swift:10:20: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    return numbers.split(\"\
    \ \").map{ String($0) }.joined(\" \")\n                   ^\n/tmp/tmppjqc7ik_.swift:10:20:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    return numbers.split(\"\
    \ \").map{ String($0) }.joined(\" \")\n                   ^\n/tmp/tmppjqc7ik_.swift:10:49:\
    \ error: cannot convert return expression of type 'JoinedSequence<[String]>' to\
    \ return type 'String'\n    return numbers.split(\" \").map{ String($0) }.joined(\"\
    \ \")\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~\n/tmp/tmppjqc7ik_.swift:10:56:\
    \ error: missing argument label 'separator:' in call\n    return numbers.split(\"\
    \ \").map{ String($0) }.joined(\" \")\n                                      \
    \                 ^\n                                                       separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"zero\", \"0\")\n    numbers = strings.Replace(numbers, \"one\", \"1\")\n \
    \   numbers = strings.Replace(numbers, \"two\", \"2\")\n    numbers = strings.Replace(numbers,\
    \ \"three\", \"3\")\n    numbers = strings.Replace(numbers, \"four\", \"4\")\n\
    \    numbers = strings.Replace(numbers, \"five\", \"5\")\n    numbers = strings.Replace(numbers,\
    \ \"six\", \"6\")\n    numbers = strings.Replace(numbers, \"seven\", \"7\")\n\
    \    numbers = strings.Replace(numbers, \"eight\", \"8\")\n    numbers = strings.Replace(numbers,\
    \ \"nine\", \"9\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers =\
    \ strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers, \"0\")\n \
    \   numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp09jjcu55.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp09jjcu55.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp09jjcu55.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmp09jjcu55.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmp09jjcu55.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmp09jjcu55.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmp09jjcu55.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp09jjcu55.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmp09jjcu55.swift:12:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"zero\", \"0\")\n              ^~~~~~~\n/tmp/tmp09jjcu55.swift:12:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"zero\", \"0\")\n    ^~~~~~~\n/tmp/tmp09jjcu55.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \"one\", \"1\")\n              ^~~~~~~\n/tmp/tmp09jjcu55.swift:13:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"one\", \"1\")\n    ^~~~~~~\n/tmp/tmp09jjcu55.swift:14:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"two\", \"2\")\n\
    \              ^~~~~~~\n/tmp/tmp09jjcu55.swift:14:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"two\"\
    , \"2\")\n    ^~~~~~~\n/tmp/tmp09jjcu55.swift:15:15: error: cannot find 'st"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_arr = numbers.split(\"\
    \ \").map{String::fromCharCode($0)}\n    numbers_arr.sortInPlace()\n    return\
    \ String(numbers_arr)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf99ibk3j.swift:8:52: error: consecutive statements on a line must\
    \ be separated by ';'\n    var numbers_arr = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                                   ^\n                      \
    \                             ;\n/tmp/tmpf99ibk3j.swift:8:52: error: expected\
    \ expression\n    var numbers_arr = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                                   ^\n/tmp/tmpf99ibk3j.swift:8:31:\
    \ error: no exact matches in call to instance method 'split'\n    var numbers_arr\
    \ = numbers.split(\" \").map{String::fromCharCode($0)}\n                     \
    \         ^\n/tmp/tmpf99ibk3j.swift:8:31: note: candidate has partially matching\
    \ parameter list (separator: String.Element, maxSplits: Int, omittingEmptySubsequences:\
    \ Bool)\n    var numbers_arr = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                              ^\n/tmp/tmpf99ibk3j.swift:8:31: note: candidate\
    \ has partially matching parameter list (separator: String.Element, maxSplits:\
    \ Int, omittingEmptySubsequences: Bool)\n    var numbers_arr = numbers.split(\"\
    \ \").map{String::fromCharCode($0)}\n                              ^\n/tmp/tmpf99ibk3j.swift:8:45:\
    \ error: contextual type for closure argument list expects 1 argument, which cannot\
    \ be implicitly ignored\n    var numbers_arr = numbers.split(\" \").map{String::fromCharCode($0)}\n\
    \                                            ^\n                             \
    \                _ in \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\treturn numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpvojqsxx4.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpvojqsxx4.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpvojqsxx4.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpvojqsxx4.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpvojqsxx4.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpvojqsxx4.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpvojqsxx4.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpvojqsxx4.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpvojqsxx4.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpvojqsxx4.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpvojqsxx4.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpvojqsxx4.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpvojqsxx4.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpvojqsxx4.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\tnumbers := strings.Trim(numbers, \"0\")\n\tnumbers := strings.Trim(numbers,\
    \ \"0\")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpopwlr8ic.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpopwlr8ic.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3geussht.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numberList = numbers.split(\"\
    \ \").map { Int($0) }\n    numberList = numberList.sorted()\n    return numberList.map\
    \ { String($0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptfiq1z7v.swift:8:36: error: missing argument label 'separator:'\
    \ in call\n    var numberList = numbers.split(\" \").map { Int($0) }\n       \
    \                            ^\n                                   separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n    numbers_array.sort()\n    return numbers_array.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjwlxvr2v.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpjwlxvr2v.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpjwlxvr2v.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpjwlxvr2v.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpjwlxvr2v.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpjwlxvr2v.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpjwlxvr2v.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpjwlxvr2v.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgpjbhq35.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpgpjbhq35.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmpgpjbhq35.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpgpjbhq35.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpgpjbhq35.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bz9mr5f.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n    numbers = strings.Trim(numbers, \" \")\n    numbers =\
    \ strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers, \"'\")\n \
    \   numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.Trim(numbers, \"2\")\n    numbers = strings.Trim(numbers,\
    \ \"3\")\n    numbers = strings.Trim(numbers, \"4\")\n    numbers = strings.Trim(numbers,\
    \ \"5\")\n    numbers = strings.Trim(numbers, \"6\")\n    numbers = strings.Trim(numbers,\
    \ \"7\")\n    numbers = strings.Trim(numbers, \"8\")\n    numbers = strings.Trim(numbers,\
    \ \"9\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \"'\")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"-\")\n    numbers = strings.Trim(numbers,\
    \ \"'\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.Trim(numbers,\
    \ \"1\")\n    numbers = strings.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqax470nf.swift:54:22: error: expected member name following '.'\n\
    \    numbers = strings.\n                     ^\n/tmp/tmpqax470nf.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpqax470nf.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpqax470nf.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmpqax470nf.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmpqax470nf.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmpqax470nf.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmpqax470nf.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmpqax470nf.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmpqax470nf.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmpqax470nf.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmpqax470nf.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmpqax470nf.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmpqax470nf.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"1\", \"\", -1)\n              ^~~~~~~\n/tmp/tmpqax470nf.swift:14:5:\
    \ error: cannot assign to value: 'num"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl8iwlovy.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpl8iwlovy.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysj1_45v.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpysj1_45v.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpysj1_45v.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map{ Int($0) }\n    numbers_array.sort()\n    return numbers_array.map(String.init).join(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpporb5x_g.swift:8:39: error: missing argument label 'separator:'\
    \ in call\n    var numbers_array = numbers.split(\" \").map{ Int($0) }\n     \
    \                                 ^\n                                      separator:\
    \ \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers, \"\
    \ \", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers\
    \ = strings.Replace(numbers, \"/\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"\\\\\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \tnumbers = strings.Replace(numbers, \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"3\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"6\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"9\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"+\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"=\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"%\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"*\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"(\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \")\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"/\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n\
    \tnumbers = strings.Replace(numbers, \"=\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"*\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \")\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"/\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"=\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"%\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"*\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"(\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \")\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"/\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"\\\\\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"=\", \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmptn1_rbnu.swift:48:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmptn1_rbnu.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmptn1_rbnu.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmptn1_rbnu.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmptn1_rbnu.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmptn1_rbnu.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Replace(numbers, \" \", \"\", -1)\n       \
    \           ^~~~~~~\n/tmp/tmptn1_rbnu.swift:10:2: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers, \"\
    \ \", \"\", -1)\n        ^~~~~~~\n/tmp/tmptn1_rbnu.swift:11:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"-\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmptn1_rbnu.swift:11:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n        ^~~~~~~\n/tmp/tmptn1_rbnu.swift:12:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"/\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmptn1_rbnu.swift:12:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"/\", \"\", -1)\n        ^~~~~~~\n/tmp/tmptn1_rbnu.swift:13:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"\\\\\"\
    , \"\", -1)\n                  ^~~~~~~\n/tmp/tmptn1_rbnu.swift:13:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"\\\\\", \"\", -1)\n        ^~~~~~~\n/tmp/tmptn1_rbnu.swift:14:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"0\", \"\
    \", -1)\n                  ^"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpesztu7o2.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpesztu7o2.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpesztu7o2.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpesztu7o2.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpesztu7o2.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers := strings.Replace(numbers, \"\
    -\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \",\", \" \", -1)\n\tnumbers\
    \ := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"/\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"\\\\\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"'\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"\\\"\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"%\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"(\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \")\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"*\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"+\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"=\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"<\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \">\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"?\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"!\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"@\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"#\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"$\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"%\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"^\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"&\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"*\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"(\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \")\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"_\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"=\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"<\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \">\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"?\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"!\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"@\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"#\", \" \", -1)\n\
    \tnumbers := \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpubnr10e6.swift:10:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Replace(numbers, \"-\", \" \"\
    , -1)\n               ^\n               ;\n/tmp/tmpubnr10e6.swift:10:10: error:\
    \ expected expression\n        numbers := strings.Replace(numbers, \"-\", \" \"\
    , -1)\n                ^\n/tmp/tmpubnr10e6.swift:8:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n\
    /tmp/tmpubnr10e6.swift:8:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpubnr10e6.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpubnr10e6.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpubnr10e6.swift:10:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.Replace(numbers, \"-\", \" \", -1)\n \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n    numbers.sort()\n    return numbers.join(\" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpe65vylyt.swift:8:49: error: expected expression in list of expressions\n\
    \    var numbers = numbers.split(\" \").map(String::init)\n                  \
    \                              ^\n/tmp/tmpe65vylyt.swift:8:50: error: consecutive\
    \ statements on a line must be separated by ';'\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                 ^\n\
    \                                                 ;\n/tmp/tmpe65vylyt.swift:8:54:\
    \ error: initializers may only be declared within a type\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \ ^\n/tmp/tmpe65vylyt.swift:8:54: error: expected '(' for initializer parameters\n\
    \    var numbers = numbers.split(\" \").map(String::init)\n                  \
    \                                   ^\n/tmp/tmpe65vylyt.swift:8:27: error: no\
    \ exact matches in call to instance method 'split'\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                          ^\n/tmp/tmpe65vylyt.swift:8:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers\
    \ = numbers.split(\" \").map(String::init)\n                          ^\n/tmp/tmpe65vylyt.swift:8:27:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                          ^\n/tmp/tmpe65vylyt.swift:8:49:\
    \ error: missing argument for parameter #1 in call\n    var numbers = numbers.split(\"\
    \ \").map(String::init)\n                                                ^\n \
    \                                               <#(ArraySlice<String.Element>)\
    \ throws -> _#>\nSwift.Collection:2:28: note: 'map' declared here\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n/tmp/tmpe65vylyt.swift:8:27: error: generic parameter\
    \ 'T' could not be inferred\n    var numbers = n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimPrefix(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers := strings.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo7gzhbz1.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpo7gzhbz1.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmpo7gzhbz1.swift:51:20:\
    \ error: expected member name following '.'\n        numbers := strings.\n   \
    \                       ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numberList = numbers.split(\"\
    \ \").map(String::trim)\n    numberList.sort()\n    return numberList.join(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbgvxvyxp.swift:8:52: error: expected expression in list of expressions\n\
    \    var numberList = numbers.split(\" \").map(String::trim)\n               \
    \                                    ^\n/tmp/tmpbgvxvyxp.swift:8:30: error: no\
    \ exact matches in call to instance method 'split'\n    var numberList = numbers.split(\"\
    \ \").map(String::trim)\n                             ^\n/tmp/tmpbgvxvyxp.swift:8:30:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numberList\
    \ = numbers.split(\" \").map(String::trim)\n                             ^\n/tmp/tmpbgvxvyxp.swift:8:30:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var numberList = numbers.split(\"\
    \ \").map(String::trim)\n                             ^\n/tmp/tmpbgvxvyxp.swift:8:57:\
    \ error: missing argument for parameter #1 in call\n    var numberList = numbers.split(\"\
    \ \").map(String::trim)\n                                                    \
    \    ^\n                                                        <#(ArraySlice<String.Element>)\
    \ throws -> _#>\nSwift.Collection:2:28: note: 'map' declared here\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n/tmp/tmpbgvxvyxp.swift:8:30: error: generic parameter\
    \ 'T' could not be inferred\n    var numberList = numbers.split(\" \").map(String::trim)\n\
    \                             ^\nSwift.Collection:2:28: note: in call to function\
    \ 'map'\n    @inlinable public func map<T>(_ transform: (Self.Element) throws\
    \ -> T) rethrows -> [T]\n                           ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \",\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"/\", \"\", -1)\n    numbers = strings.Replace(numbers, \"\\\\\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"%\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"*\", \"\", -1)\n    numbers = strings.Replace(numbers, \"(\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \")\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"=\", \"\", -1)\n    numbers = strings.Replace(numbers, \"!\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"?\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"<\", \"\", -1)\n    numbers = strings.Replace(numbers, \">\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"|\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"~\", \"\", -1)\n    numbers = strings.Replace(numbers, \"`\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"{\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"}\", \"\", -1)\n    numbers = strings.Replace(numbers, \"[\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"]\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"\\\\\", \"\", -1)\n    numbers = strings.Replace(numbers, \"^\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"~\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"`\", \"\", -1)\n    numbers = strings.Replace(numbers, \"{\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2y6v6_kf.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp2y6v6_kf.swift:47:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"{\", \"\"\n                             ^\n/tmp/tmp2y6v6_kf.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"'\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmp2y6v6_kf.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmp2y6v6_kf.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmp2y6v6_kf.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"1\", "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0ctceu52.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmp0ctceu52.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpij61uu6z.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\n\")\n\tnumbers := strings.Trim(numbers, \"\\r\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\t\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Tri\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg2nqu1_t.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpg2nqu1_t.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers = strings.TrimSuffix(numbers, \".\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpff0xb8e0.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpff0xb8e0.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpff0xb8e0.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n                  ^~~~~~~\n/tmp/tmpff0xb8e0.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpff0xb8e0.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \",\")\n           \
    \       ^~~~~~~\n/tmp/tmpff0xb8e0.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \",\")\n\
    \        ^~~~~~~\n/tmp/tmpff0xb8e0.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \".\")\n              \
    \    ^~~~~~~\n/tmp/tmpff0xb8e0.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \".\")\n\
    \        ^~~~~~~\n/tmp/tmpff0xb8e0.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"-\")\n              \
    \    ^~~~~~~\n/tmp/tmpff0xb8e0.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"-\")\n\
    \        ^~~~~~~\n/tmp/tmpff0xb8e0.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmpff0xb8e0.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmpff0xb8e0.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmpff0xb8e0.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpgpjbhq35.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSuffix(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpgpjbhq35.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimSuffix(numbers, \" \")\n        \
    \        ^\n/tmp/tmpgpjbhq35.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpgpjbhq35.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpgpjbhq35.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3geussht.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"z\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \"s\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmppe1a4jt1.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmppe1a4jt1.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmppe1a4jt1.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n                  ^~~~~~~\n/tmp/tmppe1a4jt1.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n        ^~~~~~~\n/tmp/tmppe1a4jt1.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"x\")\n           \
    \       ^~~~~~~\n/tmp/tmppe1a4jt1.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"x\")\n\
    \        ^~~~~~~\n/tmp/tmppe1a4jt1.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"z\")\n              \
    \    ^~~~~~~\n/tmp/tmppe1a4jt1.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"z\")\n\
    \        ^~~~~~~\n/tmp/tmppe1a4jt1.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"0\")\n              \
    \    ^~~~~~~\n/tmp/tmppe1a4jt1.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"0\")\n\
    \        ^~~~~~~\n/tmp/tmppe1a4jt1.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n              \
    \    ^~~~~~~\n/tmp/tmppe1a4jt1.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmppe1a4jt1.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmppe1a4jt1.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \"0\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers := strings.TrimSuffix(numbers, \"2\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers := strings.TrimSuffix(numbers, \"4\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers := strings.TrimSuffix(numbers, \"6\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers := strings.TrimSuffix(numbers, \"8\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers := strings.TrimSuffix(numbers, \"10\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"11\")\n    numbers := strings.TrimSuffix(numbers, \"12\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"13\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"14\")\n    numbers := strings.TrimSuffix(numbers, \"15\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"16\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"17\")\n    numbers := strings.TrimSuffix(numbers, \"18\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"19\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"20\")\n    numbers := strings.TrimSuffix(numbers, \"21\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"22\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"23\")\n    numbers := strings.TrimSuffix(numbers, \"24\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"25\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"26\")\n    numbers := strings.TrimSuffix(numbers, \"27\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"28\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"29\")\n    numbers := strings.TrimSuffix(numbers, \"30\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"31\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"32\")\n    numbers := strings.TrimSuffix(numbers, \"33\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"34\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"35\")\n    numbers := strings.TrimSuffix(numbers, \"36\")\n    numbers :=\
    \ strings.TrimSuffix(numbers, \"37\")\n    numbers := strings.TrimSuffix(numbers,\
    \ \"38\")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp08_my6e0.swift:9:12: error: consecutive statements on a line must\
    \ be separated by ';'\n    numbers := strings.TrimSuffix(numbers, \"0\")\n   \
    \        ^\n           ;\n/tmp/tmp08_my6e0.swift:9:13: error: expected expression\n\
    \    numbers := strings.TrimSuffix(numbers, \"0\")\n            ^\n/tmp/tmp08_my6e0.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp08_my6e0.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp08_my6e0.swift:9:5: warning: expression of type 'String' is\
    \ unused\n    numbers := strings.TrimSuffix(numbers, \"0\")\n    ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \".\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpawci6d17.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpawci6d17.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \".\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \":\")\n\tnumbers := strings.Trim(numbers, \"/\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\\\\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"_\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \"-\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpca1u880p.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpca1u880p.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n/tmp/tmpca1u880p.swift:58:35:\
    \ error: unterminated string literal\n        numbers := strings.Trim(numbers,\
    \ \"\n                                         ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy8fij0pm.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpy8fij0pm.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n    numbers_array.sort()\n    return numbers_array.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjwlxvr2v.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpjwlxvr2v.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpjwlxvr2v.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpjwlxvr2v.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpjwlxvr2v.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpjwlxvr2v.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpjwlxvr2v.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpjwlxvr2v.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3geussht.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \" \", \"-\", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n\tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\
    \tnumbers := strings.Replace(numbers, \"-\", \" \", -1)\n\tnumbers := strings.Replace(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpowgebbop.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpowgebbop.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsLetterOrDigit)\n    numbers\
    \ = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLineSeparator)\n    numbers = strings.TrimFunc(numbers, unicode.IsSeparator)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n    numbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \    numbers = strings.TrimFunc(numbers, unicode.IsControl)\n    number\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp73zt1d1f.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp73zt1d1f.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp73zt1d1f.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n              ^~~~~~~\n/tmp/tmp73zt1d1f.swift:9:46: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                             ^~~~~~~\n/tmp/tmp73zt1d1f.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRightFunc(numbers, unicode.IsDigit)\n    ^~~~~~~\n/tmp/tmp73zt1d1f.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n              ^~~~~~~\n/tmp/tmp73zt1d1f.swift:10:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \                                        ^~~~~~~\n/tmp/tmp73zt1d1f.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsSpace)\n    ^~~~~~~\n/tmp/tmp73zt1d1f.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              ^~~~~~~\n/tmp/tmp73zt1d1f.swift:11:41: error:\
    \ cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\
    \                                        ^~~~~~~\n/tmp/tmp73zt1d1f.swift:11:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimFunc(numbers, unicode.IsLetter)\n    ^~~~~~~\n/tmp/tmp73zt1d1f.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n              ^~~~~~~\n/tmp/tmp73zt1d1f.swift:12:41:\
    \ error: cannot find 'unicode' in scope\n    numbers = strings.TrimFunc(numbers,\
    \ unicode.IsPunctuation)\n                                   "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Split(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl8iwlovy.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpl8iwlovy.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n    numbers_array.sort()\n    return numbers_array.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjwlxvr2v.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpjwlxvr2v.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpjwlxvr2v.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpjwlxvr2v.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpjwlxvr2v.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpjwlxvr2v.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpjwlxvr2v.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpjwlxvr2v.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmp702dr_px.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp702dr_px.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp702dr_px.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmp702dr_px.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmp702dr_px.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \",\")\n              ^~~~~~~\n\
    /tmp/tmp702dr_px.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \",\")\n    ^~~~~~~\n/tmp/tmp702dr_px.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmp702dr_px.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmp702dr_px.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \".\")\n              ^~~~~~~\n\
    /tmp/tmp702dr_px.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \".\")\n    ^~~~~~~\n/tmp/tmp702dr_px.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n              ^~~~~~~\n/tmp/tmp702dr_px.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmp702dr_px.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmp702dr_px.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmp702dr_px.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa3q4bz91.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpa3q4bz91.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmplmxwhvnd.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysj1_45v.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpysj1_45v.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpysj1_45v.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \".\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimRight(numbers, \"-\")\n\tnumbers := strings.TrimRight\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp6u0_a9zo.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp6u0_a9zo.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmp6u0_a9zo.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp6u0_a9zo.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp6u0_a9zo.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numberList = numbers.split(\"\
    \ \").map{Int($0)!}\n    numberList.sort()\n    return numberList.join()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjhcvsctx.swift:8:36: error: missing argument label 'separator:'\
    \ in call\n    var numberList = numbers.split(\" \").map{Int($0)!}\n         \
    \                          ^\n                                   separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Replace(numbers, \" \", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"'\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"\\\"\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"%\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"#\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"&\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"*\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"+\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \",\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"/\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"\\\\\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"=\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"<\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \">\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"?\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"!\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"(\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \")\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"{\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"}\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"[\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"]\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"|\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"\\\\\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"^\", \"\", -1)\n\
    \tnumbers := strings.Replace(numbers, \"~\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"`\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"{\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"}\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"[\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"]\", \"\", -1)\n\t\
    numbers := strings.Replace(numbers, \"|\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"\\\\\", \"\", -1)\n\tnumbers := strings.Replace(numbers, \"^\", \"\", -1)\n\
    \tnumbers := strings.Replace(numbers, \"~\", \"\", -1)\n\tnumbers := strings.Replace(numbers,\
    \ \"`\", \"\", -1)\n\tnumbers := strings.Replace(number\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7j1bxuk2.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Replace(numbers, \" \", \"\"\
    , -1)\n               ^\n               ;\n/tmp/tmp7j1bxuk2.swift:9:10: error:\
    \ expected expression\n        numbers := strings.Replace(numbers, \" \", \"\"\
    , -1)\n                ^\n/tmp/tmp7j1bxuk2.swift:8:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n\
    /tmp/tmp7j1bxuk2.swift:8:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp7j1bxuk2.swift:9:2:\
    \ warning: expression of type 'String' is unused\n        numbers := strings.Replace(numbers,\
    \ \" \", \"\", -1)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_szh3c42.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp_szh3c42.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmp_szh3c42.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp_szh3c42.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp_szh3c42.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimLeftFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsPunctuation)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnhjycf56.swift:43:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpnhjycf56.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpnhjycf56.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpnhjycf56.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                  ^~~~~~~\n/tmp/tmpnhjycf56.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                                 ^~~~~~~\n\
    /tmp/tmpnhjycf56.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \        ^~~~~~~\n/tmp/tmpnhjycf56.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n  \
    \                ^~~~~~~\n/tmp/tmpnhjycf56.swift:10:42: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n\
    \                                                ^~~~~~~\n/tmp/tmpnhjycf56.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n        ^~~~~~~\n/tmp/tmpnhjycf56.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmpnhjycf56.swift:11:38: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                                            ^~~~~~~\n/tmp/tmpnhjycf56.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmpnhjycf56.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphry3jiq0.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpij61uu6z.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph70ky385.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmph70ky385.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmph70ky385.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmph70ky385.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmph70ky385.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmplmxwhvnd.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdhiacec_.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdhiacec_.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.Trim\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_szh3c42.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmp_szh3c42.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmp_szh3c42.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmp_szh3c42.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmp_szh3c42.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy8fij0pm.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpy8fij0pm.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"-\")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \" \", \"-\")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"-\")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \" \", \"-\")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"-\")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \" \", \"-\")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"-\")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \" \", \"-\")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"-\")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \" \", \"-\")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphjgkegxp.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmphjgkegxp.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmphjgkegxp.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmphjgkegxp.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmphjgkegxp.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n/tmp/tmphjgkegxp.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n/tmp/tmphjgkegxp.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n              ^~~~~~~\n/tmp/tmphjgkegxp.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\")\n    ^~~~~~~\n/tmp/tmphjgkegxp.swift:12:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \" \")\n \
    \             ^~~~~~~\n/tmp/tmphjgkegxp.swift:12:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \" \")\n    ^~~~~~~\n/tmp/tmphjgkegxp.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \" \", \"-\")\n           \
    \   ^~~~~~~\n/tmp/tmphjgkegxp.swift:13:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \" \", \"-\")\n\
    \    ^~~~~~~\n/tmp/tmphjgkegxp.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n\
    /tmp/tmphjgkegxp.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n\
    /tmp/tmphjgkegxp.swift:15:15: error: cannot find 'strings'"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq2zziibe.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpq2zziibe.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \"\\r\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpdab12pl6.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpdab12pl6.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \",\")\n    numbers = strings.TrimRight(numbers,\
    \ \"-\")\n    numbers = strings.TrimRight(numbers, \".\")\n    numbers = strings.TrimRight(numbers,\
    \ \"/\")\n    numbers = strings.TrimRight(numbers, \"-\")\n    numbers = strings.TrimRight(numbers,\
    \ \"(\")\n    numbers = strings.TrimRight(numbers, \")\")\n    numbers = strings.TrimRight(numbers,\
    \ \"#\")\n    numbers = strings.TrimRight(numbers, \"%\")\n    numbers = strings.TrimRight(numbers,\
    \ \"&\")\n    numbers = strings.TrimRight(numbers, \"*\")\n    numbers = strings.TrimRight(numbers,\
    \ \"(\")\n    numbers = strings.TrimRight(numbers, \")\")\n    numbers = strings.TrimRight(numbers,\
    \ \"/\")\n    numbers = strings.TrimRight(numbers, \"-\")\n    numbers = strings.TrimRight(numbers,\
    \ \"+\")\n    numbers = strings.TrimRight(numbers, \"=\")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \".\")\n    numbers = strings.TrimRight(numbers,\
    \ \"#\")\n    numbers = strings.TrimRight(numbers, \"%\")\n    numbers = strings.TrimRight(numbers,\
    \ \"&\")\n    numbers = strings.TrimRight(numbers, \"*\")\n    numbers = strings.TrimRight(numbers,\
    \ \"(\")\n    numbers = strings.TrimRight(numbers, \")\")\n    numbers = strings.TrimRight(numbers,\
    \ \"/\")\n    numbers = strings.TrimRight(numbers, \"-\")\n    numbers = strings.TrimRight(numbers,\
    \ \"+\")\n    numbers = strings.TrimRight(numbers, \"=\")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \".\")\n    numbers = strings.TrimRight(numbers,\
    \ \"#\")\n    numbers = strings.TrimRight(numbers, \"%\")\n    numbers = strings.TrimRight(numbers,\
    \ \"&\")\n    numbers = strings.TrimRight(numbers, \"*\")\n    numbers = strings.TrimRight(numbers,\
    \ \"(\")\n    numbers = strings.TrimRight(numbers, \")\")\n    numbers = strings.TrimRight(numbers,\
    \ \"/\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpgv1uc_1u.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmpgv1uc_1u.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.TrimRight(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimRight(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimRight(numbers,\
    \ \",\")\n              ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimRight(numbers,\
    \ \",\")\n    ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimRight(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpgv1uc_1u.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimRight(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimRight(numbers,\
    \ \".\")\n              ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimRight(numbers,\
    \ \".\")\n    ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimRight(numbers, \"/\")\n              ^~~~~~~\n\
    /tmp/tmpgv1uc_1u.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimRight(numbers, \"/\")\n    ^~~~~~~\n/tmp/tmpgv1uc_1u.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    numbers = string"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"X\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmptrpwoqpl.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmptrpwoqpl.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmptrpwoqpl.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmptrpwoqpl.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmptrpwoqpl.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmptrpwoqpl.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmptrpwoqpl.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmptrpwoqpl.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmptrpwoqpl.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmptrpwoqpl.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmptrpwoqpl.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmptrpwoqpl.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmptrpwoqpl.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmptrpwoqpl.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmptrpwoqpl.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy8fij0pm.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpy8fij0pm.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n\tnumbers = strings.TrimSuffix(numbers, \"*\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n\tnumbers = strings.TrimSuffix(numbers, \")\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"<\")\n\tnumbers = strings.TrimSuffix(numbers, \">\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n\tnumbers = strings.TrimSuffix(numbers, \"*\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n\tnumbers = strings.TrimSuffix(numbers, \")\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"<\")\n\tnumbers = strings.TrimSuffix(numbers, \">\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n\tnumbers = strings.TrimSuffix(numbers, \"\\\\\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n\tnumbers = strings.TrimSuffix(numbers, \"#\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n\tnumbers = strings.TrimSuffix(numbers, \"*\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpobwge473.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpobwge473.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpobwge473.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmpobwge473.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmpobwge473.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmpobwge473.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmpobwge473.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmpobwge473.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmpobwge473.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmpobwge473.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmpobwge473.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmpobwge473.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmpobwge473.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmpobwge473.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \"\\n\")\n\tnumbers := strings.Trim(numbers,\
    \ \",\")\n\tnumbers := strings.Trim(numbers, \"\\t\")\n\tnumbers := strings.Trim(numbers,\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\") ==\
    \ \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpodxufagh.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpodxufagh.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpv18lgmi9.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpv18lgmi9.swift:50:33: note: to match this opening '('\n    numbers\
    \ = strings.TrimPrefix(number\n                                ^\n/tmp/tmpv18lgmi9.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:11:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:11:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmpv18lgmi9.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpv18lgmi9.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpv18lgmi9.swift:14:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tm"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"\")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \"-\", \" \")\n\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpya_tlmt8.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpya_tlmt8.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpya_tlmt8.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmpya_tlmt8.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmpya_tlmt8.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n/tmp/tmpya_tlmt8.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n/tmp/tmpya_tlmt8.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\")\n              ^~~~~~~\n/tmp/tmpya_tlmt8.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\")\n    ^~~~~~~\n/tmp/tmpya_tlmt8.swift:12:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \" \")\n \
    \             ^~~~~~~\n/tmp/tmpya_tlmt8.swift:12:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \" \")\n    ^~~~~~~\n/tmp/tmpya_tlmt8.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"-\", \" \")\n           \
    \   ^~~~~~~\n/tmp/tmpya_tlmt8.swift:13:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\", \" \")\n\
    \    ^~~~~~~\n/tmp/tmpya_tlmt8.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n\
    /tmp/tmpya_tlmt8.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n\
    /tmp/tmpya_tlmt8.swift:15:15: error: cannot find 'strings' i"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted(by: <)\n    return numbers.joined(\" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbif0e02w.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted(by: <)\n            \
    \                    ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmplmxwhvnd.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmplmxwhvnd.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimPrefix(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmplmxwhvnd.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimPrefix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:13:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n              ^~~~~~~\n/tmp/tmplmxwhvnd.swift:14:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSuffix(numbers, \" \")\n    ^~~~~~~\n/tmp/tmplmxwhvnd.swift:15:15:\
    \ error: cannot find 'strings' in scope\n    nu"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3geussht.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.joinWithSeparator(\", \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpij61uu6z.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq2zziibe.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpq2zziibe.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \" \", \"\")\n    numbers\
    \ = strings.Replace(numbers, \"0\", \"\")\n    numbers = strings.Replace(numbers,\
    \ \"1\", \"\")\n    numbers = strings.Replace(numbers, \"2\", \"\")\n    numbers\
    \ = strings.Replace(numbers, \"3\", \"\")\n    numbers = strings.Replace(numbers,\
    \ \"4\", \"\")\n    numbers = strings.Replace(numbers, \"5\", \"\")\n    numbers\
    \ = strings.Replace(numbers, \"6\", \"\")\n    numbers = strings.Replace(numbers,\
    \ \"7\", \"\")\n    numbers = strings.Replace(numbers, \"8\", \"\")\n    numbers\
    \ = strings.Replace(numbers, \"9\", \"\")\n    numbers = strings.Replace(numbers,\
    \ \"  \", \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n    numbers = strings.TrimRight(numbers,\
    \ \" \")\n    numbers = strings.TrimRight(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7shtocfa.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmp7shtocfa.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmp7shtocfa.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmp7shtocfa.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmp7shtocfa.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \")\n              ^~~~~~~\n/tmp/tmp7shtocfa.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \" \")\n    ^~~~~~~\n/tmp/tmp7shtocfa.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\")\n              ^~~~~~~\n/tmp/tmp7shtocfa.swift:11:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\")\n    ^~~~~~~\n/tmp/tmp7shtocfa.swift:12:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"0\", \"\")\n  \
    \            ^~~~~~~\n/tmp/tmp7shtocfa.swift:12:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"0\"\
    , \"\")\n    ^~~~~~~\n/tmp/tmp7shtocfa.swift:13:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"1\", \"\")\n            \
    \  ^~~~~~~\n/tmp/tmp7shtocfa.swift:13:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"1\", \"\")\n \
    \   ^~~~~~~\n/tmp/tmp7shtocfa.swift:14:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"2\", \"\")\n              ^~~~~~~\n\
    /tmp/tmp7shtocfa.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"2\", \"\")\n    ^~~~~~~\n\
    /tmp/tmp7shtocfa.swift:15:15: error: cannot find 'strings' in scop"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n    numbers_array.sort()\n    return numbers_array.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjwlxvr2v.swift:8:55: error: expected expression in list of expressions\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                                          ^\n/tmp/tmpjwlxvr2v.swift:8:56: error:\
    \ consecutive statements on a line must be separated by ';'\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                 \
    \                      ^\n                                                   \
    \    ;\n/tmp/tmpjwlxvr2v.swift:8:60: error: initializers may only be declared\
    \ within a type\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                           ^\n/tmp/tmpjwlxvr2v.swift:8:60:\
    \ error: expected '(' for initializer parameters\n    var numbers_array = numbers.split(\"\
    \ \").map(String::init)\n                                                    \
    \       ^\n/tmp/tmpjwlxvr2v.swift:8:33: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                ^\n/tmp/tmpjwlxvr2v.swift:8:33: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]' (aka\
    \ '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numbers_array\
    \ = numbers.split(\" \").map(String::init)\n                                ^\n\
    /tmp/tmpjwlxvr2v.swift:8:33: note: found candidate with type '(String.Element,\
    \ Int, Bool) -> [String.SubSequence]' (aka '(Character, Int, Bool) -> Array<Substring>')\n\
    \    var numbers_array = numbers.split(\" \").map(String::init)\n            \
    \                    ^\n/tmp/tmpjwlxvr2v.swift:8:55: error: missing argument for\
    \ parameter #1 in call\n    var numbers_array = numbers.split(\" \").map(String::init)\n\
    \                                                      ^\n                   \
    \                                   <#(ArraySlice<String.Element>) throws -> _#>\n\
    Swift.Collection:2:28: note: 'map' declared here\n    @inlinable public func map<T>(_\
    \ transform: (Self.Element) throws -> T) rethrows -> [T]\n                    "
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpesztu7o2.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpesztu7o2.swift:9:5:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \    ^~~~\n/tmp/tmpesztu7o2.swift:9:15: error: cannot find 'sort' in scope\n \
    \   sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n              ^~~~\n/tmp/tmpesztu7o2.swift:9:28:\
    \ error: cannot find 'sort' in scope\n    sort.Sort(sort.Reverse(sort.IntSlice(numbers)))\n\
    \                           ^~~~\n/tmp/tmpesztu7o2.swift:10:12: error: cannot\
    \ find 'strings' in scope\n    return strings.Join(numbers, \" \")\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers = strings.Sort(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpysj1_45v.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpysj1_45v.swift:9:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Sort(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpysj1_45v.swift:10:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numbers, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numberList = numbers.split(\"\
    \ \").map(String::init)\n    numberList.sort()\n    return numberList.join()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp3my69uh1.swift:8:52: error: expected expression in list of expressions\n\
    \    var numberList = numbers.split(\" \").map(String::init)\n               \
    \                                    ^\n/tmp/tmp3my69uh1.swift:8:53: error: consecutive\
    \ statements on a line must be separated by ';'\n    var numberList = numbers.split(\"\
    \ \").map(String::init)\n                                                    ^\n\
    \                                                    ;\n/tmp/tmp3my69uh1.swift:8:57:\
    \ error: initializers may only be declared within a type\n    var numberList =\
    \ numbers.split(\" \").map(String::init)\n                                   \
    \                     ^\n/tmp/tmp3my69uh1.swift:8:57: error: expected '(' for\
    \ initializer parameters\n    var numberList = numbers.split(\" \").map(String::init)\n\
    \                                                        ^\n/tmp/tmp3my69uh1.swift:8:30:\
    \ error: no exact matches in call to instance method 'split'\n    var numberList\
    \ = numbers.split(\" \").map(String::init)\n                             ^\n/tmp/tmp3my69uh1.swift:8:30:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    var numberList\
    \ = numbers.split(\" \").map(String::init)\n                             ^\n/tmp/tmp3my69uh1.swift:8:30:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [String.SubSequence]'\
    \ (aka '(Character, Int, Bool) -> Array<Substring>')\n    var numberList = numbers.split(\"\
    \ \").map(String::init)\n                             ^\n/tmp/tmp3my69uh1.swift:8:52:\
    \ error: missing argument for parameter #1 in call\n    var numberList = numbers.split(\"\
    \ \").map(String::init)\n                                                   ^\n\
    \                                                   <#(ArraySlice<String.Element>)\
    \ throws -> _#>\nSwift.Collection:2:28: note: 'map' declared here\n    @inlinable\
    \ public func map<T>(_ transform: (Self.Element) throws -> T) rethrows -> [T]\n\
    \                           ^\n/tmp/tmp3my69uh1.swift:8:30: error: generic p"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"+\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"/\")\n    numbers = strings.TrimSuffix(numbers, \"(\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \")\")\n    numbers = strings.TrimSuffix(numbers, \"#\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n    numbers = strings.TrimSuffix(numbers, \"*\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"&\")\n    numbers = strings.TrimSuffix(numbers, \"<\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \">\")\n    numbers = strings.TrimSuffix(numbers, \"=\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"~\")\n    numbers = strings.TrimSuffix(numbers, \"%\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"#\")\n    numbers = strings.TrimSuffix(numbers, \"@\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"$\")\n    numbers = strings.TrimSuffix(numbers, \"%\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n    numbers = strings.TrimSuffix(numbers, \"(\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \")\")\n    numbers = strings.TrimSuffix(numbers, \"#\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"%\")\n    numbers = strings.TrimSuffix(numbers, \"/\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"(\")\n    numbers = strings.TrimSuffix(numbers, \")\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"#\")\n    numbers = strings.TrimSuffix(numbers, \"%\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"*\")\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpj_weml1x.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpj_weml1x.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpj_weml1x.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    0\")\n              ^~~~~~~\n/tmp/tmpj_weml1x.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    ^~~~~~~\n/tmp/tmpj_weml1x.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"1\")\n              ^~~~~~~\n\
    /tmp/tmpj_weml1x.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    ^~~~~~~\n/tmp/tmpj_weml1x.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n              ^~~~~~~\n/tmp/tmpj_weml1x.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    ^~~~~~~\n/tmp/tmpj_weml1x.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"3\")\n              ^~~~~~~\n\
    /tmp/tmpj_weml1x.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    ^~~~~~~\n/tmp/tmpj_weml1x.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n              ^~~~~~~\n/tmp/tmpj_weml1x.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    ^~~~~~~\n/tmp/tmpj_weml1x.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"5\")\n              ^~~~~~~\n\
    /tmp/tmpj_weml1x.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    ^~~~~~~\n/tmp/tmpj_weml1x.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"z\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"z\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpg8omtk0x.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpg8omtk0x.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpg8omtk0x.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmpg8omtk0x.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmpg8omtk0x.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"x\")\n              ^~~~~~~\n\
    /tmp/tmpg8omtk0x.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    ^~~~~~~\n/tmp/tmpg8omtk0x.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n              ^~~~~~~\n/tmp/tmpg8omtk0x.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n    ^~~~~~~\n/tmp/tmpg8omtk0x.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"0\")\n              ^~~~~~~\n\
    /tmp/tmpg8omtk0x.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    ^~~~~~~\n/tmp/tmpg8omtk0x.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n              ^~~~~~~\n/tmp/tmpg8omtk0x.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    ^~~~~~~\n/tmp/tmpg8omtk0x.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"2\")\n              ^~~~~~~\n\
    /tmp/tmpg8omtk0x.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    ^~~~~~~\n/tmp/tmpg8omtk0x.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").map{Int($0)!}\n    numbers.sort()\n    return numbers.map{String($0)}.joined(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers: \"\
    \") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpo63svjti.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").map{Int($0)!}\n            \
    \                    ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    var numberList = strings.Split(numbers, \" \")\n    numberList = strings.Sort(numberList)\n\
    \    return strings.Join(numberList, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpwakmos92.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpwakmos92.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpwakmos92.swift:9:22: error:\
    \ cannot find 'strings' in scope\n    var numberList = strings.Split(numbers,\
    \ \" \")\n                     ^~~~~~~\n/tmp/tmpwakmos92.swift:10:18: error: cannot\
    \ find 'strings' in scope\n    numberList = strings.Sort(numberList)\n       \
    \          ^~~~~~~\n/tmp/tmpwakmos92.swift:11:12: error: cannot find 'strings'\
    \ in scope\n    return strings.Join(numberList, \" \")\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph70ky385.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmph70ky385.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmph70ky385.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmph70ky385.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmph70ky385.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpcjf9n15e.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpcjf9n15e.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpcjf9n15e.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.ToLower(numbers)\n   \
    \           ^~~~~~~\n/tmp/tmpcjf9n15e.swift:9:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.ToLower(numbers)\n    ^~~~~~~\n\
    /tmp/tmpcjf9n15e.swift:10:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"-\", \" \", -1)\n              ^~~~~~~\n/tmp/tmpcjf9n15e.swift:10:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.Replace(numbers, \"-\", \" \", -1)\n    ^~~~~~~\n/tmp/tmpcjf9n15e.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n              ^~~~~~~\n/tmp/tmpcjf9n15e.swift:11:5: error:\
    \ cannot assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    ^~~~~~~\n/tmp/tmpcjf9n15e.swift:12:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \" \"\
    , -1)\n              ^~~~~~~\n/tmp/tmpcjf9n15e.swift:12:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    ^~~~~~~\n/tmp/tmpcjf9n15e.swift:13:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \", \"-\"\
    , -1)\n              ^~~~~~~\n/tmp/tmpcjf9n15e.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    ^~~~~~~\n/tmp/tmpcjf9n15e.swift:14:15: error: cannot\
    \ find 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \" \"\
    , -1)\n              ^~~~~~~\n/tmp/tmpcjf9n15e.swift:14:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    ^~~~~~~\n/tmp/tmpcjf9n15e.s"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"z\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    numbers = strings.TrimSuffix(numbers, \"z\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n    numbers = strings.TrimSuffix(numbers, \"1\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n    numbers = strings.TrimSuffix(numbers, \"3\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n    numbers = strings.TrimSuffix(numbers, \"5\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n    numbers = strings.TrimSuffix(numbers, \"7\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n    numbers = strings.TrimSuffix(numbers, \"9\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n    numbers = strings.TrimSuffix(numbers, \"4\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n    numbers = strings.TrimSuffix(numbers, \"6\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n    numbers = strings.TrimSuffix(numbers, \"8\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n    numbers = strings.TrimSuffix(numbers, \"s\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n    number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmhpv6r70.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpmhpv6r70.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpmhpv6r70.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    s\")\n              ^~~~~~~\n/tmp/tmpmhpv6r70.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"s\")\n    ^~~~~~~\n/tmp/tmpmhpv6r70.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"x\")\n              ^~~~~~~\n\
    /tmp/tmpmhpv6r70.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"x\")\n    ^~~~~~~\n/tmp/tmpmhpv6r70.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n              ^~~~~~~\n/tmp/tmpmhpv6r70.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"z\")\n    ^~~~~~~\n/tmp/tmpmhpv6r70.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"0\")\n              ^~~~~~~\n\
    /tmp/tmpmhpv6r70.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"0\")\n    ^~~~~~~\n/tmp/tmpmhpv6r70.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n              ^~~~~~~\n/tmp/tmpmhpv6r70.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n    ^~~~~~~\n/tmp/tmpmhpv6r70.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"2\")\n              ^~~~~~~\n\
    /tmp/tmpmhpv6r70.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"2\")\n    ^~~~~~~\n/tmp/tmpmhpv6r70.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"2\", \"\", -1)\n    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"4\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"5\", \"\", -1)\n    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"7\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"8\", \"\", -1)\n    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n    numbers = strings.Replace(numbers, \"1\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp0vnrnxd5.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp0vnrnxd5.swift:47:30: note: to match this opening '('\n    numbers\
    \ = strings.Replace(numbers, \"1\", \"\"\n                             ^\n/tmp/tmp0vnrnxd5.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \" \"\
    , \"\", -1)\n              ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:10:5: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \" \", \"\", -1)\n    ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\
    \              ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \"-\"\
    , \"\", -1)\n    ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n        \
    \      ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:12:5: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\
    \    ^~~~~~~\n/tmp/tmp0vnrnxd5.swift:13:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n              ^~~~~~~\n\
    /tmp/tmp0vnrnxd5.swift:13:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Replace(numbers, \"1\", \"\", -1)\n    ^~~~~~~\n\
    /tmp/tmp0vnrnxd5.swift:14:15: error: cannot find 'strings' in scope\n    numbers\
    \ = strings.Replace(numbers, \"2\", "
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    numbers.Sort()\n    return strings.Join(numbers, \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpy8fij0pm.swift:8:19: error: cannot find 'strings' in scope\n  \
    \  var numbers = strings.Split(numbers, \" \")\n                  ^~~~~~~\n/tmp/tmpy8fij0pm.swift:10:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpbr0p5156.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n/tmp/tmpbr0p5156.swift:9:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \").sorted()\n    return numbers.join(\" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp4bz9mr5f.swift:8:33: error: missing argument label 'separator:'\
    \ in call\n    var numbers = numbers.split(\" \").sorted()\n                 \
    \               ^\n                                separator: \n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.ToLower(numbers)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    numbers = strings.Replace(numbers, \",\", \" \")\n    numbers\
    \ = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers, \" \")\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg3393yzl.swift:59:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpg3393yzl.swift:58:27: note: to match this opening '('\n    numbers\
    \ = strings.Trim(number\n                          ^\n/tmp/tmpg3393yzl.swift:8:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSpace(numbers)\n\
    \              ^~~~~~~\n/tmp/tmpg3393yzl.swift:8:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.TrimSpace(numbers)\n  \
    \  ^~~~~~~\n/tmp/tmpg3393yzl.swift:9:15: error: cannot find 'strings' in scope\n\
    \    numbers = strings.ToLower(numbers)\n              ^~~~~~~\n/tmp/tmpg3393yzl.swift:9:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.ToLower(numbers)\n    ^~~~~~~\n/tmp/tmpg3393yzl.swift:10:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.Replace(numbers, \"-\"\
    , \" \")\n              ^~~~~~~\n/tmp/tmpg3393yzl.swift:10:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \")\n    ^~~~~~~\n/tmp/tmpg3393yzl.swift:11:15: error: cannot find\
    \ 'strings' in scope\n    numbers = strings.Replace(numbers, \",\", \" \")\n \
    \             ^~~~~~~\n/tmp/tmpg3393yzl.swift:11:5: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n    numbers = strings.Replace(numbers, \",\"\
    , \" \")\n    ^~~~~~~\n/tmp/tmpg3393yzl.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Trim(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpg3393yzl.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.Trim(numbers, \" \")\n    ^~~~~~~\n/tmp/tmpg3393yzl.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.Trim(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpg3393yzl.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpg3393yzl.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.Trim(numbers, \" \")\n              ^~~~~~~\n\
    /tmp/tmpg3393yzl.swift:14:5: error: cannot assign to "
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return strings.Join(numbers, \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpf8h0nruw.swift:8:27: error: no exact matches in call to instance\
    \ method 'split'\n    var numbers = numbers.split(\" \")\n                   \
    \       ^\nSwift.Sequence:2:40: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [ArraySlice<Self.Element>]\n                                       ^\nSwift.Collection:2:40:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(separator:)')\n\
    \    @inlinable public __consuming func split(separator: Self.Element, maxSplits:\
    \ Int = Int.max, omittingEmptySubsequences: Bool = true) -> [Self.SubSequence]\n\
    \                                       ^\n/tmp/tmpf8h0nruw.swift:10:12: error:\
    \ cannot find 'strings' in scope\n    return strings.Join(numbers, \" \")\n  \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph70ky385.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmph70ky385.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmph70ky385.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmph70ky385.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmph70ky385.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimPrefix(number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7cgc3c8_.swift:51:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmp7cgc3c8_.swift:50:30: note: to match this opening '('\n        numbers\
    \ = strings.TrimPrefix(number\n                                    ^\n/tmp/tmp7cgc3c8_.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:9:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimPrefix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimPrefix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \" \")\n              \
    \    ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \" \")\n\
    \        ^~~~~~~\n/tmp/tmp7cgc3c8_.swift:14:12: error:"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = strings.Split(numbers,\
    \ \" \")\n    sort.SliceStable(numbers, func(i, j int) bool {\n        return\
    \ numbers[i] < numbers[j]\n    })\n    return strings.Join(numbers, \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmprt_q1n9z.swift:9:31: error: expected expression in list of expressions\n\
    \    sort.SliceStable(numbers, func(i, j int) bool {\n                       \
    \       ^\n/tmp/tmprt_q1n9z.swift:9:35: error: expected identifier in function\
    \ declaration\n    sort.SliceStable(numbers, func(i, j int) bool {\n         \
    \                         ^\n/tmp/tmprt_q1n9z.swift:8:19: error: cannot find 'strings'\
    \ in scope\n    var numbers = strings.Split(numbers, \" \")\n                \
    \  ^~~~~~~\n/tmp/tmprt_q1n9z.swift:9:5: error: cannot find 'sort' in scope\n \
    \   sort.SliceStable(numbers, func(i, j int) bool {\n    ^~~~\n/tmp/tmprt_q1n9z.swift:12:12:\
    \ error: cannot find 'strings' in scope\n    return strings.Join(numbers, \" \"\
    )\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq2zziibe.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpq2zziibe.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \",\")\n\tnumbers := strings.TrimRight(numbers, \"\\n\")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(numbers,\
    \ \" \")\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimRight(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp5mbsg_q.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpp5mbsg_q.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmpp5mbsg_q.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpp5mbsg_q.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpp5mbsg_q.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSuffix(numbers, \" \")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \",\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers := strings.TrimSuffix(numbers, \"-\")\n\tnumbers := strings.TrimSuffix(\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpmf9oh7c4.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmpmf9oh7c4.swift:8:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \",\")\n\tnumbers := strings.Trim(numbers,\
    \ \"-\")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\t\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjfqc0vbu.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpjfqc0vbu.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.ToLower(numbers)\n\tnumbers = strings.Replace(numbers, \"\
    \ \", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers\
    \ = strings.Replace(numbers, \"0\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"2\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"5\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"8\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \".\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"0\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"2\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"3\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"4\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"5\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"6\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"7\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"8\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"9\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \",\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \".\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"-\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"1\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"2\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"3\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"4\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"5\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"6\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"7\", \"\", -1)\n\t\
    numbers = strings.Replace(numbers, \"8\", \"\", -1)\n\tnumbers = strings.Replace(numbers,\
    \ \"9\", \"\", -1)\n\tnumbers = strings.Replace(numbers, \"-\", \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjulttcu3.swift:48:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpjulttcu3.swift:47:27: note: to match this opening '('\n        numbers\
    \ = strings.Replace(numbers, \"-\", \"\"\n                                 ^\n\
    /tmp/tmpjulttcu3.swift:8:12: error: cannot find 'strings' in scope\n        numbers\
    \ = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpjulttcu3.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpjulttcu3.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.ToLower(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmpjulttcu3.swift:9:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.ToLower(numbers)\n\
    \        ^~~~~~~\n/tmp/tmpjulttcu3.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.Replace(numbers, \" \", \"\", -1)\n       \
    \           ^~~~~~~\n/tmp/tmpjulttcu3.swift:10:2: error: cannot assign to value:\
    \ 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers, \"\
    \ \", \"\", -1)\n        ^~~~~~~\n/tmp/tmpjulttcu3.swift:11:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"-\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpjulttcu3.swift:11:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"-\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpjulttcu3.swift:12:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"0\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpjulttcu3.swift:12:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"0\", \"\", -1)\n        ^~~~~~~\n/tmp/tmpjulttcu3.swift:13:12: error: cannot\
    \ find 'strings' in scope\n        numbers = strings.Replace(numbers, \"1\", \"\
    \", -1)\n                  ^~~~~~~\n/tmp/tmpjulttcu3.swift:13:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.Replace(numbers,\
    \ \"1\", \"\", -1)\n        ^~~~~~~\n/tmp/tmp"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \",\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \".\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    numbers = strings.TrimSuffi\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuzt34pg6.swift:8:15: error: cannot find 'strings' in scope\n  \
    \  numbers = strings.TrimSpace(numbers)\n              ^~~~~~~\n/tmp/tmpuzt34pg6.swift:8:5:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n    numbers =\
    \ strings.TrimSpace(numbers)\n    ^~~~~~~\n/tmp/tmpuzt34pg6.swift:9:15: error:\
    \ cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers, \"\
    \ \")\n              ^~~~~~~\n/tmp/tmpuzt34pg6.swift:9:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    ^~~~~~~\n/tmp/tmpuzt34pg6.swift:10:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \",\")\n              ^~~~~~~\n\
    /tmp/tmpuzt34pg6.swift:10:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \",\")\n    ^~~~~~~\n/tmp/tmpuzt34pg6.swift:11:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n              ^~~~~~~\n/tmp/tmpuzt34pg6.swift:11:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n    ^~~~~~~\n/tmp/tmpuzt34pg6.swift:12:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpuzt34pg6.swift:12:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmpuzt34pg6.swift:13:15:\
    \ error: cannot find 'strings' in scope\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n              ^~~~~~~\n/tmp/tmpuzt34pg6.swift:13:5: error: cannot assign\
    \ to value: 'numbers' is a 'let' constant\n    numbers = strings.TrimSuffix(numbers,\
    \ \".\")\n    ^~~~~~~\n/tmp/tmpuzt34pg6.swift:14:15: error: cannot find 'strings'\
    \ in scope\n    numbers = strings.TrimSuffix(numbers, \"-\")\n              ^~~~~~~\n\
    /tmp/tmpuzt34pg6.swift:14:5: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n    numbers = strings.TrimSuffix(numbers, \"-\")\n    ^~~~~~~\n/tmp/tmpuzt34pg6.swift:15:15:\
    \ error: cannot find 'strings' in "
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimSpace(numbers)\n\tnumbers := strings.Trim\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmph70ky385.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimSpace(numbers)\n       \
    \        ^\n               ;\n/tmp/tmph70ky385.swift:9:10: error: expected expression\n\
    \        numbers := strings.TrimSpace(numbers)\n                ^\n/tmp/tmph70ky385.swift:8:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSpace(numbers)\n\
    \                  ^~~~~~~\n/tmp/tmph70ky385.swift:8:2: error: cannot assign to\
    \ value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSpace(numbers)\n\
    \        ^~~~~~~\n/tmp/tmph70ky385.swift:9:2: warning: expression of type 'String'\
    \ is unused\n        numbers := strings.TrimSpace(numbers)\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers := strings.Trim(numbers, \" \")\n\tnumbers := strings.Trim(numbers,\
    \ \" \")\n\tnumbers \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpq2zziibe.swift:8:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Trim(numbers, \" \")\n     \
    \          ^\n               ;\n/tmp/tmpq2zziibe.swift:8:10: error: expected expression\n\
    \        numbers := strings.Trim(numbers, \" \")\n                ^\n"
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n\tnumbers := strings.TrimRight(numbers, \" \")\n\tnumbers := strings.TrimLeft(numbers,\
    \ \" \")\n\tnumbers := strings.Split(numbers, \" \")\n\tnumbers := strings.TrimSpa\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpuep9e3q7.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.TrimRight(numbers, \" \")\n\
    \               ^\n               ;\n/tmp/tmpuep9e3q7.swift:9:10: error: expected\
    \ expression\n        numbers := strings.TrimRight(numbers, \" \")\n         \
    \       ^\n/tmp/tmpuep9e3q7.swift:8:12: error: cannot find 'strings' in scope\n\
    \        numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpuep9e3q7.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpuep9e3q7.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.TrimRight(numbers,\
    \ \" \")\n        ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.TrimSuffix(numbers, \" \")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"-\")\n\tnumbers = strings.TrimSuffix(numbers, \"+\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"x\")\n\tnumbers = strings.TrimSuffix(numbers, \"X\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n\tnumbers = strings.TrimSuffix(numbers, \"1\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"2\")\n\tnumbers = strings.TrimSuffix(numbers, \"3\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"4\")\n\tnumbers = strings.TrimSuffix(numbers, \"5\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"6\")\n\tnumbers = strings.TrimSuffix(numbers, \"7\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"8\")\n\tnumbers = strings.TrimSuffix(numbers, \"9\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \" \")\n\tnumbers = strings.TrimSuffix(numbers, \"-\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"+\")\n\tnumbers = strings.TrimSuffix(numbers, \"x\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"X\")\n\tnumbers = strings.TrimSuffix(numbers, \"0\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"1\")\n\tnumbers = strings.TrimSuffix(numbers, \"2\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"3\")\n\tnumbers = strings.TrimSuffix(numbers, \"4\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"5\")\n\tnumbers = strings.TrimSuffix(numbers, \"6\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"7\")\n\tnumbers = strings.TrimSuffix(numbers, \"8\")\n\tnumbers = strings.TrimSuffix(numbers,\
    \ \"9\")\n\tnumbers = strings.Tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmphry3jiq0.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n                  ^~~~~~~\n/tmp/tmphry3jiq0.swift:9:2: error: cannot\
    \ assign to value: 'numbers' is a 'let' constant\n        numbers = strings.TrimSuffix(numbers,\
    \ \"0\")\n        ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:12: error: cannot find 'strings'\
    \ in scope\n        numbers = strings.TrimSuffix(numbers, \"1\")\n           \
    \       ^~~~~~~\n/tmp/tmphry3jiq0.swift:10:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"1\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"2\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:11:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"2\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"3\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:12:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"3\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"4\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:13:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers = strings.TrimSuffix(numbers, \"4\")\n\
    \        ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimSuffix(numbers, \"5\")\n              \
    \    ^~~~~~~\n/tmp/tmphry3jiq0.swift:14:2: error: cannot assign to value: 'numbers'\
    \ is a 'let' constant\n        numbers ="
  stdout: ''
  timestamp: 1660013528
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimLeftFunc(numbers,\
    \ unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\t\
    numbers = strings.TrimFunc(numbers, unicode.IsLetter)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsDigit)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsLineBreak)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsControl)\n\
    \tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\tnumbers = strings.TrimFunc(numbers,\
    \ unicode.IsControl)\n\tnumbers = strings.TrimFunc(numbers, unicode.IsSpace)\n\
    \tnumbers = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpnklnum5a.swift:43:1: error: expected expression in assignment\n\
    }\n^\n/tmp/tmpnklnum5a.swift:8:12: error: cannot find 'strings' in scope\n   \
    \     numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpnklnum5a.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpnklnum5a.swift:9:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                  ^~~~~~~\n/tmp/tmpnklnum5a.swift:9:43: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimRightFunc(numbers,\
    \ unicode.IsDigit)\n                                                 ^~~~~~~\n\
    /tmp/tmpnklnum5a.swift:9:2: error: cannot assign to value: 'numbers' is a 'let'\
    \ constant\n        numbers = strings.TrimRightFunc(numbers, unicode.IsDigit)\n\
    \        ^~~~~~~\n/tmp/tmpnklnum5a.swift:10:12: error: cannot find 'strings' in\
    \ scope\n        numbers = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n  \
    \                ^~~~~~~\n/tmp/tmpnklnum5a.swift:10:42: error: cannot find 'unicode'\
    \ in scope\n        numbers = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n\
    \                                                ^~~~~~~\n/tmp/tmpnklnum5a.swift:10:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimLeftFunc(numbers, unicode.IsDigit)\n        ^~~~~~~\n/tmp/tmpnklnum5a.swift:11:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                  ^~~~~~~\n/tmp/tmpnklnum5a.swift:11:38: error:\
    \ cannot find 'unicode' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsSpace)\n                                            ^~~~~~~\n/tmp/tmpnklnum5a.swift:11:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimFunc(numbers, unicode.IsSpace)\n        ^~~~~~~\n/tmp/tmpnklnum5a.swift:12:12:\
    \ error: cannot find 'strings' in scope\n        numbers = strings.TrimFunc(numbers,\
    \ unicode.IsLetter)\n              "
  stdout: ''
  timestamp: 1660013529
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n\tnumbers = strings.TrimSpace(numbers)\n\
    \tnumbers := strings.Split(numbers, \" \")\n\tsort.Strings(numbers)\n\treturn\
    \ strings.Join(numbers, \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpzcnrk7wt.swift:9:9: error: consecutive statements on a line must\
    \ be separated by ';'\n        numbers := strings.Split(numbers, \" \")\n    \
    \           ^\n               ;\n/tmp/tmpzcnrk7wt.swift:9:10: error: expected\
    \ expression\n        numbers := strings.Split(numbers, \" \")\n             \
    \   ^\n/tmp/tmpzcnrk7wt.swift:8:12: error: cannot find 'strings' in scope\n  \
    \      numbers = strings.TrimSpace(numbers)\n                  ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:8:2:\
    \ error: cannot assign to value: 'numbers' is a 'let' constant\n        numbers\
    \ = strings.TrimSpace(numbers)\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:9:2: warning:\
    \ expression of type 'String' is unused\n        numbers := strings.Split(numbers,\
    \ \" \")\n        ^~~~~~~\n/tmp/tmpzcnrk7wt.swift:11:9: error: cannot find 'strings'\
    \ in scope\n        return strings.Join(numbers, \" \")\n               ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013528
