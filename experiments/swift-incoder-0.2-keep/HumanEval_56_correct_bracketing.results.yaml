language: swift
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"<\" {\n            openingBracketsCount--\n\
    \        } else if openingBracket == \">\" {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"<\" {\n            closingBracketsCount--\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketsCount++\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48y6i0dz.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48y6i0dz.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48y6i0dz.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp48y6i0dz.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp48y6i0dz.swift:20:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:22:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:28:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:30:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    if openingBracketsCount == 0 {\n       \
    \ return true\n    }\n    if openingBracketsCount == 1 {\n        if openingBrackets[0]\
    \ != closingBrackets[0] {\n            return false\n        }\n        return\
    \ true\n    }\n    if openingBracketsCount == 2 {\n        if openingBrackets[0]\
    \ != closingBrackets[0] {\n            return false\n        }\n        if openingBrackets[1]\
    \ != closingBrackets[1] {\n            return false\n        }\n        return\
    \ true\n    }\n    if openingBracketsCount == 3 {\n        if openingBrackets[0]\
    \ != closingBrackets[0] {\n            return false\n        }\n        if openingBrackets[1]\
    \ != closingBrackets[1] {\n            return false\n        }\n        if openingBrackets[2]\
    \ != closingBrackets[2] {\n            return false\n        }\n        return\
    \ true\n    }\n    if openingBracketsCount == 4 {\n        if openingBrackets[0]\
    \ != closingBrackets[0] {\n            return false\n        }\n        if openingBrackets[1]\
    \ != closingBrackets[1] {\n            return false\n        }\n        if openingBrackets[2]\
    \ != closingBrackets[2] {\n            return false\n        }\n        if openingBrackets[3]\
    \ != closingBrackets[3] {\n            return false\n        }\n        return\
    \ true\n    }\n    if openingBracketsCount == 5 {\n        if openingBrackets[0]\
    \ != closingBrackets[0] {\n            return false\n        }\n        if openingBrackets[1]\
    \ != closingBrackets[1] {\n            return false\n        }\n        if openingBrackets[2]\
    \ != closingBrackets[2] {\n            return false\n        }\n        if openingBrackets[3]\
    \ != closingBrackets[3] {\n            return false\n        }\n        if openingBrackets[4]\
    \ != closingBrackets[4] {\n            return false\n        }\n        return\
    \ true\n    }\n    if openingBracketsCount == 6 {\n        if openingBrackets[0]\
    \ != closingBrackets[0] {\n            return false\n        }\n        if openingBrackets[1]\
    \ != closingBrackets[1] {\n            return false\n        }\n        if openingBrackets[2]\
    \ != closingBrackets[2] {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2hmtdzt1.swift:119:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp2hmtdzt1.swift:85:34:\
    \ note: to match this opening '{'\n    if openingBracketsCount == 6 {\n      \
    \                           ^\n/tmp/tmp2hmtdzt1.swift:119:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp2hmtdzt1.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp2hmtdzt1.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2hmtdzt1.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2hmtdzt1.swift:26:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[0] != closingBrackets[0] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2hmtdzt1.swift:26:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[0] != closingBrackets[0]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public su"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    var openingBracket: Character?\n \
    \   var closingBracket: Character?\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        openingBracket = openingBrackets[openingBracketIndex]\n        closingBracket\
    \ = closingBrackets[closingBracketIndex]\n\n        if openingBracket == \"<\"\
    \ {\n            if closingBracket == \">\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                openingBracketCount\
    \ += 1\n                closingBracketCount += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n                closingBracketIndex += 1\n\
    \                openingBracketCount += 1\n            }\n        } else if openingBracket\
    \ == \">\" {\n            if closingBracket == \"<\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                openingBracketCount\
    \ += 1\n            } else {\n                openingBracketIndex += 1\n     \
    \           closingBracketIndex += 1\n                openingBracketCount += 1\n\
    \                closingBracketCount += 1\n            }\n        } else if openingBracket\
    \ == \"<\" {\n            if closingBracket == \"<\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                openingBracketCount\
    \ += 1\n                closingBracketCount += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n                closingBracketIndex += 1\n\
    \                openingBracketCount += 1\n            }\n        } else if openingBracket\
    \ == \">\" {\n            if closingBracket == \">\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                openingBracketCount\
    \ += 1\n                closingBracketCount += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n                closingBracketIndex += 1\n\
    \                openingBracketCount += 1\n                closingBracketCount\
    \ += 1\n                closingBracketCount += 1\n            }\n        } else\
    \ if openingBracket == \"<\" {\n            if closingBracket == \"<\" {\n   \
    \             openingBracketIndex += 1\n                closingBracketIndex +=\
    \ 1\n                openingBracketCount += 1\n                closingBracketCount\
    \ += 1\n            } else {\n                openingBracketIndex += 1\n     \
    \           closingBracketIndex += 1\n                openingBra\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphbd3vi69.swift:108:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmphbd3vi69.swift:72:41:\
    \ note: to match this opening '{'\n        } else if openingBracket == \"<\" {\n\
    \                                        ^\n/tmp/tmphbd3vi69.swift:108:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmphbd3vi69.swift:22:51: note: to match this opening\
    \ '{'\n    while openingBracketIndex < brackets.endIndex {\n                 \
    \                                 ^\n/tmp/tmphbd3vi69.swift:108:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmphbd3vi69.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmphbd3vi69.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphbd3vi69.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphbd3vi69.swift:28:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmphbd3vi69.swift:29:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketFound = false\n    var closingBracketFound = false\n\
    \    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            if closingBracketIndex < closingBrackets.count {\n   \
    \             if closingBrackets[closingBracketIndex] == '>' {\n             \
    \       openingBracketFound = true\n                    closingBracketFound =\
    \ true\n                } else {\n                    openingBracketFound = false\n\
    \                    closingBracketFound = false\n                }\n        \
    \    } else {\n                openingBracketFound = false\n                closingBracketFound\
    \ = false\n            }\n        } else {\n            openingBracketFound =\
    \ false\n            closingBracketFound = false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    return openingBracketFound\
    \ == closingBracketFound\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0qnjvlxv.swift:20:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmp0qnjvlxv.swift:22:60: error: single-quoted\
    \ string literal found, use '\"'\n                if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                           ^~~\n \
    \                                                          \">\"\n/tmp/tmp0qnjvlxv.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0qnjvlxv.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0qnjvlxv.swift:20:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0qnjvlxv.swift:22:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0qnjvlxv.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' c"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] != \"\
    <\" {\n            return false\n        }\n        openingBracketIndex += 1\n\
    \    }\n\n    while closingBracketIndex < brackets.endIndex {\n        if closingBrackets[closingBracketIndex]\
    \ != \">\" {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp94g8m1ye.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp94g8m1ye.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp94g8m1ye.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp94g8m1ye.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeFirst()\n    opening.removeLast()\n \
    \   closing.removeLast()\n    closing.removeFirst()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty\n    }\n    if closing.isEmpty {\n        return\
    \ opening.isEmpty\n    }\n    if opening.first == closing.first {\n        return\
    \ correct_bracketing(opening.dropFirst())\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4i_avay3.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp4i_avay3.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4i_avay3.swift:26:35:\
    \ error: missing argument label 'brackets:' in call\n        return correct_bracketing(opening.dropFirst())\n\
    \                                  ^\n                                  brackets:\
    \ \n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    // Remove opening brackets\n    while openingBrackets.count\
    \ > 0 {\n        let index = openingBrackets.index(of: \"<\")\n        if index\
    \ == nil {\n            break\n        }\n        openingBrackets.remove(at: index!)\n\
    \    }\n\n    // Remove closing brackets\n    while closingBrackets.count > 0\
    \ {\n        let index = closingBrackets.index(of: \">\")\n        if index ==\
    \ nil {\n            break\n        }\n        closingBrackets.remove(at: index!)\n\
    \    }\n\n    // Return true if every opening bracket has a corresponding closing\
    \ bracket\n    return openingBrackets.count == closingBrackets.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp75c1jaog.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp75c1jaog.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp75c1jaog.swift:18:37: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        let index = openingBrackets.index(of:\
    \ \"<\")\n                                    ^\n/tmp/tmp75c1jaog.swift:18:37:\
    \ note: use 'firstIndex(of:)' instead\n        let index = openingBrackets.index(of:\
    \ \"<\")\n                                    ^~~~~\n                        \
    \            firstIndex\n/tmp/tmp75c1jaog.swift:27:37: warning: 'index(of:)' is\
    \ deprecated: renamed to 'firstIndex(of:)'\n        let index = closingBrackets.index(of:\
    \ \">\")\n                                    ^\n/tmp/tmp75c1jaog.swift:27:37:\
    \ note: use 'firstIndex(of:)' instead\n        let index = closingBrackets.index(of:\
    \ \">\")\n                                    ^~~~~\n                        \
    \            firstIndex\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    for openingBracket in openingBrackets {\n     \
    \   if let closingBracketIndex = closingBrackets.index(of: openingBracket) {\n\
    \            closingBrackets.remove(at: closingBracketIndex)\n        }\n    }\n\
    \n    return brackets.characters.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpioh9xgdt.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpioh9xgdt.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpioh9xgdt.swift:17:54: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        if let closingBracketIndex = closingBrackets.index(of:\
    \ openingBracket) {\n                                                     ^\n\
    /tmp/tmpioh9xgdt.swift:17:54: note: use 'firstIndex(of:)' instead\n        if\
    \ let closingBracketIndex = closingBrackets.index(of: openingBracket) {\n    \
    \                                                 ^~~~~\n                    \
    \                                 firstIndex\n/tmp/tmpioh9xgdt.swift:22:21: error:\
    \ 'characters' is unavailable: Please use String directly\n    return brackets.characters.count\
    \ == 0\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpioh9xgdt.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n    var openingBracketsStringIndex = 0\n\
    \    var closingBracketsStringIndex = 0\n    var openingBracketsStringCount =\
    \ brackets.characters.count\n    var closingBracketsStringCount = brackets.characters.count\n\
    \n    while openingBracketsIndex < openingBracketsCount {\n        openingBracketsString\
    \ += openingBrackets[openingBracketsIndex]\n        openingBracketsIndex += 1\n\
    \    }\n    while closingBracketsIndex < closingBracketsCount {\n        closingBracketsString\
    \ += closingBrackets[closingBracketsIndex]\n        closingBracketsIndex += 1\n\
    \    }\n\n    if openingBracketsIndex != openingBracketsCount {\n        return\
    \ false\n    }\n    if closingBracketsIndex != closingBracketsCount {\n      \
    \  return false\n    }\n    if openingBracketsString != closingBracketsString\
    \ {\n        return false\n    }\n    if openingBracketsIndex == openingBracketsCount\
    \ {\n        return true\n    }\n    if closingBracketsIndex == closingBracketsCount\
    \ {\n        return true\n    }\n    if openingBracketsIndex < closingBracketsIndex\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprprc2pzk.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprprc2pzk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprprc2pzk.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmprprc2pzk.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmprprc2pzk.swift:23:47: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBracketsStringCount\
    \ = brackets.characters.count\n                                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprprc2pzk.swift:24:47:\
    \ error: 'characters' is unavailable: Please use String directly\n    var closingBracketsStringCount\
    \ = brackets.characters.count\n                                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmprprc2pzk.swift:27:49:\
    \ error: no exact matches in call to subscript \n      "
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        let openingBracket = openingBrackets[openingBracketsIndex]\n    \
    \    let closingBracket = closingBrackets[closingBracketsIndex]\n\n        if\
    \ openingBracket == \"<\" {\n            openingBracketsIndex += 1\n        }\
    \ else if openingBracket == \">\" {\n            closingBracketsIndex += 1\n \
    \       } else if openingBracket == \"<\" {\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n            openingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex\
    \ == openingBracketsCount {\n            return closingBracketsIndex == closingBracketsCount\n\
    \        }\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw4pl9zh3.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw4pl9zh3.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw4pl9zh3.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpw4pl9zh3.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpw4pl9zh3.swift:21:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let openingBracket = openingBrackets[openingBracketsIndex]\n        \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpw4pl9zh3.swift:22:30:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let closingBracket = closingBrackets[closingBracketsIndex]\n\
    \                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable "
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] !=\
    \ \"<\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n\n        guard closingBrackets[closingBracketIndex]\
    \ != \"<\" else {\n            return false\n        }\n\n        closingBracketIndex\
    \ += 1\n        guard closingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n\n        guard closingBrackets[closingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n\n        closingBracketIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpylm_n42b.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpylm_n42b.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpylm_n42b.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpylm_n42b.swift:32:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpylm_n42b.swift:41:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpylm_n42b.swift:50:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    if openingBracketsCount\
    \ == 0 {\n        return true\n    }\n\n    if openingBracketsCount == 1 {\n \
    \       if openingBrackets.first == closingBrackets.first {\n            return\
    \ true\n        }\n        return false\n    }\n\n    if openingBracketsCount\
    \ == 2 {\n        if openingBrackets.first == closingBrackets.first {\n      \
    \      if openingBrackets.last == closingBrackets.last {\n                return\
    \ true\n            }\n        }\n        return false\n    }\n\n    if openingBracketsCount\
    \ == 3 {\n        if openingBrackets.first == closingBrackets.first {\n      \
    \      if openingBrackets.last == closingBrackets.last {\n                if openingBrackets.last\
    \ == closingBrackets.first {\n                    return true\n              \
    \  }\n            }\n        }\n        return false\n    }\n\n    if openingBracketsCount\
    \ == 4 {\n        if openingBrackets.first == closingBrackets.first {\n      \
    \      if openingBrackets.last == closingBrackets.last {\n                if openingBrackets.last\
    \ == closingBrackets.first {\n                    if openingBrackets.last == closingBrackets.second\
    \ {\n                        return true\n                    }\n            \
    \    }\n            }\n        }\n        return false\n    }\n\n    if openingBracketsCount\
    \ == 5 {\n        if openingBrackets.first == closingBrackets.first {\n      \
    \      if openingBrackets.last == closingBrackets.last {\n                if openingBrackets.last\
    \ == closingBrackets.first {\n                    if openingBrackets.last == closingBrackets.second\
    \ {\n                        if openingBrackets.last == closingBrackets.third\
    \ {\n                            return true\n                        }\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ false\n    }\n\n    if openingBracketsCount == 6 {\n        if openingBrackets.first\
    \ == closingBrackets.first {\n            if openingBrackets.last == closingBrackets.last\
    \ {\n                if openingBrackets.last == closingBrackets.first {\n    \
    \                if openingBrackets.last == closingBrackets.second {\n       \
    \                 if openingBrackets.last == closingBrackets.third {\n       \
    \                     if openingBrackets.last == closingBrackets.fourth {\n  \
    \                              return true\n                            }\n  \
    \                      }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps0n4jsug.swift:113:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmps0n4jsug.swift:80:66:\
    \ note: to match this opening '{'\n                if openingBrackets.last ==\
    \ closingBrackets.first {\n                                                  \
    \               ^\n/tmp/tmps0n4jsug.swift:113:66: error: expected '}' at end of\
    \ brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") ==\
    \ false)\n                                                                 ^\n\
    /tmp/tmps0n4jsug.swift:79:61: note: to match this opening '{'\n            if\
    \ openingBrackets.last == closingBrackets.last {\n                           \
    \                                 ^\n/tmp/tmps0n4jsug.swift:113:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmps0n4jsug.swift:78:59: note: to match this opening '{'\n        if\
    \ openingBrackets.first == closingBrackets.first {\n                         \
    \                                 ^\n/tmp/tmps0n4jsug.swift:113:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmps0n4jsug.swift:77:34: note: to match this opening '{'\n    if openingBracketsCount\
    \ == 6 {\n                                 ^\n/tmp/tmps0n4jsug.swift:113:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmps0n4jsug.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmps0n4jsug.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characte"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n    var closingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < openingBracketCount {\n        if openingBrackets[openingBracketIndex]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] != \"<\" {\n  \
    \          return false\n        }\n    }\n\n    while closingBracketIndex < closingBracketCount\
    \ {\n        if closingBrackets[closingBracketIndex] == \">\" {\n            closingBracketIndex\
    \ += 1\n        } else if closingBrackets[closingBracketIndex] != \"<\" {\n  \
    \          return false\n        }\n    }\n\n    return openingBracketIndex ==\
    \ closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxn12qf9u.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxn12qf9u.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxn12qf9u.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxn12qf9u.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxn12qf9u.swift:20:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmpxn12qf9u.swift:22:33: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \      openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpxn12qf9u.swift:23:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpxn12qf9u.swift:29:31: error: referenci"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    for index in\
    \ 0..<openingBracketsCount {\n        let openingBracket = openingBrackets[index]\n\
    \        let closingBracket = closingBrackets[index]\n\n        if openingBracket\
    \ == \"<\" {\n            if closingBracket != \">\" {\n                return\
    \ false\n            }\n        } else {\n            if closingBracket == \"\
    <\" {\n                return false\n            }\n        }\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuzoygfdw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuzoygfdw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuzoygfdw.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpuzoygfdw.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpuzoygfdw.swift:19:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let openingBracket = openingBrackets[index]\n                       \
    \      ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpuzoygfdw.swift:20:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingBracket = closingBrackets[index]\n                       \
    \      ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n     "
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        openingBracketCount\
    \ += 1\n\n        if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBracket == \">\"\
    \ {\n            openingBracketIndex += 1\n            closingBracketCount +=\
    \ 1\n            continue\n        }\n\n        if openingBracket == \"<\" {\n\
    \            openingBracketIndex += 1\n            closingBracketCount += 1\n\
    \            continue\n        }\n\n        if openingBracket == \">\" {\n   \
    \         openingBracketIndex += 1\n            closingBracketCount += 1\n   \
    \         continue\n        }\n\n        if openingBracket == \"<\" {\n      \
    \      openingBracketIndex += 1\n            closingBracketCount += 1\n      \
    \      continue\n        }\n\n        if openingBracket == \">\" {\n         \
    \   openingBracketIndex += 1\n            closingBracketCount += 1\n         \
    \   continue\n        }\n\n        if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketCount += 1\n            continue\n        }\n\
    \n        if openingBracket == \">\" {\n            openingBracketIndex += 1\n\
    \            closingBracketCount += 1\n            continue\n        }\n\n   \
    \     if openingBracket == \"<\" {\n            openingBracketIndex += 1\n   \
    \         closingBracketCount += 1\n            continue\n        }\n\n      \
    \  if openingBracket == \">\" {\n            openingBracketIndex += 1\n      \
    \      closingBracketCount += 1\n            continue\n        }\n\n        if\
    \ openingBracket == \"<\" {\n            openingBracketIndex += 1\n          \
    \  closingBracketCount += 1\n            continue\n        }\n\n        if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketCount\
    \ += 1\n            continue\n        }\n\n        if openingBracket == \"<\"\
    \ {\n            openingBracketIndex += 1\n            closingBracketCount +=\
    \ 1\n            continue\n        }\n\n        if openingBracket == \">\" {\n\
    \            openingBracketIndex += 1\n            closingBracketCount += 1\n\
    \            continue\n        }\n\n        if openingBracket == \"<\" {\n   \
    \         openingBracketIndex += 1\n            closingBracketCount \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9jx0pye0.swift:136:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp9jx0pye0.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp9jx0pye0.swift:136:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp9jx0pye0.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp9jx0pye0.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9jx0pye0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9jx0pye0.swift:25:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9jx0pye0.swift:30:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp9jx0pye0.swift:36:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9jx0pye0.swift:42:33: error:\
    \ binary operator '+=' cannot be applied to operan"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp72ho1fw1.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp72ho1fw1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp72ho1fw1.swift:19:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp72ho1fw1.swift:20:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n        \n        if openingBracket != closingBracket! {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpablzbroj.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpablzbroj.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg7nsmlns.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg7nsmlns.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg7nsmlns.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpg7nsmlns.swift:24:29: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex -= 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n    while\
    \ openingBracketIndex < openingBrackets.count {\n        openingBracketCount +=\
    \ 1\n        if openingBrackets[openingBracketIndex] == '<' {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex < openingBrackets.count {\n       \
    \         openingBracketCount += 1\n                if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                    openingBracketIndex += 1\n                }\n\
    \            }\n        }\n    }\n    while closingBracketIndex < closingBrackets.count\
    \ {\n        closingBracketCount += 1\n        if closingBrackets[closingBracketIndex]\
    \ == '>' {\n            closingBracketIndex += 1\n            if closingBracketIndex\
    \ < closingBrackets.count {\n                closingBracketCount += 1\n      \
    \          if closingBrackets[closingBracketIndex] == '<' {\n                \
    \    closingBracketIndex += 1\n                }\n            }\n        }\n \
    \   }\n    return openingBracketCount == closingBracketCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw_fsfvmj.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpw_fsfvmj.swift:25:60: error: single-quoted\
    \ string literal found, use '\"'\n                if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                           ^~~\n \
    \                                                          \">\"\n/tmp/tmpw_fsfvmj.swift:33:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                   ^~~\n         \
    \                                          \">\"\n/tmp/tmpw_fsfvmj.swift:37:60:\
    \ error: single-quoted string literal found, use '\"'\n                if closingBrackets[closingBracketIndex]\
    \ == '<' {\n                                                           ^~~\n \
    \                                                          \"<\"\n/tmp/tmpw_fsfvmj.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpw_fsfvmj.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw_fsfvmj.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n        "
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwz46xbew.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwz46xbew.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwz46xbew.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwz46xbew.swift:21:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeLast()\n    closing.removeFirst()\n \
    \   if opening.isEmpty {\n        return closing.isEmpty && closing.count == 0\n\
    \    }\n    if closing.isEmpty {\n        return opening.count == 0\n    }\n \
    \   if opening.count != closing.count {\n        return false\n    }\n    for\
    \ index in 0..<opening.count {\n        if opening[index] != closing[index] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp06q0xe4v.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp06q0xe4v.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp06q0xe4v.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[index] != closing[index] {\n\
    \           ^~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp06q0xe4v.swift:27:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if opening[index] != closing[index] {\n                             ^~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"<\" {\n            if closingBracket == \">\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n            }\n        } else if openingBracket\
    \ == \">\" {\n            if closingBracket == \"<\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n            }\n        } else {\n      \
    \      openingBracketIndex += 1\n            closingBracketIndex += 1\n      \
    \  }\n    }\n\n    return openingBracketIndex == brackets.endIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplydl4kco.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplydl4kco.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplydl4kco.swift:24:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplydl4kco.swift:25:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmplydl4kco.swift:27:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplydl4kco.swift:31:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmplydl4kco.swift:32:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplydl4kco.swift:34:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmplydl4kco.swift:37:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpl"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \">\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] != \"\
    <\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] != \"\
    <\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] != \"\
    <\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] != \"\
    <\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] != \"\
    <\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] != \"\
    <\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] != \"\
    <\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBra\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp29hqqjga.swift:110:1: error: expected ']' in expression list\n\
    }\n^\n/tmp/tmp29hqqjga.swift:109:30: note: to match this opening '['\n       \
    \ guard openingBrackets[openingBra\n                             ^\n/tmp/tmp29hqqjga.swift:136:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp29hqqjga.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp29hqqjga.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp29hqqjga.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp29hqqjga.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp29hqqjga.swift:33:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp29hqqjga.swift:43:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp29hqqjga.swift:53:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp29hqqjga.swift:63:29:\
    \ error: binary operator '+=' cannot be applied to operands of"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.isEmpty {\n        return true\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first != closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.last != closingBrackets.last\
    \ {\n        return false\n    }\n    if openingBrackets.count == 1 {\n      \
    \  return true\n    }\n    return correct_bracketing(String(openingBrackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk8m4k71b.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk8m4k71b.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk8m4k71b.swift:32:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.first(where: { $0 == openingBracket })\n        if closingBracket\
    \ == nil {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjaaiflzn.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpjaaiflzn.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbap549au.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbap549au.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbap549au.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbap549au.swift:21:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.first\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpphdlgimo.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpphdlgimo.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket)\n        if closingBracket\
    \ == nil {\n            return false\n        }\n        if openingBracket !=\
    \ closingBracket! {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgm1xlyhs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgm1xlyhs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n    var closingBracketCount = brackets.characters.count\n\
    \    var openingBracket = String()\n    var closingBracket = String()\n\n    while\
    \ openingBracketIndex < openingBracketCount {\n        openingBracket = brackets[openingBracketIndex]\n\
    \        openingBracketIndex += 1\n\n        while closingBracketIndex < closingBracketCount\
    \ {\n            closingBracket = brackets[closingBracketIndex]\n            closingBracketIndex\
    \ += 1\n\n            if openingBracket == closingBracket {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           return false\n            }\n        }\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps3ys4r8r.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps3ys4r8r.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps3ys4r8r.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps3ys4r8r.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps3ys4r8r.swift:22:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmps3ys4r8r.swift:23:34: error: cannot assign\
    \ value of type 'Character' to type 'String'\n        openingBracket = brackets[openingBracketIndex]\n\
    \                         ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmps3ys4r8r.swift:24:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmps3ys4r8r.swift:26:35: error: referenc"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex <\
    \ closingBracketsCount {\n        closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \        closingBracketsIndex += 1\n    }\n\n    if openingBracketsString == closingBracketsString\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxz5cldte.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxz5cldte.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxz5cldte.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxz5cldte.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpxz5cldte.swift:23:41: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxz5cldte.swift:28:41:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscrip"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(where:\
    \ { $0 == openingBracket }) {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphsd3qw9v.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmphsd3qw9v.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex || closingBracketIndex\
    \ >= brackets.endIndex {\n            break\n        }\n    }\n\n    if openingBracketIndex\
    \ < brackets.endIndex {\n        return false\n    }\n\n    if openingBracketIndex\
    \ == brackets.endIndex && closingBracketIndex == brackets.endIndex {\n       \
    \ return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdwk2lzjh.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdwk2lzjh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdwk2lzjh.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpdwk2lzjh.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpdwk2lzjh.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpdwk2lzjh.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpdwk2lzjh.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first == \">\" && closingBrackets.first\
    \ == \"<\" {\n        return true\n    }\n    if openingBrackets.first == \"<\"\
    \ && closingBrackets.first == \">\" {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyzbjb0ih.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyzbjb0ih.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n    var openingBracketsStringIndex = 0\n\
    \    var closingBracketsStringIndex = 0\n    var openingBracketsStringLastIndex\
    \ = 0\n    var closingBracketsStringLastIndex = 0\n    var openingBracketsStringLastIndexCount\
    \ = 0\n    var closingBracketsStringLastIndexCount = 0\n    var openingBracketsStringLastIndexCount2\
    \ = 0\n    var closingBracketsStringLastIndexCount2 = 0\n    var openingBracketsStringLastIndexCount3\
    \ = 0\n    var closingBracketsStringLastIndexCount3 = 0\n    var openingBracketsStringLastIndexCount4\
    \ = 0\n    var closingBracketsStringLastIndexCount4 = 0\n    var openingBracketsStringLastIndexCount5\
    \ = 0\n    var closingBracketsStringLastIndexCount5 = 0\n    var openingBracketsStringLastIndexCount6\
    \ = 0\n    var closingBracketsStringLastIndexCount6 = 0\n    var openingBracketsStringLastIndexCount7\
    \ = 0\n    var closingBracketsStringLastIndexCount7 = 0\n    var openingBracketsStringLastIndexCount8\
    \ = 0\n    var closingBracketsStringLastIndexCount8 = 0\n    var openingBracketsStringLastIndexCount9\
    \ = 0\n    var closingBracketsStringLastIndexCount9 = 0\n    var openingBracketsStringLastIndexCount10\
    \ = 0\n    var closingBracketsStringLastIndexCount10 = 0\n    var openingBracketsStringLastIndexCount11\
    \ = 0\n    var closingBracketsStringLastIndexCount11 = 0\n    var openingBracketsStringLastIndexCount12\
    \ = 0\n    var closingBracketsStringLastIndexCount12 = 0\n    var openingBracketsStringLastIndexCount13\
    \ = 0\n    var closingBracketsStringLastIndexCount13 = 0\n    var openingBracketsStringLastIndexCount14\
    \ = 0\n    var closingBracketsStringLastIndexCount14 = 0\n    var openingBracketsStringLastIndexCount15\
    \ = 0\n    var closingBracketsStringLastIndexCount15 = 0\n    var openingBracketsStringLastIndexCount16\
    \ = 0\n    var closingBracketsStringLastIndexCount16\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvhq769ry.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvhq769ry.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvhq769ry.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvhq769ry.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvhq769ry.swift:56:9: error: type annotation\
    \ missing in pattern\n    var closingBracketsStringLastIndexCount16\n        ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n    for i := 0; i <\
    \ len(brackets); i++ {\n        switch brackets[i] {\n        case \"<\":\n  \
    \          opening = true\n            opening_bracket = brackets[i]\n       \
    \ case \"<=\":\n            opening = true\n            opening_bracket = brackets[i]\n\
    \        case \"=\":\n            opening = true\n            opening_bracket\
    \ = brackets[i]\n        case \"<\":\n            closing = true\n           \
    \ closing_bracket = brackets[i]\n        case \">\":\n            closing = true\n\
    \            closing_bracket = brackets[i]\n        default:\n            if opening\
    \ {\n                opening = false\n                opening_bracket = \"\"\n\
    \            }\n            if closing {\n                closing = false\n  \
    \              closing_bracket = \"\"\n            }\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkkglem5y.swift:17:12: error: expected type\n    for i := 0; i <\
    \ len(brackets); i++ {\n           ^\n            <#type#>\n/tmp/tmpkkglem5y.swift:17:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(brackets);\
    \ i++ {\n           ^\n/tmp/tmpkkglem5y.swift:17:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(brackets); i++ {\n   \
    \        ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr9e53ymj.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr9e53ymj.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr9e53ymj.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpr9e53ymj.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwrrpuvp4.swift:72:26: error: expected '{' after 'if' condition\n\
    \        if openingBracket\n                         ^\n/tmp/tmpwrrpuvp4.swift:99:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpwrrpuvp4.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpwrrpuvp4.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwrrpuvp4.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwrrpuvp4.swift:19:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpwrrpuvp4.swift:19:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpwrrpuvp4.swift:23:51: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n/tmp/tmpwrrpuvp4.swift:23:51: note: overloads for '+' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n                                                  ^\n/tmp/tmpwrrpuvp4.sw"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] !=\
    \ \"<\" else {\n            openingBracketIndex += 1\n            continue\n \
    \       }\n\n        guard openingBrackets[openingBracketIndex] == \">\" else\
    \ {\n            return false\n        }\n\n        guard closingBracketIndex\
    \ < brackets.endIndex else {\n            return false\n        }\n\n        guard\
    \ closingBrackets[closingBracketIndex] != \"<\" else {\n            return false\n\
    \        }\n\n        openingBracketIndex += 1\n        closingBracketIndex +=\
    \ 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg3te9rcg.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg3te9rcg.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg3te9rcg.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpg3te9rcg.swift:36:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpg3te9rcg.swift:37:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.last != closingBrackets.last\
    \ {\n        return false\n    }\n    if openingBrackets.count == 1 {\n      \
    \  return true\n    }\n    return correct_bracketing(String(openingBrackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt9tsw3ha.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt9tsw3ha.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt9tsw3ha.swift:32:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets.characters[openingBracketIndex]\n \
    \       openingBracketCount += 1\n        if openingBracket == \"<\" {\n     \
    \       openingBracketIndex += 1\n        } else if openingBracket == \">\" {\n\
    \            openingBracketIndex += 1\n            closingBracketCount += 1\n\
    \            if closingBracketCount > 1 {\n                closingBracketIndex\
    \ += 1\n                closingBracketCount = 0\n            }\n        } else\
    \ {\n            openingBracketIndex += 1\n        }\n    }\n\n    return openingBracketIndex\
    \ == brackets.endIndex && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfxhyghlg.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfxhyghlg.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfxhyghlg.swift:21:39: error: 'characters' is unavailable:\
    \ Please use String directly\n        let openingBracket = brackets.characters[openingBracketIndex]\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfxhyghlg.swift:24:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfxhyghlg.swift:26:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpfxhyghlg.swift:29:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfxhyghlg.swift:33:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n\n    while openingBracketIndex < openingBracketCount\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"<\" {\n  \
    \          if closingBracket != \">\" {\n                openingBracketIndex +=\
    \ 1\n            }\n        } else if openingBracket == \">\" {\n            if\
    \ closingBracket != \"<\" {\n                openingBracketIndex += 1\n      \
    \      }\n        } else {\n            if openingBracket != closingBracket {\n\
    \                openingBracketIndex += 1\n            }\n        }\n    }\n\n\
    \    return openingBracketIndex == openingBracketCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp350fgumx.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp350fgumx.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp350fgumx.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp350fgumx.swift:19:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp350fgumx.swift:25:37: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \          openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp350fgumx.swift:29:37: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp350fgumx.swift:33:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp350fgumx.swift:38:32: error: referencing operator function '=='\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    ret"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        if openingBracket == \"<\" {\n            openingBracketIndex += 1\n\
    \            if openingBracketIndex < brackets.endIndex {\n                openingBracket\
    \ = brackets[openingBracketIndex]\n            }\n        }\n        if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                openingBracket = brackets[openingBracketIndex]\n\
    \            }\n        }\n        openingBrackets.append(openingBracket)\n  \
    \  }\n\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketIndex += 1\n            if closingBracketIndex < brackets.endIndex\
    \ {\n                closingBracket = brackets[closingBracketIndex]\n        \
    \    }\n        }\n        if closingBracket == \">\" {\n            closingBracketIndex\
    \ += 1\n            if closingBracketIndex < brackets.endIndex {\n           \
    \     closingBracket = brackets[closingBracketIndex]\n            }\n        }\n\
    \        closingBrackets.append(closingBracket)\n    }\n\n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n\n    for openingBracket\
    \ in openingBrackets {\n        if closingBrackets.contains(openingBracket) {\n\
    \            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcbsiciuq.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcbsiciuq.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcbsiciuq.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcbsiciuq.swift:23:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmpcbsiciuq.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmpcbsiciuq.swift:27:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcbsiciuq.swift:29:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmpcbsiciuq.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmpcbsiciuq.swift:38:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcbsiciuq.swift:40:17: error:\
    \ cannot assign to value: 'closingBracket' is a 'let' constant\n             \
    \   closingBracket = brac"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    for openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        if openingBracket == \"<\" {\n            openingBracketIndex += 1\n\
    \            openingBracketIndex += openingBracketIndex\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            openingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9yjip25g.swift:18:29: error: expected 'in' after for-each pattern\n\
    \    for openingBracketIndex < brackets.endIndex {\n                         \
    \   ^\n/tmp/tmp9yjip25g.swift:18:29: error: unary operator cannot be separated\
    \ from its operand\n    for openingBracketIndex < brackets.endIndex {\n      \
    \                      ^~\n                             \n/tmp/tmp9yjip25g.swift:101:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp9yjip25g.swift:18:49: note: to match this opening\
    \ '{'\n    for openingBracketIndex < brackets.endIndex {\n                   \
    \                             ^\n/tmp/tmp9yjip25g.swift:101:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp9yjip25g.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp9yjip25g.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp9yjip25g.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9yjip25g.swift:18:29: error: '<' is not a prefix unary\
    \ operator\n    for openingBracketIndex < brackets.endIndex {\n              \
    \              ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 0..<brackets.count {\n        let openingIndex = brackets.index(brackets,\
    \ startIndex: index)\n        let closingIndex = brackets.index(brackets, startIndex:\
    \ openingIndex + 2)\n        if openingIndex == closingIndex {\n            opening\
    \ = brackets[openingIndex + 2]\n            closing = brackets[openingIndex +\
    \ 3]\n        } else {\n            return false\n        }\n    }\n    return\
    \ opening == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj6cba231.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpj6cba231.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpj6cba231.swift:16:37:\
    \ error: no exact matches in call to instance method 'index'\n        let openingIndex\
    \ = brackets.index(brackets, startIndex: index)\n                            \
    \        ^\n/tmp/tmpj6cba231.swift:16:37: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let openingIndex = brackets.index(brackets,\
    \ startIndex: index)\n                                    ^\n/tmp/tmpj6cba231.swift:16:37:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let openingIndex = brackets.index(brackets, startIndex: index)\n\
    \                                    ^\n/tmp/tmpj6cba231.swift:16:37: note: candidate\
    \ has partially matching parameter list (String.Index, offsetBy: Int)\n      \
    \  let openingIndex = brackets.index(brackets, startIndex: index)\n          \
    \                          ^\n/tmp/tmpj6cba231.swift:17:37: error: no exact matches\
    \ in call to instance method 'index'\n        let closingIndex = brackets.index(brackets,\
    \ startIndex: openingIndex + 2)\n                                    ^\n/tmp/tmpj6cba231.swift:17:37:\
    \ note: found candidate with type '(String.Index, Int) -> String.Index'\n    \
    \    let closingIndex = brackets.index(brackets, startIndex: openingIndex + 2)\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = opening[openingIndex]\n    var closingChar\
    \ = closing[closingIndex]\n    while openingIndex < openingCount {\n        openingIndex++\n\
    \        openingChar = opening[openingIndex]\n        if openingChar == \">\"\
    \ {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \            if openingChar == \"<\" {\n                openingIndex++\n     \
    \           openingChar = opening[openingIndex]\n                if openingChar\
    \ == \">\" {\n                    openingIndex++\n                    openingChar\
    \ = opening[openingIndex]\n                    if openingChar == \"<\" {\n   \
    \                     openingIndex++\n                        openingChar = opening[openingIndex]\n\
    \                        if openingChar == \">\" {\n                         \
    \   openingIndex++\n                            openingChar = opening[openingIndex]\n\
    \                            if openingChar == \"<\" {\n                     \
    \           openingIndex++\n                                openingChar = opening[openingIndex]\n\
    \                                if openingChar == \">\" {\n                 \
    \                   openingIndex++\n                                    openingChar\
    \ = opening[openingIndex]\n                                    if openingChar\
    \ == \"<\" {\n                                        openingIndex++\n       \
    \                                 openingChar = opening[openingIndex]\n      \
    \                                  if openingChar == \">\" {\n               \
    \                             openingIndex++\n                               \
    \             openingChar = opening[openingIndex]\n                          \
    \                  if openingChar == \"<\" {\n                               \
    \                 openingIndex++\n                                           \
    \     openingChar = opening[openingIndex]\n                                  \
    \              if openingChar == \">\" {\n                                   \
    \                 openingIndex++\n                                           \
    \         openingChar = opening[openingIndex]\n                              \
    \                      if openingChar == \"<\" {\n                           \
    \                             openingIndex++\n                               \
    \                         openingChar = opening[openingIndex]\n              \
    \                                          if openingChar == \">\" {\n       \
    \                                                     openingIndex++\n       \
    \                                                     openingChar = opening[openingIndex]\n\
    \                                                            if openingChar ==\
    \ \"<\" {\n                                                                openingIndex++\n\
    \                                                                openingChar =\
    \ opening[openingIndex]\n                                                    \
    \            if openingChar == \">\" {\n                                     \
    \                               openingIndex++\n                             \
    \                                       openingChar = opening[openingIndex]\n\
    \                                                                    if openingChar\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsz7o1i25.swift:69:83: error: expected '{' after 'if' condition\n\
    \                                                                    if openingChar\n\
    \                                                                            \
    \      ^\n/tmp/tmpsz7o1i25.swift:96:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpsz7o1i25.swift:63:83:\
    \ note: to match this opening '{'\n                                          \
    \                  if openingChar == \"<\" {\n                               \
    \                                                   ^\n/tmp/tmpsz7o1i25.swift:96:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpsz7o1i25.swift:60:79: note: to match this opening\
    \ '{'\n                                                        if openingChar\
    \ == \">\" {\n                                                               \
    \               ^\n/tmp/tmpsz7o1i25.swift:96:66: error: expected '}' at end of\
    \ brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") ==\
    \ false)\n                                                                 ^\n\
    /tmp/tmpsz7o1i25.swift:57:75: note: to match this opening '{'\n              \
    \                                      if openingChar == \"<\" {\n           \
    \                                                               ^\n/tmp/tmpsz7o1i25.swift:96:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpsz7o1i25.swift:54:71: note: to match this opening\
    \ '{'\n                                                if openingChar == \">\"\
    \ {\n                                                                      ^\n\
    /tmp/tmpsz7o1i25.swift:96:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing("
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"(\":\n       \
    \     openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"=\":\n            openingBracketCount += 1\n        case \"<>\":\n       \
    \     openingBracketCount += 1\n        case \"=\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \">\":\n            openingBracketCount += 1\n        case \"=\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracketCount += 1\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp12h70wgw.swift:114:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp12h70wgw.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp12h70wgw.swift:114:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp12h70wgw.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp12h70wgw.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp12h70wgw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp12h70wgw.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp12h70wgw.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<>\":\n\
    \             ^~~~\n/tmp/tmp12h70wgw.swift:45:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<>\":\n\
    \             ^~~~\n/tmp/tmp12h70wgw.swift:49:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp12h70wgw.swift:59:14: error: expression pattern of\
    \ type 'Strin"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeLast()\n    closing.removeFirst()\n \
    \   if opening.isEmpty {\n        return closing.isEmpty && closing.count == 0\n\
    \    }\n    if closing.isEmpty {\n        return closing.count == 0\n    }\n \
    \   if opening.count != closing.count {\n        return false\n    }\n    if opening.first\
    \ != closing.last {\n        return false\n    }\n    if opening.count == 1 {\n\
    \        return true\n    }\n    if opening.count > 1 {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwby6yl0x.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpwby6yl0x.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if !closingBrackets.contains(where:\
    \ { $0 == openingBracket }) {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpubgvkl7g.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpubgvkl7g.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n    for\
    \ openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbxb8df36.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbxb8df36.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"<\" {\n            openingBracketsCount--\n\
    \        } else if openingBracket == \">\" {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"<\" {\n            closingBracketsCount--\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketsCount++\n        }\n    }\n\n    return\
    \ openingBracketsCount == closingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_yaduhoc.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_yaduhoc.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_yaduhoc.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_yaduhoc.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_yaduhoc.swift:20:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp_yaduhoc.swift:22:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n/tmp/tmp_yaduhoc.swift:28:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmp_yaduhoc.swift:30:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"<\" {\n            openingBracketsCount++\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketsCount--\n        }\n    }\n\n    for\
    \ closingBracket in closingBrackets {\n        if closingBracket == \"<\" {\n\
    \            closingBracketsCount++\n        } else if closingBracket == \">\"\
    \ {\n            closingBracketsCount--\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp08nnyq8i.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp08nnyq8i.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp08nnyq8i.swift:21:33: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketsCount++\n       \
    \                         ^~\n/tmp/tmp08nnyq8i.swift:23:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp08nnyq8i.swift:29:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n/tmp/tmp08nnyq8i.swift:31:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        if openingBrackets[openingBracketsIndex] == \">\" {\n           \
    \ openingBracketsIndex += 1\n            closingBracketsIndex += 1\n        }\
    \ else if openingBrackets[openingBracketsIndex] != \"<\" {\n            openingBracketsIndex\
    \ += 1\n        } else {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n            while openingBracketsIndex < openingBracketsCount && openingBrackets[openingBracketsIndex]\
    \ == \">\" {\n                openingBracketsIndex += 1\n                closingBracketsIndex\
    \ += 1\n            }\n            while openingBracketsIndex < openingBracketsCount\
    \ && openingBrackets[openingBracketsIndex] != \"<\" {\n                openingBracketsIndex\
    \ += 1\n            }\n            if openingBracketsIndex == openingBracketsCount\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ openingBracketsIndex == openingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgtlr3n4w.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgtlr3n4w.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgtlr3n4w.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpgtlr3n4w.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpgtlr3n4w.swift:21:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == \">\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgtlr3n4w.swift:24:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if openingBrackets[openingBracketsIndex]\
    \ != \"<\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Cha"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == '<' {\n            openingBracketCount\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '>' {\n    \
    \        openingBracketCount -= 1\n        }\n        openingBracketIndex += 1\n\
    \    }\n\n    while closingBracketIndex < brackets.endIndex {\n        if closingBrackets[closingBracketIndex]\
    \ == '<' {\n            closingBracketCount += 1\n        } else if closingBrackets[closingBracketIndex]\
    \ == '>' {\n            closingBracketCount -= 1\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketCount == 0 && closingBracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt26hgm0n.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpt26hgm0n.swift:23:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpt26hgm0n.swift:30:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '<' {\n                                                   ^~~\n         \
    \                                          \"<\"\n/tmp/tmpt26hgm0n.swift:32:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpt26hgm0n.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpt26hgm0n.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt26hgm0n.swift:26:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpt26hgm0n.swift:35:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    // Remove opening brackets\n    for openingBracket\
    \ in openingBrackets {\n        if closingBrackets.contains(openingBracket) {\n\
    \            closingBrackets.remove(openingBracket)\n        }\n    }\n\n    //\
    \ Remove closing brackets\n    for closingBracket in closingBrackets {\n     \
    \   if openingBrackets.contains(closingBracket) {\n            openingBrackets.remove(closingBracket)\n\
    \        }\n    }\n\n    // Return true if all brackets are closed\n    return\
    \ openingBrackets.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvmmec8bd.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvmmec8bd.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvmmec8bd.swift:19:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpvmmec8bd.swift:19:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpvmmec8bd.swift:19:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpvmmec8bd.swift:26:29: error: no exact\
    \ matches in call to instance method 'remove'\n            openingBrackets.remove(closingBracket)\n\
    \                            ^\n/tmp/tmpvmmec8bd.swift:26:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          openingBrackets.remove(closingBracket)\n                          \
    \  ^\n/tmp/tmpvmmec8bd.swift:26:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            openingBrackets.remove(closingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBracketsCount {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n        openingBracketIndex += 1\n        closingBracketIndex += 1\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp0nfvqaf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp0nfvqaf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp0nfvqaf.swift:25:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpp0nfvqaf.swift:25:52: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0nfvqaf.swift:17:9:\
    \ warning: variable 'openingBracketsCount' was never mutated; consider changing\
    \ to 'let' constant\n    var openingBracketsCount = openingBrackets.count\n  \
    \  ~~~ ^\n    let\n/tmp/tmpp0nfvqaf.swift:18:9: warning: variable 'closingBracketsCount'\
    \ was never mutated; consider changing to 'let' constant\n    var closingBracketsCount\
    \ = closingBrackets.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n    var closingBracketCount = brackets.characters.count\n\
    \    var openingBracketFound = false\n    var closingBracketFound = false\n\n\
    \    while openingBracketIndex < openingBracketCount {\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        openingBracketFound = true\n    }\n\n    while closingBracketIndex\
    \ < closingBracketCount {\n        guard closingBrackets[closingBracketIndex]\
    \ == \"<\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n        closingBracketFound = true\n    }\n\n    if openingBracketFound\
    \ && closingBracketFound {\n        return true\n    }\n\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5o_bk6e5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5o_bk6e5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5o_bk6e5.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5o_bk6e5.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5o_bk6e5.swift:22:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp5o_bk6e5.swift:26:29: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \  openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp5o_bk6e5.swift:30:31:\
    \ error: referencing operator function '<' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n    while closingBracketIndex < closingBracketCount\
    \ {\n                              ^\nSwift.BinaryInteg"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first == \">\" && closingBrackets.first\
    \ == \"<\" {\n        return true\n    }\n    if openingBrackets.first == \"<\"\
    \ && closingBrackets.first == \">\" {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyzbjb0ih.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyzbjb0ih.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        guard openingBrackets[openingBracketIndex] != \"<\" else {\n    \
    \        openingBracketIndex += 1\n            continue\n        }\n\n       \
    \ if openingBrackets[openingBracketIndex] == \">\" {\n            openingBracketCount\
    \ += 1\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBrackets[openingBracketIndex] == \">>\" {\n            openingBracketCount\
    \ += 2\n            openingBracketIndex += 1\n            continue\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpab8nbc_q.swift:116:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpab8nbc_q.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpab8nbc_q.swift:116:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpab8nbc_q.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpab8nbc_q.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpab8nbc_q.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpab8nbc_q.swift:22:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpab8nbc_q.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpab8nbc_q.swift:32:27: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n        if openingBrackets[openingBracketIndex]\
    \ == \">>\" {\n                          ^\nSwift.Collection:2:23: note: where\
    \ 'R' = 'String.Index'\n    @inlinable pu"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            openingBracketIndex += 1\n            continue\n   \
    \     }\n\n        if closingBracketIndex < closingBrackets.endIndex {\n     \
    \       if closingBrackets[closingBracketIndex] != \"<\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                continue\n \
    \           }\n        }\n\n        return false\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp411ytjh2.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp411ytjh2.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp411ytjh2.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp411ytjh2.swift:27:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp411ytjh2.swift:28:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"<\" {\n            if closingBracket == \">\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n            }\n        } else if openingBracket\
    \ == \">\" {\n            if closingBracket == \"<\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n            }\n        } else {\n      \
    \      openingBracketIndex += 1\n            closingBracketIndex += 1\n      \
    \  }\n    }\n\n    return openingBracketIndex == brackets.endIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplydl4kco.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplydl4kco.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplydl4kco.swift:24:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplydl4kco.swift:25:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmplydl4kco.swift:27:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplydl4kco.swift:31:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmplydl4kco.swift:32:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplydl4kco.swift:34:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmplydl4kco.swift:37:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpl"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = String()\n    var closingChar = String()\n\
    \n    while openingIndex < openingCount {\n        openingChar = opening[openingIndex]\n\
    \        openingIndex += 1\n        if openingChar == \"<\" {\n            if\
    \ closingIndex < closingCount {\n                closingChar = closing[closingIndex]\n\
    \                closingIndex += 1\n                if closingChar == \">\" {\n\
    \                    openingIndex += 1\n                    closingIndex += 1\n\
    \                } else {\n                    openingIndex += 1\n           \
    \     }\n            } else {\n                openingIndex += 1\n           \
    \ }\n        } else {\n            openingIndex += 1\n        }\n    }\n\n   \
    \ return openingIndex == openingCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ya1m662.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp4ya1m662.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4ya1m662.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4ya1m662.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4ya1m662.swift:23:30: error: cannot assign value of\
    \ type 'Character' to type 'String'\n        openingChar = opening[openingIndex]\n\
    \                      ~~~~~~~^~~~~~~~~~~~~~\n/tmp/tmp4ya1m662.swift:27:38: error:\
    \ cannot assign value of type 'Character' to type 'String'\n                closingChar\
    \ = closing[closingIndex]\n                              ~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        if openingBracket == \"<\" {\n            openingBracketIndex += 1\n\
    \            if openingBracketIndex < brackets.endIndex {\n                openingBracket\
    \ = brackets[openingBracketIndex]\n            }\n        }\n        if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                openingBracket = brackets[openingBracketIndex]\n\
    \            }\n        }\n        if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex < brackets.endIndex {\n           \
    \     openingBracket = brackets[openingBracketIndex]\n            }\n        }\n\
    \        if openingBracket == \">\" {\n            openingBracketIndex += 1\n\
    \            if openingBracketIndex < brackets.endIndex {\n                openingBracket\
    \ = brackets[openingBracketIndex]\n            }\n        }\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                openingBracket = brackets[openingBracketIndex]\n\
    \            }\n        }\n        if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex < brackets.endIndex {\n           \
    \     openingBracket = brackets[openingBracketIndex]\n            }\n        }\n\
    \        if openingBracket == \"<\" {\n            openingBracketIndex += 1\n\
    \            if openingBracketIndex < brackets.endIndex {\n                openingBracket\
    \ = brackets[openingBracketIndex]\n            }\n        }\n        if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                openingBracket = brackets[openingBracketIndex]\n\
    \            }\n        }\n        if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            if openingBracketIndex < brackets.endIndex {\n           \
    \     openingBracket = brackets[openingBracketIndex]\n            }\n        }\n\
    \        if openingBra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfgw7z7w7.swift:74:22: error: expected '{' after 'if' condition\n\
    \        if openingBra\n                     ^\n/tmp/tmpfgw7z7w7.swift:101:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpfgw7z7w7.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpfgw7z7w7.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfgw7z7w7.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfgw7z7w7.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfgw7z7w7.swift:23:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmpfgw7z7w7.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmpfgw7z7w7.swift:27:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpfgw7z7w7.swift:29:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    if openingBracketsCount\
    \ == 0 {\n        return true\n    }\n\n    if openingBracketsCount > closingBracketsCount\
    \ {\n        return false\n    }\n\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketFound = false\n    var closingBracketFound = false\n\
    \n    while openingBracketIndex < openingBracketsCount {\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '>' {\n    \
    \        openingBracketFound = true\n            openingBracketIndex += 1\n  \
    \      } else if openingBrackets[openingBracketIndex] == '{' {\n            openingBracketFound\
    \ = true\n            openingBracketIndex += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '}' {\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '(' && !openingBracketFound\
    \ {\n            openingBracketFound = true\n            openingBracketIndex +=\
    \ 1\n        } else if openingBrackets[openingBracketIndex] == ')' && !openingBracketFound\
    \ {\n            openingBracketFound = true\n            openingBracketIndex +=\
    \ 1\n        } else if openingBrackets[openingBracketIndex] == '[' && !openingBracketFound\
    \ {\n            openingBracketFound = true\n            openingBracketIndex +=\
    \ 1\n        } else if openingBrackets[openingBracketIndex] == ']' && !openingBracketFound\
    \ {\n            openingBracketFound = true\n            openingBracketIndex +=\
    \ 1\n        } else if openingBrackets[openingBracketIndex] == '.' && !openingBracketFound\
    \ {\n            openingBracketFound = true\n            openingBracketIndex +=\
    \ 1\n        } else if openingBrackets[openingBracketIndex] == '/' && !openingBracketFound\
    \ {\n            openingBracketFound = true\n            openingBracketIndex +=\
    \ 1\n        } else if openingBrackets[openingBracketIndex] == '\\\\' && !opening\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr6k7mj43.swift:32:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpr6k7mj43.swift:35:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpr6k7mj43.swift:38:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '{' {\n                                                          ^~~\n  \
    \                                                        \"{\"\n/tmp/tmpr6k7mj43.swift:41:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '}' {\n                                                          ^~~\n  \
    \                                                        \"}\"\n/tmp/tmpr6k7mj43.swift:44:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '(' && !openingBracketFound {\n                                         \
    \                 ^~~\n                                                      \
    \    \"(\"\n/tmp/tmpr6k7mj43.swift:47:59: error: single-quoted string literal\
    \ found, use '\"'\n        } else if openingBrackets[openingBracketIndex] == ')'\
    \ && !openingBracketFound {\n                                                \
    \          ^~~\n                                                          \")\"\
    \n/tmp/tmpr6k7mj43.swift:50:59: error: single-quoted string literal found, use\
    \ '\"'\n        } else if openingBrackets[openingBracketIndex] == '[' && !openingBracketFound\
    \ {\n                                                          ^~~\n         \
    \                                                 \"[\"\n/tmp/tmpr6k7mj43.swift:53:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"<\" {\n            openingBracketsCount += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketsCount -= 1\n        }\n    }\n\n    for\
    \ closingBracket in closingBrackets {\n        if closingBracket == \"<\" {\n\
    \            closingBracketsCount += 1\n        } else if closingBracket == \"\
    >\" {\n            closingBracketsCount -= 1\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi3qbcbbk.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi3qbcbbk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi3qbcbbk.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpi3qbcbbk.swift:14:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.first(where: { $0 == openingBracket })\n        if closingBracket\
    \ == nil {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjaaiflzn.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpjaaiflzn.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[brackets.count\
    \ - 1]\n    for index in 1..<brackets.count {\n        if opening != brackets[index]\
    \ {\n            return false\n        }\n        opening = brackets[index]\n\
    \    }\n    return opening == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr2bws17u.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpr2bws17u.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[brackets.count - 1]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr2bws17u.swift:16:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening != brackets[index] {\n     \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpr2bws17u.swift:19:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        opening = brackets[index]\n                  ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr2bws17u.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets[brackets.count - 1]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = brackets.characters[openingIndex]\n\
    \    var closingChar = brackets.characters[closingIndex]\n\n    while openingIndex\
    \ < openingCount {\n        openingIndex++\n        openingChar = brackets.characters[openingIndex]\n\
    \        if openingChar == \">\" {\n            openingIndex++\n            openingChar\
    \ = brackets.characters[openingIndex]\n        }\n        if openingChar == \"\
    <\" {\n            openingIndex++\n            openingChar = brackets.characters[openingIndex]\n\
    \        }\n    }\n\n    while closingIndex < closingCount {\n        closingIndex++\n\
    \        closingChar = brackets.characters[closingIndex]\n        if closingChar\
    \ == \">\" {\n            closingIndex++\n            closingChar = brackets.characters[closingIndex]\n\
    \        }\n        if closingChar == \"<\" {\n            closingIndex++\n  \
    \          closingChar = brackets.characters[closingIndex]\n        }\n    }\n\
    \n    return openingIndex == openingCount && closingIndex == closingCount\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfj1e75_z.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpfj1e75_z.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpfj1e75_z.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpfj1e75_z.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfj1e75_z.swift:19:23: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var openingChar\
    \ = brackets.characters[openingIndex]\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfj1e75_z.swift:19:32:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingChar\
    \ = brackets.characters[openingIndex]\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfj1e75_z.swift:20:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a Str"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for i := 2; i < len(brackets); i += 2 {\n        opening = brackets[i]\n\
    \        closing = brackets[i+1]\n    }\n    return opening == closing\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcuaeuya3.swift:15:12: error: expected type\n    for i := 2; i <\
    \ len(brackets); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpcuaeuya3.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < len(brackets);\
    \ i += 2 {\n           ^\n/tmp/tmpcuaeuya3.swift:15:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 2; i < len(brackets); i += 2 {\n\
    \           ^\n/tmp/tmpcuaeuya3.swift:13:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var opening\
    \ = brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpcuaeuya3.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp986r13o6.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp986r13o6.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<>\":\n            openingBracketCount += 1\n        case \"<\":\n       \
    \     openingBra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpznccpbp1.swift:114:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpznccpbp1.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpznccpbp1.swift:114:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpznccpbp1.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpznccpbp1.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpznccpbp1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpznccpbp1.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpznccpbp1.swift:28:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<>\":\n\
    \             ^~~~\n/tmp/tmpznccpbp1.swift:32:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpznccpbp1.swift:36:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<>\":\n\
    \             ^~~~\n/tmp/tmpznccpbp1.swift:40:14: error: expression pattern of\
    \ type 'Strin"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n    var openingBracketsStringIndex = 0\n\
    \    var closingBracketsStringIndex = 0\n    var openingBracketsStringCount =\
    \ 0\n    var closingBracketsStringCount = 0\n    var openingBracketsStringSlice\
    \ = \"\"\n    var closingBracketsStringSlice = \"\"\n    var openingBracketsStringSliceIndex\
    \ = 0\n    var closingBracketsStringSliceIndex = 0\n    var openingBracketsStringSliceCount\
    \ = 0\n    var closingBracketsStringSliceCount = 0\n    var openingBracketsStringSliceIndexStart\
    \ = 0\n    var closingBracketsStringSliceIndexStart = 0\n    var openingBracketsStringSliceIndexEnd\
    \ = 0\n    var closingBracketsStringSliceIndexEnd = 0\n    var openingBracketsStringSliceCountStart\
    \ = 0\n    var closingBracketsStringSliceCountStart = 0\n    var openingBracketsStringSliceCountEnd\
    \ = 0\n    var closingBracketsStringSliceCountEnd = 0\n    var openingBracketsStringSliceIndexStart\
    \ = 0\n    var closingBracketsStringSliceIndexStart = 0\n    var openingBracketsStringSliceIndexEnd\
    \ = 0\n    var closingBracketsStringSliceIndexEnd = 0\n    var openingBracketsStringSliceCountStart\
    \ = 0\n    var closingBracketsStringSliceCountStart = 0\n    var openingBracketsStringSliceCountEnd\
    \ = 0\n    var closingBracketsStringSliceCountEnd = 0\n    var openingBracketsStringSliceIndexStart\
    \ = 0\n    var closingBracketsStringSliceIndexStart = 0\n    var openingBracketsStringSliceIndexEnd\
    \ = 0\n    var closingBracketsStringSliceIndexEnd = 0\n    var openingBracketsStringSliceCountStart\
    \ = 0\n    var closingBracketsStringSliceCountStart = 0\n    var openingBracketsStringSliceCountEnd\
    \ = 0\n    var closingBracketsStringSliceCountEnd = 0\n    var openingBracketsStringSliceIndexStart\
    \ = 0\n    var closingBracketsStringSliceIndexStart = 0\n    var openingBracketsStringSliceIndexEnd\
    \ = 0\n    var closingBracketsStringSliceIndexEnd = 0\n    var openingBracketsStringSliceCountStart\
    \ = 0\n    var closingBra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpim8dhb7p.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpim8dhb7p.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpim8dhb7p.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpim8dhb7p.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpim8dhb7p.swift:39:9: error: invalid redeclaration\
    \ of 'openingBracketsStringSliceIndexStart'\n    var openingBracketsStringSliceIndexStart\
    \ = 0\n        ^\n/tmp/tmpim8dhb7p.swift:31:9: note: 'openingBracketsStringSliceIndexStart'\
    \ previously declared here\n    var openingBracketsStringSliceIndexStart = 0\n\
    \        ^\n/tmp/tmpim8dhb7p.swift:40:9: error: invalid redeclaration of 'closingBracketsStringSliceIndexStart'\n\
    \    var closingBracketsStringSliceIndexStart = 0\n        ^\n/tmp/tmpim8dhb7p.swift:32:9:\
    \ note: 'closingBracketsStringSliceIndexStart' previously declared here\n    var\
    \ closingBracketsStringSliceIndexStart = 0\n        ^\n/tmp/tmpim8dhb7p.swift:41:9:\
    \ error: invalid redeclaration of 'openingBracketsStringSliceIndexEnd'\n    var\
    \ openingBracketsStringSli"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var isBracketsCorrect\
    \ = true\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"<\" {\n            if closingBracketsCount > openingBracketsCount {\n \
    \               isBracketsCorrect = false\n            }\n            closingBracketsCount\
    \ -= 1\n        } else if openingBracket == \">\" {\n            if openingBracketsCount\
    \ > closingBracketsCount {\n                isBracketsCorrect = false\n      \
    \      }\n            openingBracketsCount -= 1\n        }\n    }\n    return\
    \ isBracketsCorrect\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplbh9hzsf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplbh9hzsf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplbh9hzsf.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmplbh9hzsf.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmplbh9hzsf.swift:13:9: warning: variable\
    \ 'openingBrackets' was never mutated; consider changing to 'let' constant\n \
    \   var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmplbh9hzsf.swift:14:9:\
    \ warning: initialization of variable 'closingBrackets' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var closingBrackets = brackets.characters\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = String()\n    var closingChar = String()\n\
    \    var openingCharFound = false\n    var closingCharFound = false\n\n    while\
    \ openingIndex < openingCount {\n        openingChar = String(opening[openingIndex])\n\
    \        openingIndex += 1\n\n        while closingIndex < closingCount {\n  \
    \          closingChar = String(closing[closingIndex])\n            closingIndex\
    \ += 1\n\n            if openingChar == closingChar {\n                openingCharFound\
    \ = true\n                closingCharFound = true\n                break\n   \
    \         }\n        }\n\n        if !openingCharFound {\n            opening.removeAtIndex(openingIndex)\n\
    \            openingCount -= 1\n        }\n    }\n\n    return openingCount ==\
    \ closingCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkdcvzn73.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpkdcvzn73.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpkdcvzn73.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpkdcvzn73.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkdcvzn73.swift:25:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        openingChar\
    \ = String(opening[openingIndex])\n                             ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpkdcvzn73.swift:29:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            closingChar = String(closing[closingIndex])\n\
    \                                 ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpkdcvzn73.swift:40:21: error:\
    \ value of type"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n        openingBracketIndex += 1\n        closingBracketIndex += 1\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsonoj5ji.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsonoj5ji.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsonoj5ji.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpsonoj5ji.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ != '<' {\n            continue\n        }\n        openingBracketsIndex += 1\n\
    \        if openingBrackets[openingBracketsIndex] == '>' {\n            openingBracketsIndex\
    \ += 1\n            if openingBracketsIndex < openingBracketsCount {\n       \
    \         closingBracketsIndex += 1\n                if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                    closingBracketsIndex += 1\n                }\n\
    \            }\n        }\n    }\n    return openingBracketsIndex == openingBracketsCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ar5t938.swift:22:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] != '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmp2ar5t938.swift:26:53: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmp2ar5t938.swift:30:61:\
    \ error: single-quoted string literal found, use '\"'\n                if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                            ^~~\n\
    \                                                            \">\"\n/tmp/tmp2ar5t938.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp2ar5t938.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2ar5t938.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2ar5t938.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n    "
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex {\n \
    \           break\n        }\n\n        if closingBracketIndex >= brackets.endIndex\
    \ {\n            break\n        }\n\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6_s697rj.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_s697rj.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_s697rj.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp6_s697rj.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp6_s697rj.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp6_s697rj.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp6_s697rj.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        openingBracketIndex += 1\n\n        if openingBracket == \"<\" {\n  \
    \          if closingBracketIndex < brackets.endIndex {\n                let closingBracket\
    \ = brackets[closingBracketIndex]\n                closingBracketIndex += 1\n\
    \                if closingBracket == \">\" {\n                    openingBracketIndex\
    \ -= 1\n                    closingBracketIndex -= 1\n                } else {\n\
    \                    return false\n                }\n            } else {\n \
    \               return false\n            }\n        } else {\n            if\
    \ closingBracketIndex < brackets.endIndex {\n                let closingBracket\
    \ = brackets[closingBracketIndex]\n                closingBracketIndex += 1\n\
    \                if closingBracket == \"<\" {\n                    openingBracketIndex\
    \ -= 1\n                    closingBracketIndex -= 1\n                } else {\n\
    \                    return false\n                }\n            } else {\n \
    \               return false\n            }\n        }\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp33yt3ew8.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp33yt3ew8.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp33yt3ew8.swift:20:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp33yt3ew8.swift:25:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp33yt3ew8.swift:27:41: error: binary operator '-=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                    openingBracketIndex\
    \ -= 1\n                    ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp33yt3ew8.swift:28:41:\
    \ error: binary operator '-=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                    closingBracketIndex -= 1\n                  \
    \  ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp33yt3ew8.swift:38:37: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \          closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp33yt3ew8.swift:40:41: error: binary operator '-=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n                    openingBracketIndex\
    \ -= 1\n                    ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp33yt3ew8.swift:41:41:\
    \ error: binary operator '-=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                    closingBracketIndex -= 1\n                  \
    \  ~~~~~~~~~~"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"<\" {\n            if closingBracket == \">\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n            }\n        } else if openingBracket\
    \ == \">\" {\n            if closingBracket == \"<\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketIndex += 1\n            }\n        } else {\n      \
    \      if openingBracket != closingBracket {\n                return false\n \
    \           }\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm00ruye7.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm00ruye7.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm00ruye7.swift:24:37: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpm00ruye7.swift:25:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpm00ruye7.swift:27:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpm00ruye7.swift:31:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpm00ruye7.swift:32:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpm00ruye7.swift:34:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return false\n    }\n    if openingBrackets.first == \">\" {\n  \
    \      openingBrackets.removeFirst()\n        closingBrackets.removeLast()\n \
    \   }\n    if openingBrackets.last == \"<\" {\n        openingBrackets.removeLast()\n\
    \        closingBrackets.removeFirst()\n    }\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9bb2ftt9.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9bb2ftt9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if !closingBrackets.contains(where:\
    \ { $0 == openingBracket }) {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpubgvkl7g.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpubgvkl7g.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(String(openingBrackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg_o_9db3.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg_o_9db3.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg_o_9db3.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"==\":\n            openingBracketCount += 1\n        case \"!\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1gijkokx.swift:87:14: error: unterminated string literal\n    \
    \    case \"\n             ^\n/tmp/tmp1gijkokx.swift:87:15: error: expected ':'\
    \ after 'case'\n        case \"\n              ^\n/tmp/tmp1gijkokx.swift:114:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp1gijkokx.swift:19:51: note: to match this opening\
    \ '{'\n    while openingBracketIndex < brackets.endIndex {\n                 \
    \                                 ^\n/tmp/tmp1gijkokx.swift:114:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp1gijkokx.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp1gijkokx.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1gijkokx.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1gijkokx.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp1gijkokx.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmp1gijkokx.swift:31:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp1gijkokx.swift:91:6: er"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            open\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqnczyauk.swift:98:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpqnczyauk.swift:17:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpqnczyauk.swift:98:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpqnczyauk.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpqnczyauk.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqnczyauk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqnczyauk.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpqnczyauk.swift:23:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpqnczyauk.swift:25:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpqnczyauk.swift:26:33: error:\
    \ binary operator '+=' cannot be applied to operands"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBracketIndex\
    \ < brackets.endIndex && closingBracketIndex < brackets.endIndex {\n         \
    \   if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbs_jm9dy.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbs_jm9dy.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbs_jm9dy.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpbs_jm9dy.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingIndex = 0\n    var closingIndex = 0\n  \
    \  while openingIndex < opening.count {\n        openingIndex++\n        if opening[openingIndex]\
    \ == '<' {\n            openingIndex++\n            while openingIndex < opening.count\
    \ && opening[openingIndex] != '>' {\n                openingIndex++\n        \
    \    }\n            if openingIndex == opening.count {\n                return\
    \ false\n            }\n            openingIndex++\n        }\n    }\n    while\
    \ closingIndex < closing.count {\n        closingIndex++\n        if closing[closingIndex]\
    \ == '>' {\n            closingIndex++\n            while closingIndex < closing.count\
    \ && closing[closingIndex] != '<' {\n                closingIndex++\n        \
    \    }\n            if closingIndex == closing.count {\n                return\
    \ false\n            }\n            closingIndex++\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgoi5q14y.swift:19:37: error: single-quoted string literal found,\
    \ use '\"'\n        if opening[openingIndex] == '<' {\n                      \
    \              ^~~\n                                    \"<\"\n/tmp/tmpgoi5q14y.swift:21:76:\
    \ error: single-quoted string literal found, use '\"'\n            while openingIndex\
    \ < opening.count && opening[openingIndex] != '>' {\n                        \
    \                                                   ^~~\n                    \
    \                                                       \">\"\n/tmp/tmpgoi5q14y.swift:32:37:\
    \ error: single-quoted string literal found, use '\"'\n        if closing[closingIndex]\
    \ == '>' {\n                                    ^~~\n                        \
    \            \">\"\n/tmp/tmpgoi5q14y.swift:34:76: error: single-quoted string\
    \ literal found, use '\"'\n            while closingIndex < closing.count && closing[closingIndex]\
    \ != '<' {\n                                                                 \
    \          ^~~\n                                                             \
    \              \"<\"\n/tmp/tmpgoi5q14y.swift:13:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgoi5q14y.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var closing = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpgoi5q14y.swift:18:21: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        openingIndex++\n                    ^~\n/tmp/tmpgoi5q14y.swift:19:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[openingIndex] == '<' {\n   \
    \        ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitl"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ let closingBracket = closingBrackets.firstIndex(of: openingBracket) {\n    \
    \        let openingBracketIndex = openingBrackets.index(openingBracket, offsetBy:\
    \ 1)\n            let closingBracketIndex = closingBrackets.index(closingBracket,\
    \ offsetBy: -1)\n            \n            if openingBracketIndex < closingBracketIndex\
    \ {\n                return false\n            }\n        }\n    }\n    \n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8y58ajej.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp8y58ajej.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"<\" {\n            openingBracketsCount--\n\
    \        } else if openingBracket == \">\" {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"<\" {\n            closingBracketsCount--\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketsCount++\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48y6i0dz.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48y6i0dz.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48y6i0dz.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp48y6i0dz.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp48y6i0dz.swift:20:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:22:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:28:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:30:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        guard openingBrackets[openingBracketIndex] == '<' else {\n      \
    \      return false\n        }\n        openingBracketCount++\n        openingBracketIndex++\n\
    \n        if openingBracketCount > 1 {\n            guard openingBrackets[openingBracketIndex]\
    \ == '>' else {\n                return false\n            }\n            openingBracketCount--\n\
    \            openingBracketIndex++\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex] ==\
    \ '>' else {\n            return false\n        }\n        closingBracketCount++\n\
    \        closingBracketIndex++\n\n        if closingBracketCount > 1 {\n     \
    \       guard closingBrackets[closingBracketIndex] == '<' else {\n           \
    \     return false\n            }\n            closingBracketCount--\n       \
    \     closingBracketIndex++\n        }\n    }\n\n    return openingBracketCount\
    \ == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp71gq9rh9.swift:21:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '<' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"<\"\n/tmp/tmp71gq9rh9.swift:28:59: error:\
    \ single-quoted string literal found, use '\"'\n            guard openingBrackets[openingBracketIndex]\
    \ == '>' else {\n                                                          ^~~\n\
    \                                                          \">\"\n/tmp/tmp71gq9rh9.swift:37:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketIndex]\
    \ == '>' else {\n                                                      ^~~\n \
    \                                                     \">\"\n/tmp/tmp71gq9rh9.swift:44:59:\
    \ error: single-quoted string literal found, use '\"'\n            guard closingBrackets[closingBracketIndex]\
    \ == '<' else {\n                                                          ^~~\n\
    \                                                          \"<\"\n/tmp/tmp71gq9rh9.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp71gq9rh9.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp71gq9rh9.swift:24:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmp71gq9rh9.swift:25:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n       \
    \                    ^~\n/tmp/tmp71gq9rh9.swift:31:32: error: canno"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    for openingIndex in 0..<openingCount\
    \ {\n        let openingChar = opening[openingIndex]\n        if openingChar ==\
    \ \"<\" {\n            openingIndex--\n        }\n        if openingIndex < 0\
    \ {\n            return false\n        }\n        if opening[openingIndex] !=\
    \ \">\" {\n            return false\n        }\n        openingIndex--\n    }\n\
    \    for closingIndex in 0..<closingCount {\n        let closingChar = closing[closingIndex]\n\
    \        if closingChar == \">\" {\n            closingIndex--\n        }\n  \
    \      if closingIndex < 0 {\n            return false\n        }\n        if\
    \ closing[closingIndex] != \"<\" {\n            return false\n        }\n    \
    \    closingIndex--\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp40g7csd3.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp40g7csd3.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp40g7csd3.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp40g7csd3.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp40g7csd3.swift:18:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingChar = opening[openingIndex]\n                          ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp40g7csd3.swift:20:25:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  openingIndex--\n                        ^~\n/tmp/tmp40g7csd3.swift:25:12: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if opening[openingIndex] != \">\" {\n           ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    publ"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket) {\n            closingBrackets.remove(at:\
    \ closingBracket)\n        }\n    }\n    return openingBrackets.count == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsoz95av7.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpsoz95av7.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openings = brackets.components(separatedBy: \"<\"\
    )\n    let closings = brackets.components(separatedBy: \">\")\n    if openings.count\
    \ != closings.count {\n        return false\n    }\n    for i in 0..<openings.count\
    \ {\n        if openings[i] != closings[i] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpllvn7oko.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n    let openings = brackets.components(separatedBy: \"<\")\n \
    \                  ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpllvn7oko.swift:14:29: error: value\
    \ of type 'String' has no member 'components'\n    let closings = brackets.components(separatedBy:\
    \ \">\")\n                   ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            openingBracketIndex += 1\n            continue\n   \
    \     }\n\n        if closingBracketIndex == closingBrackets.endIndex {\n    \
    \        return false\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[openingBracketIndex+1]\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBrackets[opening\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptj63s4fx.swift:96:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmptj63s4fx.swift:95:27: note: to match this opening '['\n        if openingBrackets[opening\n\
    \                          ^\n/tmp/tmptj63s4fx.swift:122:66: error: expected '}'\
    \ at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmptj63s4fx.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmptj63s4fx.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptj63s4fx.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptj63s4fx.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmptj63s4fx.swift:29:28: error:\
    \ cannot convert value of type 'String.Index' to expected argument type 'Int'\n\
    \        if openingBrackets[openingBracketIndex+1] == \"<\" {\n              \
    \             ^\n/tmp/tmptj63s4fx.swift:30:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmptj63s4fx.swift:31:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmptj63s4fx.swift:35:28: error: cannot convert value of ty"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ closingBrackets.contains(where: { $0 == openingBracket }) {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0grw9k8t.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp0grw9k8t.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == \">\" {\n            openingBracketCount++\n\
    \        } else if openingBrackets[openingBracketIndex] != \"<\" {\n         \
    \   openingBracketCount = 0\n        }\n        openingBracketIndex++\n    }\n\
    \    while closingBracketIndex < brackets.endIndex {\n        if closingBrackets[closingBracketIndex]\
    \ == \">\" {\n            closingBracketCount++\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"<\" {\n            closingBracketCount = 0\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == closingBracketCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjdcdktpq.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjdcdktpq.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjdcdktpq.swift:21:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpjdcdktpq.swift:25:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n       \
    \                    ^~\n/tmp/tmpjdcdktpq.swift:29:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n   \
    \                            ^~\n/tmp/tmpjdcdktpq.swift:33:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        if openingBrackets[openingBracketsIndex] == '<' {\n            if\
    \ closingBrackets[closingBracketsIndex] == '>' {\n                openingBracketsIndex\
    \ += 1\n                closingBracketsIndex += 1\n            } else {\n    \
    \            openingBracketsIndex += 1\n            }\n        } else {\n    \
    \        if closingBrackets[closingBracketsIndex] == '>' {\n                openingBracketsIndex\
    \ += 1\n            } else {\n                openingBracketsIndex += 1\n    \
    \            closingBracketsIndex += 1\n            }\n        }\n    }\n\n  \
    \  return openingBracketsIndex == openingBracketsCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0uodzio1.swift:21:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmp0uodzio1.swift:22:57: error: single-quoted\
    \ string literal found, use '\"'\n            if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                        ^~~\n    \
    \                                                    \">\"\n/tmp/tmp0uodzio1.swift:29:57:\
    \ error: single-quoted string literal found, use '\"'\n            if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                        ^~~\n    \
    \                                                    \">\"\n/tmp/tmp0uodzio1.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0uodzio1.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0uodzio1.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp0uodzio1.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n    "
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfh3lx8i8.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfh3lx8i8.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == '<' {\n            openingBracketCount\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '>' {\n    \
    \        openingBracketCount -= 1\n        }\n        openingBracketIndex += 1\n\
    \    }\n\n    while closingBracketIndex < brackets.endIndex {\n        if closingBrackets[closingBracketIndex]\
    \ == '<' {\n            closingBracketCount += 1\n        } else if closingBrackets[closingBracketIndex]\
    \ == '>' {\n            closingBracketCount -= 1\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketCount == 0 && closingBracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt26hgm0n.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpt26hgm0n.swift:23:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpt26hgm0n.swift:30:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '<' {\n                                                   ^~~\n         \
    \                                          \"<\"\n/tmp/tmpt26hgm0n.swift:32:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpt26hgm0n.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpt26hgm0n.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt26hgm0n.swift:26:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpt26hgm0n.swift:35:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket) {\n            closingBrackets.remove(at:\
    \ closingBracket)\n        }\n    }\n    return openingBrackets.count == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsoz95av7.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpsoz95av7.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBracketIndex\
    \ == closingBracketIndex {\n            openingBrackets.removeAtIndex(openingBracketIndex)\n\
    \            closingBrackets.removeAtIndex(closingBracketIndex)\n        }\n \
    \   }\n    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9sc4chkt.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9sc4chkt.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9sc4chkt.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp9sc4chkt.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmp9sc4chkt.swift:21:29: error: value of type 'String' has no\
    \ member 'removeAtIndex'\n            openingBrackets.removeAtIndex(openingBracketIndex)\n\
    \            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp9sc4chkt.swift:22:29: error:\
    \ value of type 'String' has no member 'removeAtIndex'\n            closingBrackets.removeAtIndex(closingBracketIndex)\n\
    \            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphxucaie7.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphxucaie7.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphxucaie7.swift:19:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmphxucaie7.swift:19:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmphxucaie7.swift:19:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            closingBracketIndex += 1\n        } else {\n       \
    \     return false\n        }\n    }\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptu6s2qi0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptu6s2qi0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptu6s2qi0.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmptu6s2qi0.swift:23:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for i := 2; i < len(brackets); i += 2 {\n        opening = brackets[i]\n\
    \        closing = brackets[i+1]\n    }\n    return opening == closing\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcuaeuya3.swift:15:12: error: expected type\n    for i := 2; i <\
    \ len(brackets); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpcuaeuya3.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < len(brackets);\
    \ i += 2 {\n           ^\n/tmp/tmpcuaeuya3.swift:15:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 2; i < len(brackets); i += 2 {\n\
    \           ^\n/tmp/tmpcuaeuya3.swift:13:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var opening\
    \ = brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpcuaeuya3.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \">\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex == brackets.endIndex {\n            return\
    \ true\n        }\n\n        guard openingBrackets[openingBracketIndex] == \"\
    >\" else {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_scasa18.swift:137:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp_scasa18.swift:18:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp_scasa18.swift:137:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp_scasa18.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp_scasa18.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_scasa18.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_scasa18.swift:23:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_scasa18.swift:33:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp_scasa18.swift:43:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp_scasa18.swift:53:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"!\":\n            openingBracketCount += 1\n        case \"=\", \"<\", \"\
    <=\", \"!\":\n            openingBracketCount += 1\n        case \"<\":\n    \
    \        openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"!\":\n            openingBracketCount += 1\n        case \"=\", \"<\", \"\
    <=\", \"!\":\n            openingBracketCount += 1\n        case \"<\":\n    \
    \        openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"!\":\n            openingBracketCount += 1\n        case \"=\", \"<\", \"\
    <=\", \"!\":\n            openingBracketCount += 1\n        case \"<\":\n    \
    \        openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"!\":\n            openingBracketCount += 1\n        case \"=\", \"<\", \"\
    <=\", \"!\":\n            openingBracketCount += 1\n        case \"<\":\n    \
    \        openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"!\":\n            openingBracketCount += 1\n        case \"=\", \"<\", \"\
    <=\", \"!\":\n            openingBracketCount += 1\n        case \"<\":\n    \
    \        openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"!\":\n            openingBracketCount += 1\n        case \"=\", \"<\", \"\
    <=\", \"!\":\n            opening\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp62bfolkd.swift:108:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp62bfolkd.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp62bfolkd.swift:108:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp62bfolkd.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp62bfolkd.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp62bfolkd.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp62bfolkd.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp62bfolkd.swift:30:24: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"=\", \"\
    <\", \"<=\", \"!\":\n                       ^~~~\n/tmp/tmp62bfolkd.swift:34:14:\
    \ error: expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"<=\":\n             ^~~~\n/tmp/tmp62bfolkd.swift:40:24: error:\
    \ expression pattern of type 'String' cannot match values of type 'Character'\n\
    \        case \"=\", \"<\", \"<=\", \"!\":\n                       ^~~~\n/tmp/tmp62bfolkd.swi"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            if closingBracketIndex < closingBrackets.count && closingBrackets[closingBracketIndex]\
    \ == '>' {\n                openingBracketIndex += 1\n                closingBracketIndex\
    \ += 1\n            } else {\n                return false\n            }\n  \
    \      } else {\n            if closingBracketIndex < closingBrackets.count &&\
    \ closingBrackets[closingBracketIndex] == '>' {\n                openingBracketIndex\
    \ += 1\n            } else {\n                return false\n            }\n  \
    \      }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdvh2slkt.swift:19:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpdvh2slkt.swift:20:103: error: single-quoted\
    \ string literal found, use '\"'\n            if closingBracketIndex < closingBrackets.count\
    \ && closingBrackets[closingBracketIndex] == '>' {\n                         \
    \                                                                            \
    \ ^~~\n                                                                      \
    \                                \">\"\n/tmp/tmpdvh2slkt.swift:27:103: error:\
    \ single-quoted string literal found, use '\"'\n            if closingBracketIndex\
    \ < closingBrackets.count && closingBrackets[closingBracketIndex] == '>' {\n \
    \                                                                            \
    \                         ^~~\n                                              \
    \                                                        \">\"\n/tmp/tmpdvh2slkt.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpdvh2slkt.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdvh2slkt.swift:19:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { ge"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        let openingBracket = openingBrackets[openingBracketsIndex]\n    \
    \    openingBracketsIndex += 1\n        if openingBracket == \"<\" {\n       \
    \     if closingBracketsIndex < closingBracketsCount {\n                let closingBracket\
    \ = closingBrackets[closingBracketsIndex]\n                closingBracketsIndex\
    \ += 1\n                if closingBracket == \">\" {\n                    openingBracketsIndex\
    \ += 1\n                    closingBracketsIndex += 1\n                } else\
    \ {\n                    return false\n                }\n            } else {\n\
    \                return false\n            }\n        } else {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvnz1gya1.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvnz1gya1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvnz1gya1.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvnz1gya1.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvnz1gya1.swift:20:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let openingBracket = openingBrackets[openingBracketsIndex]\n        \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvnz1gya1.swift:24:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                let closingBracket = closingBrackets[closingBracketsIndex]\n\
    \                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly mar"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    var openingBracket: Character?\n \
    \   var closingBracket: Character?\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        openingBracket = openingBrackets[openingBracketIndex]\n        closingBracket\
    \ = closingBrackets[closingBracketIndex]\n        openingBracketCount++\n    \
    \    closingBracketCount++\n        if openingBracket == \"<\" {\n           \
    \ if closingBracket == \">\" {\n                openingBracketIndex++\n      \
    \          closingBracketIndex++\n                openingBracketCount--\n    \
    \            closingBracketCount--\n            } else {\n                openingBracketIndex++\n\
    \            }\n        } else if openingBracket == \">\" {\n            if closingBracket\
    \ == \"<\" {\n                openingBracketIndex++\n                closingBracketIndex++\n\
    \                openingBracketCount--\n                closingBracketCount--\n\
    \            } else {\n                openingBracketIndex++\n            }\n\
    \        } else {\n            openingBracketIndex++\n        }\n    }\n    return\
    \ openingBracketCount == 0 && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwql_g6pf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwql_g6pf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwql_g6pf.swift:24:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmpwql_g6pf.swift:25:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketCount++\n       \
    \                    ^~\n/tmp/tmpwql_g6pf.swift:28:36: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                openingBracketIndex++\n\
    \                                   ^~\n/tmp/tmpwql_g6pf.swift:29:36: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                closingBracketIndex++\n\
    \                                   ^~\n/tmp/tmpwql_g6pf.swift:30:36: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                openingBracketCount--\n\
    \                                   ^~\n/tmp/tmpwql_g6pf.swift:31:36: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                closingBracketCount--\n\
    \                                   ^~\n/tmp/tmpwql_g6pf.swift:33:36: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                openingBracketIndex++\n\
    \                                   ^~\n/tmp/tmpwql_g6pf.swift:37:36: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n                openingBracketIndex++\n\
    \                                   ^~\n/tmp/tmpwql_g6pf.swift:38:36: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(String(openingBrackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg_o_9db3.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg_o_9db3.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg_o_9db3.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[brackets.count-1]\n\
    \    for index in 0..<brackets.count {\n        if opening != brackets[index]\
    \ {\n            return false\n        }\n    }\n    return opening == closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2vs287_j.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp2vs287_j.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[brackets.count-1]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2vs287_j.swift:16:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening != brackets[index] {\n     \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp2vs287_j.swift:13:9: warning: variable 'opening'\
    \ was never mutated; consider changing to 'let' constant\n    var opening = brackets[0]\n\
    \    ~~~ ^\n    let\n/tmp/tmp2vs287_j.swift:14:9: warning: variable 'closing'\
    \ was never mutated; consider changing to 'let' constant\n    var closing = brackets[brackets.count-1]\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ '<' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard closingBracketIndex < brackets.endIndex\
    \ else {\n            return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == '>' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnoe7hdn0.swift:19:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '<' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"<\"\n/tmp/tmpnoe7hdn0.swift:29:55: error:\
    \ single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == '>' else {\n                                                      ^~~\n \
    \                                                     \">\"\n/tmp/tmpnoe7hdn0.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpnoe7hdn0.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnoe7hdn0.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpnoe7hdn0.swift:32:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpnoe7hdn0.swift:33:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    for openingBracket in openingBrackets {\n     \
    \   if openingBracket == \"<\" {\n            if closingBrackets.contains(\"<\"\
    ) {\n                openingBrackets.removeLast()\n                closingBrackets.removeLast()\n\
    \            }\n        }\n    }\n\n    return brackets.characters == openingBrackets\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq06dx9yt.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq06dx9yt.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq06dx9yt.swift:25:21: error: 'characters' is unavailable:\
    \ Please use String directly\n    return brackets.characters == openingBrackets\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    if openingBrackets.count < 1 {\n        return\
    \ false\n    }\n\n    if openingBrackets.count == 1 {\n        return true\n \
    \   }\n\n    if openingBrackets.count == 2 {\n        if closingBrackets.count\
    \ == 1 {\n            return true\n        }\n        if closingBrackets.count\
    \ == 2 {\n            if openingBrackets[0] == closingBrackets[0] {\n        \
    \        return true\n            }\n        }\n    }\n\n    if openingBrackets.count\
    \ > 2 {\n        return false\n    }\n\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb_wu96zv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb_wu96zv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb_wu96zv.swift:29:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if openingBrackets[0] == closingBrackets[0] {\n               ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb_wu96zv.swift:29:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if openingBrackets[0] == closingBrackets[0]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb_wu96zv.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpb_wu96zv.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n\n    while openingIndex < openingCount {\n        opening\
    \ = brackets[openingIndex..<openingIndex+2]\n        closing = brackets[closingIndex..<closingIndex+2]\n\
    \        openingIndex += 2\n        closingIndex += 2\n\n        if opening ==\
    \ \"<\" {\n            if closing != \">\" {\n                return false\n \
    \           }\n        } else if opening == \">\" {\n            if closing !=\
    \ \"<\" {\n                return false\n            }\n        } else {\n   \
    \         if opening != closing {\n                return false\n            }\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7d_486ko.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp7d_486ko.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp7d_486ko.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7d_486ko.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7d_486ko.swift:21:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        opening = brackets[openingIndex..<openingIndex+2]\n                 \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmp7d_486ko.swift:22:19: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an integer range, use a String.Index range instead.\n        closing\
    \ = brackets[closingIndex..<closingIndex+2]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscri"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if !closingBrackets.contains(where:\
    \ { $0 == openingBracket }) {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpubgvkl7g.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpubgvkl7g.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            if closingBracketIndex < closingBrackets.count {\n   \
    \             if closingBrackets[closingBracketIndex] == '>' {\n             \
    \       openingBracketIndex += 1\n                    closingBracketIndex += 1\n\
    \                } else {\n                    openingBracketIndex += 1\n    \
    \            }\n            } else {\n                openingBracketIndex += 1\n\
    \            }\n        } else {\n            if closingBracketIndex < closingBrackets.count\
    \ {\n                if closingBrackets[closingBracketIndex] == '>' {\n      \
    \              openingBracketIndex += 1\n                } else {\n          \
    \          openingBracketIndex += 1\n                }\n            } else {\n\
    \                openingBracketIndex += 1\n            }\n        }\n    }\n\n\
    \    return openingBracketIndex == openingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbc_7gayd.swift:19:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpbc_7gayd.swift:21:60: error: single-quoted\
    \ string literal found, use '\"'\n                if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                           ^~~\n \
    \                                                          \">\"\n/tmp/tmpbc_7gayd.swift:32:60:\
    \ error: single-quoted string literal found, use '\"'\n                if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                           ^~~\n \
    \                                                          \">\"\n/tmp/tmpbc_7gayd.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbc_7gayd.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbc_7gayd.swift:19:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbc_7gayd.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for index in 0..<openingBrackets.count {\n        if openingBrackets[index]\
    \ != closingBrackets[index] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppfh4h2kw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppfh4h2kw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppfh4h2kw.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] != closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmppfh4h2kw.swift:21:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] != closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ let closingBracket = closingBrackets.firstIndex(of: openingBracket) {\n    \
    \        closingBrackets.remove(at: closingBracket)\n        }\n    }\n    \n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpphukfuqw.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpphukfuqw.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"<\" {\n            openingBracketsCount++\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketsCount--\n        }\n    }\n\n    for\
    \ closingBracket in closingBrackets {\n        if closingBracket == \"<\" {\n\
    \            closingBracketsCount++\n        } else if closingBracket == \">\"\
    \ {\n            closingBracketsCount--\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp08nnyq8i.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp08nnyq8i.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp08nnyq8i.swift:21:33: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketsCount++\n       \
    \                         ^~\n/tmp/tmp08nnyq8i.swift:23:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp08nnyq8i.swift:29:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n/tmp/tmp08nnyq8i.swift:31:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = -1\n    var closingBracketIndex\
    \ = -1\n\n    for index in 0..<openingBrackets.count {\n        switch openingBrackets[index]\
    \ {\n        case '<':\n            if openingBracketIndex == -1 {\n         \
    \       openingBracketIndex = index\n            }\n        default:\n       \
    \     if openingBracketIndex != -1 {\n                openingBracketIndex = -1\n\
    \            }\n        }\n    }\n\n    for index in 0..<closingBrackets.count\
    \ {\n        switch closingBrackets[index] {\n        case '>':\n            if\
    \ closingBracketIndex == -1 {\n                closingBracketIndex = index\n \
    \           }\n        default:\n            if closingBracketIndex != -1 {\n\
    \                closingBracketIndex = -1\n            }\n        }\n    }\n\n\
    \    return openingBracketIndex != -1 && closingBracketIndex != -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1_6_eixh.swift:21:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '<':\n             ^~~\n             \"<\"\n/tmp/tmp1_6_eixh.swift:34:14:\
    \ error: single-quoted string literal found, use '\"'\n        case '>':\n   \
    \          ^~~\n             \">\"\n/tmp/tmp1_6_eixh.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1_6_eixh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1_6_eixh.swift:20:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        switch\
    \ openingBrackets[index] {\n               ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1_6_eixh.swift:33:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        switch closingBrackets[index] {\n     \
    \          ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp1_6_eixh.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmp1_6_eixh.swift:14:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ i := 0; i < len(brackets); i++ {\n        switch brackets[i] {\n        case\
    \ \"<\":\n            if opening {\n                return false\n           \
    \ }\n            opening = true\n        case \"<=\":\n            if opening\
    \ {\n                return false\n            }\n            opening = true\n\
    \        case \"=\":\n            if opening {\n                return false\n\
    \            }\n            opening = true\n        case \">\":\n            if\
    \ closing {\n                return false\n            }\n            closing\
    \ = true\n        case \">=\":\n            if closing {\n                return\
    \ false\n            }\n            closing = true\n        default:\n       \
    \     if opening {\n                opening = false\n            }\n         \
    \   if closing {\n                closing = false\n            }\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsp3f9ulw.swift:15:12: error: expected type\n    for i := 0; i <\
    \ len(brackets); i++ {\n           ^\n            <#type#>\n/tmp/tmpsp3f9ulw.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(brackets);\
    \ i++ {\n           ^\n/tmp/tmpsp3f9ulw.swift:15:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(brackets); i++ {\n   \
    \        ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"<\" {\n            openingBracketsCount--\n\
    \        } else if openingBracket == \">\" {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"<\" {\n            closingBracketsCount--\n        } else if closingBracket\
    \ == \">\" {\n            closingBracketsCount++\n        }\n    }\n\n    if openingBracketsCount\
    \ != closingBracketsCount {\n        return false\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48y6i0dz.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48y6i0dz.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48y6i0dz.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp48y6i0dz.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp48y6i0dz.swift:20:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:22:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:28:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n/tmp/tmp48y6i0dz.swift:30:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex <\
    \ closingBracketsCount {\n        closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \        closingBracketsIndex += 1\n    }\n\n    if openingBracketsString == closingBracketsString\
    \ {\n        return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqkbku_su.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqkbku_su.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqkbku_su.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqkbku_su.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqkbku_su.swift:23:41: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqkbku_su.swift:28:41:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscrip"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"==\":\n            openingBracketCount += 1\n        case \"!\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \"=\":\n            openingBracketCount += 1\n        case \"==\":\n       \
    \     openingBracketCount += 1\n        case \"!\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracketCount += 1\n        case \"==\":\n            openingBracketCount\
    \ += 1\n        case \"!\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<=\":\n       \
    \     openingBracketCount += 1\n        case \"=\":\n            openingBracketCount\
    \ += 1\n        case \"==\":\n            openingBracketCount += 1\n        case\
    \ \"!\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"==\":\n            openingBracketCount += 1\n        case \"!\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \"=\":\n            openingBracketCount += 1\n        case \"==\":\n       \
    \     openingBracketCount += 1\n        case \"!\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpymqjscxe.swift:113:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpymqjscxe.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpymqjscxe.swift:113:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpymqjscxe.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpymqjscxe.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpymqjscxe.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpymqjscxe.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpymqjscxe.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmpymqjscxe.swift:33:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpymqjscxe.swift:37:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmpymqjscxe.swift:43:14: error: expression pattern of\
    \ type 'Strin"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    while openingBracketsCount\
    \ > 0 && closingBracketsCount > 0 {\n        if openingBrackets[openingBracketsCount\
    \ - 1] == \">\" {\n            openingBracketsCount -= 1\n            closingBracketsCount\
    \ -= 1\n        } else if openingBrackets[openingBracketsCount - 1] == \"<\" {\n\
    \            openingBracketsCount -= 1\n            closingBracketsCount -= 1\n\
    \        } else {\n            openingBracketsCount -= 1\n        }\n    }\n\n\
    \    return openingBracketsCount == 0 && closingBracketsCount == 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpukllt20w.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpukllt20w.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpukllt20w.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpukllt20w.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpukllt20w.swift:19:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsCount - 1] == \">\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpukllt20w.swift:22:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if openingBrackets[openingBracketsCount\
    \ - 1] == \"<\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscrip"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.count\n    var\
    \ closingBracketsCount = brackets.count\n\n    while openingBracketsCount > 0\
    \ && closingBracketsCount > 0 {\n        openingBracketsCount -= 1\n        closingBracketsCount\
    \ -= 1\n\n        if openingBrackets[openingBracketsCount] != closingBrackets[closingBracketsCount]\
    \ {\n            return false\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfisxk609.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfisxk609.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfisxk609.swift:22:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketsCount] != closingBrackets[closingBracketsCount]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpfisxk609.swift:22:53: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketsCount] != closingBrackets[closingBracketsCount]\
    \ {\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfisxk609.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpfisxk609.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    if openingBrackets.count > 0 {\n       \
    \ var lastOpeningBracket = openingBrackets.last\n        var lastClosingBracket\
    \ = closingBrackets.first\n        if lastOpeningBracket != lastClosingBracket\
    \ {\n            return false\n        }\n        if lastOpeningBracket == lastClosingBracket\
    \ {\n            openingBrackets.removeLast()\n            closingBrackets.removeFirst()\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6_ambeoa.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_ambeoa.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6_ambeoa.swift:17:9: warning: variable 'openingBracketsCount'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBracketsCount\
    \ = openingBrackets.count\n    ~~~ ^\n    let\n/tmp/tmp6_ambeoa.swift:18:9: warning:\
    \ variable 'closingBracketsCount' was never mutated; consider changing to 'let'\
    \ constant\n    var closingBracketsCount = closingBrackets.count\n    ~~~ ^\n\
    \    let\n/tmp/tmp6_ambeoa.swift:23:13: warning: variable 'lastOpeningBracket'\
    \ was never mutated; consider changing to 'let' constant\n        var lastOpeningBracket\
    \ = openingBrackets.last\n        ~~~ ^\n        let\n/tmp/tmp6_ambeoa.swift:24:13:\
    \ warning: variable 'lastClosingBracket' was never mutated; consider changing\
    \ to 'let' constant\n        var lastClosingBracket = closingBrackets.first\n\
    \        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    // Iterate through\
    \ every opening bracket\n    for openingBracket in 0..<openingBracketsCount {\n\
    \        // Iterate through every closing bracket\n        for closingBracket\
    \ in 0..<closingBracketsCount {\n            // If the opening bracket is before\
    \ the closing bracket\n            if openingBracket < closingBracket {\n    \
    \            // If there is a closing bracket before the opening bracket\n   \
    \             if openingBrackets[openingBracket] == \">\" {\n                \
    \    // Remove the closing bracket\n                    closingBrackets.remove(at:\
    \ closingBracket)\n                    // Remove the opening bracket\n       \
    \             openingBrackets.remove(at: openingBracket)\n                   \
    \ // Increment the closing bracket count\n                    closingBracketsCount\
    \ -= 1\n                    // Decrement the opening bracket count\n         \
    \           openingBracketsCount -= 1\n                }\n            }\n    \
    \    }\n    }\n\n    // Return true if every opening bracket has a corresponding\
    \ closing bracket\n    return openingBracketsCount == 0 && closingBracketsCount\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb71t989t.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb71t989t.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb71t989t.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpb71t989t.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpb71t989t.swift:25:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if openingBrackets[openingBracket] == \">\" {\n             \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpb71t989t.swift:27:48: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \               closingBrackets.remove(at: closingBracket)\n                 \
    \                              ^\n/tmp/tmpb71t989t.swift:29:48: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \               openingBracke"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first < closingBrackets.first\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo0jfydei.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo0jfydei.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo0jfydei.swift:26:30: error: binary operator '<' cannot\
    \ be applied to two 'String.Element?' (aka 'Optional<Character>') operands\n \
    \   if openingBrackets.first < closingBrackets.first {\n       ~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo0jfydei.swift:26:30: note: overloads for '<'\
    \ exist with these partially matching parameter lists: (Character, Character)\n\
    \    if openingBrackets.first < closingBrackets.first {\n                    \
    \         ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n    var openingBracketsStringIndex = 0\n\
    \    var closingBracketsStringIndex = 0\n    var openingBracketsStringLastIndex\
    \ = 0\n    var closingBracketsStringLastIndex = 0\n    var openingBracketsStringLastIndexIndex\
    \ = 0\n    var closingBracketsStringLastIndexIndex = 0\n    var openingBracketsStringLastIndexLastIndex\
    \ = 0\n    var closingBracketsStringLastIndexLastIndex = 0\n    var openingBracketsStringLastIndexLastIndexIndex\
    \ = 0\n    var closingBracketsStringLastIndexLastIndexIndex = 0\n    var openingBracketsStringLastIndexLastIndexLastIndex\
    \ = 0\n    var closingBracketsStringLastIndexLastIndexLastIndex = 0\n    var openingBracketsStringLastIndexLastIndexLastIndexIndex\
    \ = 0\n    var closingBracketsStringLastIndexLastIndexLastIndex = 0\n    var openingBracketsStringLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n    var closingBracketsStringLastIndexLastIndexLastIndexLastIndex = 0\n\
    \    var openingBracketsStringLastIndexLastIndexLastIndexLastIndex = 0\n    var\
    \ closingBracketsStringLastIndexLastIndexLastIndexLastIndex = 0\n    var openingBracketsStringLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n    var closingBracketsStringLastIndexLastIndexLastIndexLastIndex = 0\n\
    \    var openingBracketsStringLastIndexLastIndexLastIndexLastIndex = 0\n    var\
    \ closingBracketsStringLastIndexLastIndexLastIndexLastIndex = 0\n    var openingBracketsStringLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n    var closingBracketsStringLastIndexLastIndexLastIndexLastIndex = 0\n\
    \    var openingBracketsStringLastIndexLastIndexLastIndexLastIndexLast = 0\n \
    \   var closingBracketsStringLastIndexLastIndexLastIndexLastIndexLast = 0\n  \
    \  var openingBracketsStringLastIndexLastIndexLastIndexLastIndexLast = 0\n   \
    \ var closingBracketsStringLastIndexLastIndexLastIndexLastIndexLast = 0\n    var\
    \ openingBracketsStringLastIndexLastIndexLastIndexLastIndexLast = 0\n    var closingBracketsStringLastIndexLast\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2wdexbnh.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2wdexbnh.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2wdexbnh.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2wdexbnh.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2wdexbnh.swift:34:9: error: invalid redeclaration\
    \ of 'closingBracketsStringLastIndexLastIndexLastIndex'\n    var closingBracketsStringLastIndexLastIndexLastIndex\
    \ = 0\n        ^\n/tmp/tmp2wdexbnh.swift:32:9: note: 'closingBracketsStringLastIndexLastIndexLastIndex'\
    \ previously declared here\n    var closingBracketsStringLastIndexLastIndexLastIndex\
    \ = 0\n        ^\n/tmp/tmp2wdexbnh.swift:37:9: error: invalid redeclaration of\
    \ 'openingBracketsStringLastIndexLastIndexLastIndexLastIndex'\n    var openingBracketsStringLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        ^\n/tmp/tmp2wdexbnh.swift:35:9: note: 'openingBracketsStringLastIndexLastIndexLastIndexLastIndex'\
    \ previously declared here\n    var openingBracketsStringLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        "
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] !=\
    \ \"<\" else {\n            return false\n        }\n        guard closingBrackets[closingBracketIndex]\
    \ != \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyhqi55lf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyhqi55lf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyhqi55lf.swift:24:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpyhqi55lf.swift:25:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket)\n        if closingBracket\
    \ == nil {\n            return false\n        }\n        if openingBracket !=\
    \ closingBracket! {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgm1xlyhs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgm1xlyhs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openings = brackets.components(separatedBy: \"<\"\
    )\n    let closings = brackets.components(separatedBy: \">\")\n    if openings.count\
    \ != closings.count {\n        return false\n    }\n    for opening in openings\
    \ {\n        if let closing = closings.firstIndex(of: opening) {\n           \
    \ closings.remove(at: closing)\n        }\n    }\n    return openings.count ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp02ajhgqy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n    let openings = brackets.components(separatedBy: \"<\")\n \
    \                  ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp02ajhgqy.swift:14:29: error: value\
    \ of type 'String' has no member 'components'\n    let closings = brackets.components(separatedBy:\
    \ \">\")\n                   ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.first(where: { $0 == openingBracket })\n        if closingBracket\
    \ == nil {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjaaiflzn.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpjaaiflzn.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"==\":\n            openingBracketCount += 1\n        case \"!\":\n       \
    \     openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpubzpl0e3.swift:88:14: error: unterminated string literal\n    \
    \    case \"\n             ^\n/tmp/tmpubzpl0e3.swift:88:15: error: expected ':'\
    \ after 'case'\n        case \"\n              ^\n/tmp/tmpubzpl0e3.swift:115:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpubzpl0e3.swift:20:51: note: to match this opening\
    \ '{'\n    while openingBracketIndex < brackets.endIndex {\n                 \
    \                                 ^\n/tmp/tmpubzpl0e3.swift:115:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpubzpl0e3.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpubzpl0e3.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpubzpl0e3.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpubzpl0e3.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpubzpl0e3.swift:28:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmpubzpl0e3.swift:32:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpubzpl0e3.swift:92:6: er"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = opening[openingIndex]\n    var closingChar\
    \ = closing[closingIndex]\n    while openingIndex < openingCount {\n        openingIndex++\n\
    \        openingChar = opening[openingIndex]\n        if openingChar == \">\"\
    \ {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjno33qeq.swift:109:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpjno33qeq.swift:21:39:\
    \ note: to match this opening '{'\n    while openingIndex < openingCount {\n \
    \                                     ^\n/tmp/tmpjno33qeq.swift:109:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpjno33qeq.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpjno33qeq.swift:13:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var opening = brackets.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjno33qeq.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjno33qeq.swift:15:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingCount = brackets.characters.count\n    \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjno33qeq.swift:16:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjno33qeq.swift:19:23: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            if closingBracketIndex < closingBrackets.count && closingBrackets[closingBracketIndex]\
    \ == '>' {\n                openingBracketIndex += 1\n                closingBracketIndex\
    \ += 1\n            } else {\n                return false\n            }\n  \
    \      } else {\n            if closingBracketIndex < closingBrackets.count &&\
    \ closingBrackets[closingBracketIndex] == '>' {\n                openingBracketIndex\
    \ += 1\n            } else {\n                return false\n            }\n  \
    \      }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5km3y507.swift:18:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmp5km3y507.swift:19:103: error: single-quoted\
    \ string literal found, use '\"'\n            if closingBracketIndex < closingBrackets.count\
    \ && closingBrackets[closingBracketIndex] == '>' {\n                         \
    \                                                                            \
    \ ^~~\n                                                                      \
    \                                \">\"\n/tmp/tmp5km3y507.swift:26:103: error:\
    \ single-quoted string literal found, use '\"'\n            if closingBracketIndex\
    \ < closingBrackets.count && closingBrackets[closingBracketIndex] == '>' {\n \
    \                                                                            \
    \                         ^~~\n                                              \
    \                                                        \">\"\n/tmp/tmp5km3y507.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5km3y507.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5km3y507.swift:18:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { ge"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    var openingBracket = openingBrackets.first!\n    var closingBracket\
    \ = closingBrackets.first!\n    var openingBracketIndex = brackets.startIndex\n\
    \    var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBracket == closingBracket {\n     \
    \       openingBracketIndex += 1\n            closingBracketIndex += 1\n     \
    \   } else {\n            if openingBracketIndex < brackets.endIndex && closingBracketIndex\
    \ < brackets.endIndex {\n                if openingBrackets[openingBracketIndex]\
    \ == closingBrackets[closingBracketIndex] {\n                    openingBracketIndex\
    \ += 1\n                    closingBracketIndex += 1\n                } else {\n\
    \                    return false\n                }\n            } else {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqiquqnrw.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqiquqnrw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqiquqnrw.swift:26:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpqiquqnrw.swift:27:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpqiquqnrw.swift:31:41: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                    openingBracketIndex\
    \ += 1\n                    ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpqiquqnrw.swift:32:41:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                    closingBracketIndex += 1\n                  \
    \  ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = opening[openingIndex]\n    var closingChar\
    \ = closing[closingIndex]\n    while openingIndex < openingCount {\n        openingIndex++\n\
    \        openingChar = opening[openingIndex]\n        if openingChar == \">\"\
    \ {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjno33qeq.swift:109:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpjno33qeq.swift:21:39:\
    \ note: to match this opening '{'\n    while openingIndex < openingCount {\n \
    \                                     ^\n/tmp/tmpjno33qeq.swift:109:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpjno33qeq.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpjno33qeq.swift:13:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var opening = brackets.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjno33qeq.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjno33qeq.swift:15:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingCount = brackets.characters.count\n    \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjno33qeq.swift:16:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjno33qeq.swift:19:23: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket) {\n            closingBrackets.remove(at:\
    \ closingBracket)\n        }\n    }\n    return openingBrackets.count == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsoz95av7.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpsoz95av7.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n    var closingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < openingBracketCount {\n        let openingBracket\
    \ = brackets.character(at: openingBracketIndex)\n        if openingBracket ==\
    \ \"<\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    while\
    \ closingBracketIndex < closingBracketCount {\n        let closingBracket = brackets.character(at:\
    \ closingBracketIndex)\n        if closingBracket == \"<\" {\n            closingBracketIndex\
    \ += 1\n        } else if closingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else {\n            return\
    \ false\n        }\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb3ryqy5v.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb3ryqy5v.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb3ryqy5v.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb3ryqy5v.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb3ryqy5v.swift:20:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmpb3ryqy5v.swift:21:39: error: value of\
    \ type 'String' has no member 'character'\n        let openingBracket = brackets.character(at:\
    \ openingBracketIndex)\n                             ~~~~~~~~ ^~~~~~~~~\n/tmp/tmpb3ryqy5v.swift:23:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpb3ryqy5v.swift:25:33: erro"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != \">\" {\n            openingBracketIndex += 1\n            continue\n   \
    \     }\n\n        if closingBracketIndex < closingBrackets.endIndex {\n     \
    \       if closingBrackets[closingBracketIndex] != \"<\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n                continue\n \
    \           }\n        }\n\n        return false\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp411ytjh2.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp411ytjh2.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp411ytjh2.swift:21:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp411ytjh2.swift:27:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp411ytjh2.swift:28:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[brackets.count-1]\n\
    \    for index in 0..<brackets.count {\n        let openingIndex = brackets.index(brackets,\
    \ startIndex: index)\n        let closingIndex = brackets.index(brackets, startIndex:\
    \ index+1)\n        if opening != closing, opening == \"<\", opening == \"<=\"\
    , opening == \"<<\", opening == \"<<=\", opening == \"<=\" {\n            opening\
    \ = brackets[openingIndex]\n        } else if closing != opening, closing == \"\
    >\", closing == \">=\", closing == \">>\", closing == \">>=\", closing == \">=\"\
    \ {\n            closing = brackets[closingIndex]\n        } else {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphvw3lcyt.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmphvw3lcyt.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[brackets.count-1]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmphvw3lcyt.swift:16:37:\
    \ error: no exact matches in call to instance method 'index'\n        let openingIndex\
    \ = brackets.index(brackets, startIndex: index)\n                            \
    \        ^\n/tmp/tmphvw3lcyt.swift:16:37: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let openingIndex = brackets.index(brackets,\
    \ startIndex: index)\n                                    ^\n/tmp/tmphvw3lcyt.swift:16:37:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let openingIndex = brackets.index(brackets, startIndex: index)\n\
    \                                    ^\n/tmp/tmphvw3lcyt.swift:16:37: note: candidate\
    \ has partially matching parameter list (String.Index, offsetBy: Int)\n      \
    \  let openingIndex = brackets.index(brackets, startIndex: index)\n          \
    \                          ^\n/tmp/tmphvw3lcyt.swift:17:37: error: no exact matches\
    \ in call to instance method 'index'\n        let closingIndex = brackets.index(brackets,\
    \ startIndex: index+1)\n                                    ^\n/tmp/tmphvw3lcyt.swift:17:37:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let closingIndex = brackets.index(brackets, startIndex: index+1)\n\
    \                                    ^\n/tmp/tmphvw3lcyt.swift:17:37: note: candid"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28rlkdu3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp28rlkdu3.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    var isCorrect = false\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketCount++\n        guard openingBrackets[openingBracketIndex]\
    \ != \"<\" else {\n            openingBracketIndex += 1\n            continue\n\
    \        }\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n\
    \            openingBracketIndex += 1\n            continue\n        }\n     \
    \   guard openingBrackets[openingBracketIndex] != \"<\" else {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            openingBracketIndex += 1\n            continue\n\
    \        }\n        guard openingBrackets[openingBracketIndex] != \"<\" else {\n\
    \            openingBracketIndex += 1\n            continue\n        }\n     \
    \   guard openingBrackets[openingBracketIndex] == \">\" else {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ != \"<\" else {\n            openingBracketIndex += 1\n            continue\n\
    \        }\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n\
    \            openingBracketIndex += 1\n            continue\n        }\n     \
    \   guard openingBrackets[openingBracketIndex] != \"<\" else {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            openingBracketIndex += 1\n            continue\n\
    \        }\n        guard openingBrackets[openingBracketIndex] != \"<\" else {\n\
    \            openingBracketIndex += 1\n            continue\n        }\n     \
    \   guard openingBrackets[openingBracketIndex] == \">\" else {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ != \"<\" else {\n            openingBracketIndex += 1\n            continue\n\
    \        }\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n\
    \            openingBracketIndex += 1\n            continue\n        }\n     \
    \   guard open\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5ihu9omb.swift:78:19: error: expected 'else' after 'guard' condition\n\
    \        guard open\n                  ^\n/tmp/tmp5ihu9omb.swift:105:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp5ihu9omb.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp5ihu9omb.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5ihu9omb.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5ihu9omb.swift:21:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmp5ihu9omb.swift:23:33: error: binary operator '+='\
    \ cannot be applied to operands of type 'String.Index' and 'Int'\n           \
    \ openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp5ihu9omb.swift:27:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp5ihu9omb.swift:31:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp5ihu9omb.swift:35:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n\n    while openingBracketIndex < openingBracketCount\
    \ {\n        guard openingBrackets[openingBracketIndex] == \">\" else {\n    \
    \        return false\n        }\n        openingBracketIndex += 1\n    }\n\n\
    \    while closingBracketIndex < closingBracketCount {\n        guard closingBrackets[closingBracketIndex]\
    \ != \"<\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7npo01l0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7npo01l0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7npo01l0.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7npo01l0.swift:19:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmp7npo01l0.swift:23:29: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \  openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp7npo01l0.swift:26:33:\
    \ error: cannot find 'closingBracketCount' in scope\n    while closingBracketIndex\
    \ < closingBracketCount {\n                                ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7npo01l0.swift:30:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeka641yp.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeka641yp.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n    var closingBracketCount = brackets.characters.count\n\
    \n    while openingBracketIndex < openingBracketCount {\n        guard openingBrackets[openingBracketIndex]\
    \ == \">\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < closingBracketCount {\n     \
    \   guard closingBrackets[closingBracketIndex] == \"<\" else {\n            return\
    \ false\n        }\n        closingBracketIndex += 1\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcb5c7sw_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcb5c7sw_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcb5c7sw_.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcb5c7sw_.swift:18:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcb5c7sw_.swift:20:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmpcb5c7sw_.swift:24:29: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \  openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcb5c7sw_.swift:27:31:\
    \ error: referencing operator function '<' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n    while closingBracketIndex < closingBracketCount\
    \ {\n                              ^\nSwift.BinaryInteg"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets.character(at: openingBracketIndex)\n\
    \        if openingBracket == \"<\" {\n            openingBracketCount += 1\n\
    \        } else if openingBracket == \">\" {\n            openingBracketCount\
    \ -= 1\n        }\n        openingBracketIndex += 1\n    }\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        let closingBracket = brackets.character(at: closingBracketIndex)\n\
    \        if closingBracket == \"<\" {\n            closingBracketCount += 1\n\
    \        } else if closingBracket == \">\" {\n            closingBracketCount\
    \ -= 1\n        }\n        closingBracketIndex += 1\n    }\n    return openingBracketCount\
    \ == 0 && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp79upbm_f.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp79upbm_f.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp79upbm_f.swift:20:39: error: value of type 'String'\
    \ has no member 'character'\n        let openingBracket = brackets.character(at:\
    \ openingBracketIndex)\n                             ~~~~~~~~ ^~~~~~~~~\n/tmp/tmp79upbm_f.swift:26:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmp79upbm_f.swift:29:39: error: value of type 'String' has no member\
    \ 'character'\n        let closingBracket = brackets.character(at: closingBracketIndex)\n\
    \                             ~~~~~~~~ ^~~~~~~~~\n/tmp/tmp79upbm_f.swift:35:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first == \">\" {\n   \
    \     return false\n    }\n    if openingBrackets.first == \"<\" {\n        return\
    \ false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb_5wlofp.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb_5wlofp.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"==\":\n            openingBracketCount += 1\n        case \"!=\":\n      \
    \      openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8w3ym4no.swift:115:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmp8w3ym4no.swift:20:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp8w3ym4no.swift:115:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmp8w3ym4no.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp8w3ym4no.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8w3ym4no.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8w3ym4no.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp8w3ym4no.swift:28:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmp8w3ym4no.swift:30:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"!=\":\n\
    \             ^~~~\n/tmp/tmp8w3ym4no.swift:32:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmp8w3ym4no.swift:92:6: error: operator functions can\
    \ only be dec"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n    while\
    \ openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            openingBracketCount += 1\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '>' {\n    \
    \        openingBracketCount -= 1\n            if openingBracketCount == 0 {\n\
    \                openingBracketIndex += 1\n            }\n        } else {\n \
    \           openingBracketIndex += 1\n        }\n    }\n    while closingBracketIndex\
    \ < closingBrackets.count {\n        if closingBrackets[closingBracketIndex] ==\
    \ '<' {\n            closingBracketCount += 1\n            closingBracketIndex\
    \ += 1\n        } else if closingBrackets[closingBracketIndex] == '>' {\n    \
    \        closingBracketCount -= 1\n            if closingBracketCount == 0 {\n\
    \                closingBracketIndex += 1\n            }\n        } else {\n \
    \           closingBracketIndex += 1\n        }\n    }\n    return openingBracketCount\
    \ == 0 && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx_k67o_4.swift:20:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmpx_k67o_4.swift:23:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpx_k67o_4.swift:33:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '<' {\n                                                   ^~~\n         \
    \                                          \"<\"\n/tmp/tmpx_k67o_4.swift:36:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpx_k67o_4.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpx_k67o_4.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpx_k67o_4.swift:20:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<=\":\n       \
    \     openingBracketCount += 1\n        case \"=\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \"=\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<=\":\n       \
    \     openingBracketCount += 1\n        case \"=\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<=\":\n            openingBracketCount += 1\n        case\
    \ \"=\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<=\":\n            openingBracketCount\
    \ += 1\n        case \"=\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<=\":\n       \
    \     openingBracketCount += 1\n        case \"=\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<=\":\n            openingBracketCount += 1\n        case \"=\":\n       \
    \     \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiesd5eqq.swift:86:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"=\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpiesd5eqq.swift:114:66: error: expected '}' at\
    \ end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpiesd5eqq.swift:20:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmpiesd5eqq.swift:114:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpiesd5eqq.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpiesd5eqq.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpiesd5eqq.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiesd5eqq.swift:24:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpiesd5eqq.swift:30:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpiesd5eqq.swift:36:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpiesd5eqq.swift:42:14: error: expression patte"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = -1\n    var closingBracketIndex\
    \ = -1\n\n    for index in 0..<brackets.characters.count {\n        let character\
    \ = brackets.characters[index]\n        if character == \"<\" {\n            openingBracketIndex\
    \ = index\n        } else if character == \">\" {\n            closingBracketIndex\
    \ = index\n        }\n    }\n\n    if openingBracketIndex == -1 || closingBracketIndex\
    \ == -1 {\n        return false\n    }\n\n    if openingBracketIndex < closingBracketIndex\
    \ {\n        return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqvw6dcnm.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqvw6dcnm.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqvw6dcnm.swift:19:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqvw6dcnm.swift:20:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ character = brackets.characters[index]\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqvw6dcnm.swift:20:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ character = brackets.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqvw6dcnm.swift:13:9:\
    \ warning: initialization of variable 'openingBrackets' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var openingBrackets = brackets.characters\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpqvw6dcnm.swift:14:9: warning: initialization\
    \ of variable 'closingBrackets' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var closingBrackets"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        let openingBracket =\
    \ openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n      \
    \  if openingBracket != closingBracket {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2th0wfxk.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp2th0wfxk.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = opening[openingIndex]\n    var closingChar\
    \ = closing[closingIndex]\n\n    while openingIndex < openingCount {\n       \
    \ openingIndex++\n        openingChar = opening[openingIndex]\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n            openingChar = opening[openingIndex]\n\
    \        }\n        if openingChar == \"<\" {\n            openingIndex++\n  \
    \          openingChar = opening[openingIndex]\n        }\n        if openingChar\
    \ == \">\" {\n            openingIndex++\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj06qshcq.swift:110:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmpj06qshcq.swift:22:39:\
    \ note: to match this opening '{'\n    while openingIndex < openingCount {\n \
    \                                     ^\n/tmp/tmpj06qshcq.swift:110:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpj06qshcq.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpj06qshcq.swift:13:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var opening = brackets.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj06qshcq.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj06qshcq.swift:15:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingCount = brackets.characters.count\n    \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj06qshcq.swift:16:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj06qshcq.swift:19:23: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n            openingBracketCount\
    \ += 1\n        case \"<\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"<\":\n        \
    \    openingBracketCount += 1\n        case \"<\":\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp081fzzb5.swift:87:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"<\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmp081fzzb5.swift:114:66: error: expected '}' at\
    \ end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp081fzzb5.swift:19:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmp081fzzb5.swift:114:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp081fzzb5.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp081fzzb5.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp081fzzb5.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp081fzzb5.swift:23:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"<\":\n   \
    \          ^~~\n/tmp/tmp081fzzb5.swift:21:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"<\":\n             ^~~\n/tmp/tmp081fzzb5.swift:25:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"<\":\n             ^~~\n/tmp/tmp081fzzb5.swift:21:14: note:\
    \ first occurrence of identical literal patter"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    for openingBracket in\
    \ openingBrackets {\n        if openingBracket == \"<\" {\n            if closingBracketIndex\
    \ < brackets.endIndex {\n                closingBracketIndex = brackets.endIndex\n\
    \            }\n        } else {\n            if openingBracketIndex < brackets.endIndex\
    \ {\n                openingBracketIndex = brackets.endIndex\n            }\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \">\" {\n            if openingBracketIndex < brackets.endIndex {\n     \
    \           openingBracketIndex = brackets.endIndex\n            }\n        }\
    \ else {\n            if closingBracketIndex < brackets.endIndex {\n         \
    \       closingBracketIndex = brackets.endIndex\n            }\n        }\n  \
    \  }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc60ca7tc.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc60ca7tc.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc60ca7tc.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpc60ca7tc.swift:14:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzp7v8ft9.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzp7v8ft9.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        guard openingBrackets[openingBracketIndex] != \"<\" else {\n    \
    \        openingBracketIndex += 1\n            continue\n        }\n\n       \
    \ guard openingBrackets[openingBracketIndex] == \">\" else {\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n\n        openingBracketCount += 1\n\
    \        openingBracketIndex += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        guard closingBrackets[closingBracketIndex] != \">\" else {\n    \
    \        closingBracketIndex += 1\n            continue\n        }\n\n       \
    \ guard closingBrackets[closingBracketIndex] == \">\" else {\n            closingBracketIndex\
    \ += 1\n            continue\n        }\n\n        closingBracketCount += 1\n\
    \        closingBracketIndex += 1\n    }\n\n    return openingBracketCount ==\
    \ closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphsq6xze0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphsq6xze0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphsq6xze0.swift:22:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmphsq6xze0.swift:27:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmphsq6xze0.swift:32:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex +=\
    \ 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmphsq6xze0.swift:37:33: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmphsq6xze0.swift:42:33: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n            closingBracketIndex +=\
    \ 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmphsq6xze0.swift:47:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    var isInsideOpeningBracket = false\n\
    \    var isInsideClosingBracket = false\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == '<' {\n            openingBracketCount++\n\
    \            if openingBracketCount > 1 {\n                isInsideOpeningBracket\
    \ = true\n            }\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n            openingBracketCount--\n            if openingBracketCount\
    \ < 1 {\n                isInsideOpeningBracket = false\n            }\n     \
    \   } else {\n            openingBracketIndex = openingBracketIndex + 1\n    \
    \    }\n    }\n    while closingBracketIndex < brackets.endIndex {\n        if\
    \ closingBrackets[closingBracketIndex] == '<' {\n            closingBracketCount++\n\
    \            if closingBracketCount > 1 {\n                isInsideClosingBracket\
    \ = true\n            }\n        } else if closingBrackets[closingBracketIndex]\
    \ == '>' {\n            closingBracketCount--\n            if closingBracketCount\
    \ < 1 {\n                isInsideClosingBracket = false\n            }\n     \
    \   } else {\n            closingBracketIndex = closingBracketIndex + 1\n    \
    \    }\n    }\n    if isInsideOpeningBracket && isInsideClosingBracket {\n   \
    \     return false\n    }\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5esmrwi9.swift:22:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmp5esmrwi9.swift:27:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmp5esmrwi9.swift:37:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '<' {\n                                                   ^~~\n         \
    \                                          \"<\"\n/tmp/tmp5esmrwi9.swift:42:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmp5esmrwi9.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5esmrwi9.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5esmrwi9.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmp5esmrwi9.swift:28:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmp5esmrwi9.swift:33:55: error: binary operator\
    \ '+' cannot "
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openings = brackets.components(separatedBy: \"<\"\
    )\n    let closings = brackets.components(separatedBy: \">\")\n    if openings.count\
    \ != closings.count {\n        return false\n    }\n    for opening in openings\
    \ {\n        if opening.count != 1 {\n            return false\n        }\n  \
    \      if opening[0] != closings[0] {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb21ciymn.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n    let openings = brackets.components(separatedBy: \"<\")\n \
    \                  ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpb21ciymn.swift:14:29: error: value\
    \ of type 'String' has no member 'components'\n    let closings = brackets.components(separatedBy:\
    \ \">\")\n                   ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        if openingBracket\
    \ == \"<\" {\n            openingBracketCount++\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"<\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \">\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmj61afly.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmj61afly.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmj61afly.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpmj61afly.swift:24:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpmj61afly.swift:26:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpmj61afly.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpmj61afly.swift:33:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpmj61afly.swift:35:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n\n    while openingIndex < openingCount {\n        opening\
    \ = brackets.substringWithRange(NSMakeRange(openingIndex, 1))\n        openingIndex\
    \ = openingIndex + 1\n\n        if opening.isEmpty {\n            continue\n \
    \       }\n\n        if opening.characters[openingIndex - 1].isLowercase {\n \
    \           openingIndex = openingIndex - 1\n            continue\n        }\n\
    \n        if opening.characters[openingIndex - 1].isUppercase {\n            openingIndex\
    \ = openingIndex - 1\n            continue\n        }\n\n        if opening.characters[openingIndex\
    \ - 1].isWhitespace {\n            openingIndex = openingIndex - 1\n         \
    \   continue\n        }\n\n        if opening.characters[openingIndex - 1].isPunctuation\
    \ {\n            openingIndex = openingIndex - 1\n            continue\n     \
    \   }\n\n        if opening.characters[openingIndex - 1].isSymbol {\n        \
    \    openingIndex = openingIndex - 1\n            continue\n        }\n\n    \
    \    if opening.characters[openingIndex - 1].isNewline {\n            openingIndex\
    \ = openingIndex - 1\n            continue\n        }\n\n        if opening.characters[openingIndex\
    \ - 1].isLineTerminator {\n            openingIndex = openingIndex - 1\n     \
    \       continue\n        }\n\n        if opening.characters[openingIndex - 1].isHexadecimal\
    \ {\n            openingIndex = openingIndex - 1\n            continue\n     \
    \   }\n\n        if opening.characters[openingIndex - 1].isOctal {\n         \
    \   openingIndex = openingIndex - 1\n            continue\n        }\n\n     \
    \   if opening.characters[openingIndex - 1].isControl {\n            openingIndex\
    \ = openingIndex - 1\n            continue\n        }\n\n        if opening.characters[openingIndex\
    \ - 1].isLetterOrDigit {\n            openingIndex = openingIndex - 1\n      \
    \      continue\n        }\n\n        if opening.characters[openingIndex - 1].isWhitespace\
    \ {\n            openingIndex = openingIndex - 1\n            continue\n     \
    \   }\n\n        if opening.characters[openingIndex - 1].isLineTerminator {\n\
    \            openingIndex = openingIndex - 1\n            continue\n        }\n\
    \n        if opening.characters[openingIndex - 1].isHexadecimal {\n          \
    \  openingIndex = openingIndex - 1\n            continue\n        }\n\n      \
    \  if opening.characters[openingIndex - 1].isOctal {\n            openingIndex\
    \ = openingIndex - 1\n            continue\n        }\n\n        if opening.characters[openingIndex\
    \ - 1].isControl {\n            open\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppze6_ykq.swift:131:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmppze6_ykq.swift:20:39:\
    \ note: to match this opening '{'\n    while openingIndex < openingCount {\n \
    \                                     ^\n/tmp/tmppze6_ykq.swift:131:66: error:\
    \ expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmppze6_ykq.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmppze6_ykq.swift:13:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var opening = brackets.characters\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppze6_ykq.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmppze6_ykq.swift:15:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingCount = brackets.characters.count\n    \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppze6_ykq.swift:16:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppze6_ykq.swift:21:47: error: cannot find 'NSMakeRange'\
    \ in scope\n        opening = brackets.s"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for index in 0..<openingBrackets.count {\n        if openingBrackets[index]\
    \ != closingBrackets[index] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8ybh5tem.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8ybh5tem.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8ybh5tem.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] != closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8ybh5tem.swift:21:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] != closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for index in 0..<brackets.characters.count {\n        let character\
    \ = brackets.characters[index]\n\n        if character == \"<\" {\n          \
    \  openingBracketsCount++\n        } else if character == \">\" {\n          \
    \  closingBracketsCount++\n        }\n    }\n\n    if openingBracketsCount !=\
    \ closingBracketsCount {\n        return false\n    }\n\n    for index in 0..<brackets.characters.count\
    \ {\n        let character = brackets.characters[index]\n\n        if character\
    \ == \"<\" {\n            openingBracketsCount--\n        } else if character\
    \ == \">\" {\n            closingBracketsCount--\n        }\n\n        if openingBracketsCount\
    \ < 0 || closingBracketsCount < 0 {\n            return false\n        }\n   \
    \ }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqt7se5pg.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqt7se5pg.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqt7se5pg.swift:19:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqt7se5pg.swift:20:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ character = brackets.characters[index]\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqt7se5pg.swift:20:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ character = brackets.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqt7se5pg.swift:23:33:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  openingBracketsCount++\n                                ^~\n/tmp/tmpqt7se5pg.swift:25:33:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  closingBracketsCount++\n                                ^~\n/tmp/tmpqt7se5pg.swift:33:31:\
    \ error: 'characters' is unavailable: Please use String"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        if openingBrackets[openingBracketIndex]\
    \ != '<' {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n\n        if openingBracketIndex >= openingBrackets.endIndex {\n     \
    \       return false\n        }\n\n        if openingBrackets[openingBracketIndex]\
    \ == '>' {\n            openingBracketIndex += 1\n        }\n\n        if openingBracketIndex\
    \ >= openingBrackets.endIndex {\n            return false\n        }\n\n     \
    \   if openingBrackets[openingBracketIndex] != '<' {\n            return false\n\
    \        }\n\n        openingBracketIndex += 1\n\n        if openingBracketIndex\
    \ >= openingBrackets.endIndex {\n            return false\n        }\n\n     \
    \   if openingBrackets[openingBracketIndex] != '>' {\n            return false\n\
    \        }\n\n        openingBracketIndex += 1\n\n        if openingBracketIndex\
    \ >= openingBrackets.endIndex {\n            return false\n        }\n\n     \
    \   closingBracketIndex += 1\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5vhov_8n.swift:20:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] != '<' {\n       \
    \                                            ^~~\n                           \
    \                        \"<\"\n/tmp/tmp5vhov_8n.swift:30:52: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                   ^~~\n         \
    \                                          \">\"\n/tmp/tmp5vhov_8n.swift:38:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ != '<' {\n                                                   ^~~\n         \
    \                                          \"<\"\n/tmp/tmp5vhov_8n.swift:48:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ != '>' {\n                                                   ^~~\n         \
    \                                          \">\"\n/tmp/tmp5vhov_8n.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5vhov_8n.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5vhov_8n.swift:24:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp5vhov_8n.swift:31:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp5vhov_8n.swift:42:29: error: binary oper"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first == \">\" && closingBrackets.first\
    \ == \"<\" {\n        return true\n    }\n    if openingBrackets.first == \"<\"\
    \ && closingBrackets.first == \">\" {\n        return true\n    }\n    if openingBrackets.first\
    \ == \"<\" && closingBrackets.first == \"<\" {\n        return true\n    }\n \
    \   if openingBrackets.first == \">\" && closingBrackets.first == \">\" {\n  \
    \      return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq3f3tzpb.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpq3f3tzpb.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsCountIndex = 0\n\
    \    var closingBracketsCountIndex = 0\n    var openingBracketsFound = false\n\
    \    var closingBracketsFound = false\n    var openingBracketsFoundIndex = -1\n\
    \    var closingBracketsFoundIndex = -1\n    var openingBracketsFoundCount = -1\n\
    \    var closingBracketsFoundCount = -1\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsCountIndex += 1\n        if openingBracketsCountIndex\
    \ == openingBracketsCount {\n            openingBracketsCountIndex = 0\n     \
    \       openingBracketsIndex += 1\n        }\n        if openingBrackets[openingBracketsIndex]\
    \ == '<' {\n            openingBracketsFound = true\n            openingBracketsFoundIndex\
    \ = openingBracketsIndex\n            openingBracketsFoundCount = openingBracketsCountIndex\n\
    \        }\n    }\n\n    while closingBracketsIndex < closingBracketsCount {\n\
    \        closingBracketsCountIndex += 1\n        if closingBracketsCountIndex\
    \ == closingBracketsCount {\n            closingBracketsCountIndex = 0\n     \
    \       closingBracketsIndex += 1\n        }\n        if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n            closingBracketsFound = true\n            closingBracketsFoundIndex\
    \ = closingBracketsIndex\n            closingBracketsFoundCount = closingBracketsCountIndex\n\
    \        }\n    }\n\n    if openingBracketsFound == false {\n        return false\n\
    \    }\n\n    if closingBracketsFound == false {\n        return true\n    }\n\
    \n    if openingBracketsFoundIndex == closingBracketsFoundIndex {\n        return\
    \ false\n    }\n\n    if openingBracketsFoundIndex < closingBracketsFoundIndex\
    \ {\n        return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzjlifw9n.swift:34:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '<' {\n      \
    \                                              ^~~\n                         \
    \                           \"<\"\n/tmp/tmpzjlifw9n.swift:47:53: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '>' {\n                                                    ^~~\n        \
    \                                            \">\"\n/tmp/tmpzjlifw9n.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzjlifw9n.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzjlifw9n.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpzjlifw9n.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpzjlifw9n.swift:34:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == '<' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: no"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"<\" {\n            openingBracketsCount++\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketsCount--\n        }\n    }\n\n    for\
    \ closingBracket in closingBrackets {\n        if closingBracket == \"<\" {\n\
    \            closingBracketsCount++\n        } else if closingBracket == \">\"\
    \ {\n            closingBracketsCount--\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp08nnyq8i.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp08nnyq8i.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp08nnyq8i.swift:21:33: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketsCount++\n       \
    \                         ^~\n/tmp/tmp08nnyq8i.swift:23:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp08nnyq8i.swift:29:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n/tmp/tmp08nnyq8i.swift:31:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659821144
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"<\":\n   \
    \         openingBracketCount++\n        case \"<=\":\n            openingBracketCount++\n\
    \        case \"=\":\n            openingBracketCount++\n        case \"==\":\n\
    \            openingBracketCount++\n        case \"!=\":\n            openingBracketCount++\n\
    \        case \"<-\":\n            openingBracketCount++\n        case \"->\"\
    :\n            openingBracketCount++\n        case \"->>\":\n            openingBracketCount++\n\
    \        case \"=>\":\n            openingBracketCount++\n        case \"<-<\"\
    :\n            openingBracketCount++\n        case \"<-<=\":\n            openingBracketCount++\n\
    \        case \"<-=\":\n            openingBracketCount++\n        case \"<-==\"\
    :\n            openingBracketCount++\n        case \"<-!=\":\n            openingBracketCount++\n\
    \        case \"<->\":\n            openingBracketCount++\n        case \"<->>\"\
    :\n            openingBracketCount++\n        case \"<=>\":\n            openingBracketCount++\n\
    \        case \"<-<->\":\n            openingBracketCount++\n        case \"<-<-<\"\
    :\n            openingBracketCount++\n        case \"<-<-<=\":\n            openingBracketCount++\n\
    \        case \"<-<-=\":\n            openingBracketCount++\n        case \"<-<-==\"\
    :\n            openingBracketCount++\n        case \"<-<-!=\":\n            openingBracketCount++\n\
    \        case \"<-<->\":\n            openingBracketCount++\n        case \"<-<->>\"\
    :\n            openingBracketCount++\n        case \"<-<=>\":\n            openingBracketCount++\n\
    \        case \"<-<-<->\":\n            openingBracketCount++\n        case \"\
    <-<-<->>\":\n            openingBracketCount++\n        case \"<\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsttra0ep.swift:77:14: error: unterminated string literal\n    \
    \    case \"<\n             ^\n/tmp/tmpsttra0ep.swift:77:16: error: expected ':'\
    \ after 'case'\n        case \"<\n               ^\n/tmp/tmpsttra0ep.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpsttra0ep.swift:19:51: note: to match this opening\
    \ '{'\n    while openingBracketIndex < brackets.endIndex {\n                 \
    \                                 ^\n/tmp/tmpsttra0ep.swift:104:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpsttra0ep.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpsttra0ep.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpsttra0ep.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsttra0ep.swift:23:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"<=\":\n\
    \             ^~~~\n/tmp/tmpsttra0ep.swift:27:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"==\":\n\
    \             ^~~~\n/tmp/tmpsttra0ep.swift:29:14: error: expression pattern of\
    \ type 'String' cannot match values of type 'Character'\n        case \"!=\":\n\
    \             ^~~~\n/tmp/tmpsttra0ep.swift:31:14"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"<\")\n    let closingBrackets = brackets.components(separatedBy: \">\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.firstIndex(of: openingBracket)\n        if\
    \ closingBracket == nil {\n            return false\n        }\n        \n   \
    \     let openingBracketIndex = openingBrackets.index(of: openingBracket)!\n \
    \       let closingBracketIndex = closingBrackets.index(of: closingBracket!)!\n\
    \        \n        if openingBracketIndex < closingBracketIndex {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_qz41n89.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    <\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_qz41n89.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \">\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsCountIndex = 0\n\
    \    var closingBracketsCountIndex = 0\n    var openingBracketsCountMax = openingBracketsCount\
    \ - 1\n    var closingBracketsCountMax = closingBracketsCount - 1\n    var openingBracketsCountMin\
    \ = openingBracketsCount + 1\n    var closingBracketsCountMin = closingBracketsCount\
    \ + 1\n    var openingBracketsCountMaxIndex = 0\n    var closingBracketsCountMaxIndex\
    \ = 0\n    var openingBracketsCountMinIndex = 0\n    var closingBracketsCountMinIndex\
    \ = 0\n    var openingBracketsCountMaxIndexMin = 0\n    var closingBracketsCountMaxIndexMin\
    \ = 0\n    var openingBracketsCountMinIndexMin = 0\n    var closingBracketsCountMinIndexMin\
    \ = 0\n    var openingBracketsCountMaxIndexMax = 0\n    var closingBracketsCountMaxIndexMax\
    \ = 0\n    var openingBracketsCountMinIndexMax = 0\n    var closingBracketsCountMinIndexMax\
    \ = 0\n    var openingBracketsCountMaxIndexMin = 0\n    var closingBracketsCountMaxIndexMin\
    \ = 0\n    var openingBracketsCountMinIndexMin = 0\n    var closingBracketsCountMinIndexMin\
    \ = 0\n    var openingBracketsCountMaxIndexMax = 0\n    var closingBracketsCountMaxIndexMax\
    \ = 0\n    var openingBracketsCountMinIndexMax = 0\n    var closingBracketsCountMinIndexMax\
    \ = 0\n    var openingBracketsCountMaxIndexMin = 0\n    var closingBracketsCountMaxIndexMin\
    \ = 0\n    var openingBracketsCountMinIndexMin = 0\n    var closingBracketsCountMinIndexMin\
    \ = 0\n    var openingBracketsCountMaxIndexMax = 0\n    var closingBracketsCountMaxIndexMax\
    \ = 0\n    var openingBracketsCountMinIndexMax = 0\n    var closingBracketsCountMinIndexMax\
    \ = 0\n    var openingBracketsCountMaxIndexMin = 0\n    var closingBracketsCountMaxIndexMin\
    \ = 0\n    var openingBracketsCountMinIndexMin = 0\n    var closingBracketsCountMinIndexMin\
    \ = 0\n    var openingBra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp415f7f0r.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp415f7f0r.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp415f7f0r.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp415f7f0r.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp415f7f0r.swift:37:9: error: invalid redeclaration\
    \ of 'openingBracketsCountMaxIndexMin'\n    var openingBracketsCountMaxIndexMin\
    \ = 0\n        ^\n/tmp/tmp415f7f0r.swift:29:9: note: 'openingBracketsCountMaxIndexMin'\
    \ previously declared here\n    var openingBracketsCountMaxIndexMin = 0\n    \
    \    ^\n/tmp/tmp415f7f0r.swift:38:9: error: invalid redeclaration of 'closingBracketsCountMaxIndexMin'\n\
    \    var closingBracketsCountMaxIndexMin = 0\n        ^\n/tmp/tmp415f7f0r.swift:30:9:\
    \ note: 'closingBracketsCountMaxIndexMin' previously declared here\n    var closingBracketsCountMaxIndexMin\
    \ = 0\n        ^\n/tmp/tmp415f7f0r.swift:39:9: error: invalid redeclaration of\
    \ 'openingBracketsCountMinIndexMin'\n    var openingBracketsCountMinIndexMin =\
    \ 0\n        ^\n/tmp/tmp415f7f0r.swif"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp72ho1fw1.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp72ho1fw1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp72ho1fw1.swift:19:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp72ho1fw1.swift:20:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821143
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwp1aqlz_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwp1aqlz_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \">\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n    \
    \    }\n        openingBracketIndex = openingBracketIndex + 1\n        if openingBrackets[openingBracketIndex]\
    \ != \"<\" {\n            continue\n        }\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n        if openingBrackets[openingBracketIndex] != \"<\" {\n          \
    \  continue\n        }\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != \"<\" {\n            continue\n\
    \        }\n        openingBracketIndex = openingBracketIndex + 1\n        if\
    \ openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbm9jcy83.swift:71:26: error: expected '{' after 'if' condition\n\
    \        if openingBracket\n                         ^\n/tmp/tmpbm9jcy83.swift:98:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmpbm9jcy83.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpbm9jcy83.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbm9jcy83.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbm9jcy83.swift:18:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpbm9jcy83.swift:18:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpbm9jcy83.swift:22:51: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        openingBracketIndex =\
    \ openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n/tmp/tmpbm9jcy83.swift:22:51: note: overloads for '+' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n                                                  ^\n/tmp/tmpbm9jcy83.sw"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    for index in 0..<openingCount\
    \ {\n        if opening[index] != closing[index] {\n            openingCount -=\
    \ 1\n            closingCount -= 1\n        }\n    }\n    if openingCount == 0\
    \ {\n        return true\n    }\n    if closingCount == 0 {\n        return false\n\
    \    }\n    if openingCount > closingCount {\n        return false\n    }\n  \
    \  if openingCount == closingCount {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyl64mc0y.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpyl64mc0y.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpyl64mc0y.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpyl64mc0y.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyl64mc0y.swift:18:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ opening[index] != closing[index] {\n           ^~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyl64mc0y.swift:18:30:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[index] != closing[index] {\n\
    \                             ^~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpyl64mc0y.swift:13:9: warning: variable\
    \ 'opening' was never mutated; consider changing to 'let'"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketIndex\
    \ += 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex {\n \
    \           return false\n        }\n\n        if closingBracketIndex >= brackets.endIndex\
    \ {\n            return true\n        }\n\n        if openingBracket != closingBracket\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9nv6h2_5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9nv6h2_5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9nv6h2_5.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9nv6h2_5.swift:24:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp9nv6h2_5.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9nv6h2_5.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp9nv6h2_5.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"<\" {\n            openingBracketIndex += 1\n            if openingBracketIndex\
    \ < brackets.endIndex {\n                openingBracket = brackets[openingBracketIndex]\n\
    \            }\n        }\n\n        if closingBracket == \">\" {\n          \
    \  closingBracketIndex += 1\n            if closingBracketIndex < brackets.endIndex\
    \ {\n                closingBracket = brackets[closingBracketIndex]\n        \
    \    }\n        }\n\n        if openingBracket != closingBracket {\n         \
    \   return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxhr6l1zd.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxhr6l1zd.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxhr6l1zd.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpxhr6l1zd.swift:25:17: error:\
    \ cannot assign to value: 'openingBracket' is a 'let' constant\n             \
    \   openingBracket = brackets[openingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmpxhr6l1zd.swift:19:9: note: change 'let' to 'var' to make it mutable\n\
    \        let openingBracket = brackets[openingBracketIndex]\n        ^~~\n   \
    \     var\n/tmp/tmpxhr6l1zd.swift:30:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpxhr6l1zd.swift:32:17: error:\
    \ cannot assign to value: 'closingBracket' is a 'let' constant\n             \
    \   closingBracket = brackets[closingBracketIndex]\n                ^~~~~~~~~~~~~~\n\
    /tmp/tmpxhr6l1zd.swift:20:9: note: change 'let' to 'var' to make it mutable\n\
    \        let closingBracket = brackets[closingBracketIndex]\n        ^~~\n   \
    \     var\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] != \"\
    >\" {\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if openingBracketIndex < closingBrackets.endIndex {\n            if\
    \ closingBrackets[openingBracketIndex] == \">\" {\n                openingBracketIndex\
    \ += 1\n            } else {\n                openingBracketIndex += 1\n     \
    \           closingBracketIndex += 1\n            }\n        } else {\n      \
    \      return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplb_sjjbs.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplb_sjjbs.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplb_sjjbs.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplb_sjjbs.swift:26:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                openingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmplb_sjjbs.swift:28:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmplb_sjjbs.swift:29:37:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    for index in 0..<openingBracketsCount {\n\
    \        if openingBrackets[index] != closingBrackets[index] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgs67qacl.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgs67qacl.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgs67qacl.swift:23:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] != closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgs67qacl.swift:23:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] != closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgs67qacl.swift:17:9:\
    \ warning: variable 'openingBracketsCount' was never mutated; consider changing\
    \ to 'let' constant\n    var openingBracketsCount = openingBrackets.count\n  \
    \  ~~~ ^\n    let\n/tmp/tmpgs67qacl.swift:18:9: warning: variable 'closingBracketsCount'\
    \ was never mutated; consider changing to 'let' constant\n    var closingBracketsCount\
    \ = closingBrackets.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeLast()\n    closing.removeFirst()\n \
    \   if opening.isEmpty {\n        return closing.isEmpty && closing.count == 0\n\
    \    }\n    if closing.isEmpty {\n        return opening.count == 0\n    }\n \
    \   if opening.count != closing.count {\n        return false\n    }\n    if opening.first\
    \ != closing.last {\n        return false\n    }\n    if opening.count == 1 {\n\
    \        return true\n    }\n    return opening.count == 2 && opening.first ==\
    \ closing.last\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp98xui8z0.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp98xui8z0.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659821145
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = opening[openingIndex]\n    var closingChar\
    \ = closing[closingIndex]\n\n    while openingIndex < openingCount {\n       \
    \ openingIndex++\n        openingChar = opening[openingIndex]\n        if openingChar\
    \ != \">\" {\n            openingCount--\n        } else {\n            openingIndex++\n\
    \            openingChar = opening[openingIndex]\n            if openingChar !=\
    \ \"<\" {\n                openingCount--\n            } else {\n            \
    \    openingIndex++\n                openingChar = opening[openingIndex]\n   \
    \             if openingChar != \">\" {\n                    openingCount--\n\
    \                } else {\n                    openingIndex++\n              \
    \      openingChar = opening[openingIndex]\n                    if openingChar\
    \ != \"<\" {\n                        openingCount--\n                    } else\
    \ {\n                        openingIndex++\n                        openingChar\
    \ = opening[openingIndex]\n                        if openingChar != \">\" {\n\
    \                            openingCount--\n                        } else {\n\
    \                            openingIndex++\n                            openingChar\
    \ = opening[openingIndex]\n                            if openingChar != \"<\"\
    \ {\n                                openingCount--\n                        \
    \    } else {\n                                openingIndex++\n              \
    \                  openingChar = opening[openingIndex]\n                     \
    \           if openingChar != \">\" {\n                                    openingCount--\n\
    \                                } else {\n                                  \
    \  openingIndex++\n                                    openingChar = opening[openingIndex]\n\
    \                                    if openingChar != \"<\" {\n             \
    \                           openingCount--\n                                 \
    \   } else {\n                                        openingIndex++\n       \
    \                                 openingChar = opening[openingIndex]\n      \
    \                                  if openingChar != \">\" {\n               \
    \                             openingCount--\n                               \
    \         } else {\n                                            openingIndex++\n\
    \                                            openingChar = opening[openingIndex]\n\
    \                                            if openingChar != \"<\" {\n     \
    \                                           openingCount--\n                 \
    \                           } else {\n                                       \
    \         openingIndex++\n                                                openingChar\
    \ = opening[openingIndex]\n                                                if\
    \ openingChar != \">\" {\n                                                   \
    \ openingCount--\n                                                } else {\n \
    \                                                   openingIndex++\n         \
    \                                           openingChar = opening[openingIndex]\n\
    \                                                    if openingChar != \"<\" {\n\
    \                                                        open\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplrerdtia.swift:108:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n        \
    \                                                         ^\n/tmp/tmplrerdtia.swift:77:56:\
    \ note: to match this opening '{'\n                                          \
    \      } else {\n                                                       ^\n/tmp/tmplrerdtia.swift:108:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmplrerdtia.swift:72:52: note: to match this opening\
    \ '{'\n                                            } else {\n                \
    \                                   ^\n/tmp/tmplrerdtia.swift:108:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmplrerdtia.swift:67:48: note: to match this opening '{'\n         \
    \                               } else {\n                                   \
    \            ^\n/tmp/tmplrerdtia.swift:108:66: error: expected '}' at end of brace\
    \ statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n\
    \                                                                 ^\n/tmp/tmplrerdtia.swift:62:44:\
    \ note: to match this opening '{'\n                                    } else\
    \ {\n                                           ^\n/tmp/tmplrerdtia.swift:108:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>>><>\") == false)\n                                          \
    \                       ^\n/tmp/tmplrerdtia.swift:57:40: note: to match this opening\
    \ '{'\n                                } else {\n                            \
    \           ^\n/tmp/tmplrerdtia.swift:108:66: error: expected '}' at end of brace\
    \ statement\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)\n\
    \                                                       "
  stdout: ''
  timestamp: 1659821145
