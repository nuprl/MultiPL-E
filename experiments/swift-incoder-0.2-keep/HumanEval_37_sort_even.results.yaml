language: swift
name: HumanEval_37_sort_even
results:
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    even = even.sorted()\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp1e1ux0ey/tmp1e1ux0ey.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46f6c5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46f6952b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46f6952988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46f69517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1e1ux0ey                        0x00005633f463d714 <unavailable> + 5908

    5    libc.so.6                          0x00002b46f6e47460 __libc_start_main +
    245

    6    tmp1e1ux0ey                        0x00005633f463d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3pe1u93k/tmp3pe1u93k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a22658c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a2234fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a2234f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a2234e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pe1u93k                        0x00005648b7f64774 <unavailable> + 6004

    5    libc.so.6                          0x00002b3a22844460 __libc_start_main +
    245

    6    tmp3pe1u93k                        0x00005648b7f64379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for i :=\
    \ 0; i < len(even); i += 2 {\n        even[i], even[i+1] = even[i+1], even[i]\n\
    \    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpq4rnqy9y.swift:11:12: error: expected type\n    for i := 0; i <\
    \ len(even); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpq4rnqy9y.swift:11:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(even);\
    \ i += 2 {\n           ^\n/tmp/tmpq4rnqy9y.swift:11:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 0; i < len(even); i += 2 {\n    \
    \       ^\n/tmp/tmpq4rnqy9y.swift:12:16: error: consecutive statements on a line\
    \ must be separated by ';'\n        even[i], even[i+1] = even[i+1], even[i]\n\
    \               ^\n               ;\n/tmp/tmpq4rnqy9y.swift:12:16: error: expected\
    \ expression\n        even[i], even[i+1] = even[i+1], even[i]\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmptzr3w_5o.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmptzr3w_5o.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmptzr3w_5o.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    even.sort()\n\
    \    odd.sort()\n    return even.merge(odd)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmppjpaljb2.swift:21:17: error: value of type '[Int]' has no member\
    \ 'merge'\n    return even.merge(odd)\n           ~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmptzr3w_5o.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmptzr3w_5o.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmptzr3w_5o.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even.sorted() + odd.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l:\
    \ [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpp4e13bax/tmpp4e13bax.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc3ed65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc3ea5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc3ea5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc3ea5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4e13bax                        0x00005580ecbcb744 <unavailable> + 5956

    5    libc.so.6                          0x00002abc3ef51460 __libc_start_main +
    245

    6    tmpp4e13bax                        0x00005580ecbcb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    even = even.sorted()\n\
    \    for x in even {\n        odd.remove(x)\n    }\n    return odd\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp2ryo9kq4.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for n in l {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp7tp35eu5/tmp7tp35eu5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ff573ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ff5431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ff5431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ff54307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7tp35eu5                        0x000055a7755b7774 <unavailable> + 6004

    5    libc.so.6                          0x00002b5ff5926460 __libc_start_main +
    245

    6    tmp7tp35eu5                        0x000055a7755b7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr2wfy7wy/tmpr2wfy7wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228a058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2wfy7wy                        0x00005607ea582803 <unavailable> + 6147

    5    libc.so.6                          0x00002b228a244460 __libc_start_main +
    245

    6    tmpr2wfy7wy                        0x00005607ea582259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3pe1u93k/tmp3pe1u93k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a22658c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a2234fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a2234f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a2234e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pe1u93k                        0x00005648b7f64774 <unavailable> + 6004

    5    libc.so.6                          0x00002b3a22844460 __libc_start_main +
    245

    6    tmp3pe1u93k                        0x00005648b7f64379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr2wfy7wy/tmpr2wfy7wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228a058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2wfy7wy                        0x00005607ea582803 <unavailable> + 6147

    5    libc.so.6                          0x00002b228a244460 __libc_start_main +
    245

    6    tmpr2wfy7wy                        0x00005607ea582259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3rrcoqga/tmp3rrcoqga.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4512df1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4512ae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4512ae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4512ae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rrcoqga                        0x000055c42be8a714 <unavailable> + 5908

    5    libc.so.6                          0x00002b4512fdd460 __libc_start_main +
    245

    6    tmp3rrcoqga                        0x000055c42be8a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted()\
    \ + odd.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmptnfjy4q3/tmptnfjy4q3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6990024c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b698fd1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b698fd1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b698fd1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnfjy4q3                        0x00005562fba07774 <unavailable> + 6004

    5    libc.so.6                          0x00002b6990210460 __libc_start_main +
    245

    6    tmptnfjy4q3                        0x00005562fba07379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr2wfy7wy/tmpr2wfy7wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228a058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2wfy7wy                        0x00005607ea582803 <unavailable> + 6147

    5    libc.so.6                          0x00002b228a244460 __libc_start_main +
    245

    6    tmpr2wfy7wy                        0x00005607ea582259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for n in l {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8gaci_p0.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp8gaci_p0.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp8gaci_p0.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr2wfy7wy/tmpr2wfy7wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228a058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2wfy7wy                        0x00005607ea582803 <unavailable> + 6147

    5    libc.so.6                          0x00002b228a244460 __libc_start_main +
    245

    6    tmpr2wfy7wy                        0x00005607ea582259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpx0ctsu17.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpx0ctsu17.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpx0ctsu17.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i - 1]\n        } else {\n            odd[i] = odd[i - 1]\n        }\n\
    \    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fffc6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fff965561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7fff965286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7fff96513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7fff964bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7fff764e83 <unavailable> + 188035

    6    tmpt14m68ua                        0x000055f282fc1c3c <unavailable> + 7228

    7    tmpt14m68ua                        0x000055f282fc1574 <unavailable> + 5492

    8    libc.so.6                          0x00002b7fffe5a460 __libc_start_main +
    245

    9    tmpt14m68ua                        0x000055f282fc1259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for n in l {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            odd.append(n)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpkpy551ua.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpkpy551ua.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr2wfy7wy/tmpr2wfy7wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228a058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2wfy7wy                        0x00005607ea582803 <unavailable> + 6147

    5    libc.so.6                          0x00002b228a244460 __libc_start_main +
    245

    6    tmpr2wfy7wy                        0x00005607ea582259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmptzr3w_5o.swift:19:33: error: missing argument label 'contentsOf:'\
    \ in call\n    return even.sorted().append(odd).sorted()\n                   \
    \             ^\n                                contentsOf: \n/tmp/tmptzr3w_5o.swift:19:26:\
    \ error: cannot use mutating member on immutable value: function call returns\
    \ immutable value\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~\
    \ ^\n/tmp/tmptzr3w_5o.swift:19:38: error: value of tuple type '()' has no member\
    \ 'sorted'\n    return even.sorted().append(odd).sorted()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    even = even.sorted()\n\
    \    odd = odd.sorted()\n    var result = [Int]()\n    for x in even {\n     \
    \   result.append(x)\n    }\n    for x in odd {\n        result.append(x)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_even(l:\
    \ [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp_22ikstp/tmp_22ikstp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1114d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1111cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1111cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1111cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_22ikstp                        0x00005618af8d7714 <unavailable> + 5908

    5    libc.so.6                          0x00002ae1116c2460 __libc_start_main +
    245

    6    tmp_22ikstp                        0x00005618af8d7319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp8qaj619j.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmp8qaj619j.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr2wfy7wy/tmpr2wfy7wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228a058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2wfy7wy                        0x00005607ea582803 <unavailable> + 6147

    5    libc.so.6                          0x00002b228a244460 __libc_start_main +
    245

    6    tmpr2wfy7wy                        0x00005607ea582259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpx0ctsu17.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpx0ctsu17.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpx0ctsu17.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    for i in\
    \ 0..<l.count {\n        if i % 2 == 0 {\n            even[i] = even[(i + 1) %\
    \ l.count]\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpmucbnwv6/tmpmucbnwv6.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba62398fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba623686b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba623686988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6236857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmucbnwv6                        0x000055ccd371b654 <unavailable> + 5716

    5    libc.so.6                          0x00002ba623b7b460 __libc_start_main +
    245

    6    tmpmucbnwv6                        0x000055ccd371b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    even = even.sorted()\n\
    \    odd = odd.sorted()\n    return even + odd\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n\
    assert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5,\
    \ 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp113reb4h/tmp113reb4h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a8ddc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a8dabcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a8dabc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a8dabb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp113reb4h                        0x0000558c3f707774 <unavailable> + 6004

    5    libc.so.6                          0x00002b7a8dfb1460 __libc_start_main +
    245

    6    tmp113reb4h                        0x0000558c3f707379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824820
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp_925im4h.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmp_925im4h.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmp_925im4h.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = l\n    var odd\
    \ = l\n    for i in 0..<l.count {\n        if i % 2 == 0 {\n            even[i]\
    \ = even[i]\n        } else {\n            odd[i] = odd[i]\n        }\n    }\n\
    \    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpr2wfy7wy/tmpr2wfy7wy.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b228a058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2289d4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2289d4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2289d4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2wfy7wy                        0x00005607ea582803 <unavailable> + 6147

    5    libc.so.6                          0x00002b228a244460 __libc_start_main +
    245

    6    tmpr2wfy7wy                        0x00005607ea582259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    even = even.sorted()\n\
    \    for x in even {\n        odd.remove(x)\n    }\n    return odd\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmp2ryo9kq4.swift:21:13: error: no exact matches in call to instance\
    \ method 'remove'\n        odd.remove(x)\n            ^\nSwift.Array:10:37: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable\
    \ public mutating func remove(at index: Int) -> Element\n                    \
    \                ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted\
    \ + odd.sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2,\
    \ 3]) == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpvxzvmsdv.swift:19:17: error: function produces expected type '[Int]';\
    \ did you mean to call it with '()'?\n    return even.sorted + odd.sorted\n  \
    \         ~~~~~^~~~~~\n                      ()\n/tmp/tmpvxzvmsdv.swift:19:30:\
    \ error: function produces expected type '[Int]'; did you mean to call it with\
    \ '()'?\n    return even.sorted + odd.sorted\n                         ~~~~^~~~~~\n\
    \                                   ()\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for v in l {\n        if v%2 == 0 {\n            even.append(v)\n\
    \        } else {\n            odd.append(v)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpx0ctsu17.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpx0ctsu17.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpx0ctsu17.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted().append(odd.sorted())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: SyntaxError
  stderr: "/tmp/tmpy89kl0ge.swift:19:26: error: no exact matches in call to instance\
    \ method 'append'\n    return even.sorted().append(odd.sorted())\n           \
    \              ^\n/tmp/tmpy89kl0ge.swift:19:26: note: found candidate with type\
    \ '(__owned [Int]) -> ()'\n    return even.sorted().append(odd.sorted())\n   \
    \                      ^\n/tmp/tmpy89kl0ge.swift:19:26: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return even.sorted().append(odd.sorted())\n\
    \           ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_even(l: [1, 2, 3]) == [1, 2, 3])\nassert(sort_even(l:\
    \ [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123])\nassert(sort_even(l: [5, 8, -12, 4, 23, 2, 3, 11, 12, -10]) == [-12,\
    \ 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmp3rrcoqga/tmp3rrcoqga.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4512df1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4512ae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4512ae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4512ae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3rrcoqga                        0x000055c42be8a714 <unavailable> + 5908

    5    libc.so.6                          0x00002b4512fdd460 __libc_start_main +
    245

    6    tmp3rrcoqga                        0x000055c42be8a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            even.append(i)\n\
    \        } else {\n            odd.append(i)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpx8xlyszx/tmpx8xlyszx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ad6bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8ad3b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8ad3b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8ad3b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8xlyszx                        0x000056393998a774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad8ad8a6460 __libc_start_main +
    245

    6    tmpx8xlyszx                        0x000056393998a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>>\
    \ sort_even([1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even([5, 6, 3, 4])\n/// [3,\
    \ 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    for x in l {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            odd.append(x)\n        }\n    }\n    return even.sorted()\
    \ + odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_even(l: [1, 2, 3])\
    \ == [1, 2, 3])\nassert(sort_even(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\
    \ == [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\nassert(sort_even(l: [5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10]) == [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])"
  status: Exception
  stderr: 'tmpgotgchb6/tmpgotgchb6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3bf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3bef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3bef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3bef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgotgchb6                        0x000055f330d6e774 <unavailable> + 6004

    5    libc.so.6                          0x00002ad3bf455460 __libc_start_main +
    245

    6    tmpgotgchb6                        0x000055f330d6e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824819
