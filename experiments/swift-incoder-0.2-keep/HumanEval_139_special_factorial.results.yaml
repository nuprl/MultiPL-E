language: swift
name: HumanEval_139_special_factorial
results:
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbpb0o8ll.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n - 1)\n           ^~~~~~~~~\n/tmp/tmpbpb0o8ll.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n\
    \ - 1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f3ua8y4.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbpb0o8ll.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n - 1)\n           ^~~~~~~~~\n/tmp/tmpbpb0o8ll.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n\
    \ - 1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f3ua8y4.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1...n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpj6iejeph/tmpj6iejeph.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dafc28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6daf91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6daf91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6daf91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6iejeph                        0x000055727f29a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b6dafe14460 __libc_start_main +
    245

    6    tmpj6iejeph                        0x000055727f299fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6xo0d50e.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp6xo0d50e.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbpb0o8ll.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n - 1)\n           ^~~~~~~~~\n/tmp/tmpbpb0o8ll.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n\
    \ - 1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n  \
    \      return 1\n    }\n    return n * special_factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpymh79abq.swift:17:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    var result = 1\n\
    \    for i := 1; i <= n; i++ {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgc7uxat8.swift:15:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpgc7uxat8.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpgc7uxat8.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    var factorial =\
    \ 1\n    for i := 1; i <= n; i++ {\n        factorial *= i\n    }\n    return\
    \ factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpont0psuo.swift:15:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpont0psuo.swift:15:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n\
    \           ^\n/tmp/tmpont0psuo.swift:15:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f3ua8y4.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6xo0d50e.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp6xo0d50e.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbpb0o8ll.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n - 1)\n           ^~~~~~~~~\n/tmp/tmpbpb0o8ll.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n\
    \ - 1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f3ua8y4.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6xo0d50e.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp6xo0d50e.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f3ua8y4.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6xo0d50e.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp6xo0d50e.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbpb0o8ll.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n - 1)\n           ^~~~~~~~~\n/tmp/tmpbpb0o8ll.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n\
    \ - 1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return -1\n    }\n    var factorial =\
    \ 1\n    for _ in 0..<n {\n        factorial *= n\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpp2gpyx01/tmpp2gpyx01.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69bdfa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69bdc9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69bdc9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69bdc997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2gpyx01                        0x0000564413f3b337 <unavailable> + 4919

    5    libc.so.6                          0x00002b69be18f460 __libc_start_main +
    245

    6    tmpp2gpyx01                        0x0000564413f3afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f3ua8y4.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n-1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6xo0d50e.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n-1)\n           ^~~~~~~~~\n/tmp/tmp6xo0d50e.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n-1)\n\
    \                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1...n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpj6iejeph/tmpj6iejeph.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dafc28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6daf91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6daf91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6daf91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6iejeph                        0x000055727f29a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b6dafe14460 __libc_start_main +
    245

    6    tmpj6iejeph                        0x000055727f299fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq_klacql.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 1...n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpj6iejeph/tmpj6iejeph.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dafc28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6daf91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6daf91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6daf91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj6iejeph                        0x000055727f29a337 <unavailable> + 4919

    5    libc.so.6                          0x00002b6dafe14460 __libc_start_main +
    245

    6    tmpj6iejeph                        0x000055727f299fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 1...n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp6qszrwzj/tmp6qszrwzj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78894d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78891cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78891ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78891c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6qszrwzj                        0x000055db06f3d337 <unavailable> + 4919

    5    libc.so.6                          0x00002b78896bf460 __libc_start_main +
    245

    6    tmp6qszrwzj                        0x000055db06f3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2f3ua8y4.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjfjod91z.swift:14:34: error: missing argument label 'n:' in call\n\
    \    return n * special_factorial(n - 1)\n                                 ^\n\
    \                                 n: \n"
  stdout: ''
  timestamp: 1659824651
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for _ in 0..<n {\n        result *= n\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpen5691ot/tmpen5691ot.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf1c039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf1bd30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf1bd30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf1bd2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpen5691ot                        0x000055ab3f0b1337 <unavailable> + 4919

    5    libc.so.6                          0x00002adf1c225460 __libc_start_main +
    245

    6    tmpen5691ot                        0x000055ab3f0b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for _ in 0..<n {\n        factorial\
    \ *= n\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_filomwy/tmp_filomwy.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af861ea6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af861b9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af861b9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af861b9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_filomwy                        0x000055b7d3b0e337 <unavailable> + 4919

    5    libc.so.6                          0x00002af862092460 __libc_start_main +
    245

    6    tmp_filomwy                        0x000055b7d3b0dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824707
