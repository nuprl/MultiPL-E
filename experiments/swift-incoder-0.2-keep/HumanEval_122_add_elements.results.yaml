language: swift
name: HumanEval_122_add_elements
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var last = 0\n    for element in arr {\n        if last <\
    \ k {\n            sum += element\n            last++\n        } else {\n    \
    \        sum += element - arr[last]\n            last = 0\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1m943jhq.swift:16:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            last++\n                ^~\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var index = 0\n    while index < k {\n        if arr[index]\
    \ > 9 {\n            sum += arr[index] - 10\n        } else {\n            sum\
    \ += arr[index]\n        }\n        index += 1\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgowok_72/tmpgowok_72.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe294c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe291bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe291bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe291bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgowok_72                        0x00005604d37cf47d <unavailable> + 5245

    5    libc.so.6                          0x00002afe296b1460 __libc_start_main +
    245

    6    tmpgowok_72                        0x00005604d37cefc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var last = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n\
    \        if idx < k-1 {\n            sum += arr[last]\n        }\n        last\
    \ = idx\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp38tf72kl/tmp38tf72kl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b685b218c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b685af0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b685af0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685af0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38tf72kl                        0x000055ceea2c451b <unavailable> + 5403

    5    libc.so.6                          0x00002b685b404460 __libc_start_main +
    245

    6    tmp38tf72kl                        0x000055ceea2c4149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    for element in arr {\n        sum += element\n\
    \        if sum > 9 {\n            sum += element - 10\n        }\n        if\
    \ i >= k {\n            break\n        }\n        i += 1\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpiy5s5z7m/tmpiy5s5z7m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb51e61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb51b58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb51b58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb51b577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiy5s5z7m                        0x000055e67b6bf4ab <unavailable> + 5291

    5    libc.so.6                          0x00002aeb5204d460 __libc_start_main +
    245

    6    tmpiy5s5z7m                        0x000055e67b6bf0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for _ in 0..<k {\n        sum += arr[0]\n        arr.remove(at:\
    \ 0)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgybh5k_u.swift:14:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.remove(at: 0)\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3f2533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3f222a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3f222a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3f222a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3f2229bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3f2029e83 <unavailable> + 188035

    6    tmpn27od_gb                        0x000055d3e6fae984 <unavailable> + 6532

    7    tmpn27od_gb                        0x000055d3e6fae31d <unavailable> + 4893

    8    libc.so.6                          0x00002ae3f271f460 __libc_start_main +
    245

    9    tmpn27od_gb                        0x000055d3e6fadfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for _ in 0..<k {\n        sum += arr[0]\n        arr.remove(at:\
    \ 0)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgybh5k_u.swift:14:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.remove(at: 0)\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[k] + arr[k + 1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afdc4290c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdc3f87561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afdc3f87286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afdc3f8713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afdc3f86bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afdc3d86e83 <unavailable> + 188035

    6    tmptr3hf1k2                        0x000055d4251c8984 <unavailable> + 6532

    7    tmptr3hf1k2                        0x000055d4251c831d <unavailable> + 4893

    8    libc.so.6                          0x00002afdc447c460 __libc_start_main +
    245

    9    tmptr3hf1k2                        0x000055d4251c7fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var sum2 = 0\n    for index in 0..<k {\n        sum += arr[index]\n\
    \        sum2 += arr[index] * arr[index]\n    }\n    return sum + sum2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp74syq8bw/tmp74syq8bw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b183dd2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b183da21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b183da21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b183da207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74syq8bw                        0x000055c33c59851b <unavailable> + 5403

    5    libc.so.6                          0x00002b183df16460 __libc_start_main +
    245

    6    tmp74syq8bw                        0x000055c33c598149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var sum2 = 0\n    var sum3 = 0\n    var sum4 = 0\n    var\
    \ sum5 = 0\n    var sum6 = 0\n    var sum7 = 0\n    var sum8 = 0\n    var sum9\
    \ = 0\n    var sum10 = 0\n    var sum11 = 0\n    var sum12 = 0\n    var sum13\
    \ = 0\n    var sum14 = 0\n    var sum15 = 0\n    var sum16 = 0\n    var sum17\
    \ = 0\n    var sum18 = 0\n    var sum19 = 0\n    var sum20 = 0\n    var sum21\
    \ = 0\n    var sum22 = 0\n    var sum23 = 0\n    var sum24 = 0\n    var sum25\
    \ = 0\n    var sum26 = 0\n    var sum27 = 0\n    var sum28 = 0\n    var sum29\
    \ = 0\n    var sum30 = 0\n    var sum31 = 0\n    var sum32 = 0\n    var sum33\
    \ = 0\n    var sum34 = 0\n    var sum35 = 0\n    var sum36 = 0\n    var sum37\
    \ = 0\n    var sum38 = 0\n    var sum39 = 0\n    var sum40 = 0\n    var sum41\
    \ = 0\n    var sum42 = 0\n    var sum43 = 0\n    var sum44 = 0\n    var sum45\
    \ = 0\n    var sum46 = 0\n    var sum47 = 0\n    var sum48 = 0\n    var sum49\
    \ = 0\n    var sum50 = 0\n    var sum51 = 0\n    var sum52 = 0\n    var sum53\
    \ = 0\n    var sum54 = 0\n    var sum55 = 0\n    var sum56 = 0\n    var sum57\
    \ = 0\n    var sum58 = 0\n    var sum59 = 0\n    var sum60 = 0\n    var sum61\
    \ = 0\n    var sum62 = 0\n    var sum63 = 0\n    var sum64 = 0\n    var sum65\
    \ = 0\n    var sum66 = 0\n    var sum67 = 0\n    var sum68 = 0\n    var sum69\
    \ = 0\n    var sum70 = 0\n    var sum71 = 0\n    var sum72 = 0\n    var sum73\
    \ = 0\n    var sum74 = 0\n    var sum75 = 0\n    var sum76 = 0\n    var sum77\
    \ = 0\n    var sum78 = 0\n    var sum79 = 0\n    var sum80 = 0\n    var sum81\
    \ = 0\n    var sum82 = 0\n    var sum83 = 0\n    var sum84 = 0\n    var sum85\
    \ = 0\n    var sum86 = 0\n    var sum87 = 0\n    var sum88 = 0\n    var sum89\
    \ = 0\n    var sum90 = 0\n    var sum91 = 0\n    var sum92 = 0\n    var sum93\
    \ = 0\n    var sum94 = 0\n    var sum95 = 0\n    var sum96 = 0\n    var sum97\
    \ = 0\n    var sum98 = 0\n    var sum99 = 0\n    var sum100 = 0\n    var sum101\
    \ = 0\n    var sum102 = 0\n    var sum103\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpry2xmnoh.swift:113:9: error: type annotation missing in pattern\n\
    \    var sum103\n        ^\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var firstTwoDigits = arr[k - 2]\n    for element in arr[k..]\
    \ {\n        sum += element\n        if sum > firstTwoDigits {\n            sum\
    \ += firstTwoDigits\n        }\n        firstTwoDigits = element\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoeb36tr0.swift:13:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = k\n    while i < arr.count {\n        sum += arr[i]\n\
    \        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxtfbdn3w/tmpxtfbdn3w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10928cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10925c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10925c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10925c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxtfbdn3w                        0x000056001863c3eb <unavailable> + 5099

    5    libc.so.6                          0x00002b1092ab6460 __libc_start_main +
    245

    6    tmpxtfbdn3w                        0x000056001863c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    for element in arr {\n        if i >= k {\n\
    \            break\n        }\n        sum += element\n        i += 1\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0rdvv639/tmp0rdvv639.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c3fdf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c3fae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c3fae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c3fae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rdvv639                        0x000056479933d58d <unavailable> + 5517

    5    libc.so.6                          0x00002b8c3ffdd460 __libc_start_main +
    245

    6    tmp0rdvv639                        0x000056479933d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  return arr[k] + arr[k + 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvgvzg_jk/tmpvgvzg_jk.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae56fccac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae56f9c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae56f9c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae56f9c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgvzg_jk                        0x0000556632d6239b <unavailable> + 5019

    5    libc.so.6                          0x00002ae56feb6460 __libc_start_main +
    245

    6    tmpvgvzg_jk                        0x0000556632d61fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for _ in 0..<k {\n        sum += arr[0]\n        arr.removeFirst()\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpswxcocym.swift:14:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.removeFirst()\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for _ in 0..<k {\n        sum += arr[0]\n        arr.remove(at:\
    \ 0)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgybh5k_u.swift:14:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.remove(at: 0)\n        ~~~ ^\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprwazn_5t.swift:12:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprwazn_5t.swift:12:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    while i < k {\n        sum += arr[i]\n    \
    \    i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmprskpbkcg/tmprskpbkcg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6540907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65405feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65405fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65405fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprskpbkcg                        0x0000562c6f5fc47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6540af3460 __libc_start_main +
    245

    6    tmprskpbkcg                        0x0000562c6f5fbfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    for element in arr {\n        if i >= k {\n\
    \            break\n        }\n        sum += element\n        i += 1\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0rdvv639/tmp0rdvv639.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c3fdf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c3fae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c3fae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c3fae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rdvv639                        0x000056479933d58d <unavailable> + 5517

    5    libc.so.6                          0x00002b8c3ffdd460 __libc_start_main +
    245

    6    tmp0rdvv639                        0x000056479933d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var i = 0\n    for element in arr {\n        if i >= k {\n\
    \            break\n        }\n        sum += element\n        i += 1\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0rdvv639/tmp0rdvv639.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c3fdf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c3fae8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c3fae8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c3fae77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rdvv639                        0x000056479933d58d <unavailable> + 5517

    5    libc.so.6                          0x00002b8c3ffdd460 __libc_start_main +
    245

    6    tmp0rdvv639                        0x000056479933d0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..] {\n        sum += element\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprwazn_5t.swift:12:25: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for element in arr[k..] {\n                       \
    \ ^~\n                        ...\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for element in arr[k..<arr.count] {\n        sum += element\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgce_o22r/tmpgce_o22r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab722ee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab722bdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab722bdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab722bde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgce_o22r                        0x000055e50f3dd64b <unavailable> + 5707

    5    libc.so.6                          0x00002ab7230d4460 __libc_start_main +
    245

    6    tmpgce_o22r                        0x000055e50f3dd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var last = 0\n    for element in arr {\n        if last <\
    \ k {\n            sum += element\n            last++\n        } else {\n    \
    \        sum += element - arr[last]\n            last = 0\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1m943jhq.swift:16:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            last++\n                ^~\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var max = 0\n    for element in arr {\n        if max < element\
    \ {\n            max = element\n        }\n    }\n    for element in arr {\n \
    \       if max < element {\n            sum += element\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmplb1qehuo/tmplb1qehuo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa20cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa1dc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa1dc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa1dc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplb1qehuo                        0x00005624b52824ab <unavailable> + 5291

    5    libc.so.6                          0x00002adaa22ba460 __libc_start_main +
    245

    6    tmplb1qehuo                        0x00005624b52820d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\
    \ + arr[8] + arr[9] + arr[k] + arr[k+1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3f2533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3f222a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae3f222a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae3f222a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae3f2229bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae3f2029e83 <unavailable> + 188035

    6    tmpn27od_gb                        0x000055d3e6fae984 <unavailable> + 6532

    7    tmpn27od_gb                        0x000055d3e6fae31d <unavailable> + 4893

    8    libc.so.6                          0x00002ae3f271f460 __libc_start_main +
    245

    9    tmpn27od_gb                        0x000055d3e6fadfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    var firstTwoDigits = 0\n    for element in arr {\n       \
    \ sum += element\n        if sum > 100 {\n            sum -= 100\n           \
    \ firstTwoDigits += 100\n        }\n        if sum > 100 {\n            sum -=\
    \ 100\n            firstTwoDigits += 100\n        }\n        if sum > 100 {\n\
    \            sum -= 100\n            firstTwoDigits += 100\n        }\n      \
    \  if sum > 100 {\n            sum -= 100\n            firstTwoDigits += 100\n\
    \        }\n        if sum > 100 {\n            sum -= 100\n            firstTwoDigits\
    \ += 100\n        }\n        if sum > 100 {\n            sum -= 100\n        \
    \    firstTwoDigits += 100\n        }\n        if sum > 100 {\n            sum\
    \ -= 100\n            firstTwoDigits += 100\n        }\n        if sum > 100 {\n\
    \            sum -= 100\n            firstTwoDigits += 100\n        }\n      \
    \  if sum > 100 {\n            sum -= 100\n            firstTwoDigits += 100\n\
    \        }\n        if sum > 100 {\n            sum -= 100\n            firstTwoDigits\
    \ += 100\n        }\n        if sum > 100 {\n            sum -= 100\n        \
    \    firstTwoDigits += 100\n        }\n        if sum > 100 {\n            sum\
    \ -= 100\n            firstTwoDigits += 100\n        }\n        if sum > 100 {\n\
    \            sum -= 100\n            firstTwoDigits += 100\n        }\n      \
    \  if sum > 100 {\n            sum -= 100\n            firstTwoDigits += 100\n\
    \        }\n        if sum > 100 {\n            sum -= 100\n            firstTwoDigits\
    \ += 100\n        }\n        if sum > 100 {\n            sum -= 100\n        \
    \    firstTwoDigits += 100\n        }\n        if sum > 100 {\n            sum\
    \ -= 100\n            firstTwoDigits += 100\n        }\n        if sum > 100 {\n\
    \            sum -= 100\n            firstTwoDigits += 100\n        }\n      \
    \  if sum > 100 {\n            sum -= 100\n            firstTwoDigits += 100\n\
    \        }\n        if sum > 100 {\n            sum -= 100\n            firstTwoDigits\
    \ += 100\n        }\n        if sum > 100 {\n            sum -= 100\n        \
    \    firstTwoDigits += 100\n        }\n        if sum > 100 {\n            sum\
    \ -= 100\n            firstTwoDigits += 100\n        }\n        if sum > 100 {\n\
    \            sum -= 100\n            firstTwoDigits += 100\n        }\n      \
    \  if sum > 100 {\n            sum -= 100\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphqeu8paf.swift:128:42: error: expected '}' at end of brace statement\n\
    assert(add_elements(arr: [1], k: 1) == 1)\n                                  \
    \       ^\n/tmp/tmphqeu8paf.swift:13:24: note: to match this opening '{'\n   \
    \ for element in arr {\n                       ^\n/tmp/tmphqeu8paf.swift:128:42:\
    \ error: expected '}' at end of brace statement\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)\n                                         ^\n/tmp/tmphqeu8paf.swift:10:46:\
    \ note: to match this opening '{'\nfunc add_elements(arr: [Int], k: Int) -> Int\
    \ {\n                                             ^\n/tmp/tmphqeu8paf.swift:112:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for idx in 0..<k {\n        sum += arr[idx]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpai2tcjjq/tmpai2tcjjq.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b080d04bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b080cd42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b080cd42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b080cd417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai2tcjjq                        0x00005569ca7915fd <unavailable> + 5629

    5    libc.so.6                          0x00002b080d237460 __libc_start_main +
    245

    6    tmpai2tcjjq                        0x00005569ca791149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for i in 0..<k {\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpozbqz7w0/tmpozbqz7w0.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2bcf32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2bcc29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2bcc29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2bcc287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozbqz7w0                        0x00005613365d85fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab2bd11e460 __libc_start_main +
    245

    6    tmpozbqz7w0                        0x00005613365d8149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n///\
    \ Output: 24 # sum of 21 + 3\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n\
    /// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  \
    \  var sum = 0\n    for index in 0..<k {\n        sum += arr[index]\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvfahm5ml/tmpvfahm5ml.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a3e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a3b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a3b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a3b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfahm5ml                        0x000055933f7db5fd <unavailable> + 5629

    5    libc.so.6                          0x00002ba2a404a460 __libc_start_main +
    245

    6    tmpvfahm5ml                        0x000055933f7db149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824688
